# adding artifact caching: https://github.com/Microsoft/azure-pipelines-artifact-caching-tasks/blob/master/README.md
variables:
    SOLC_VERSION: v0.4.24
    SOLC_MD5: dc791cd7db87b7df5e47975d222dc5fe
    DOCKER_CI_BUILD_TAG: monorepo.$(Build.BuildID)
    CORE_IMAGE_BUILD: augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
    CORE_IMAGE_LATEST: augurproject/augur-core:monorepo

trigger:
  batch: false
  branches:
    include:
    - master
    - azure/*

jobs:
  - job: Augur_build_docker_image
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages

      - script: |
          yarn install
        displayName: Install Dependencies

      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages

      - bash: |
          set -euo pipefail
          yarn build
          yarn docker:build:augur
          docker images
          docker tag augurproject/augur-build:latest augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker push augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
        displayName: augur-build
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

# - job: Build_Core_Docker
#   dependsOn: Augur_build_docker_image
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.x'
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '10.x'
#     - bash: |
#         set -euo pipefail
#         # checked what files changed in merge to master
#         for f in $(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion));
#           do
#             echo "$f"
#             if [[ $f =~ .*augur-core/source.* ]] || [[ $f =~ .*augur-core/package.json ]]
#             then
#               echo "##vso[task.setVariable variable=JOB_TRIGGER]true";
#             fi
#           done
#         echo "Build SourceBranch: $(Build.SourceBranch)"
#         for f in $(git whatchanged --name-only --pretty="" origin/master..HEAD);
#           do
#             echo "$f"
#             if [[ $f =~ .*augur-core/source.* ]] || [[ $f =~ .*augur-core/package.json ]]
#             then
#               echo "##vso[task.setVariable variable=JOB_TRIGGER]true";
#             fi
#           done
#       displayName: check git for augur-core changes
#     - task: Docker@1
#       displayName: docker login
#       inputs:
#         command: login
#         containerRegistryType: Container Registry
#         dockerRegistryEndpoint: dockerhub-augurproject
#     - script: |
#         docker pull $CORE_IMAGE_LATEST;
#       displayName: augur-core pull
#     - script: |
#         set -euo pipefail
#         docker images
#         docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
#         docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
#         yarn workspace @augurproject/core docker:build:python2-and-3
#         docker tag augurproject/python2-and-3:monorepo augurproject/python2-and-3:$(DOCKER_CI_BUILD_TAG)
#         docker images
#         yarn workspace @augurproject/core docker:build;
#         docker push augurproject/python2-and-3:$(DOCKER_CI_BUILD_TAG)
#       displayName: augur-core docker image
#       condition: |
#         and
#         (
#             succeeded(),
#             eq(variables.JOB_TRIGGER, 'true')
#         )
#     - script: |
#         contract_sha=$(cd packages/augur-tools/ && node scripts/get-contract-hashes.js)
#         docker tag $CORE_IMAGE_LATEST $CORE_IMAGE_BUILD;
#         docker tag $CORE_IMAGE_LATEST augurproject/augur-core:$contract_sha;
#         docker push $CORE_IMAGE_BUILD
#         docker push augurproject/augur-core:$contract_sha
#       displayName: augur-core push
#     - task: Docker@1
#       displayName: docker logout
#       inputs:
#         command: logout
#         containerRegistryType: Container Registry
#         dockerRegistryEndpoint: dockerhub-augurproject

# - job: Test_Augur_Core
#   dependsOn: Build_Core_Docker
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   strategy:
#     maxParallel: 10
#     matrix:
#       trading_and_libs:
#         TESTS: tests/test*.py tests/libraries tests/trading
#       reporting:
#         TESTS: tests/reporting
#       fuzzy:
#         TESTS: tests/fuzzy
#       unit:
#         TESTS: tests/unit
#       trading_and_libs_subfork:
#         TESTS: tests/test*.py tests/libraries tests/trading --subFork
#       reporting_subfork:
#         TESTS: tests/reporting --subFork
#       fuzzy_subfork:
#         TESTS: tests/fuzzy --subFork
#       unit_subfork:
#         TESTS: tests/unit --subFork
#       geth_integration:
#         TESTS: integration:geth
#       parity_integration:
#         TESTS: integration:parity
#       security_mithril:
#         TESTS: security:mythril
#        security_main:
#          TESTS: security:maian

#   steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.x'
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '10.x'
#     - bash: |
#         set -euo pipefail
#         for f in $(git whatchanged --name-only --pretty="" origin/master..HEAD);
#           do
#             echo "$f"
#             if [[ $f =~ .*augur-core.* ]]
#             then
#               echo "##vso[task.setVariable variable=JOB_TRIGGER]true";
#             fi
#           done
#       displayName: check git for augur-core changes
#     - script: |
#         set -euo pipefail
#         which node
#         node --version
#         docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
#         docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
#         docker pull augurproject/python2-and-3:$(DOCKER_CI_BUILD_TAG)
#         docker tag augurproject/python2-and-3:$(DOCKER_CI_BUILD_TAG) augurproject/python2-and-3:monorepo
#         docker pull $CORE_IMAGE_BUILD
#         docker tag $CORE_IMAGE_BUILD $CORE_IMAGE_LATEST
#         docker images
#         if [[ "$TESTS" == "integration:geth" ]]; then
#           yarn workspace @augurproject/core docker:run:test:integration:geth;
#         elif [[ "$TESTS" == "integration:parity" ]]; then
#           yarn workspace @augurproject/core docker:run:test:integration:parity;
#         elif [[ "$TESTS" == "security:mythril" ]]; then
#           yarn workspace @augurproject/core docker:run:test:security:mythril;
#           cat $(find . -name test-results.log)
#         elif [[ "$TESTS" == "security:maian" ]]; then
#           yarn workspace @augurproject/core docker:run:test:security:maian;
#         elif [[ "$TESTS" == "security:smt" ]]; then
#           yarn workspace @augurproject/core docker:run:test:security:smt;
#         elif [[ "$TESTS" == "security:oyente" ]]; then
#           yarn workspace @augurproject/core docker:run:test:security:oyente;
#         else
#           yarn workspace @augurproject/core docker:run:test:unit -- $TESTS;
#         fi
#       displayName: integration tests
#       condition: eq(variables.JOB_TRIGGER, 'true')

# # - job: Test_Augur_UI_and_Node
# #   displayName: 'Test augur UI and augur-node'
# #   pool:
# #     vmImage: 'Ubuntu 16.04'
# #   strategy:
# #     matrix:
# #       node_8_x:
# #         node_version: 8.x
# #       node_9_x:
# #         node_version: 9.x
# #       node_10_x:
# #         node_version: 10.x
# #   steps:
# #     - task: NodeTool@0
# #       inputs:
# #         versionSpec: $(node_version)
# #     - script: |
# #         set -euo pipefail
# #         which node
# #         node --version
# #         yarn workspace @augurproject/node add sqlite3 --force --build-from-source
# #         yarn install --ignore-scripts --frozen-lockfile
# #       displayName: 'Install Dependencies'
# #     - script: |
# #         yarn test --forceExit --detectOpenHandles
# #       displayName: 'Run Tests'
# #     - task: PublishTestResults@2
# #       inputs:
# #         testResultsFormat: 'JUnit'
# #         testResultsFiles: 'junit.xml'

# - job: Test_Augur_js
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   strategy:
#     matrix:
#       node_10_x:
#         node_version: 10.x
#   steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: $(node_version)
#     - bash: |
#         set -euo pipefail
#         for f in $(git whatchanged --name-only --pretty="" origin/master..HEAD);
#           do
#             echo "$f"
#             if [[ $f =~ .*augur\.js.* ]]
#             then
#               echo "##vso[task.setVariable variable=JOB_TRIGGER]true";
#             fi
#           done
#       displayName: check git for augur.js changes
#     - script: |
#         set -euo pipefail
#         which node
#         node --version
#         yarn install --ignore-scripts --frozen-lockfile
#         npx lerna run test --stream --scope augur.js
#       displayName: 'test augur.js'
#       condition: eq(variables.AUGUR, 'true')

# - job: Docker_populated_geth_images
#   dependsOn:
#   - Augur_build_docker_image
#   - Build_Core_Docker
#   - Test_Augur_Core
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   steps:
#   - bash: |
#       set -euo pipefail
#       # checked what files changed in merge to master
#       for f in $(git show --name-only --oneline $(Build.SourceVersion));
#         do
#           echo "$f"
#           if [[ $f =~ .*augur-core.* ]] || [[ $f =~ .*augur-tools.*Dockerfile ]]
#           then
#             echo "##vso[task.setVariable variable=JOB_TRIGGER]true";
#           fi
#         done

#       # checked what files changed in PR
#       for f in $(git whatchanged --name-only --pretty="" origin/master..HEAD);
#         do
#           echo "$f"
#           if [[ $f =~ .*augur-core.* ]] || [[ $f =~ .*augur-tools.*Dockerfile ]]
#           then
#             echo "##vso[task.setVariable variable=JOB_TRIGGER]true";
#           fi
#         done
#     displayName: check git for augur-core changes
#   - task: Docker@1
#     displayName: docker login
#     inputs:
#       command: login
#       containerRegistryType: Container Registry
#       dockerRegistryEndpoint: dockerhub-augurproject
#   - script: |
#       set -exuo pipefail
#       sudo modprobe -r overlay && sudo modprobe overlay redirect_dir=off && sudo systemctl restart docker
#       sudo systemctl status docker
#       docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
#       docker pull augurproject/python2-and-3:$(DOCKER_CI_BUILD_TAG)
#       docker pull augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
#       docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
#       docker tag augurproject/python2-and-3:$(DOCKER_CI_BUILD_TAG) augurproject/python2-and-3:monorepo
#       docker tag augurproject/augur-core:$(DOCKER_CI_BUILD_TAG) augurproject/augur-core:monorepo
#       docker images
#       yarn
#       yarn workspace @augurproject/tools docker:build

#       if [[ "$(Build.SourceBranchName)" == "master" ]]; then
#           docker push augurproject/python2-and-3:monorepo
#           docker push augurproject/augur-core:monorepo
#       fi
#       yarn workspace @augurproject/tools docker:push
#     condition: |
#       and
#       (
#           succeeded(),
#           eq(variables.JOB_TRIGGER, 'true')
#       )
#     displayName: 'build and push core images'
#   - task: Docker@1
#     displayName: docker logout
#     inputs:
#       command: logout
#       containerRegistryType: Container Registry
#       dockerRegistryEndpoint: dockerhub-augurproject

# - job: publish_docker_images
#   dependsOn:
#   - Augur_build_docker_image
#   - Build_Core_Docker
#   - Test_Augur_Core
#   pool:
#     vmImage: 'Ubuntu 16.04'
#   steps:
#     - task: Docker@1
#       displayName: docker login
#       inputs:
#         command: login
#         containerRegistryType: Container Registry
#         dockerRegistryEndpoint: dockerhub-augurproject
#     - script: |
#         set -euo pipefail
#         docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
#         docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
#         docker images
#         docker push augurproject/augur-build:latest
#       condition: |
#         and
#         (
#             succeeded(),
#             eq(variables['Build.SourceBranch'], 'refs/heads/master')
#         )
#       displayName: 'publish docker images on merge to master'
#     - task: Docker@1
#       displayName: docker logout
#       inputs:
#         command: logout
#         containerRegistryType: Container Registry
#         dockerRegistryEndpoint: dockerhub-augurproject
