# adding artifact caching: https://github.com/Microsoft/azure-pipelines-artifact-caching-tasks/blob/master/README.md
variables:
    SOLC_VERSION: v0.4.24
    SOLC_MD5: dc791cd7db87b7df5e47975d222dc5fe
    DOCKER_CI_BUILD_TAG: monorepo.$(Build.BuildID)
    CORE_IMAGE_BUILD: augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
    CORE_IMAGE_LATEST: augurproject/augur-core:monorepo

trigger:
  batch: false
  branches:
    include:
    - master
    - azure/*

jobs:
  - job: PreFlightCheck
    displayName: 'Pre-Flight Check'
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - bash: |
          set -euo pipefail
          echo "Build Source Branch: $(Build.SourceBranchName)"
          if [[ "$(Build.SourceBranchName)" == "master" ]]; then
            GIT_COMMAND='git log -m -1 --name-only --pretty="format:" $(Build.SourceVersion)'
          else
            GIT_COMMAND='git diff --name-only origin/master..HEAD'
          fi
          echo "running git command: $GIT_COMMAND"
          for f in $(eval "$GIT_COMMAND");
            do
              echo "$f"
              if [[ $f =~ .*augur-core/.* ]]
              then
                echo "found a core change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_CORE;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-ui.* ]]
              then
                echo "found a ui change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_UI;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-sdk.* ]]
              then
                echo "found a sdk change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_SDK;isOutput=true]true"
              fi
            done
        displayName: check git for changes
        name: setVars

  - job: TestAndLint
    dependsOn:
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        ne(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    variables:
      JOB_TRIGGER_UI: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_UI']]
      JOB_TRIGGER_SDK: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_SDK']]
      JOB_TRIGGER_CORE: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE']]
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        node_10_x:
          node_version: 10.15.x
    steps:
      - checkout: self
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -euo pipefail
          yarn build
        displayName: yarn build
      - bash: |
          set -euo pipefail
          yarn test --ci --reporters=default --reporters=jest-junit
        displayName: yarn test
      - bash: |
          set -euo pipefail
          yarn workspace @augurproject/sdk test
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/junit.xml'

  - job: Augur_build_docker_image
    dependsOn:
    - TestAndLint
    - PreFlightCheck
    condition: |
      or
      (
        and( succeeded(), eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true')),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: NodeTool@0
        inputs:
          versionSpec: '10.15.x'
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -euo pipefail
          yarn build
        displayName: yarn build typescript
      - bash: |
          set -euo pipefail
          yarn docker:build:augur
          docker images
          docker tag augurproject/augur-build:latest augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker push augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
        displayName: docker build
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: Build_Core_Docker
    dependsOn:
    - TestAndLint
    - Augur_build_docker_image
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: NodeTool@0
        inputs:
          versionSpec: '10.15.x'
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          docker pull $CORE_IMAGE_LATEST;
        displayName: augur-core pull
      - script: |
          set -euo pipefail
          docker images
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          docker images
          yarn workspace @augurproject/core docker:build;
        displayName: augur-core docker image
      - script: |
          contract_sha=$(cd packages/augur-tools/ && node scripts/get-contract-hashes.js)
          docker tag $CORE_IMAGE_LATEST $CORE_IMAGE_BUILD;
          docker tag $CORE_IMAGE_LATEST augurproject/augur-core:$contract_sha;
          docker push $CORE_IMAGE_BUILD
          docker push augurproject/augur-core:$contract_sha
        displayName: augur-core push
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: Test_Augur_Core
    dependsOn:
    - TestAndLint
    - Build_Core_Docker
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true'),
        ne(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    timeoutInMinutes: 120
    strategy:
      maxParallel: 5
      matrix:
        trading_and_libs:
          TESTS: tests/test*.py tests/libraries tests/trading
        reporting:
          TESTS: tests/reporting
        fuzzy:
          TESTS: tests/fuzzy
        unit:
          TESTS: tests/unit
#       trading_and_libs_subfork:
#         TESTS: tests/test*.py tests/libraries tests/trading --subFork
#       reporting_subfork:
#         TESTS: tests/reporting --subFork
#       fuzzy_subfork:
#         TESTS: tests/fuzzy --subFork
#       unit_subfork:
#         TESTS: tests/unit --subFork
        geth_integration:
          TESTS: integration:geth
        parity_integration:
          TESTS: integration:parity
        security_mithril:
          TESTS: security:mythril
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: NodeTool@0
        inputs:
          versionSpec: '10.15'
      - bash: |
          set -euo pipefail
          which node
          node --version
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          docker pull $CORE_IMAGE_BUILD
          docker tag $CORE_IMAGE_BUILD $CORE_IMAGE_LATEST
          docker images
          echo "tests: $(TESTS)"
          if [[ "$(TESTS)" == "integration:geth" ]]; then
            yarn workspace @augurproject/core docker:run:test:integration:geth;
          elif [[ "$(TESTS)" == "integration:parity" ]]; then
            yarn workspace @augurproject/core docker:run:test:integration:parity;
          elif [[ "$(TESTS)" == "security:mythril" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:mythril;
            cat $(find . -name test-results.log)
          elif [[ "$(TESTS)" == "security:maian" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:maian;
          elif [[ "$(TESTS)" == "security:smt" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:smt;
          elif [[ "$(TESTS)" == "security:oyente" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:oyente;
          else
            (cd packages/augur-core &&  yarn docker:run:test:unit -- $(TESTS))
          fi
        displayName: integration tests

  - job: Docker_populated_geth_images
    dependsOn:
    - Test_Augur_Core
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    timeoutInMinutes: 120
    steps:
      - checkout: self
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          set -exuo pipefail
          sudo modprobe -r overlay && sudo modprobe overlay redirect_dir=off && sudo systemctl restart docker
          sudo systemctl status docker
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker pull augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          docker tag augurproject/augur-core:$(DOCKER_CI_BUILD_TAG) augurproject/augur-core:monorepo
          docker images
          yarn
          yarn workspace @augurproject/tools docker:build
          if [[ "$(Build.SourceBranchName)" == "master" ]]; then
              docker push augurproject/augur-core:monorepo
          fi
          yarn workspace @augurproject/tools docker:push
        displayName: 'build and push core images'
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: publish_docker_images
    dependsOn:
    - Augur_build_docker_image
    - Build_Core_Docker
    - Test_Augur_Core
    condition: |
      and
      (
          succeeded(),
          eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          set -euo pipefail
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          docker images
          docker push augurproject/augur-build:latest
        displayName: 'publish docker images on merge to master'
      - bash: |
          set -euo pipefail
          yarn workspace @augurproject/ui build
        displayName: yarn build ui
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
