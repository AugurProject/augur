variables:
    SOLC_VERSION: v0.4.24
    SOLC_MD5: dc791cd7db87b7df5e47975d222dc5fe
    CORE_IMAGE_BUILD: augurproject/augur-core:monorepobuild.$(Build.BuildID)
    CORE_IMAGE_LATEST: augurproject/augur-core:latest


trigger:
  batch: false
  branches:
    include:
    - master
    - azure-pipelines
    - monorepo-integration
    - petong/monorepo-conditonal

jobs:
  - job: Build_Core_Docker
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6.5'
      - task: NodeTool@0
        inputs:
          versionSpec: '9.x'
      - bash: |
          set -euxo pipefail
          echo "git SHA - $(Build.SourceVersion)"
          echo "git branch - $(Build.SourceBranch)"
          echo "git target branch - $(System.PullRequest.TargetBranch)"
          echo 'git describe'
          git describe --all
          echo 'refs'
          find .git/refs
          git checkout -b ci-diff
          #for f in $(git --no-pager diff --name-only FETCH_HEAD...$(System.PullRequest.TargetBranch));
          for f in $(git diff --name-only ...origin/master);
            do
              echo "$f"
              if [[ $f =~ .*augur-core.* ]]
              then
                echo "##vso[task.setVariable variable=AUGUR_CORE]true";
              fi
            done
            git checkout -
      - script: |
          set -euxo pipefail
          which node
          node --version
          echo "$(DOCKER_PASSWORD)" | docker login -u "$(DOCKER_USERNAME)" --password-stdin
          docker pull $CORE_IMAGE_LATEST;
          yarn workspace augur-core docker:build;
          docker tag $CORE_IMAGE_LATEST $CORE_IMAGE_BUILD;
          docker push $CORE_IMAGE_BUILD
        condition: eq(variables.AUGUR_CORE, 'true')

  - job: Test_Augur_Core
    dependsOn: Build_Core_Docker
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      maxParallel: 10
      matrix:
        trading_and_libs:
          TESTS: tests/test*.py tests/libraries tests/trading
        reporting:
          TESTS: tests/reporting
        fuzzy:
          TESTS: tests/fuzzy
        unit:
          TESTS: tests/unit
        trading_and_libs_subfork:
          TESTS: tests/test*.py tests/libraries tests/trading --subFork
        reporting_subfork:
          TESTS: tests/reporting --subFork
        fuzzy_subfork:
          TESTS: tests/fuzzy --subFork
        unit_subfork:
          TESTS: tests/unit --subFork
        geth_integration:
          TESTS: integration:geth
        parity_integration:
          TESTS: integration:parity
        security_mithril:
          TESTS: security:mythril
        security_main:
          TESTS: security:maian

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6.5'
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
      - bash: |
          set -euxo pipefail
          echo "git SHA - $(Build.SourceVersion)"
          for f in $(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion));
            do
              echo $f | grep -q augur-core && echo "##vso[task.setVariable variable=AUGUR_CORE]true";
            done
      - script: |
          set -euxo pipefail
          which node
          node --version
          if [[ "$TESTS" == "integration:geth" ]]; then
            yarn workspace augur-core docker:run:test:integration:geth;
          elif [[ "$TESTS" == "integration:parity" ]]; then
            yarn workspace augur-core docker:run:test:integration:parity;
          elif [[ "$TESTS" == "security:mythril" ]]; then
            yarn workspace augur-core docker:run:test:security:mythril;
            cat $(find . -name test-results.log)
          elif [[ "$TESTS" == "security:maian" ]]; then
            yarn workspace augur-core docker:run:test:security:maian;
          elif [[ "$TESTS" == "security:smt" ]]; then
            yarn workspace augur-core docker:run:test:security:smt;
          elif [[ "$TESTS" == "security:oyente" ]]; then
            yarn workspace augur-core docker:run:test:security:oyente;
          else
            yarn workspace augur-core docker:run:test:unit -- $TESTS;
          fi
        condition: eq(variables.AUGUR_CORE, 'true')

  - job: Test_Augur_UI_and_Node
    displayName: 'Test augur UI and augur-node'
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        node_8_x:
          node_version: 8.x
        node_9_x:
          node_version: 9.x
        node_10_x:
          node_version: 10.x
    steps:
      - script: |
          set -euxo pipefail
          which node
          node --version
          yarn workspace augur-node add sqlite3 --force --build-from-source
          yarn install --ignore-scripts --frozen-lockfile
        displayName: 'Install Dependencies'
      - script: |
          yarn test --forceExit
        displayName: 'Run Tests'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'junit.xml'
  - job: Test_Augur_js
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        node_8_x:
          node_version: 8.x
        node_9_x:
          node_version: 9.x
        node_10_x:
          node_version: 10.x
    steps:
      - bash: |
          set -euxo pipefail
          echo "git SHA - $(Build.SourceVersion)"
          for f in $(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion));
            do
              echo $f | grep augur.js && echo "##vso[task.setVariable variable=AUGUR]true";
            done
      - script: |
          set -euxo pipefail
          which node
          node --version
          yarn install --ignore-scripts --frozen-lockfile
          npx lerna run test --stream --scope augur.js
        displayName: 'test augur.js'
        condition: eq(variables.AUGUR, 'true')

  - job: Docker_monorepo
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - script: |
        set -euxo pipefail
        echo "$(DOCKER_PASSWORD)" | docker login -u "$(DOCKER_USERNAME)" --password-stdin
        yarn docker:build:all
        yarn workspace augur-tools docker:push
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: 'build and push docker image'
