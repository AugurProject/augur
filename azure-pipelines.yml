# adding artifact caching: https://github.com/Microsoft/azure-pipelines-artifact-caching-tasks/blob/master/README.md
variables:
    DOCKER_CI_BUILD_TAG: monorepo.$(Build.BuildID)
    CORE_IMAGE_BUILD: augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
    CORE_IMAGE_LATEST: augurproject/augur-core:monorepo
    PRIMARY_NODE_VERSION: 10.16.x
    GETH_VERSION: v1.8.27

trigger:
  batch: false
  branches:
    include:
    - master
    - azure/*

jobs:
  - job: PreFlightCheck
    displayName: 'Pre-Flight Check'
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - bash: |
          set -euo pipefail
          echo "Build Source Branch: $(Build.SourceBranchName)"
          if [[ "$(Build.SourceBranchName)" == "master" ]]; then
            GIT_COMMAND='git log -m -1 --name-only --pretty="format:" $(Build.SourceVersion)'
          else
            GIT_COMMAND='git diff --name-only origin/master..HEAD'
          fi
          echo "running git command: $GIT_COMMAND"
          for f in $(eval "$GIT_COMMAND");
            do
              echo "$f"
              if [[ $f =~ .*augur-core/.* ]]
              then
                echo "found a core change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_CORE;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-tools/ethereum-nodes/geth-poa/.* ]]
              then
                echo "found a change in geth-poa: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_GETH_POA;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-ui.* ]]
              then
                echo "found a ui change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_UI;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-sdk.* ]]
              then
                echo "found a sdk change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_SDK;isOutput=true]true"
              fi
            done
        displayName: check git for changes
        name: setVars

  - job: Augur_build_docker_image
    dependsOn:
    - PreFlightCheck
    condition: |
      or
      (
        and
        (
          succeeded(),
          or
          (
            eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_GETH_POA'], 'true'),
            eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true')
          )
        ),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: NodeTool@0
        inputs:
          versionSpec: $(PRIMARY_NODE_VERSION)
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -euo pipefail
          yarn build
        displayName: yarn build
      - bash: |
          set -euo pipefail
          yarn docker:build:augur
          docker images
          docker tag augurproject/augur-build:latest augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker push augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
      - bash: |
          set -euo pipefail
          docker images
          docker push augurproject/augur-build:latest
        displayName: docker push latest
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: Build_Core_Docker
    dependsOn:
    - Augur_build_docker_image
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_GETH_POA'], 'true'),
          eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true')
        )
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: NodeTool@0
        inputs:
          versionSpec: $(PRIMARY_NODE_VERSION)
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          docker pull $CORE_IMAGE_LATEST;
        displayName: augur-core pull
      - script: |
          set -euo pipefail
          docker images
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          docker images
          yarn workspace @augurproject/core docker:build;
        displayName: augur-core docker image
      - script: |
          contract_sha=$(cd packages/augur-tools/ && node scripts/get-contract-hashes.js)
          docker tag $CORE_IMAGE_LATEST $CORE_IMAGE_BUILD;
          docker tag $CORE_IMAGE_LATEST augurproject/augur-core:$contract_sha;
          docker push $CORE_IMAGE_BUILD
          docker push augurproject/augur-core:$contract_sha
        displayName: augur-core push
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: Docker_geth_dev
    dependsOn:
    - PreFlightCheck
    pool:
      vmImage: 'Ubuntu 16.04'
    condition: |
      and
      (
        succeeded(),
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_GETH_POA'], 'true')
      )
    steps:
      - checkout: self
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          set -exuo pipefail
          sudo modprobe -r overlay && sudo modprobe overlay redirect_dir=off && sudo systemctl restart docker
          sudo systemctl status docker
          cd packages/augur-tools/ethereum-nodes/geth-poa && docker image build --tag augurproject/dev-node-geth:$(GETH_VERSION) .
          docker tag augurproject/dev-node-geth:$(GETH_VERSION) augurproject/dev-node-geth:latest
          docker push augurproject/dev-node-geth:$(GETH_VERSION)
          docker push augurproject/dev-node-geth:latest
        displayName: 'build and push dev-node-geth image'
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: Docker_populated_geth_images
    dependsOn:
    - PreFlightCheck
    - Docker_geth_dev
    condition: |
      and
      (
        in(dependencies.PreFlightCheck.result, 'Succeeded'),
        in(dependencies.Docker_geth_dev.result, 'Succeeded', 'Skipped'),
        or
        (
          eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true'),
          eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_GETH_POA'], 'true')
        )
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    timeoutInMinutes: 240
    strategy:
      matrix:
        dev-pop-geth-v2:
          IMAGE_NAME: augurproject/dev-pop-geth-v2
          NETWORK_ID: 102
          NORMAL_TIME: false
        dev-pop-normtime-geth-v2:
          IMAGE_NAME: augurproject/dev-pop-normtime-geth-v2
          NETWORK_ID: 103
          NORMAL_TIME: true
        dev-pop-geth-15-v2:
          IMAGE_NAME: augurproject/dev-pop-geth-15-v2
          NETWORK_ID: 104
          NORMAL_TIME: false
    steps:
      - checkout: self
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          set -exuo pipefail
          sudo modprobe -r overlay && sudo modprobe overlay redirect_dir=off && sudo systemctl restart docker
          sudo systemctl status docker
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker pull augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          docker tag augurproject/augur-core:$(DOCKER_CI_BUILD_TAG) augurproject/augur-core:monorepo
          docker images
          yarn

          # replaces @augurproject/tools docker:build
          docker pull augurproject/dev-node-geth:$(GETH_VERSION)
          docker tag augurproject/dev-node-geth:$(GETH_VERSION) augurproject/dev-node-geth:latest
          MONO_ROOT=../../
          CONTRACT_SHA=$(cd packages/augur-tools/ && node scripts/get-contract-hashes.js)
          # Build and copy to merge with current address.json/upload-block-numbers.json
          cd packages/augur-tools
          docker build --no-cache -f docker-builder/Dockerfile --build-arg normal_time=$(NORMAL_TIME) --build-arg network_id=$(NETWORK_ID) -t $(IMAGE_NAME) $MONO_ROOT
          ./scripts/copy-docker-files.sh $(IMAGE_NAME)
          docker tag $(IMAGE_NAME) $(IMAGE_NAME):$CONTRACT_SHA


          if [[ "$(Build.SourceBranchName)" == "master" ]]; then
              docker push augurproject/augur-core:monorepo
          fi
          docker push $(IMAGE_NAME):$CONTRACT_SHA
        displayName: 'build and push $(IMAGE_NAME) image'
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: publish_augur_ui_docker_image
    dependsOn:
    - Augur_build_docker_image
    condition: |
      and
      (
          succeeded(),
          eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          set -euo pipefail
          docker pull augurproject/augur-build:$(DOCKER_CI_BUILD_TAG)
          docker tag augurproject/augur-build:$(DOCKER_CI_BUILD_TAG) augurproject/augur-build:latest
          # when we get deploy going we will swap these commands out for
          # docker:release
          yarn workspace @augurproject/ui docker:release kovan
          docker push augurproject/augur-ui:kovan
          #yarn workspace @augurproject/ui docker:release $(RELEASE_ENV)
        displayName: 'publish docker images on merge to master'
        env:
          AWS_ACCESS_KEY_ID: $(AWS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_KEY)
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
