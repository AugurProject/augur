variables:
    DOCKER_CI_BUILD_TAG: monorepo.$(Build.BuildID)
    CORE_IMAGE_BUILD: augurproject/augur-core:$(DOCKER_CI_BUILD_TAG)
    CORE_IMAGE_LATEST: augurproject/augur-core:monorepo
    PRIMARY_NODE_VERSION: 10.16.x
    GETH_VERSION: v1.8.27
    SOLC_VERSION: v0.5.10
    SOLC_MD5: be02011efd6c6afd27cda02871bd70b3

trigger:
  batch: false
  branches:
    include:
    - master
    - azure/*

jobs:
  - job: PreFlightCheck
    displayName: 'Pre-Flight Check'
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - checkout: self
      - bash: |
          set -euo pipefail
          echo "Build Source Branch: $(Build.SourceBranchName)"
          echo "commit message: $(Build.SourceVersionMessage)"
          if [[ "$(Build.SourceBranchName)" == "master" ]]; then
            GIT_COMMAND='git log -m -1 --name-only --pretty="format:" $(Build.SourceVersion)'
          else
            GIT_COMMAND='git diff --name-only origin/master..HEAD'
          fi
          echo "running git command: $GIT_COMMAND"
          for f in $(eval "$GIT_COMMAND");
            do
              echo "$f"
              if [[ $f == packages/* ]] && [[ $f != packages/augur-ui/* ]]
              then
                echo "found a non-ui change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_TEST;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-core/.* ]]
              then
                echo "found a core change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_CORE;isOutput=true]true"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_POP_GETH;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-artifacts/.* ]]
              then
                echo "found an artifacts change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_ARTIFACTS;isOutput=true]true"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_POP_GETH;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-tools/docker-builder/* ]]
              then
                echo "found a docker-builder change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_DOCKER_BUILDER;isOutput=true]true"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_POP_GETH;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-tools/ethereum-nodes/geth-poa/.* ]]
              then
                echo "found a change in geth-poa: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_GETH_POA;isOutput=true]true"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_POP_GETH;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-ui.* ]]
              then
                echo "found a ui change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_UI;isOutput=true]true"
              fi
              if [[ $f =~ .*augur-sdk.* ]]
              then
                echo "found a sdk change: $f"
                echo "##vso[task.setvariable variable=JOB_TRIGGER_SDK;isOutput=true]true"
              fi
            done
        displayName: check git for changes
        name: setVars

  - job: TestAndLint
    dependsOn:
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        not(eq(variables['Build.sourceBranch'], 'refs/heads/master')),
        not(eq(variables['Build.sourceBranch'], 'refs/tags'))
      )
    variables:
      JOB_TRIGGER_UI: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_UI']]
      JOB_TRIGGER_SDK: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_SDK']]
      JOB_TRIGGER_CORE: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE']]
      JOB_TRIGGER_TEST: $[dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_TEST']]
      USE_NORMAL_TIME: false
      PRODUCTION: false
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    pool:
      vmImage: 'Ubuntu 16.04'
    strategy:
      matrix:
        node_10_x:
          node_version: $(PRIMARY_NODE_VERSION)
    timeoutInMinutes: 120
    steps:
      - checkout: self
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version)
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install --frozen-lockfile
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -euo pipefail
          yarn build
        displayName: yarn build
      - bash: |
          set -euo pipefail
          yarn workspace @augurproject/ui build:kovan
        displayName: ui build
        env:
          NODE_OPTIONS: "--max_old_space_size=6144"
        condition:  eq(variables['JOB_TRIGGER_UI'], 'true')
      - bash: |
          set -euo pipefail
          bash <(curl -s https://peek.run/ci)
        displayName: feature peek
        condition:  and(eq(variables['JOB_TRIGGER_UI'], 'true'), eq(variables['Build.Reason'], 'PullRequest'))
      - bash: |
          set -euo pipefail
          free -m
          yarn test --verbose --runInBand --ci --reporters=default --reporters=jest-junit
        displayName: yarn test
        condition:  eq(variables['JOB_TRIGGER_TEST'], 'true')
        env:
          NODE_OPTIONS: "--max_old_space_size=2048"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/junit.xml'

  - job: ContractSanityCheck
    dependsOn:
    - TestAndLint
    - PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_CORE'], 'true')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    timeoutInMinutes: 120
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6'
      - task: NodeTool@0
        inputs:
          versionSpec: $(PRIMARY_NODE_VERSION)
      - bash: |
          set -euo pipefail
          python3 -m venv venv && \
          source venv/bin/activate && \
          python3 -m pip install --no-cache-dir -r packages/augur-core/requirements.txt
        displayName: Python3 requirements
      - bash: |
          set -exuo pipefail
          echo "$(SOLC_MD5) */usr/local/bin/solc" > solc.md5 && \
          sudo curl -sL -o /usr/local/bin/solc https://github.com/ethereum/solidity/releases/download/${SOLC_VERSION}/solc-static-linux && \
          md5sum -c solc.md5 && \
          sudo chmod a+x /usr/local/bin/solc
        displayName: install solc
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install --frozen-lockfile
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -euo pipefail
          yarn build
          source venv/bin/activate
          yarn workspace @augurproject/core build
        displayName: compile contracts
      - bash: |
          set -euo pipefail
          git update-index -q --ignore-submodules --refresh
          err=0
          if ! git diff-files --quiet --ignore-submodules --
          then
              echo >&2 "unstaged changes detected"
              git diff-files --name-status -r --ignore-submodules -- >&2
              git diff
              err=1
          fi
          if ! git diff-index --cached --quiet HEAD --ignore-submodules --
          then
              echo >&2 "uncommitted changes detected"
              git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
              err=1
          fi
          if [ $err = 1 ]
          then
              echo >&2 "Contract changes detected"
              echo >&2 "Please rebuild augur-core and commit the generated files:"
              echo >&2 "yarn workspace @augurproject/core build"
              #exit 1
          fi
        displayName: check for contract changes

  - job: DockerGethDev
    dependsOn:
    - PreFlightCheck
    pool:
      vmImage: 'Ubuntu 16.04'
    condition: |
      and
      (
        succeeded(),
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_GETH_POA'], 'true')
      )
    steps:
      - checkout: self
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - script: |
          set -exuo pipefail
          sudo modprobe -r overlay && sudo modprobe overlay redirect_dir=off && sudo systemctl restart docker
          sudo systemctl status docker
          cd packages/augur-tools/ethereum-nodes/geth-poa && docker image build --tag augurproject/dev-node-geth:$(GETH_VERSION) .
          docker tag augurproject/dev-node-geth:$(GETH_VERSION) augurproject/dev-node-geth:latest
          docker push augurproject/dev-node-geth:$(GETH_VERSION)
          docker push augurproject/dev-node-geth:latest
        displayName: 'build and push dev-node-geth image'
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: TestAugurCore
    dependsOn:
    - ContractSanityCheck
    - DockerGethDev
    condition: |
      and
      (
        in(dependencies.ContractSanityCheck.result, 'Succeeded'),
        in(dependencies.DockerGethDev.result, 'Succeeded', 'Skipped')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    timeoutInMinutes: 120
    strategy:
      maxParallel: 5
      matrix:
        trading_and_libs:
          TESTS: tests/test*.py tests/libraries tests/trading
        reporting:
          TESTS: tests/reporting
        fuzzy:
          TESTS: tests/fuzzy
        unit:
          TESTS: tests/unit
        geth_integration:
          TESTS: integration:geth
        parity_integration:
          TESTS: integration:parity
        security_mithril:
          TESTS: security:mythril
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    steps:
      - checkout: self
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6'
      - task: NodeTool@0
        inputs:
          versionSpec: $(PRIMARY_NODE_VERSION)
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install --frozen-lockfile
          yarn build
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -exuo pipefail
          echo "$(SOLC_MD5) */usr/local/bin/solc" > solc.md5 && \
          sudo curl -sL -o /usr/local/bin/solc https://github.com/ethereum/solidity/releases/download/${SOLC_VERSION}/solc-static-linux && \
          md5sum -c solc.md5 && \
          sudo chmod a+x /usr/local/bin/solc
        displayName: install solc
      - bash: |
          set -euo pipefail
          python3 -m venv venv && \
          source venv/bin/activate && \
          python3 -m pip install --no-cache-dir -r packages/augur-core/requirements.txt
          python3 -m pip install pytest
          echo "tests: $(TESTS)"
          export ETHEREUM_HTTP=http://localhost:8545
          export ETHEREUM_GAS_PRICE_IN_NANOETH=1
          export ETHEREUM_PRIVATE_KEY=0xfae42052f82bed612a724fec3632f325f377120592c75bb78adfcceae6470c5a
          if [[ "$(TESTS)" == "integration:geth" ]]; then
            docker run -p 8545:8545 -p 47625:8546 --name geth --detach augurproject/dev-node-geth:latest
            yarn workspace @augurproject/core test:integration
            docker stop geth
          elif [[ "$(TESTS)" == "integration:parity" ]]; then
            docker run -p 8180:8180 -p 8545:8545 -p 47623:8546 --name parity --detach augurproject/dev-node-parity:latest
            yarn workspace @augurproject/core test:integration
            docker stop parity
          elif [[ "$(TESTS)" == "security:mythril" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:mythril;
            cat $(find . -name test-results.log)
          elif [[ "$(TESTS)" == "security:maian" ]]; then
            docker run -v `pwd`/contracts:/augur/packages/augur-core/output/contracts/ cryptomental/maian-augur-ci python /scripts/test_runner.py
          elif [[ "$(TESTS)" == "security:smt" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:smt;
          elif [[ "$(TESTS)" == "security:oyente" ]]; then
            yarn workspace @augurproject/core docker:run:test:security:oyente;
          else
            (cd packages/augur-core && yarn test:unit $(TESTS))
          fi
        displayName: integration tests

  - job: Docker_populated_geth_images
    dependsOn:
    - PreFlightCheck
    - TestAugurCore
    - TestAndLint
    condition: |
      and
      (
        eq(dependencies.PreFlightCheck.outputs['setVars.JOB_TRIGGER_POP_GETH'], 'true'),
        in(dependencies.PreFlightCheck.result, 'Succeeded'),
        in(dependencies.TestAugurCore.result, 'Succeeded', 'Skipped'),
        not(eq(variables['Build.sourceBranch'], 'refs/heads/master')),
        not(eq(variables['Build.sourceBranch'], 'refs/tags'))
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    timeoutInMinutes: 240
    strategy:
      matrix:
        dev-pop-geth-v2:
          IMAGE_NAME: dev-pop-geth-v2
          NETWORK_ID: 102
          NORMAL_TIME: false
        dev-pop-normtime-geth-v2:
          IMAGE_NAME: dev-pop-normtime-geth-v2
          NETWORK_ID: 103
          NORMAL_TIME: true
        dev-pop-geth-15-v2:
          IMAGE_NAME: dev-pop-geth-15-v2
          NETWORK_ID: 104
          NORMAL_TIME: false
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    steps:
      - checkout: self
      - task: NodeTool@0
        inputs:
          versionSpec: $(PRIMARY_NODE_VERSION)
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install --frozen-lockfile
          yarn build
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          set -exuo pipefail
          export DOCKER_BUILDKIT=1
          docker build --progress=plain --no-cache=true -f packages/augur-tools/docker-builder/Dockerfile --build-arg normal_time=$(NORMAL_TIME) --build-arg network_id=$(NETWORK_ID) -t $(IMAGE_NAME) .
        displayName: 'build $(IMAGE_NAME) image'
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - bash: |
          set -exuo pipefail
          CONTRACT_SHA=$(cd packages/augur-tools/ && node scripts/get-contract-hashes.js)
          docker images
          docker tag $(IMAGE_NAME) augurproject/$(IMAGE_NAME):"${CONTRACT_SHA}"
          docker push augurproject/$(IMAGE_NAME):"${CONTRACT_SHA}"
        displayName: Push Docker Images to hub
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: publish_augur_ui_docker_image
    condition: |
      and
      (
          succeeded(),
          eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install --frozen-lockfile
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.6'
      - bash: |
          set -euo pipefail
          yarn build
        displayName: yarn build
      - bash: |
          set -euo pipefail
          export ETHEREUM_NETWORK=kovan
          ( cd packages/augur-ui && ./node_modules/.bin/webpack)
          #yarn workspace @augurproject/ui build:kovan
        displayName: ui build
        env:
          NODE_OPTIONS: "--max_old_space_size=6144"
      - task: Docker@1
        displayName: docker login
        inputs:
          command: login
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject
      - bash: |
          set -euo pipefail
          ls -l packages/augur-ui/build
          DOCKER_BUILDKIT=1 docker build --progress=plain -t augurproject/augur-ipfs:v2 -f packages/augur-tools/docker-builder/Dockerfile-ipfs .
          docker push augurproject/augur-ipfs:v2
        displayName: augur-ipfs build
      - script: |
          set -euo pipefail
          export NODE_OPTIONS="--max-old-space-size=6144"
          # when we get deploy going we will swap these commands out for
          # docker:release
          yarn workspace @augurproject/ui docker:release kovan
          docker push augurproject/augur-ui:kovan
          #yarn workspace @augurproject/ui docker:release $(RELEASE_ENV)
        displayName: 'publish docker images on merge to master'
        env:
          NODE_OPTIONS: "--max_old_space_size=6144"
          AWS_ACCESS_KEY_ID: $(AWS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_KEY)
      - bash: |
          set -euo pipefail
          ls -l packages/augur-ui/build
          DOCKER_BUILDKIT=1 docker build --progress=plain -t augurproject/augur-ipfs:v2 -f packages/augur-tools/docker-builder/Dockerfile-ipfs .
          docker push augurproject/augur-ipfs:v2
        displayName: augur-ipfs build
      - task: Docker@1
        displayName: docker logout
        inputs:
          command: logout
          containerRegistryType: Container Registry
          dockerRegistryEndpoint: dockerhub-augurproject

  - job: tag_build
    displayName: build tag
    dependsOn: PreFlightCheck
    condition: |
      and
      (
        succeeded(),
        startsWith(variables['build.sourceBranch'], 'refs/tags/v')
      )
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
      - checkout: self
      - task: NodeTool@0
        inputs:
          versionSpec: $(PRIMARY_NODE_VERSION)
      - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - script: |
          yarn install --frozen-lockfile
        displayName: Install Dependencies
      - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
        inputs:
          keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
          targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
          vstsFeed: npmPackages
      - bash: |
          set -euo pipefail
          yarn build
        displayName: yarn build
      - bash: |
          set -euo pipefail
          yarn workspace @augurproject/ui build
          ( cd packages/augur-ui/build && zip -r ../../../augur.zip *)
        displayName: ui build
        env:
          NODE_OPTIONS: "--max_old_space_size=6144"
      - bash: |
          set -euo pipefail
          sudo apt update
          sudo apt install golang-go -y
          curl -l https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz | tar xvzf -
          sudo mv go-ipfs/ipfs /usr/local/bin/ipfs
        displayName: install ipfs
      - bash: |
          set -euo pipefail
          ipfs init > /dev/null 2>&1
          ipfs add -r -Q packages/augur-ui/build | tee augur_ipfs_hash.txt
        displayName: ipfs hash of build dir
      - task: CopyFiles@2
        inputs:
          #sourceFolder: # Optional
          contents: |
            augur.zip
            augur_ipfs_hash.txt
          targetFolder: $(Build.ArtifactStagingDirectory)
          cleanTargetFolder: true
          #overWrite: false # Optional
          #flattenFolders: false # Optional
          #preserveTimestamp: false # Optional

# use below for github release (not test yet
#     - task: GitHubRelease@1
#       displayName: 'GitHub release (create)'
#       inputs:
#         gitHubConnection: 'github connection release pipeline'
#         tagPattern: 'v*'
#         title: Augur
#         releaseNotesSource: inline
#         assets: '$(Build.ArtifactStagingDirectory)/*'
#         isDraft: true
#         isPreRelease: true
