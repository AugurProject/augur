type CompleteSetsPurchasedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  account: String

  numCompleteSets: String!

  timestamp: String!
}

type CompleteSetsSoldEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  account: String

  numCompleteSets: String!

  fees: String!

  timestamp: String!
}

type DesignatedReportStakeChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  designatedReportStake: String!
}

type DisputeCrowdsourcerCompletedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  disputeCrowdsourcer: String

  payoutNumerators: [String!]!

  nextWindowStartTime: String!

  nextWindowEndTime: String!

  pacingOn: Boolean!

  totalRepStakedInPayout: String!

  totalRepStakedInMarket: String!

  disputeRound: String!

  timestamp: String!
}

type DisputeCrowdsourcerContributionEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  reporter: String

  market: String

  disputeCrowdsourcer: String

  amountStaked: String!

  description: String!

  payoutNumerators: [String!]!

  currentStake: String!

  stakeRemaining: String!

  disputeRound: String!

  timestamp: String!
}

type DisputeCrowdsourcerCreatedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  disputeCrowdsourcer: String

  payoutNumerators: [String!]!

  size: String!

  disputeRound: String!
}

type DisputeCrowdsourcerRedeemedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  reporter: String

  market: String

  disputeCrowdsourcer: String

  amountRedeemed: String!

  repReceived: String!

  payoutNumerators: [String!]!

  timestamp: String!
}

type DisputeWindowCreatedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  disputeWindow: String

  startTime: String!

  endTime: String!

  initial: Boolean!
}

type FinishDeploymentEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!

}

type InitialReportSubmittedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  reporter: String

  market: String

  initialReporter: String

  amountStaked: String!

  isDesignatedReporter: Boolean!

  payoutNumerators: [String!]!

  description: String!

  nextWindowStartTime: String!

  nextWindowEndTime: String!

  timestamp: String!
}

type InitialReporterRedeemedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  reporter: String

  market: String

  initialReporter: String

  amountRedeemed: String!

  repReceived: String!

  payoutNumerators: [String!]!

  timestamp: String!
}

type InitialReporterTransferredEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  from: String

  to: String
}

type MarketCreatedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  endTime: String!

  extraInfo: String!

  market: String

  marketCreator: String

  designatedReporter: String

  feePerCashInAttoCash: String!

  prices: [String!]!

  marketType: Int!

  numTicks: String!

  outcomes: [Bytes!]!

  noShowBond: String!

  timestamp: String!
}

type MarketFinalizedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  timestamp: String!

  winningPayoutNumerators: [String!]!
}

type MarketMigratedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  market: String

  originalUniverse: String

  newUniverse: String
}

type MarketOIChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  marketOI: String!
}

type MarketParticipantsDisavowedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String
}

type MarketRepBondTransferredEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  from: String

  to: String
}

type MarketTransferredEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  from: String

  to: String
}

type NoShowBondChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  noShowBond: String!
}

type ParticipationTokensRedeemedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  disputeWindow: String

  account: String

  attoParticipationTokens: String!

  feePayoutShare: String!

  timestamp: String!
}

type RegisterContractEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  contractAddress: String

  key: Bytes
}

type ReportingFeeChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  reportingFee: String!
}

type ReportingParticipantDisavowedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  reportingParticipant: String
}

type ShareTokenBalanceChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  account: String

  market: String

  outcome: String!

  balance: String!
}

type TimestampSetEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  newTimestamp: String!
}

type TokenBalanceChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  owner: String

  token: String

  tokenType: Int!

  market: String

  balance: String!

  outcome: String!
}

type TokensBurnedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  token: String

  target: String

  amount: String!

  tokenType: Int!

  market: String

  totalSupply: String!
}

type TokensMintedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  token: String

  target: String

  amount: String!

  tokenType: Int!

  market: String

  totalSupply: String!
}

type TokensTransferredEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  token: String

  from: String

  to: String

  value: String!

  tokenType: Int!

  market: String
}

type TradingProceedsClaimedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  sender: String

  market: String

  outcome: String!

  numShares: String!

  numPayoutTokens: String!

  fees: String!

  timestamp: String!
}

type UniverseCreatedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  parentUniverse: String

  childUniverse: String

  payoutNumerators: [String!]!

  creationTimestamp: String!
}

type UniverseForkedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  forkingMarket: String
}

type ValidityBondChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  validityBond: String!
}

type WarpSyncDataUpdatedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  warpSyncHash: String!

  marketEndTime: String!
}

type CancelZeroXOrderEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  account: String

  outcome: String!

  price: String!

  amount: String!

  orderType: Int!

  orderHash: Bytes
}

type MarketVolumeChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  volume: String!

  outcomeVolumes: [String!]!

  totalTrades: String!

  timestamp: String!
}

type OrderEventEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  eventType: Int!

  orderType: Int!

  orderId: Bytes

  tradeGroupId: Bytes

  addressData: [String!]!

  uint256Data: [String!]!
}

type ProfitLossChangedEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  universe: String

  market: String

  account: String

  outcome: String!

  netPosition: String!

  avgPrice: String!

  realizedProfit: String!

  frozenFunds: String!

  realizedCost: String!

  timestamp: String!
}

type ApprovalForAllEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  owner: String

  operator: String

  approved: Boolean!
}

type TransferBatchEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  operator: String

  from: String

  to: String

  ids: [String!]!

  values: [String!]!
}

type TransferSingleEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  operator: String

  from: String

  to: String

  value: String!
}

type URIEvent @entity {
  id: ID!

  blockHash: String!

  blockNumber: Int!

  logIndex: Int!

  name: String!

  transactionHash: String!

  origin: String!


  value: String!
}

