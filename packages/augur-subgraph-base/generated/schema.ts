// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CompleteSetsPurchased extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CompleteSetsPurchased entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CompleteSetsPurchased entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CompleteSetsPurchased", id.toString(), this);
  }

  static load(id: string): CompleteSetsPurchased | null {
    return store.get(
      "CompleteSetsPurchased",
      id
    ) as CompleteSetsPurchased | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get numCompleteSets(): string {
    let value = this.get("numCompleteSets");
    return value.toString();
  }

  set numCompleteSets(value: string) {
    this.set("numCompleteSets", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class CompleteSetsSold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CompleteSetsSold entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CompleteSetsSold entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CompleteSetsSold", id.toString(), this);
  }

  static load(id: string): CompleteSetsSold | null {
    return store.get("CompleteSetsSold", id) as CompleteSetsSold | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get numCompleteSets(): string {
    let value = this.get("numCompleteSets");
    return value.toString();
  }

  set numCompleteSets(value: string) {
    this.set("numCompleteSets", Value.fromString(value));
  }

  get fees(): string {
    let value = this.get("fees");
    return value.toString();
  }

  set fees(value: string) {
    this.set("fees", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class DesignatedReportStakeChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DesignatedReportStakeChanged entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DesignatedReportStakeChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DesignatedReportStakeChanged", id.toString(), this);
  }

  static load(id: string): DesignatedReportStakeChanged | null {
    return store.get(
      "DesignatedReportStakeChanged",
      id
    ) as DesignatedReportStakeChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get designatedReportStake(): string {
    let value = this.get("designatedReportStake");
    return value.toString();
  }

  set designatedReportStake(value: string) {
    this.set("designatedReportStake", Value.fromString(value));
  }
}

export class DisputeCrowdsourcerCompleted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DisputeCrowdsourcerCompleted entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DisputeCrowdsourcerCompleted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DisputeCrowdsourcerCompleted", id.toString(), this);
  }

  static load(id: string): DisputeCrowdsourcerCompleted | null {
    return store.get(
      "DisputeCrowdsourcerCompleted",
      id
    ) as DisputeCrowdsourcerCompleted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get disputeCrowdsourcer(): string | null {
    let value = this.get("disputeCrowdsourcer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputeCrowdsourcer(value: string | null) {
    if (value === null) {
      this.unset("disputeCrowdsourcer");
    } else {
      this.set("disputeCrowdsourcer", Value.fromString(value as string));
    }
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get nextWindowStartTime(): string {
    let value = this.get("nextWindowStartTime");
    return value.toString();
  }

  set nextWindowStartTime(value: string) {
    this.set("nextWindowStartTime", Value.fromString(value));
  }

  get nextWindowEndTime(): string {
    let value = this.get("nextWindowEndTime");
    return value.toString();
  }

  set nextWindowEndTime(value: string) {
    this.set("nextWindowEndTime", Value.fromString(value));
  }

  get pacingOn(): boolean {
    let value = this.get("pacingOn");
    return value.toBoolean();
  }

  set pacingOn(value: boolean) {
    this.set("pacingOn", Value.fromBoolean(value));
  }

  get totalRepStakedInPayout(): string {
    let value = this.get("totalRepStakedInPayout");
    return value.toString();
  }

  set totalRepStakedInPayout(value: string) {
    this.set("totalRepStakedInPayout", Value.fromString(value));
  }

  get totalRepStakedInMarket(): string {
    let value = this.get("totalRepStakedInMarket");
    return value.toString();
  }

  set totalRepStakedInMarket(value: string) {
    this.set("totalRepStakedInMarket", Value.fromString(value));
  }

  get disputeRound(): string {
    let value = this.get("disputeRound");
    return value.toString();
  }

  set disputeRound(value: string) {
    this.set("disputeRound", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class DisputeCrowdsourcerContribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DisputeCrowdsourcerContribution entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DisputeCrowdsourcerContribution entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DisputeCrowdsourcerContribution", id.toString(), this);
  }

  static load(id: string): DisputeCrowdsourcerContribution | null {
    return store.get(
      "DisputeCrowdsourcerContribution",
      id
    ) as DisputeCrowdsourcerContribution | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get reporter(): string | null {
    let value = this.get("reporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reporter(value: string | null) {
    if (value === null) {
      this.unset("reporter");
    } else {
      this.set("reporter", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get disputeCrowdsourcer(): string | null {
    let value = this.get("disputeCrowdsourcer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputeCrowdsourcer(value: string | null) {
    if (value === null) {
      this.unset("disputeCrowdsourcer");
    } else {
      this.set("disputeCrowdsourcer", Value.fromString(value as string));
    }
  }

  get amountStaked(): string {
    let value = this.get("amountStaked");
    return value.toString();
  }

  set amountStaked(value: string) {
    this.set("amountStaked", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get currentStake(): string {
    let value = this.get("currentStake");
    return value.toString();
  }

  set currentStake(value: string) {
    this.set("currentStake", Value.fromString(value));
  }

  get stakeRemaining(): string {
    let value = this.get("stakeRemaining");
    return value.toString();
  }

  set stakeRemaining(value: string) {
    this.set("stakeRemaining", Value.fromString(value));
  }

  get disputeRound(): string {
    let value = this.get("disputeRound");
    return value.toString();
  }

  set disputeRound(value: string) {
    this.set("disputeRound", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class DisputeCrowdsourcerCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DisputeCrowdsourcerCreated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DisputeCrowdsourcerCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DisputeCrowdsourcerCreated", id.toString(), this);
  }

  static load(id: string): DisputeCrowdsourcerCreated | null {
    return store.get(
      "DisputeCrowdsourcerCreated",
      id
    ) as DisputeCrowdsourcerCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get disputeCrowdsourcer(): string | null {
    let value = this.get("disputeCrowdsourcer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputeCrowdsourcer(value: string | null) {
    if (value === null) {
      this.unset("disputeCrowdsourcer");
    } else {
      this.set("disputeCrowdsourcer", Value.fromString(value as string));
    }
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get size(): string {
    let value = this.get("size");
    return value.toString();
  }

  set size(value: string) {
    this.set("size", Value.fromString(value));
  }

  get disputeRound(): string {
    let value = this.get("disputeRound");
    return value.toString();
  }

  set disputeRound(value: string) {
    this.set("disputeRound", Value.fromString(value));
  }
}

export class DisputeCrowdsourcerRedeemed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DisputeCrowdsourcerRedeemed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DisputeCrowdsourcerRedeemed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DisputeCrowdsourcerRedeemed", id.toString(), this);
  }

  static load(id: string): DisputeCrowdsourcerRedeemed | null {
    return store.get(
      "DisputeCrowdsourcerRedeemed",
      id
    ) as DisputeCrowdsourcerRedeemed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get reporter(): string | null {
    let value = this.get("reporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reporter(value: string | null) {
    if (value === null) {
      this.unset("reporter");
    } else {
      this.set("reporter", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get disputeCrowdsourcer(): string | null {
    let value = this.get("disputeCrowdsourcer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputeCrowdsourcer(value: string | null) {
    if (value === null) {
      this.unset("disputeCrowdsourcer");
    } else {
      this.set("disputeCrowdsourcer", Value.fromString(value as string));
    }
  }

  get amountRedeemed(): string {
    let value = this.get("amountRedeemed");
    return value.toString();
  }

  set amountRedeemed(value: string) {
    this.set("amountRedeemed", Value.fromString(value));
  }

  get repReceived(): string {
    let value = this.get("repReceived");
    return value.toString();
  }

  set repReceived(value: string) {
    this.set("repReceived", Value.fromString(value));
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class DisputeWindowCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DisputeWindowCreated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DisputeWindowCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DisputeWindowCreated", id.toString(), this);
  }

  static load(id: string): DisputeWindowCreated | null {
    return store.get("DisputeWindowCreated", id) as DisputeWindowCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get disputeWindow(): string | null {
    let value = this.get("disputeWindow");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputeWindow(value: string | null) {
    if (value === null) {
      this.unset("disputeWindow");
    } else {
      this.set("disputeWindow", Value.fromString(value as string));
    }
  }

  get startTime(): string {
    let value = this.get("startTime");
    return value.toString();
  }

  set startTime(value: string) {
    this.set("startTime", Value.fromString(value));
  }

  get endTime(): string {
    let value = this.get("endTime");
    return value.toString();
  }

  set endTime(value: string) {
    this.set("endTime", Value.fromString(value));
  }

  get initial(): boolean {
    let value = this.get("initial");
    return value.toBoolean();
  }

  set initial(value: boolean) {
    this.set("initial", Value.fromBoolean(value));
  }
}

export class FinishDeployment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FinishDeployment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FinishDeployment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FinishDeployment", id.toString(), this);
  }

  static load(id: string): FinishDeployment | null {
    return store.get("FinishDeployment", id) as FinishDeployment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class InitialReportSubmitted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InitialReportSubmitted entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitialReportSubmitted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitialReportSubmitted", id.toString(), this);
  }

  static load(id: string): InitialReportSubmitted | null {
    return store.get(
      "InitialReportSubmitted",
      id
    ) as InitialReportSubmitted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get reporter(): string | null {
    let value = this.get("reporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reporter(value: string | null) {
    if (value === null) {
      this.unset("reporter");
    } else {
      this.set("reporter", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get initialReporter(): string | null {
    let value = this.get("initialReporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialReporter(value: string | null) {
    if (value === null) {
      this.unset("initialReporter");
    } else {
      this.set("initialReporter", Value.fromString(value as string));
    }
  }

  get amountStaked(): string {
    let value = this.get("amountStaked");
    return value.toString();
  }

  set amountStaked(value: string) {
    this.set("amountStaked", Value.fromString(value));
  }

  get isDesignatedReporter(): boolean {
    let value = this.get("isDesignatedReporter");
    return value.toBoolean();
  }

  set isDesignatedReporter(value: boolean) {
    this.set("isDesignatedReporter", Value.fromBoolean(value));
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get nextWindowStartTime(): string {
    let value = this.get("nextWindowStartTime");
    return value.toString();
  }

  set nextWindowStartTime(value: string) {
    this.set("nextWindowStartTime", Value.fromString(value));
  }

  get nextWindowEndTime(): string {
    let value = this.get("nextWindowEndTime");
    return value.toString();
  }

  set nextWindowEndTime(value: string) {
    this.set("nextWindowEndTime", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class InitialReporterRedeemed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InitialReporterRedeemed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitialReporterRedeemed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitialReporterRedeemed", id.toString(), this);
  }

  static load(id: string): InitialReporterRedeemed | null {
    return store.get(
      "InitialReporterRedeemed",
      id
    ) as InitialReporterRedeemed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get reporter(): string | null {
    let value = this.get("reporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reporter(value: string | null) {
    if (value === null) {
      this.unset("reporter");
    } else {
      this.set("reporter", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get initialReporter(): string | null {
    let value = this.get("initialReporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialReporter(value: string | null) {
    if (value === null) {
      this.unset("initialReporter");
    } else {
      this.set("initialReporter", Value.fromString(value as string));
    }
  }

  get amountRedeemed(): string {
    let value = this.get("amountRedeemed");
    return value.toString();
  }

  set amountRedeemed(value: string) {
    this.set("amountRedeemed", Value.fromString(value));
  }

  get repReceived(): string {
    let value = this.get("repReceived");
    return value.toString();
  }

  set repReceived(value: string) {
    this.set("repReceived", Value.fromString(value));
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class InitialReporterTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InitialReporterTransferred entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitialReporterTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitialReporterTransferred", id.toString(), this);
  }

  static load(id: string): InitialReporterTransferred | null {
    return store.get(
      "InitialReporterTransferred",
      id
    ) as InitialReporterTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }
}

export class MarketCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketCreated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketCreated", id.toString(), this);
  }

  static load(id: string): MarketCreated | null {
    return store.get("MarketCreated", id) as MarketCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get endTime(): string {
    let value = this.get("endTime");
    return value.toString();
  }

  set endTime(value: string) {
    this.set("endTime", Value.fromString(value));
  }

  get extraInfo(): string {
    let value = this.get("extraInfo");
    return value.toString();
  }

  set extraInfo(value: string) {
    this.set("extraInfo", Value.fromString(value));
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get marketCreator(): string | null {
    let value = this.get("marketCreator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set marketCreator(value: string | null) {
    if (value === null) {
      this.unset("marketCreator");
    } else {
      this.set("marketCreator", Value.fromString(value as string));
    }
  }

  get designatedReporter(): string | null {
    let value = this.get("designatedReporter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set designatedReporter(value: string | null) {
    if (value === null) {
      this.unset("designatedReporter");
    } else {
      this.set("designatedReporter", Value.fromString(value as string));
    }
  }

  get feePerCashInAttoCash(): string {
    let value = this.get("feePerCashInAttoCash");
    return value.toString();
  }

  set feePerCashInAttoCash(value: string) {
    this.set("feePerCashInAttoCash", Value.fromString(value));
  }

  get prices(): Array<string> {
    let value = this.get("prices");
    return value.toStringArray();
  }

  set prices(value: Array<string>) {
    this.set("prices", Value.fromStringArray(value));
  }

  get marketType(): string {
    let value = this.get("marketType");
    return value.toString();
  }

  set marketType(value: string) {
    this.set("marketType", Value.fromString(value));
  }

  get numTicks(): string {
    let value = this.get("numTicks");
    return value.toString();
  }

  set numTicks(value: string) {
    this.set("numTicks", Value.fromString(value));
  }

  get outcomes(): Array<Bytes> {
    let value = this.get("outcomes");
    return value.toBytesArray();
  }

  set outcomes(value: Array<Bytes>) {
    this.set("outcomes", Value.fromBytesArray(value));
  }

  get noShowBond(): string {
    let value = this.get("noShowBond");
    return value.toString();
  }

  set noShowBond(value: string) {
    this.set("noShowBond", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class MarketFinalized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketFinalized entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketFinalized entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketFinalized", id.toString(), this);
  }

  static load(id: string): MarketFinalized | null {
    return store.get("MarketFinalized", id) as MarketFinalized | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get winningPayoutNumerators(): Array<string> {
    let value = this.get("winningPayoutNumerators");
    return value.toStringArray();
  }

  set winningPayoutNumerators(value: Array<string>) {
    this.set("winningPayoutNumerators", Value.fromStringArray(value));
  }
}

export class MarketMigrated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketMigrated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketMigrated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketMigrated", id.toString(), this);
  }

  static load(id: string): MarketMigrated | null {
    return store.get("MarketMigrated", id) as MarketMigrated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get originalUniverse(): string | null {
    let value = this.get("originalUniverse");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set originalUniverse(value: string | null) {
    if (value === null) {
      this.unset("originalUniverse");
    } else {
      this.set("originalUniverse", Value.fromString(value as string));
    }
  }

  get newUniverse(): string | null {
    let value = this.get("newUniverse");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newUniverse(value: string | null) {
    if (value === null) {
      this.unset("newUniverse");
    } else {
      this.set("newUniverse", Value.fromString(value as string));
    }
  }
}

export class MarketOIChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketOIChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketOIChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketOIChanged", id.toString(), this);
  }

  static load(id: string): MarketOIChanged | null {
    return store.get("MarketOIChanged", id) as MarketOIChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get marketOI(): string {
    let value = this.get("marketOI");
    return value.toString();
  }

  set marketOI(value: string) {
    this.set("marketOI", Value.fromString(value));
  }
}

export class MarketParticipantsDisavowed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MarketParticipantsDisavowed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketParticipantsDisavowed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketParticipantsDisavowed", id.toString(), this);
  }

  static load(id: string): MarketParticipantsDisavowed | null {
    return store.get(
      "MarketParticipantsDisavowed",
      id
    ) as MarketParticipantsDisavowed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }
}

export class MarketRepBondTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MarketRepBondTransferred entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketRepBondTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketRepBondTransferred", id.toString(), this);
  }

  static load(id: string): MarketRepBondTransferred | null {
    return store.get(
      "MarketRepBondTransferred",
      id
    ) as MarketRepBondTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }
}

export class MarketTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketTransferred entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketTransferred", id.toString(), this);
  }

  static load(id: string): MarketTransferred | null {
    return store.get("MarketTransferred", id) as MarketTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }
}

export class NoShowBondChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NoShowBondChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NoShowBondChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NoShowBondChanged", id.toString(), this);
  }

  static load(id: string): NoShowBondChanged | null {
    return store.get("NoShowBondChanged", id) as NoShowBondChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get noShowBond(): string {
    let value = this.get("noShowBond");
    return value.toString();
  }

  set noShowBond(value: string) {
    this.set("noShowBond", Value.fromString(value));
  }
}

export class ParticipationTokensRedeemed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ParticipationTokensRedeemed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ParticipationTokensRedeemed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ParticipationTokensRedeemed", id.toString(), this);
  }

  static load(id: string): ParticipationTokensRedeemed | null {
    return store.get(
      "ParticipationTokensRedeemed",
      id
    ) as ParticipationTokensRedeemed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get disputeWindow(): string | null {
    let value = this.get("disputeWindow");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputeWindow(value: string | null) {
    if (value === null) {
      this.unset("disputeWindow");
    } else {
      this.set("disputeWindow", Value.fromString(value as string));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get attoParticipationTokens(): string {
    let value = this.get("attoParticipationTokens");
    return value.toString();
  }

  set attoParticipationTokens(value: string) {
    this.set("attoParticipationTokens", Value.fromString(value));
  }

  get feePayoutShare(): string {
    let value = this.get("feePayoutShare");
    return value.toString();
  }

  set feePayoutShare(value: string) {
    this.set("feePayoutShare", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class RegisterContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RegisterContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RegisterContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RegisterContract", id.toString(), this);
  }

  static load(id: string): RegisterContract | null {
    return store.get("RegisterContract", id) as RegisterContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get contractAddress(): string | null {
    let value = this.get("contractAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractAddress(value: string | null) {
    if (value === null) {
      this.unset("contractAddress");
    } else {
      this.set("contractAddress", Value.fromString(value as string));
    }
  }

  get key(): Bytes | null {
    let value = this.get("key");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set key(value: Bytes | null) {
    if (value === null) {
      this.unset("key");
    } else {
      this.set("key", Value.fromBytes(value as Bytes));
    }
  }
}

export class ReportingFeeChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReportingFeeChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReportingFeeChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReportingFeeChanged", id.toString(), this);
  }

  static load(id: string): ReportingFeeChanged | null {
    return store.get("ReportingFeeChanged", id) as ReportingFeeChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get reportingFee(): string {
    let value = this.get("reportingFee");
    return value.toString();
  }

  set reportingFee(value: string) {
    this.set("reportingFee", Value.fromString(value));
  }
}

export class ReportingParticipantDisavowed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ReportingParticipantDisavowed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReportingParticipantDisavowed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReportingParticipantDisavowed", id.toString(), this);
  }

  static load(id: string): ReportingParticipantDisavowed | null {
    return store.get(
      "ReportingParticipantDisavowed",
      id
    ) as ReportingParticipantDisavowed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get reportingParticipant(): string | null {
    let value = this.get("reportingParticipant");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reportingParticipant(value: string | null) {
    if (value === null) {
      this.unset("reportingParticipant");
    } else {
      this.set("reportingParticipant", Value.fromString(value as string));
    }
  }
}

export class ShareTokenBalanceChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ShareTokenBalanceChanged entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ShareTokenBalanceChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ShareTokenBalanceChanged", id.toString(), this);
  }

  static load(id: string): ShareTokenBalanceChanged | null {
    return store.get(
      "ShareTokenBalanceChanged",
      id
    ) as ShareTokenBalanceChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get outcome(): string {
    let value = this.get("outcome");
    return value.toString();
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }

  get balance(): string {
    let value = this.get("balance");
    return value.toString();
  }

  set balance(value: string) {
    this.set("balance", Value.fromString(value));
  }
}

export class TimestampSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TimestampSet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TimestampSet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TimestampSet", id.toString(), this);
  }

  static load(id: string): TimestampSet | null {
    return store.get("TimestampSet", id) as TimestampSet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get newTimestamp(): string {
    let value = this.get("newTimestamp");
    return value.toString();
  }

  set newTimestamp(value: string) {
    this.set("newTimestamp", Value.fromString(value));
  }
}

export class TokenBalanceChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenBalanceChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenBalanceChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenBalanceChanged", id.toString(), this);
  }

  static load(id: string): TokenBalanceChanged | null {
    return store.get("TokenBalanceChanged", id) as TokenBalanceChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get tokenType(): string {
    let value = this.get("tokenType");
    return value.toString();
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get balance(): string {
    let value = this.get("balance");
    return value.toString();
  }

  set balance(value: string) {
    this.set("balance", Value.fromString(value));
  }

  get outcome(): string {
    let value = this.get("outcome");
    return value.toString();
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }
}

export class TokensBurned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokensBurned entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokensBurned entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokensBurned", id.toString(), this);
  }

  static load(id: string): TokensBurned | null {
    return store.get("TokensBurned", id) as TokensBurned | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get target(): string | null {
    let value = this.get("target");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set target(value: string | null) {
    if (value === null) {
      this.unset("target");
    } else {
      this.set("target", Value.fromString(value as string));
    }
  }

  get amount(): string {
    let value = this.get("amount");
    return value.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get tokenType(): string {
    let value = this.get("tokenType");
    return value.toString();
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get totalSupply(): string {
    let value = this.get("totalSupply");
    return value.toString();
  }

  set totalSupply(value: string) {
    this.set("totalSupply", Value.fromString(value));
  }
}

export class TokensMinted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokensMinted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokensMinted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokensMinted", id.toString(), this);
  }

  static load(id: string): TokensMinted | null {
    return store.get("TokensMinted", id) as TokensMinted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get target(): string | null {
    let value = this.get("target");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set target(value: string | null) {
    if (value === null) {
      this.unset("target");
    } else {
      this.set("target", Value.fromString(value as string));
    }
  }

  get amount(): string {
    let value = this.get("amount");
    return value.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get tokenType(): string {
    let value = this.get("tokenType");
    return value.toString();
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get totalSupply(): string {
    let value = this.get("totalSupply");
    return value.toString();
  }

  set totalSupply(value: string) {
    this.set("totalSupply", Value.fromString(value));
  }
}

export class TokensTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokensTransferred entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokensTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokensTransferred", id.toString(), this);
  }

  static load(id: string): TokensTransferred | null {
    return store.get("TokensTransferred", id) as TokensTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get tokenType(): string {
    let value = this.get("tokenType");
    return value.toString();
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }
}

export class TradingProceedsClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TradingProceedsClaimed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradingProceedsClaimed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradingProceedsClaimed", id.toString(), this);
  }

  static load(id: string): TradingProceedsClaimed | null {
    return store.get(
      "TradingProceedsClaimed",
      id
    ) as TradingProceedsClaimed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get outcome(): string {
    let value = this.get("outcome");
    return value.toString();
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }

  get numShares(): string {
    let value = this.get("numShares");
    return value.toString();
  }

  set numShares(value: string) {
    this.set("numShares", Value.fromString(value));
  }

  get numPayoutTokens(): string {
    let value = this.get("numPayoutTokens");
    return value.toString();
  }

  set numPayoutTokens(value: string) {
    this.set("numPayoutTokens", Value.fromString(value));
  }

  get fees(): string {
    let value = this.get("fees");
    return value.toString();
  }

  set fees(value: string) {
    this.set("fees", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class UniverseCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniverseCreated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniverseCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniverseCreated", id.toString(), this);
  }

  static load(id: string): UniverseCreated | null {
    return store.get("UniverseCreated", id) as UniverseCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get parentUniverse(): string | null {
    let value = this.get("parentUniverse");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parentUniverse(value: string | null) {
    if (value === null) {
      this.unset("parentUniverse");
    } else {
      this.set("parentUniverse", Value.fromString(value as string));
    }
  }

  get childUniverse(): string | null {
    let value = this.get("childUniverse");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set childUniverse(value: string | null) {
    if (value === null) {
      this.unset("childUniverse");
    } else {
      this.set("childUniverse", Value.fromString(value as string));
    }
  }

  get payoutNumerators(): Array<string> {
    let value = this.get("payoutNumerators");
    return value.toStringArray();
  }

  set payoutNumerators(value: Array<string>) {
    this.set("payoutNumerators", Value.fromStringArray(value));
  }

  get creationTimestamp(): string {
    let value = this.get("creationTimestamp");
    return value.toString();
  }

  set creationTimestamp(value: string) {
    this.set("creationTimestamp", Value.fromString(value));
  }
}

export class UniverseForked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniverseForked entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniverseForked entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniverseForked", id.toString(), this);
  }

  static load(id: string): UniverseForked | null {
    return store.get("UniverseForked", id) as UniverseForked | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get forkingMarket(): string | null {
    let value = this.get("forkingMarket");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set forkingMarket(value: string | null) {
    if (value === null) {
      this.unset("forkingMarket");
    } else {
      this.set("forkingMarket", Value.fromString(value as string));
    }
  }
}

export class ValidityBondChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ValidityBondChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ValidityBondChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ValidityBondChanged", id.toString(), this);
  }

  static load(id: string): ValidityBondChanged | null {
    return store.get("ValidityBondChanged", id) as ValidityBondChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get validityBond(): string {
    let value = this.get("validityBond");
    return value.toString();
  }

  set validityBond(value: string) {
    this.set("validityBond", Value.fromString(value));
  }
}

export class WarpSyncDataUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WarpSyncDataUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WarpSyncDataUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WarpSyncDataUpdated", id.toString(), this);
  }

  static load(id: string): WarpSyncDataUpdated | null {
    return store.get("WarpSyncDataUpdated", id) as WarpSyncDataUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get warpSyncHash(): string {
    let value = this.get("warpSyncHash");
    return value.toString();
  }

  set warpSyncHash(value: string) {
    this.set("warpSyncHash", Value.fromString(value));
  }

  get marketEndTime(): string {
    let value = this.get("marketEndTime");
    return value.toString();
  }

  set marketEndTime(value: string) {
    this.set("marketEndTime", Value.fromString(value));
  }
}

export class CancelZeroXOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CancelZeroXOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CancelZeroXOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CancelZeroXOrder", id.toString(), this);
  }

  static load(id: string): CancelZeroXOrder | null {
    return store.get("CancelZeroXOrder", id) as CancelZeroXOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get outcome(): string {
    let value = this.get("outcome");
    return value.toString();
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }

  get price(): string {
    let value = this.get("price");
    return value.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get orderType(): string {
    let value = this.get("orderType");
    return value.toString();
  }

  set orderType(value: string) {
    this.set("orderType", Value.fromString(value));
  }

  get orderHash(): Bytes | null {
    let value = this.get("orderHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set orderHash(value: Bytes | null) {
    if (value === null) {
      this.unset("orderHash");
    } else {
      this.set("orderHash", Value.fromBytes(value as Bytes));
    }
  }
}

export class MarketVolumeChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketVolumeChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketVolumeChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketVolumeChanged", id.toString(), this);
  }

  static load(id: string): MarketVolumeChanged | null {
    return store.get("MarketVolumeChanged", id) as MarketVolumeChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get volume(): string {
    let value = this.get("volume");
    return value.toString();
  }

  set volume(value: string) {
    this.set("volume", Value.fromString(value));
  }

  get outcomeVolumes(): Array<string> {
    let value = this.get("outcomeVolumes");
    return value.toStringArray();
  }

  set outcomeVolumes(value: Array<string>) {
    this.set("outcomeVolumes", Value.fromStringArray(value));
  }

  get totalTrades(): string {
    let value = this.get("totalTrades");
    return value.toString();
  }

  set totalTrades(value: string) {
    this.set("totalTrades", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class OrderEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OrderEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OrderEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OrderEvent", id.toString(), this);
  }

  static load(id: string): OrderEvent | null {
    return store.get("OrderEvent", id) as OrderEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get eventType(): string {
    let value = this.get("eventType");
    return value.toString();
  }

  set eventType(value: string) {
    this.set("eventType", Value.fromString(value));
  }

  get orderType(): string {
    let value = this.get("orderType");
    return value.toString();
  }

  set orderType(value: string) {
    this.set("orderType", Value.fromString(value));
  }

  get orderId(): Bytes | null {
    let value = this.get("orderId");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set orderId(value: Bytes | null) {
    if (value === null) {
      this.unset("orderId");
    } else {
      this.set("orderId", Value.fromBytes(value as Bytes));
    }
  }

  get tradeGroupId(): Bytes | null {
    let value = this.get("tradeGroupId");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tradeGroupId(value: Bytes | null) {
    if (value === null) {
      this.unset("tradeGroupId");
    } else {
      this.set("tradeGroupId", Value.fromBytes(value as Bytes));
    }
  }

  get addressData(): Array<string> {
    let value = this.get("addressData");
    return value.toStringArray();
  }

  set addressData(value: Array<string>) {
    this.set("addressData", Value.fromStringArray(value));
  }

  get uint256Data(): Array<string> {
    let value = this.get("uint256Data");
    return value.toStringArray();
  }

  set uint256Data(value: Array<string>) {
    this.set("uint256Data", Value.fromStringArray(value));
  }
}

export class ProfitLossChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProfitLossChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProfitLossChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProfitLossChanged", id.toString(), this);
  }

  static load(id: string): ProfitLossChanged | null {
    return store.get("ProfitLossChanged", id) as ProfitLossChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get universe(): string | null {
    let value = this.get("universe");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set universe(value: string | null) {
    if (value === null) {
      this.unset("universe");
    } else {
      this.set("universe", Value.fromString(value as string));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (value === null) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(value as string));
    }
  }

  get account(): string | null {
    let value = this.get("account");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (value === null) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(value as string));
    }
  }

  get outcome(): string {
    let value = this.get("outcome");
    return value.toString();
  }

  set outcome(value: string) {
    this.set("outcome", Value.fromString(value));
  }

  get netPosition(): string {
    let value = this.get("netPosition");
    return value.toString();
  }

  set netPosition(value: string) {
    this.set("netPosition", Value.fromString(value));
  }

  get avgPrice(): string {
    let value = this.get("avgPrice");
    return value.toString();
  }

  set avgPrice(value: string) {
    this.set("avgPrice", Value.fromString(value));
  }

  get realizedProfit(): string {
    let value = this.get("realizedProfit");
    return value.toString();
  }

  set realizedProfit(value: string) {
    this.set("realizedProfit", Value.fromString(value));
  }

  get frozenFunds(): string {
    let value = this.get("frozenFunds");
    return value.toString();
  }

  set frozenFunds(value: string) {
    this.set("frozenFunds", Value.fromString(value));
  }

  get realizedCost(): string {
    let value = this.get("realizedCost");
    return value.toString();
  }

  set realizedCost(value: string) {
    this.set("realizedCost", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class ParaAugurDeployFinished extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ParaAugurDeployFinished entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ParaAugurDeployFinished entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ParaAugurDeployFinished", id.toString(), this);
  }

  static load(id: string): ParaAugurDeployFinished | null {
    return store.get(
      "ParaAugurDeployFinished",
      id
    ) as ParaAugurDeployFinished | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get paraAugur(): string | null {
    let value = this.get("paraAugur");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paraAugur(value: string | null) {
    if (value === null) {
      this.unset("paraAugur");
    } else {
      this.set("paraAugur", Value.fromString(value as string));
    }
  }

  get shareToken(): string | null {
    let value = this.get("shareToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set shareToken(value: string | null) {
    if (value === null) {
      this.unset("shareToken");
    } else {
      this.set("shareToken", Value.fromString(value as string));
    }
  }

  get cash(): string | null {
    let value = this.get("cash");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cash(value: string | null) {
    if (value === null) {
      this.unset("cash");
    } else {
      this.set("cash", Value.fromString(value as string));
    }
  }

  get OINexus(): string | null {
    let value = this.get("OINexus");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set OINexus(value: string | null) {
    if (value === null) {
      this.unset("OINexus");
    } else {
      this.set("OINexus", Value.fromString(value as string));
    }
  }
}

export class ParaAugurTradingDeployed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ParaAugurTradingDeployed entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ParaAugurTradingDeployed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ParaAugurTradingDeployed", id.toString(), this);
  }

  static load(id: string): ParaAugurTradingDeployed | null {
    return store.get(
      "ParaAugurTradingDeployed",
      id
    ) as ParaAugurTradingDeployed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get paraAugur(): string | null {
    let value = this.get("paraAugur");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paraAugur(value: string | null) {
    if (value === null) {
      this.unset("paraAugur");
    } else {
      this.set("paraAugur", Value.fromString(value as string));
    }
  }

  get cash(): string | null {
    let value = this.get("cash");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cash(value: string | null) {
    if (value === null) {
      this.unset("cash");
    } else {
      this.set("cash", Value.fromString(value as string));
    }
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ApprovalForAll entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ApprovalForAll entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ApprovalForAll", id.toString(), this);
  }

  static load(id: string): ApprovalForAll | null {
    return store.get("ApprovalForAll", id) as ApprovalForAll | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get operator(): string | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operator(value: string | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromString(value as string));
    }
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class TransferBatch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferBatch entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferBatch entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferBatch", id.toString(), this);
  }

  static load(id: string): TransferBatch | null {
    return store.get("TransferBatch", id) as TransferBatch | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get operator(): string | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operator(value: string | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromString(value as string));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get ids(): Array<string> {
    let value = this.get("ids");
    return value.toStringArray();
  }

  set ids(value: Array<string>) {
    this.set("ids", Value.fromStringArray(value));
  }

  get values(): Array<string> {
    let value = this.get("values");
    return value.toStringArray();
  }

  set values(value: Array<string>) {
    this.set("values", Value.fromStringArray(value));
  }
}

export class TransferSingle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferSingle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferSingle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferSingle", id.toString(), this);
  }

  static load(id: string): TransferSingle | null {
    return store.get("TransferSingle", id) as TransferSingle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get operator(): string | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operator(value: string | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromString(value as string));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class URI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save URI entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save URI entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("URI", id.toString(), this);
  }

  static load(id: string): URI | null {
    return store.get("URI", id) as URI | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockHash(): string {
    let value = this.get("blockHash");
    return value.toString();
  }

  set blockHash(value: string) {
    this.set("blockHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get logIndex(): string {
    let value = this.get("logIndex");
    return value.toString();
  }

  set logIndex(value: string) {
    this.set("logIndex", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}
