(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var immutableDelete = require("immutable-delete");
  var augurNode = require("../augur-node");
  var constants = require("../constants");
  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.address an account address.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called when the transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if the transaction completes successfully.
   * @param {function} p.onFailed Called if the transaction fails.
   */
  function approveAugur(p) {
    augurNode.getSyncData(function (err, contractsInfo) {
      if (err) return p.onFailed(err);
      var augurContract = contractsInfo.addresses.Augur;
      api().Cash.allowance({ _owner: p.address, _spender: augurContract }, function (err, allowance) {
        if (err) return p.onFailed(err);
        if (new BigNumber(allowance, 10).gte(new BigNumber(constants.ETERNAL_APPROVAL_VALUE, 16))) {
          return p.onSuccess(null);
        }
        api().Cash.approve(Object.assign({}, immutableDelete(p, "address"), {
          _spender: augurContract,
          _value: constants.ETERNAL_APPROVAL_VALUE
        }));
      });
    });
  }

  module.exports = approveAugur;
  },{"../api":7,"../augur-node":17,"../constants":31,"bignumber.js":157,"immutable-delete":377}],2:[function(require,module,exports){
  "use strict";

  /**
   * @typedef {Object} AccountTransfer
   * @property {string} transactionHash Hash returned by token transfer.
   * @property {number} logIndex Number of the log index position in the Ethereum block containing the transfer.
   * @property {number} creationBlockNumber Number of the Ethereum block containing the transfer.
   * @property {string} blockHash Hash of the Ethereum block containing the transfer.
   * @property {number} creationTime Timestamp, in seconds, when the Ethereum block containing the transfer was created.
   * @property {string|null} sender Ethereum address of the token sender. If null, this indicates that new tokens were minted and sent to the user.
   * @property {string|null} recipient Ethereum address of the token recipient. If null, this indicates that tokens were burned (i.e., destroyed).
   * @property {string} token Contract address of the contract for the sent token, as a hexadecimal string.
   * @property {number} value Quantity of tokens sent.
   * @property {string|null} symbol Token symbol (if any).
   * @property {number|null} outcome Market outcome with which the token is associated (if any).
   * @property {string|null} marketId Contract address of the market in which the tranfer took place, as a hexadecimal string (if any).
   */

  var augurNode = require("../augur-node");

  /**
   * Returns the token transfers made to or from a specific Ethereum address. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.account Ethereum address of the account for which to get transfer history, as a hexadecimal string.
   * @param {string=} p.token Contract address of the token contract by which to limit the history results, as a hexadecimal string.
   * @param {number=} p.earliestCreationTime Earliest timestamp, in seconds, at which to truncate history results. (This timestamp is when the block on the Ethereum blockchain containing the transfer was created.)
   * @param {number=} p.latestCreationTime Latest timestamp, in seconds, at which to truncate history results. (This timestamp is when the block on the Ethereum blockchain containing the transfer was created.)
   * @param {string=} p.sortBy Field name by which to sort transfer history.
   * @param {boolean=} p.isSortDescending Whether to sort transfers in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of transfers to return.
   * @param {string=} p.offset Number of transfers to truncate from the beginning of the history results.
   * @param {function} callback Called after the account transfer history has been retrieved.
   * @return {AccountTransfer[]} Array representing the account's transfer history.
   */
  function getAccountTransferHistory(p, callback) {
    augurNode.submitRequest("getAccountTransferHistory", p, callback);
  }

  module.exports = getAccountTransferHistory;
  },{"../augur-node":17}],3:[function(require,module,exports){
  "use strict";

  module.exports = {
    getAccountTransferHistory: require("./get-account-transfer-history"),
    approveAugur: require("./approve-augur")
  };
  },{"./approve-augur":1,"./get-account-transfer-history":2}],4:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var encodeTransactionInputs = require("./encode-transaction-inputs");
  var ethrpc = require("../rpc-interface");
  var isFunction = require("../utils/is-function");
  var isObject = require("../utils/is-object");
  var getGasPrice = require("../get-gas-price");

  function bindContractFunction(functionAbi) {
    return function () {
      var payload = assign({}, functionAbi);
      if (arguments && arguments.length) {
        var params = Array.prototype.slice.call(arguments);
        if (payload.constant || params[0] != null && params[0].tx != null && params[0].tx.send === false) {
          if (params != null && isObject(params[0])) {
            payload.params = encodeTransactionInputs(params[0], payload.inputs, payload.signature);
            if (isObject(params[0].meta) && params[0].meta.address) assign(payload, { from: params[0].meta.address });
            if (isObject(params[0].tx)) assign(payload, { from: (params[0].meta || {}).address }, params[0].tx);
          }
          var callback = isFunction(params[params.length - 1]) ? params.pop() : undefined;
          var callPromise = new Promise(function (resolve, reject) {
            return ethrpc.callContractFunction(payload, function (err, response) {
              if (err) return reject(err);
              if (response == null) return reject(new Error("Null eth_call response"));
              resolve(response);
            });
          }).then(function (response) {
            if (callback) callback(null, response);
            return response;
          }).catch(function (err) {
            if (callback) return callback(err);
            throw err;
          });
          return callPromise;
        }
      }
      var onSent, onSuccess, onFailed, signer, accountType;
      if (params != null && isObject(params[0])) {
        onSent = params[0].onSent;
        onSuccess = params[0].onSuccess;
        onFailed = params[0].onFailed;
        payload.params = encodeTransactionInputs(params[0], payload.inputs, payload.signature);
        if (isObject(params[0].meta) && params[0].meta.address) assign(payload, { from: params[0].meta.address });
        if (isObject(params[0].tx)) assign(payload, params[0].tx);
        signer = (params[0].meta || {}).signer;
        accountType = (params[0].meta || {}).accountType;
      }
      var transactSuccessPromise = new Promise(function (resolve, reject) {
        var transact = function transact() {
          ethrpc.transact(payload, signer, accountType, onSent, resolve, reject);
        };
        if (params[0].gasPrice == null && getGasPrice.get()) {
          getGasPrice.get()(function (gasPrice) {
            payload.gasPrice = gasPrice;
            transact();
          });
          return;
        }
        transact();
      }).then(function (response) {
        if (onSuccess) onSuccess(response);
        return response;
      }).catch(function (err) {
        if (onFailed) return onFailed(err);
        throw err;
      });
      return transactSuccessPromise;
    };
  }

  module.exports = bindContractFunction;
  },{"../get-gas-price":64,"../rpc-interface":87,"../utils/is-function":139,"../utils/is-object":140,"./encode-transaction-inputs":5,"lodash":420}],5:[function(require,module,exports){
  "use strict";

  var transactionInputEncoders = require("./transaction-input-encoders");

  function encodeTransactionInputs(p, inputs, signature) {
    var numInputs = Array.isArray(inputs) && inputs.length ? inputs.length : 0;
    if (!numInputs) return [];
    var encodedTransactionInputs = new Array(numInputs);
    for (var i = 0; i < numInputs; ++i) {
      encodedTransactionInputs[i] = transactionInputEncoders[signature[i]] ? transactionInputEncoders[signature[i]](p[inputs[i]]) : p[inputs[i]];
    }
    return encodedTransactionInputs;
  }

  module.exports = encodeTransactionInputs;
  },{"./transaction-input-encoders":8}],6:[function(require,module,exports){
  "use strict";

  var bindContractFunction = require("./bind-contract-function");

  function generateContractApi(functionsAbi) {
    return Object.keys(functionsAbi).reduce(function (p, contractName) {
      p[contractName] = {};
      Object.keys(functionsAbi[contractName]).map(function (functionName) {
        p[contractName][functionName] = bindContractFunction(functionsAbi[contractName][functionName]);
      });
      return p;
    }, {});
  }

  module.exports = generateContractApi;
  },{"./bind-contract-function":4}],7:[function(require,module,exports){
  /**
   * Direct no-frills bindings to Augur's contract API.
   *  - Parameter positions and types are the same as the underlying
   *    contract method's parameters.
   *  - Parameters should be passed in exactly as they would be
   *    passed to the contract method (e.g., if the contract method
   *    expects a fixed-point number, you must do that conversion
   *    yourself and pass the fixed-point number in).
   */

  "use strict";

  var generateContractApi = require("./generate-contract-api");

  var api = generateContractApi(require("../contracts").abi.functions);

  function getAPI() {
    return api;
  }

  getAPI.generateContractApi = function (functionsAbi) {
    api = generateContractApi(functionsAbi);
    return api;
  };

  module.exports = getAPI;
  },{"../contracts":34,"./generate-contract-api":6}],8:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");

  module.exports = {
    address: speedomatic.formatEthereumAddress.bind(speedomatic),
    int256: speedomatic.formatInt256.bind(speedomatic),
    uint256: speedomatic.formatInt256.bind(speedomatic),
    bytes32: speedomatic.formatInt256.bind(speedomatic),
    "address[]": speedomatic.formatEthereumAddress.bind(speedomatic),
    "int256[]": speedomatic.formatInt256.bind(speedomatic),
    "uint256[]": speedomatic.formatInt256.bind(speedomatic),
    "bytes32[]": speedomatic.formatInt256.bind(speedomatic)
  };
  },{"speedomatic":492}],9:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var speedomatic = require("speedomatic");
  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.etherToDeposit Amount of Ether to convert to "wrapped Ether" (AKA Ether tokens), as a base-10 string.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the transaction fails.
   */
  function depositEther(p) {
    return api().Cash.depositEther(assign({}, p, {
      tx: assign({ value: speedomatic.fix(p.etherToDeposit, "hex") }, p.tx)
    }));
  }

  module.exports = depositEther;
  },{"../api":7,"lodash":420,"speedomatic":492}],10:[function(require,module,exports){
  "use strict";

  module.exports = {
    depositEther: require("./deposit-ether"),
    sendEther: require("./send-ether"),
    sendReputation: require("./send-reputation")
  };
  },{"./deposit-ether":9,"./send-ether":11,"./send-reputation":12}],11:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");
  var ethrpc = require("../rpc-interface");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.etherToSend Amount of Ether to send, as a base-10 string.
   * @param {string} p.to Ethereum address of the recipient, as a hexadecimal string.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the transaction fails.
   */
  function sendEther(p) {
    return ethrpc.transact({
      from: p.from,
      to: p.to,
      value: speedomatic.fix(p.etherToSend, "hex"),
      returns: "null",
      gas: "0xcf08"
    }, p.meta.signer, p.meta.accountType, p.onSent, p.onSuccess, p.onFailed);
  }

  module.exports = sendEther;
  },{"../rpc-interface":87,"speedomatic":492}],12:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var speedomatic = require("speedomatic");
  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.universe The universe of Reputation to use.
   * @param {string} p.reputationToSend Amount of Reputation to send, as a base-10 string.
   * @param {string} p._to Ethereum address of the recipient, as a hexadecimal string.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the transaction fails.
   */
  function sendReputation(p) {
    api().Universe.getReputationToken({ tx: { to: p.universe } }, function (err, reputationTokenAddress) {
      if (err) return p.onFailed(err);
      api().ReputationToken.transfer(assign({}, p, {
        tx: { to: reputationTokenAddress },
        _to: p._to,
        _value: speedomatic.fix(p.reputationToSend, "hex")
      }));
    });
  }

  module.exports = sendReputation;
  },{"../api":7,"lodash":420,"speedomatic":492}],13:[function(require,module,exports){
  "use strict";

  var augurNodeState = require("./state");
  var dispatchJsonRpcResponse = require("./dispatch-json-rpc-response");
  var WsTransport = require("../rpc-interface").WsTransport;

  function connect(augurNodeUrl, callback) {
    new WsTransport(augurNodeUrl, 100, 0, {}, dispatchJsonRpcResponse, function (err, transport) {
      if (err) return callback(err);
      augurNodeState.setTransport(transport);
      callback(null, transport);
    });
  }

  module.exports = connect;
  },{"../rpc-interface":87,"./dispatch-json-rpc-response":15,"./state":18}],14:[function(require,module,exports){
  "use strict";

  var augurNodeState = require("./state");

  function disconnect() {
    if (augurNodeState.getTransport() !== null) augurNodeState.getTransport().close();
  }

  module.exports = disconnect;
  },{"./state":18}],15:[function(require,module,exports){
  "use strict";

  var augurNodeState = require("./state");
  var isFunction = require("../utils/is-function");
  var isObject = require("../utils/is-object");

  function dispatchJsonRpcResponse(err, jsonRpcResponse) {
    if (err) throw err;
    if (!jsonRpcResponse || !isObject(jsonRpcResponse) || jsonRpcResponse.id === undefined) {
      throw new Error("Bad JSON RPC response received:" + JSON.stringify(jsonRpcResponse));
    }

    var callback, result;
    if (jsonRpcResponse.id !== null) {
      callback = augurNodeState.getCallback(jsonRpcResponse.id);
      augurNodeState.removeCallback(jsonRpcResponse.id);
      result = jsonRpcResponse.result;
    } else if (jsonRpcResponse.result.subscription) {
      callback = augurNodeState.getEventCallback(jsonRpcResponse.result.subscription);
      result = jsonRpcResponse.result.result;
    } else {
      throw new Error("Bad JSON RPC response received:" + JSON.stringify(jsonRpcResponse));
    }

    if (!isFunction(callback)) {
      throw new Error("Callback not found for JSON RPC response:" + JSON.stringify(jsonRpcResponse));
    }

    if (jsonRpcResponse.error) {
      callback(jsonRpcResponse.error);
    } else if (result !== undefined) {
      callback(null, result);
    } else {
      callback("Bad JSON RPC response received:" + JSON.stringify(jsonRpcResponse));
    }
  }

  module.exports = dispatchJsonRpcResponse;
  },{"../utils/is-function":139,"../utils/is-object":140,"./state":18}],16:[function(require,module,exports){
  "use strict";

  var submitRequest = require("./submit-json-rpc-request");
  /**
   * Returns the version and contract address set from augur-node. Requires an Augur Node connection.
   * @param {function} callback Called after the version and contract addresses have been retrieved.
   * @return {Object} Object containing version and addresses.
   */
  function getSyncData(callback) {
    submitRequest("getSyncData", null, callback);
  }

  module.exports = getSyncData;
  },{"./submit-json-rpc-request":19}],17:[function(require,module,exports){
  "use strict";

  module.exports = {
    connect: require("./connect"),
    disconnect: require("./disconnect"),
    getContractAddresses: require("./get-sync-data"),
    getSyncData: require("./get-sync-data"),
    submitRequest: require("./submit-json-rpc-request"),
    subscribeToEvent: require("./subscribe-to-event"),
    unsubcribeFromEvent: require("./unsubscribe-from-event"),
    unsubscribeFromAllEvents: require("./unsubscribe-from-all-events")
  };
  },{"./connect":13,"./disconnect":14,"./get-sync-data":16,"./submit-json-rpc-request":19,"./subscribe-to-event":20,"./unsubscribe-from-all-events":21,"./unsubscribe-from-event":22}],18:[function(require,module,exports){
  "use strict";

  var state = {
    numRequests: 0,
    jsonRpcCallbacks: {},
    jsonRpcEventCallbacks: {},
    transport: null
  };

  module.exports.incrementNumRequests = function () {
    state.numRequests++;
  };

  module.exports.setCallback = function (id, callback) {
    state.jsonRpcCallbacks[id] = callback;
  };

  module.exports.getCallback = function (id) {
    return state.jsonRpcCallbacks[id];
  };

  module.exports.removeCallback = function (id) {
    delete state.jsonRpcCallbacks[id];
  };

  module.exports.setEventCallback = function (id, callback) {
    state.jsonRpcEventCallbacks[id] = callback;
  };

  module.exports.getEventCallback = function (id) {
    return state.jsonRpcEventCallbacks[id];
  };

  module.exports.getSubscribedEventNames = function () {
    return Object.keys(state.jsonRpcEventCallbacks);
  };

  module.exports.removeEventCallback = function (id) {
    delete state.jsonRpcEventCallbacks[id];
  };

  module.exports.setTransport = function (transport) {
    if (state.transport) state.transport.close();
    state.transport = transport;
  };

  module.exports.getNumRequests = function () {
    return state.numRequests;
  };

  module.exports.getTransport = function () {
    return state.transport;
  };
  },{}],19:[function(require,module,exports){
  "use strict";

  var augurNodeState = require("./state");

  function submitJsonRpcRequest(method, params, callback) {
    var transport = augurNodeState.getTransport();
    if (transport == null) {
      return callback(new Error("Not connected to augur-node, could not submit request " + method + " " + JSON.stringify(params)));
    }
    var id = augurNodeState.getNumRequests();
    augurNodeState.incrementNumRequests();
    augurNodeState.setCallback(id, callback);
    transport.submitWork({ id: id, jsonrpc: "2.0", method: method, params: params });
  }

  module.exports = submitJsonRpcRequest;
  },{"./state":18}],20:[function(require,module,exports){
  "use strict";

  var augurNodeState = require("./state");
  var submitJsonRpcRequest = require("./submit-json-rpc-request");

  function subscribeToEvent(eventName, subscriptionCallback, onComplete) {
    submitJsonRpcRequest("subscribe", [eventName], function (err, response) {
      if (err) return onComplete(err);
      augurNodeState.setEventCallback(response.subscription, subscriptionCallback);
      onComplete(null, response.subscription);
    });
  }

  module.exports = subscribeToEvent;
  },{"./state":18,"./submit-json-rpc-request":19}],21:[function(require,module,exports){
  "use strict";

  var async = require("async");
  var augurNodeState = require("./state");
  var unsubscribeFromEvent = require("./unsubscribe-from-event");

  function unsubscribeFromAllEvents(callback) {
    async.each(augurNodeState.getSubscribedEventNames(), function (eventName, nextEvent) {
      unsubscribeFromEvent(eventName, nextEvent);
    }, callback);
  }

  module.exports = unsubscribeFromAllEvents;
  },{"./state":18,"./unsubscribe-from-event":22,"async":153}],22:[function(require,module,exports){
  "use strict";

  var augurNodeState = require("./state");
  var submitJsonRpcRequest = require("./submit-json-rpc-request");

  function unsubscribeFromEvent(subscription, callback) {
    var params = [subscription];
    submitJsonRpcRequest("unsubscribe", params, function (err) {
      if (err) return callback(err);
      augurNodeState.removeEventCallback(subscription);
      console.log("Unsubscribed from " + subscription);
      callback(null);
    });
  }

  module.exports = unsubscribeFromEvent;
  },{"./state":18,"./submit-json-rpc-request":19}],23:[function(require,module,exports){
  "use strict";

  var setContracts = require("./set-contracts");
  var setFrom = require("./set-from");
  var setupEventsAbi = require("./setup-events-abi");
  var setupFunctionsAbi = require("./setup-functions-abi");
  var createEthrpcConfiguration = require("./create-ethrpc-configuration");
  var createConfiguration = require("./create-configuration");
  var isFunction = require("../utils/is-function");
  var noop = require("../utils/noop");

  function connectToEthereum(ethrpc, options, callback) {
    if (!isFunction(callback)) callback = noop;
    var configuration = createConfiguration(options || {});
    ethrpc.connect(createEthrpcConfiguration(configuration), function (err) {
      if (err) return callback(err);
      var contracts = setContracts(ethrpc.getNetworkID(), configuration.contracts);
      var eventsAbi = setupEventsAbi((configuration.abi || {}).events, contracts);
      var functionsAbi = setupFunctionsAbi(setFrom((configuration.abi || {}).functions, ethrpc.getCoinbase()), contracts);
      callback(null, contracts, functionsAbi, eventsAbi);
    });
  }

  module.exports = connectToEthereum;
  },{"../utils/is-function":139,"../utils/noop":145,"./create-configuration":24,"./create-ethrpc-configuration":25,"./set-contracts":27,"./set-from":28,"./setup-events-abi":29,"./setup-functions-abi":30}],24:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var cloneDeep = require("lodash").cloneDeep;

  // upgrade from old config (single address per type) to new config (array of addresses per type)
  function createConfiguration(options) {
    var configuration = assign({ contracts: {} }, cloneDeep(options));
    if (!Array.isArray(configuration.httpAddresses)) configuration.httpAddresses = [];
    if (!Array.isArray(configuration.wsAddresses)) configuration.wsAddresses = [];
    if (!Array.isArray(configuration.ipcAddresses)) configuration.ipcAddresses = [];
    if (typeof configuration.http === "string" && configuration.http !== "") configuration.httpAddresses.push(configuration.http);
    if (typeof configuration.ws === "string" && configuration.ws !== "") configuration.wsAddresses.push(configuration.ws);
    if (typeof configuration.ipc === "string" && configuration.ipc !== "") configuration.ipcAddresses.push(configuration.ipc);
    return configuration;
  }

  module.exports = createConfiguration;
  },{"lodash":420}],25:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;

  function defaultOutOfBandErrorHandler(err) {
    if (err) console.error(err);
  }

  function createEthrpcConfiguration(configuration) {
    return assign({}, configuration, {
      errorHandler: configuration.errorHandler || defaultOutOfBandErrorHandler
    });
  }

  module.exports = createEthrpcConfiguration;
  },{"lodash":420}],26:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var async = require("async");
  var ethrpc = require("ethrpc");
  var connectToEthereum = require("./connect-to-ethereum");
  var contractsForAllNetworks = require("../contracts");
  var api = require("../api");
  var events = require("../events");
  var rpcInterface = require("../rpc-interface");
  var _augurNode = require("../augur-node");
  var isFunction = require("../utils/is-function");
  var isObject = require("../utils/is-object");
  var noop = require("../utils/noop");
  var constants = require("../constants");

  /**
   * @param {ethereumNode, augurNode} connectOptions
   * @param callback {function=} Callback function.
   */
  function connect(connectOptions, callback) {
    if (!isFunction(callback)) callback = noop;
    if (!isObject(connectOptions)) {
      return callback(new Error("Connection info required, e.g. { ethereumNode: { http: \"http://ethereum.node.url\", ws: \"ws://ethereum.node.websocket\" }, augurNode: \"ws://augur.node.websocket\" }"));
    }
    var self = this;
    var ethereumNodeConnectOptions = assign({}, connectOptions.ethereumNode || {}, {
      contracts: contractsForAllNetworks.addresses,
      startBlockStreamOnConnect: (connectOptions.ethereumNode || {}).startBlockStreamOnConnect || connectOptions.startBlockStreamOnConnect,
      abi: contractsForAllNetworks.abi,
      httpAddresses: [],
      wsAddresses: [],
      ipcAddresses: [],
      websocketClientConfig: {
        maxReceivedFrameSize: constants.MAX_WEBSOCKET_FRAME_SIZE,
        maxReceivedMessageSize: constants.MAX_WEBSOCKET_FRAME_SIZE
      },
      propagationDelayWaitMillis: connectOptions.propagationDelayWaitMillis,
      maxRetries: connectOptions.maxRetries,
      useWeb3Transport: connectOptions.useWeb3Transport || false
    });
    if (isObject(connectOptions.ethereumNode)) {
      if (connectOptions.ethereumNode.http) {
        ethereumNodeConnectOptions.httpAddresses = [connectOptions.ethereumNode.http];
      } else if (connectOptions.ethereumNode.httpAddresses) {
        ethereumNodeConnectOptions.httpAddresses = connectOptions.ethereumNode.httpAddresses;
      }
      if (connectOptions.ethereumNode.wsAddresses) {
        ethereumNodeConnectOptions.wsAddresses = connectOptions.ethereumNode.wsAddresses;
      } else if (connectOptions.ethereumNode.ws) {
        ethereumNodeConnectOptions.wsAddresses = [connectOptions.ethereumNode.ws];
      }
      if (connectOptions.ethereumNode.ipcAddresses) {
        ethereumNodeConnectOptions.ipcAddresses = connectOptions.ethereumNode.ipcAddresses;
      } else if (connectOptions.ethereumNode.ipc) {
        ethereumNodeConnectOptions.ipcAddresses = [connectOptions.ethereumNode.ipc];
      }
      if (connectOptions.ethereumNode.networkId) {
        ethereumNodeConnectOptions.networkId = connectOptions.ethereumNode.networkId;
      }
      if (!connectOptions.ethereumNode.connectionTimeout) {
        ethereumNodeConnectOptions.connectionTimeout = constants.DEFAULT_CONNECTION_TIMEOUT;
      }
    }
    async.parallel({
      augurNode: function augurNode(next) {
        console.log("connecting to augur-node:", connectOptions.augurNode);
        if (!connectOptions.augurNode) return next(null);
        _augurNode.connect(connectOptions.augurNode, function (err, transport) {
          if (err) {
            console.warn("could not connect to augur-node at", connectOptions.augurNode, err);
            return next(null);
          }
          transport.addReconnectListener(function () {
            events.nodes.augur.emit("reconnect");
          });
          transport.addDisconnectListener(function (event) {
            events.nodes.augur.emit("disconnect", event);
          });
          console.log("connected to augur");
          next(null, connectOptions.augurNode);
        });
      },
      ethereumNode: function ethereumNode(next) {
        console.log("connecting to ethereum-node:", JSON.stringify(connectOptions.ethereumNode));
        if (!connectOptions.ethereumNode) return next(null);
        connectToEthereum(ethrpc, ethereumNodeConnectOptions, function (err, contracts, functionsAbi, eventsAbi) {
          if (err) {
            console.warn("could not connect to ethereum-node at", JSON.stringify(connectOptions.ethereumNode), err);
            return next(null);
          }
          console.log("connected to ethereum");
          self.api = api.generateContractApi(functionsAbi);
          self.rpc = rpcInterface.createRpcInterface(ethrpc);
          self.getGasPrice = undefined;
          ethrpc.getTransport().addReconnectListener(function () {
            events.nodes.ethereum.emit("reconnect");
          });
          ethrpc.getTransport().addDisconnectListener(function (event) {
            events.nodes.ethereum.emit("disconnect", event);
          });
          next(null, {
            contracts: contracts || contractsForAllNetworks.addresses[constants.DEFAULT_NETWORK_ID],
            abi: { functions: functionsAbi, events: eventsAbi }
          });
        });
      }
    }, function (_, connectionInfo) {
      if (!connectionInfo.augurNode && !connectionInfo.ethereumNode) return callback(new Error("Connection failed"));
      callback(null, connectionInfo);
    });
  }

  module.exports = connect;
  },{"../api":7,"../augur-node":17,"../constants":31,"../contracts":34,"../events":49,"../rpc-interface":87,"../utils/is-function":139,"../utils/is-object":140,"../utils/noop":145,"./connect-to-ethereum":23,"async":153,"ethrpc":273,"lodash":420}],27:[function(require,module,exports){
  "use strict";

  function setContracts(networkId, allContracts) {
    if (!allContracts.hasOwnProperty(networkId)) return {};
    return allContracts[networkId];
  }

  module.exports = setContracts;
  },{}],28:[function(require,module,exports){
  "use strict";

  function setFrom(functionsAbi, fromAddress) {
    if (!fromAddress || !functionsAbi) return functionsAbi;
    for (var contract in functionsAbi) {
      if (functionsAbi.hasOwnProperty(contract)) {
        for (var method in functionsAbi[contract]) {
          if (functionsAbi[contract].hasOwnProperty(method)) {
            functionsAbi[contract][method].from = fromAddress;
          }
        }
      }
    }
    return functionsAbi;
  }

  module.exports = setFrom;
  },{}],29:[function(require,module,exports){
  "use strict";

  function setupEventsAbi(eventsAbi, contracts) {
    if (!contracts || !eventsAbi) return eventsAbi;
    for (var contractName in eventsAbi) {
      if (eventsAbi.hasOwnProperty(contractName)) {
        var contractEventsAbi = eventsAbi[contractName];
        for (var eventName in contractEventsAbi) {
          if (contractEventsAbi.hasOwnProperty(eventName)) {
            eventsAbi[contractName][eventName].address = contracts[contractEventsAbi[eventName].contract];
          }
        }
      }
    }
    return eventsAbi;
  }

  module.exports = setupEventsAbi;
  },{}],30:[function(require,module,exports){
  "use strict";

  function setupFunctionsAbi(functionsAbi, contracts) {
    if (!contracts || !functionsAbi) return functionsAbi;
    for (var contract in functionsAbi) {
      if (functionsAbi.hasOwnProperty(contract)) {
        for (var method in functionsAbi[contract]) {
          if (functionsAbi[contract].hasOwnProperty(method)) {
            functionsAbi[contract][method].to = contracts[contract];
          }
        }
      }
    }
    return functionsAbi;
  }

  module.exports = setupFunctionsAbi;
  },{}],31:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  var ten = new BigNumber(10, 10);
  var decimals = new BigNumber(18, 10);
  var multiple = ten.exponentiatedBy(18);

  var SECONDS_PER_DAY = 3600 * 24;

  // Used to calculate how large a WebSocket frame we need to allow. This is a theoretical limit based on a block
  // being completely filled with Transfer transactions
  var MAX_LOG_BYTES_PER_BLOCK = 160000;

  var SUBSCRIPTION_EVENT_NAMES;
  (function (SUBSCRIPTION_EVENT_NAMES) {
    SUBSCRIPTION_EVENT_NAMES.COMPLETE_SETS_PURCHASED = "CompleteSetsPurchased";
    SUBSCRIPTION_EVENT_NAMES.COMPLETE_SETS_SOLD = "CompleteSetsSold";
    SUBSCRIPTION_EVENT_NAMES.DISPUTE_CROWDSOURCER_COMPLETED = "DisputeCrowdsourcerCompleted";
    SUBSCRIPTION_EVENT_NAMES.DISPUTE_CROWDSOURCER_CONTRIBUTION = "DisputeCrowdsourcerContribution";
    SUBSCRIPTION_EVENT_NAMES.DISPUTE_CROWDSOURCER_CREATED = "DisputeCrowdsourcerCreated";
    SUBSCRIPTION_EVENT_NAMES.DISPUTE_CROWDSOURCER_REDEEMED_LOG = "DisputeCrowdsourcerRedeemedLog";
    SUBSCRIPTION_EVENT_NAMES.FEE_WINDOW_CLOSED = "FeeWindowClosed";
    SUBSCRIPTION_EVENT_NAMES.FEE_WINDOW_CREATED = "FeeWindowCreated";
    SUBSCRIPTION_EVENT_NAMES.FEE_WINDOW_OPENED = "FeeWindowOpened";
    SUBSCRIPTION_EVENT_NAMES.FEE_WINDOW_REDEEMED = "FeeWindowRedeemed";
    SUBSCRIPTION_EVENT_NAMES.INITIAL_REPORT_SUBMITTED = "InitialReportSubmitted";
    SUBSCRIPTION_EVENT_NAMES.INITIAL_REPORT_REDEEMED = "InitialReporterRedeemed";
    SUBSCRIPTION_EVENT_NAMES.INITIAL_REPORT_TRANSFERRED = "InitialReporterTransferred";
    SUBSCRIPTION_EVENT_NAMES.MARKET_CREATED = "MarketCreated";
    SUBSCRIPTION_EVENT_NAMES.MARKET_FINALIZED = "MarketFinalized";
    SUBSCRIPTION_EVENT_NAMES.MARKET_MIGRATED = "MarketMigrated";
    SUBSCRIPTION_EVENT_NAMES.MARKET_STATE = "MarketState";
    SUBSCRIPTION_EVENT_NAMES.ORDER_CANCELLED = "OrderCanceled";
    SUBSCRIPTION_EVENT_NAMES.ORDER_CREATED = "OrderCreated";
    SUBSCRIPTION_EVENT_NAMES.ORDER_FILLED = "OrderFilled";
    SUBSCRIPTION_EVENT_NAMES.REPORTING_PARTICIPANT_DISAVOWED = "ReportingParticipantDisavowed";
    SUBSCRIPTION_EVENT_NAMES.SYNC_FINISHED = "SyncFinished";
    SUBSCRIPTION_EVENT_NAMES.TOKENS_TRANSFERRED = "TokensTransferred";
    SUBSCRIPTION_EVENT_NAMES.TRADING_PROCEEDS_CLAIMED = "TradingProceedsClaimed";
    SUBSCRIPTION_EVENT_NAMES.UNIVERSE_CREATED = "UniverseCreated";

    SUBSCRIPTION_EVENT_NAMES.BURN = "Burn";
    SUBSCRIPTION_EVENT_NAMES.TOKENS_BURNED = "TokensBurned";
    SUBSCRIPTION_EVENT_NAMES.APPROVAL = "Approval";
  })(SUBSCRIPTION_EVENT_NAMES || (SUBSCRIPTION_EVENT_NAMES = {}));

  module.exports = {
    AUGUR_UPLOAD_BLOCK_NUMBER: "0x1",

    BLOCKS_PER_CHUNK: 720, // 1/8 days worth. 60*60*24/15/8 (seconds*minutes*hours/blocks_per_second/8)

    CANCEL_ORDER_GAS: "0xC9860",

    CONTRACT_INTERVAL: {
      DESIGNATED_REPORTING_DURATION_SECONDS: 3 * SECONDS_PER_DAY,
      DISPUTE_ROUND_DURATION_SECONDS: 7 * SECONDS_PER_DAY,
      CLAIM_PROCEEDS_WAIT_TIME: 3 * SECONDS_PER_DAY,
      FORK_DURATION_SECONDS: 60 * SECONDS_PER_DAY
    },

    CONTRACT_TYPE: {
      DISPUTE_CROWDSOURCER: 0,
      INITIAL_REPORTER: 1,
      FEE_WINDOW: 2
    },

    DEFAULT_CONNECTION_TIMEOUT: 60000,

    DEFAULT_GASPRICE: 20000000000,

    DEFAULT_MAX_GAS: "0x5e3918",

    DEFAULT_NETWORK_ID: "3",

    DEFAULT_NUM_TICKS: {
      2: 10000,
      3: 10002,
      4: 10000,
      5: 10000,
      6: 10002,
      7: 10003,
      8: 10000
    },

    DEFAULT_SCALAR_TICK_SIZE: "0.0001",

    ETERNAL_APPROVAL_VALUE: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", // 2^256 - 1

    GET_LOGS_DEFAULT_FROM_BLOCK: "0x1",

    GET_LOGS_DEFAULT_TO_BLOCK: "latest",

    MAX_FILLS_PER_TX: new BigNumber("3", 10),

    MAX_GAS_LIMIT_FOR_TRADE: new BigNumber("3500000", 10),

    MAX_WEBSOCKET_FRAME_SIZE: 5760 * MAX_LOG_BYTES_PER_BLOCK, // Works out to under 1GB, extreme case but prevents error

    MINIMUM_TRADE_SIZE: new BigNumber("0.0001", 10),

    ORDER_STATE: {
      ALL: "ALL",
      OPEN: "OPEN",
      CLOSED: "CLOSED",
      CANCELED: "CANCELED"
    },

    // maximum number of transactions to auto-submit in parallel
    PARALLEL_LIMIT: 10,

    PLACE_ORDER_NO_SHARES: {
      2: new BigNumber("547694", 10),
      3: new BigNumber("562138", 10),
      4: new BigNumber("576582", 10),
      5: new BigNumber("591026", 10),
      6: new BigNumber("605470", 10),
      7: new BigNumber("619914", 10),
      8: new BigNumber("634358", 10)
    },

    PLACE_ORDER_WITH_SHARES: {
      2: new BigNumber("695034", 10),
      3: new BigNumber("794664", 10),
      4: new BigNumber("894294", 10),
      5: new BigNumber("993924", 10),
      6: new BigNumber("1093554", 10),
      7: new BigNumber("1193184", 10),
      8: new BigNumber("1292814", 10)
    },

    PRECISION: {
      decimals: decimals.toNumber(),
      limit: ten.dividedBy(multiple),
      zero: new BigNumber(1, 10).dividedBy(multiple),
      multiple: multiple
    },

    REPORTING_STATE: {
      PRE_REPORTING: "PRE_REPORTING",
      DESIGNATED_REPORTING: "DESIGNATED_REPORTING",
      OPEN_REPORTING: "OPEN_REPORTING",
      CROWDSOURCING_DISPUTE: "CROWDSOURCING_DISPUTE",
      AWAITING_NEXT_WINDOW: "AWAITING_NEXT_WINDOW",
      AWAITING_FINALIZATION: "AWAITING_FINALIZATION",
      FINALIZED: "FINALIZED",
      FORKING: "FORKING",
      AWAITING_NO_REPORT_MIGRATION: "AWAITING_NO_REPORT_MIGRATION",
      AWAITING_FORK_MIGRATION: "AWAITING_FORK_MIGRATION"
    },

    STAKE_TOKEN_STATE: {
      ALL: "ALL",
      UNCLAIMED: "UNCLAIMED",
      UNFINALIZED: "UNFINALIZED"
    },

    SUBSCRIPTION_EVENT_NAMES: SUBSCRIPTION_EVENT_NAMES,

    TRADE_GAS_BUFFER: new BigNumber("100000", 10),

    TRADE_GROUP_ID_NUM_BYTES: 32,

    WORST_CASE_FILL: {
      2: new BigNumber("933495", 10),
      3: new BigNumber("1172245", 10),
      4: new BigNumber("1410995", 10),
      5: new BigNumber("1649744", 10),
      6: new BigNumber("1888494", 10),
      7: new BigNumber("2127244", 10),
      8: new BigNumber("2365994", 10)
    },

    ZERO: new BigNumber(0)
  };
  },{"bignumber.js":157}],32:[function(require,module,exports){
  module.exports={
   "1": {
    "Controller": "0xb3337164e91b9f05c87c7662c7ac684e8e0ff3e7",
    "Universe": "0xe991247b78f937d7b69cfc00f1a487a293557677",
    "Augur": "0x75228dce4d82566d93068a8d5d49435216551599",
    "OrdersFinder": "0x01f2aba090b5fa26a64ea9e5afd32f6aab6ba3df",
    "LegacyReputationToken": "0xe94327d07fc17907b4db788e5adf2ed424addff6",
    "CancelOrder": "0x3448209268e97652bb67ea12777d4dfba81e3aaf",
    "Cash": "0xd5524179cb7ae012f5b642c1d6d700bbaa76b96b",
    "ClaimTradingProceeds": "0x4334477348222a986fc88a05410aa6b07507872a",
    "CompleteSets": "0xa6bff4f91016c2b4aac140b2d8d7317b36afe5ab",
    "CreateOrder": "0x7f27b0598949dbf9e539bbd217f15bf3f5e97999",
    "FillOrder": "0x39c230f89981274177e79708c921582bd4bd0303",
    "Order": "0x75d789ef6344579fbe75a4d2d9217ec23b005f8f",
    "Orders": "0xd7a14019aeeba25e676a1b596bb19b6f37db74d2",
    "OrdersFetcher": "0xa97a3e2ac932bc7a9c65393ee2c0f9d2f7b2e692",
    "ShareToken": "0x2a21d90745dfed999aa0b6e08d648855c5f14663",
    "Trade": "0x24e2b1d415e6e0d04042eaa45dc2a08fc33ca6cd",
    "TradingEscapeHatch": "0x10b5589fc6922f5c27061ac79ad9a4af35e15806"
   },
   "3": {
    "Controller": "0x20e776eaf1da267599351ab70c31150eb42f56b2",
    "Universe": "0x0fa391e2f459f2a5a47b2a255868230690eaf1b6",
    "Augur": "0x48f3e92c16c704fd7809294171316e0ee2fe5638",
    "OrdersFinder": "0x31928ca5154ef4ee1933efbafe5f2d75bfb8f2dd",
    "LegacyReputationToken": "0xe61cda8946653573adafef0491a44a129d05501d",
    "CancelOrder": "0x7bf74e42ba6f408631bd525deb0623b593c29ba7",
    "Cash": "0x36baa8996234c76e6e34fd128ff0a625f8c5d494",
    "ClaimTradingProceeds": "0x5dbebfa33648e15188ac23d46c36ee5871f28128",
    "CompleteSets": "0xa3b334e033f043c3375a719a2cc92cec67968714",
    "CreateOrder": "0xf7927145774fc2831017a479318a63d8ce69f288",
    "FillOrder": "0xd2331b2db9ba4741b184ce59ce3c7c48592e4264",
    "Order": "0x2ef262335577708e621a218c4d668aac1d2e623f",
    "Orders": "0xdd87911f3ea33f765aeb2d7b108c82cb3d861fb9",
    "OrdersFetcher": "0x703d7e1c17f2a9f2f2b62ed81181b1350302dffb",
    "ShareToken": "0x5db774964463d0bb61c370483df7e2947c4b2b2e",
    "Trade": "0x551bf22a98e55cb50b2ac21947c2ef8c566717fe",
    "TradingEscapeHatch": "0xb26d158daaf043cb583af23aa9d0af5aa734e0b7"
   },
   "4": {
    "Controller": "0xa702f45c3b1fd31793a409768bd3a0a91fad32bc",
    "Universe": "0x02149d40d255fceac54a3ee3899807b0539bad60",
    "Augur": "0x990b2d2af7e87cd015a607c3a95d7622c9bbede1",
    "OrdersFinder": "0xf8f15e2591881982183808e010626cb05152ff90",
    "LegacyReputationToken": "0x903e028cb6752c9079bcf1b6bfae182d873b4b23",
    "CancelOrder": "0x207fd3161632770367d4dbd251592d3a6f210bf8",
    "Cash": "0x2da4d465978981bd75bbac4c9f3bda10be0b465c",
    "ClaimTradingProceeds": "0x9e94fdea4aace8c61eeb1dc2d3c55bfc7b7e8739",
    "CompleteSets": "0x48fcc9d538b9c86ba9d35b3eb0e7f64ee2b4664f",
    "CreateOrder": "0xc32a16c3266d9af42ef0d32b4acf6b751accd903",
    "FillOrder": "0x038a54379de640fe99af06caacdb50075ffcc3af",
    "Order": "0xa63c56565abeb99ca635264dd3bf00e119336997",
    "Orders": "0xee9a27c699c510e1a70b3784d3743b3bcad3a0b1",
    "OrdersFetcher": "0x3861886c99cdf6abc9329682d2c05bf1be5b6777",
    "ShareToken": "0x4541dc5f016afba66b251695afbcc69eb014fa96",
    "Trade": "0x4b3a944ca8ce8117eba411b735bd12ea5c7b1b10",
    "TradingEscapeHatch": "0x3f16fab467d4bbca93c6a1a555c937b0a968791c"
   },
   "19": {
    "Controller": "0xa22f530ca257117ce9711ea7220ee5609eb1cc1b",
    "Universe": "0xa2cdd317554af818ebf402c5be7524cdb139b1f1",
    "Augur": "0xa288008a9cf447e552fd979d087589376a354fa4",
    "OrdersFinder": "0xdec0126af05fcc6c09188fc3901e2854232e1cb8",
    "LegacyReputationToken": "0xbae21ae6ee1de551bfa61ea08d1bf6f1a95efa0c",
    "CancelOrder": "0xa07c85c138782b59ef7025476ce58d4b57fa1a7a",
    "Cash": "0x3e51a67e1ee4e2faa70829eaf27f1918826a7e77",
    "ClaimTradingProceeds": "0xa100ffbbf63eb7777367f9aaa3dd3d8876e4e80b",
    "CompleteSets": "0x20e26126896408e591e621e25c2204bc34adec8e",
    "CreateOrder": "0x4584aa6033491b7ad1a7e6835fcf6fcc4c032736",
    "FillOrder": "0x084d66573f010adddfa6f7fb5d6605954ed41634",
    "Order": "0x6882c5476d6f6f520d86d9095bc8c5df69f5ef9b",
    "Orders": "0x04575ec4357537ca1add1c7e9d11450c90ce7974",
    "OrdersFetcher": "0xc4568deb4052a4187e0a5645db8d365110b96bed",
    "ShareToken": "0xd4c75cd8aa7cf58cee13d8dd58e6aaec2f69b59b",
    "Trade": "0x65a7fa6a751b3c78b341550d294391fb3460c146",
    "TradingEscapeHatch": "0xc4d494c838f2ef079938453955cc7c7a71c4aac5"
   },
   "42": {
    "Controller": "0x591b727c84ead2ea8bdb83cdd6e68f5c79bcab49",
    "Universe": "0xe0fb73227c37051611c3edc091d6858f2a230ffe",
    "Augur": "0x7660d67717e5665326c10b4c7a0a0fc9a6de66bc",
    "LegacyReputationToken": "0xf209d83e41cb2dafccdb71544e14f8a2fe6bfc74",
    "CancelOrder": "0xc849cfa5c9b4d53018134236cc3f685124853784",
    "Cash": "0xa265726f41b51bacb5d8e2907abceda9bc21b69b",
    "ClaimTradingProceeds": "0x3b537103720499c7e48565ccf5a08c8f7ce8df66",
    "CompleteSets": "0x42ecdbdb380ab0812ecfbe6dbd6a7fb022ef3e9f",
    "CreateOrder": "0xd39d66e88bc47783607eb1ca80fe4f1422150f4f",
    "FillOrder": "0xb2e1c0301dd703b9a55797d215294be7e2b1122f",
    "Order": "0xa912e71a01c754560a1ecf4f8fe3d32f0996efe2",
    "Orders": "0xe8a7cf63e73aee828b372802ba2dd717a4f0d6b0",
    "OrdersFetcher": "0xa76e6040dfdb42198fccd58d89e890e4670a88e7",
    "ShareToken": "0xc9d840dcebba8d4f493cd5a09d5c8f859f52591a",
    "Trade": "0xb0de64b40973fff9f4b82cecf7be2754329d3c07",
    "TradingEscapeHatch": "0x669c8504a7fbdd94e132ec246834607f36bbf44a"
   },
   "101": {
    "Controller": "0xfcaf25bf38e7c86612a25ff18cb8e09ab07c9885",
    "Universe": "0xf5fa9e803f10c099531047826b9de7bb34975da8",
    "Augur": "0x25ff5dc79a7c4e34254ff0f4a19d69e491201dd3",
    "LegacyReputationToken": "0xac80704c80ab83512b48314bdfa82f79923c2fbe",
    "CancelOrder": "0x8bdad8ee0b47e2e7294a5b8b8b74ea3968f4a177",
    "Cash": "0xd3a7c274e3e7b1990a9c23bec98adc2b7c448ac5",
    "ClaimTradingProceeds": "0x5e9529c5c5ac0a7e7258a18782bd31a148c55f4c",
    "CompleteSets": "0xce77d3c706e0fe6da5d71b1249756b5ea0d77202",
    "CreateOrder": "0x905419e7a1f96a973ab8988ba19c84135c6f7122",
    "FillOrder": "0x635c8ef61a07dfe49b683d1a34da3547b0d6705e",
    "Order": "0x4ddebcebe274751dfb129efc96a588a5242530ab",
    "Orders": "0x3a043108953aacf3505503867f8db7c1585577c7",
    "OrdersFetcher": "0xb03cf72bc5a9a344aac43534d664917927367487",
    "ShareToken": "0xf780694a2ea833fc85131b9de8af4e71f49e3e12",
    "Trade": "0xf3bcabd8fae29f75be271ebe2499edb4c7c139b7",
    "TradingEscapeHatch": "0x021076fb9adafcf83869435f9d72a5873869b4ad"
   },
   "102": {
    "Controller": "0xfcaf25bf38e7c86612a25ff18cb8e09ab07c9885",
    "Universe": "0x3d777ea1541a7dec004972b283d53af3633b7531",
    "Augur": "0x25ff5dc79a7c4e34254ff0f4a19d69e491201dd3",
    "OrdersFinder": "0xf28fc4b34a7c4534dd3e40e0ad5df6f2cb69aec0",
    "LegacyReputationToken": "0xac80704c80ab83512b48314bdfa82f79923c2fbe",
    "CancelOrder": "0x2ebd326b3830297fd4cfb6b8b2c1d967a51dfdc6",
    "Cash": "0xecaaca82cdf97f53f478609a98c3d36a5f0ef955",
    "ClaimTradingProceeds": "0x97ba58dbe58898f2b669c56496f46f638dc322d4",
    "CompleteSets": "0x204cdd1689c8a4da426894c150a0fa672a2eab4c",
    "CreateOrder": "0xce77d3c706e0fe6da5d71b1249756b5ea0d77202",
    "FillOrder": "0x6c38ab26f860380a8a2367c79dda3a54afef4b1e",
    "Order": "0x3c6721551c2ba3973560aef3e11d34ce05db4047",
    "Orders": "0xd28d97d4ea8968e90ec90ab0f43df4ade0c9f611",
    "OrdersFetcher": "0x5e9529c5c5ac0a7e7258a18782bd31a148c55f4c",
    "ShareToken": "0x45a2897792afa20b95f7dcaf5c0fb45b84daf439",
    "Trade": "0x0d676967088088546837accf52a72bbd5066ffee",
    "TradingEscapeHatch": "0x4e61185d7f125b84ac4a1837a0688d2bb58e8491"
   },
   "103": {
    "Controller": "0xfcaf25bf38e7c86612a25ff18cb8e09ab07c9885",
    "Universe": "0x8963d800c1d48301444f4ceb2a13ebcfee9ae957",
    "Augur": "0x25ff5dc79a7c4e34254ff0f4a19d69e491201dd3",
    "OrdersFinder": "0xf28fc4b34a7c4534dd3e40e0ad5df6f2cb69aec0",
    "LegacyReputationToken": "0x9a83c0458d2141a58149ce54e96e58673e4b72eb",
    "CancelOrder": "0xf5f22562ec76f33a9f114e0ca9e3916c383df041",
    "Cash": "0xf33a8abcf994bafcb28682f08c48015a57ea35d3",
    "ClaimTradingProceeds": "0x204cdd1689c8a4da426894c150a0fa672a2eab4c",
    "CompleteSets": "0xf780694a2ea833fc85131b9de8af4e71f49e3e12",
    "CreateOrder": "0x07f175e786a57752b3d0d0f3250cebb4242e02ad",
    "FillOrder": "0x0680f8580de983cd204aa909a4b1b366b29f58b6",
    "Order": "0x5e9529c5c5ac0a7e7258a18782bd31a148c55f4c",
    "Orders": "0x642e1eaed86d4075253c34c307d34362d2247d18",
    "OrdersFetcher": "0xb8da5fa6c6f9b55f1c9fa09e26a24d3675dbc36e",
    "ShareToken": "0x2ef25877b254d6391b843df25dd7a8b0a243bee9",
    "Trade": "0x6e968fe21894a35ba59ee8ec6f60ea0ddc3a59e5",
    "TradingEscapeHatch": "0x00bee9d82da7036c9c660e7ae18c4f5e2f072967"
   },
   "104": {
    "Controller": "0xfcaf25bf38e7c86612a25ff18cb8e09ab07c9885",
    "Universe": "0x555ceb70339b2635c988527e80fddbf282f20ff7",
    "Augur": "0x25ff5dc79a7c4e34254ff0f4a19d69e491201dd3",
    "OrdersFinder": "0xf28fc4b34a7c4534dd3e40e0ad5df6f2cb69aec0",
    "LegacyReputationToken": "0x2ef25877b254d6391b843df25dd7a8b0a243bee9",
    "CancelOrder": "0x45a2897792afa20b95f7dcaf5c0fb45b84daf439",
    "Cash": "0xd3a7c274e3e7b1990a9c23bec98adc2b7c448ac5",
    "ClaimTradingProceeds": "0x97ba58dbe58898f2b669c56496f46f638dc322d4",
    "CompleteSets": "0x257b56115544e9519fb2de5b7b99c3c2150528fb",
    "CreateOrder": "0xf265d8d30a1a2cdb9857e124010b02765c9a7c70",
    "FillOrder": "0x3c6721551c2ba3973560aef3e11d34ce05db4047",
    "Order": "0x2adaeaf11753515a37a3d50cecb636cf72ae4854",
    "Orders": "0x3a043108953aacf3505503867f8db7c1585577c7",
    "OrdersFetcher": "0xebddb8f1ee6a3a041dba3a236b3d36095f96fe22",
    "ShareToken": "0x2ebd326b3830297fd4cfb6b8b2c1d967a51dfdc6",
    "Trade": "0x0d676967088088546837accf52a72bbd5066ffee",
    "TradingEscapeHatch": "0x021076fb9adafcf83869435f9d72a5873869b4ad"
   },
   "8995": {
    "Controller": "0xfcaf25bf38e7c86612a25ff18cb8e09ab07c9885",
    "Universe": "0x077c4f7463824c0461c0be9b4af270a14aea16f4",
    "Augur": "0x25ff5dc79a7c4e34254ff0f4a19d69e491201dd3",
    "LegacyReputationToken": "0xf5f22562ec76f33a9f114e0ca9e3916c383df041",
    "CancelOrder": "0xce77d3c706e0fe6da5d71b1249756b5ea0d77202",
    "Cash": "0x575f3c652894360f4b7655379ea1eae53381e012",
    "ClaimTradingProceeds": "0x635c8ef61a07dfe49b683d1a34da3547b0d6705e",
    "CompleteSets": "0x257b56115544e9519fb2de5b7b99c3c2150528fb",
    "CreateOrder": "0x8bdad8ee0b47e2e7294a5b8b8b74ea3968f4a177",
    "FillOrder": "0xdd1c4919217e409abeb699e8171a5e92c2e506fa",
    "Order": "0x905419e7a1f96a973ab8988ba19c84135c6f7122",
    "Orders": "0xee7ec8baf44d90535adecfc652ef05925404e6ea",
    "OrdersFetcher": "0xf3bcabd8fae29f75be271ebe2499edb4c7c139b7",
    "ShareToken": "0x80f8daa435a9ab4b1802ba56fe7e0abd0f8ab3d3",
    "Trade": "0xb03cf72bc5a9a344aac43534d664917927367487",
    "TradingEscapeHatch": "0xdfef677bf5f66f3eeff481a587c04cb58e95b92a"
   }
  }
  },{}],33:[function(require,module,exports){
  "use strict";

  var hashEventAbi = require("../events/hash-event-abi");

  function generateAbiMap(abi) {
    var functions = {};
    var events = {};
    Object.keys(abi).forEach(function (contractName) {
      var functionsAndEventsArray = abi[contractName];
      functionsAndEventsArray.forEach(function (functionOrEvent) {
        var name = functionOrEvent.name;
        if (functionOrEvent.type === "function") {
          var functionAbiMap = {
            constant: functionOrEvent.constant,
            name: functionOrEvent.name
          };
          var inputs = [];
          var signature = [];
          if (functionOrEvent.inputs) {
            functionOrEvent.inputs.forEach(function (input) {
              inputs.push(input.name);
              signature.push(input.type);
            });
          }
          if (inputs.length) functionAbiMap.inputs = inputs;
          if (signature.length) functionAbiMap.signature = signature;
          if (functionOrEvent.outputs && functionOrEvent.outputs.length) {
            var output = functionOrEvent.outputs[0];
            functionAbiMap.returns = output.type;
          } else {
            functionAbiMap.returns = "null";
          }
          if (!functions[contractName]) functions[contractName] = {};
          functions[contractName][name] = functionAbiMap;
        } else if (functionOrEvent.type === "event") {
          if (!events[contractName]) events[contractName] = {};
          events[contractName][name] = {
            contract: contractName,
            inputs: functionOrEvent.inputs,
            signature: hashEventAbi(functionOrEvent)
          };
        }
      });
    });
    return { functions: functions, events: events };
  }

  module.exports = generateAbiMap;
  },{"../events/hash-event-abi":47}],34:[function(require,module,exports){
  "use strict";

  var generateAbiMap = require("./generate-abi-map");
  var readJsonFile = require("../utils/read-json-file");

  var e = module.exports = {
    abi: generateAbiMap(require("augur-core").abi),
    addresses: require("./addresses"),
    uploadBlockNumbers: require("./upload-block-numbers")
  };

  module.exports.reloadAddresses = function (callback) {
    readJsonFile(require.resolve("./addresses"), function (err, data) {
      if (err) return callback(err);

      e.addresses = data;

      readJsonFile(require.resolve("./upload-block-numbers"), function (err, data) {
        if (err) return callback(err);
        e.uploadBlockNumbers = data;

        callback(null, e);
      });
    });
  };
  },{"../utils/read-json-file":146,"./addresses":32,"./generate-abi-map":33,"./upload-block-numbers":35,"augur-core":154}],35:[function(require,module,exports){
  module.exports={
   "1": 5926223,
   "3": 3718180,
   "4": 2687175,
   "19": 1340162,
   "42": 7926279,
   "101": 113,
   "102": 11,
   "103": 10,
   "104": 1,
   "8995": 0
  }
  },{}],36:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  function calculateNumTicks(tickSize, minPrice, maxPrice) {
    return new BigNumber(maxPrice, 10).minus(new BigNumber(minPrice, 10)).dividedBy(new BigNumber(tickSize, 10)).toFixed();
  }

  module.exports = calculateNumTicks;
  },{"bignumber.js":157}],37:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var speedomatic = require("speedomatic");
  var getMarketCreationCost = require("./get-market-creation-cost");
  var getMarketFromCreateMarketReceipt = require("./get-market-from-create-market-receipt");
  var api = require("../api");
  var encodeTag = require("../format/tag/encode-tag");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.universe Universe on which to create this market.
   * @param {number} p._endTime Market expiration timestamp, in seconds.
   * @param {string=} p._feePerEthInWei Amount of wei per ether settled that goes to the market creator, as a base-10 string.
   * @param {string} p._denominationToken Ethereum address of the token used as this market's currency.
   * @param {string} p._designatedReporterAddress Ethereum address of this market's designated reporter.
   * @param {string[]} p._outcomes Descriptions for each outcome, as an array of UTF8 strings, with between [2, 8] elements in the array.
   * @param {number} p._numOutcomes Number of outcomes this market has, as an integer on [2, 8].
   * @param {string} p._topic The topic (category) to which this market belongs, as a UTF8 string.
   * @param {string} p._description Description of the market, as a UTF8 string.
   * @param {Object=} p._extraInfo Extra info which will be converted to JSON and logged to the chain in the CreateMarket event.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the createCategoricalMarket transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the createCategoricalMarket transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the createCategoricalMarket transaction fails.
   */
  function createCategoricalMarket(p) {
    getMarketCreationCost({ universe: p.universe }, function (err, marketCreationCost) {
      if (err) return p.onFailed(err);
      var createCategoricalMarketParams = assign({}, immutableDelete(p, "universe"), {
        tx: assign({
          to: p.universe,
          value: speedomatic.fix(marketCreationCost.etherRequiredToCreateMarket, "hex")
        }, p.tx),
        _outcomes: p._outcomes.map(function (outcome) {
          return encodeTag(outcome);
        }),
        _topic: encodeTag(p._topic),
        _extraInfo: JSON.stringify(p._extraInfo || {}),
        onSuccess: function onSuccess(res) {
          if (p.tx !== undefined && p.tx.estimateGas) return p.onSuccess(res);
          getMarketFromCreateMarketReceipt(res.hash, function (err, marketId) {
            if (err) return p.onFailed(err);
            p.onSuccess(assign({}, res, { callReturn: marketId }));
          });
        }
      });
      api().Universe.createCategoricalMarket(createCategoricalMarketParams);
    });
  }

  module.exports = createCategoricalMarket;
  },{"../api":7,"../format/tag/encode-tag":63,"./get-market-creation-cost":41,"./get-market-from-create-market-receipt":42,"immutable-delete":377,"lodash":420,"speedomatic":492}],38:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var speedomatic = require("speedomatic");
  var calculateNumTicks = require("./calculate-num-ticks");
  var getMarketCreationCost = require("./get-market-creation-cost");
  var getMarketFromCreateMarketReceipt = require("./get-market-from-create-market-receipt");
  var api = require("../api");
  var encodeTag = require("../format/tag/encode-tag");
  var constants = require("../constants");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.universe Universe on which to create this market.
   * @param {number} p._endTime Market expiration timestamp, in seconds.
   * @param {string=} p._feePerEthInWei Amount of wei per ether settled that goes to the market creator, as a base-10 string.
   * @param {string} p._denominationToken Ethereum address of the token used as this market's currency.
   * @param {string} p._minPrice Minimum display (non-normalized) price for this market, as a base-10 string.
   * @param {string} p._maxPrice Maximum display (non-normalized) price for this market, as a base-10 string.
   * @param {string} p._designatedReporterAddress Ethereum address of this market's designated reporter.
   * @param {string} p._topic The topic (category) to which this market belongs, as a UTF8 string.
   * @param {string} p._description Description of the market, as a UTF8 string.
   * @param {string=} p.tickSize The tick size for this market, as a base-10 string.
   * @param {Object=} p._extraInfo Extra info which will be converted to JSON and logged to the chain in the CreateMarket event.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the createScalarMarket transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the createScalarMarket transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the createScalarMarket transaction fails.
   */
  function createScalarMarket(p) {
    getMarketCreationCost({ universe: p.universe }, function (err, marketCreationCost) {
      if (err) return p.onFailed(err);
      var numTicks = calculateNumTicks(p.tickSize || constants.DEFAULT_SCALAR_TICK_SIZE, p._minPrice, p._maxPrice);
      var createScalarMarketParams = assign({}, immutableDelete(p, ["universe", "tickSize"]), {
        tx: assign({
          to: p.universe,
          value: speedomatic.fix(marketCreationCost.etherRequiredToCreateMarket, "hex")
        }, p.tx),
        _numTicks: speedomatic.hex(numTicks),
        _minPrice: speedomatic.fix(p._minPrice, "hex"),
        _maxPrice: speedomatic.fix(p._maxPrice, "hex"),
        _topic: encodeTag(p._topic),
        _extraInfo: JSON.stringify(p._extraInfo || {}),
        onSuccess: function onSuccess(res) {
          if (p.tx !== undefined && p.tx.estimateGas) return p.onSuccess(res);
          getMarketFromCreateMarketReceipt(res.hash, function (err, marketId) {
            if (err) return p.onFailed(err);
            p.onSuccess(assign({}, res, { callReturn: marketId }));
          });
        }
      });
      api().Universe.createScalarMarket(createScalarMarketParams);
    });
  }

  module.exports = createScalarMarket;
  },{"../api":7,"../constants":31,"../format/tag/encode-tag":63,"./calculate-num-ticks":36,"./get-market-creation-cost":41,"./get-market-from-create-market-receipt":42,"immutable-delete":377,"lodash":420,"speedomatic":492}],39:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var speedomatic = require("speedomatic");
  var getMarketCreationCost = require("./get-market-creation-cost");
  var getMarketFromCreateMarketReceipt = require("./get-market-from-create-market-receipt");
  var api = require("../api");
  var encodeTag = require("../format/tag/encode-tag");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.universe Universe on which to create this market.
   * @param {number} p._endTime Market expiration timestamp, in seconds.
   * @param {string=} p._feePerEthInWei Amount of wei per ether settled that goes to the market creator, as a base-10 string.
   * @param {string} p._denominationToken Ethereum address of the token used as this market's currency.
   * @param {string} p._designatedReporterAddress Ethereum address of this market's designated reporter.
   * @param {string} p._topic The topic (category) to which this market belongs, as a UTF8 string.
   * @param {string} p._description Description of the market, as a UTF8 string.
   * @param {Object=} p._extraInfo Extra info which will be converted to JSON and logged to the chain in the CreateMarket event.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the createYesNoMarket transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the createYesNoMarket transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the createYesNoMarket transaction fails.
   */
  function createYesNoMarket(p) {
    getMarketCreationCost({ universe: p.universe }, function (err, marketCreationCost) {
      if (err) return p.onFailed(err);
      var createYesNoMarketParams = assign({}, immutableDelete(p, "universe"), {
        tx: assign({
          to: p.universe,
          value: speedomatic.fix(marketCreationCost.etherRequiredToCreateMarket, "hex")
        }, p.tx),
        _topic: encodeTag(p._topic),
        _extraInfo: JSON.stringify(p._extraInfo || {}),
        onSuccess: function onSuccess(res) {
          if (p.tx !== undefined && p.tx.estimateGas) return p.onSuccess(res);
          getMarketFromCreateMarketReceipt(res.hash, function (err, marketId) {
            if (err) return p.onFailed(err);
            p.onSuccess(assign({}, res, { callReturn: marketId }));
          });
        }
      });
      api().Universe.createYesNoMarket(createYesNoMarketParams);
    });
  }

  module.exports = createYesNoMarket;
  },{"../api":7,"../format/tag/encode-tag":63,"./get-market-creation-cost":41,"./get-market-from-create-market-receipt":42,"immutable-delete":377,"lodash":420,"speedomatic":492}],40:[function(require,module,exports){
  "use strict";

  /** Type definition for MarketCreationCostBreakdown.
   * @typedef {Object} MarketCreationCostBreakdown
   * @property {string} designatedReportNoShowReputationBond Amount of Reputation required to incentivize the designated reporter to show up and report, as a base-10 string.
   * @property {string} validityBond Amount of Ether to be held on-contract and repaid when the market is resolved with a non-Invalid outcome, as a base-10 string.
   */

  var async = require("async");
  var speedomatic = require("speedomatic");
  var api = require("../api");

  /**
   * Note: this function will send a transaction if needed to create the current reporting window.
   * @param {Object} p Parameters object.
   * @param {string} p.universe Universe on which to create this market.
   * @param {function} callback Called when all market creation costs have been looked up.
   * @return {MarketCreationCostBreakdown} Cost breakdown for creating a new market.
   */
  function getMarketCreationCostBreakdown(p, callback) {
    var universePayload = { tx: { to: p.universe, send: false } };
    async.parallel({
      designatedReportNoShowReputationBond: function designatedReportNoShowReputationBond(next) {
        api().Universe.getOrCacheDesignatedReportNoShowBond(universePayload, function (err, designatedReportNoShowBond) {
          if (err) return next(err);
          next(null, speedomatic.unfix(designatedReportNoShowBond, "string"));
        });
      },
      validityBond: function validityBond(next) {
        api().Universe.getOrCacheValidityBond(universePayload, function (err, validityBond) {
          if (err) return next(err);
          next(null, speedomatic.unfix(validityBond, "string"));
        });
      },
      reportingFeeDivisor: function reportingFeeDivisor(next) {
        api().Universe.getOrCacheReportingFeeDivisor(universePayload, function (err, reportingFeeDivisor) {
          if (err) return next(err);
          next(null, speedomatic.unfix(reportingFeeDivisor, "string"));
        });
      }
    }, callback);
  }

  module.exports = getMarketCreationCostBreakdown;
  },{"../api":7,"async":153,"speedomatic":492}],41:[function(require,module,exports){
  "use strict";

  /** Type definition for MarketCreationCost.
   * @typedef {Object} MarketCreationCost
   * @property {string} designatedReportNoShowReputationBond Amount of Reputation required to incentivize the designated reporter to show up and report, as a base-10 string.
   * @property {string} etherRequiredToCreateMarket Sum of the Ether required to pay for Reporters' gas costs and the validity bond, as a base-10 string.
   */

  var assign = require("lodash").assign;
  var async = require("async");
  var immutableDelete = require("immutable-delete");
  var speedomatic = require("speedomatic");
  var api = require("../api");

  /**
   * Note: this function will send a transaction if needed to create the current reporting window.
   * @param {Object} p Parameters object.
   * @param {string} p.universe Universe on which to create this market.
   * @param {function} callback Called after the market creation cost has been looked up.
   * @return {MarketCreationCost} Costs of creating a new market.
   */
  function getMarketCreationCost(p, callback) {
    var universePayload = assign({}, immutableDelete(p, "universe"), { tx: assign({ to: p.universe, send: false }, p.tx) });
    async.parallel({
      designatedReportNoShowReputationBond: function designatedReportNoShowReputationBond(next) {
        api().Universe.getOrCacheDesignatedReportNoShowBond(universePayload, function (err, designatedReportNoShowBond) {
          if (err) return next(err);
          next(null, speedomatic.unfix(designatedReportNoShowBond, "string"));
        });
      },
      etherRequiredToCreateMarket: function etherRequiredToCreateMarket(next) {
        api().Universe.getOrCacheMarketCreationCost(universePayload, function (err, marketCreationCost) {
          if (err) return next(err);
          next(null, speedomatic.unfix(marketCreationCost, "string"));
        });
      }
    }, callback);
  }

  module.exports = getMarketCreationCost;
  },{"../api":7,"async":153,"immutable-delete":377,"lodash":420,"speedomatic":492}],42:[function(require,module,exports){
  "use strict";

  var ethrpc = require("../rpc-interface");
  var findEventLogsInLogArray = require("../events/find-event-logs-in-log-array");
  var isObject = require("../utils/is-object");

  function getMarketFromCreateMarketReceipt(transactionHash, callback) {
    ethrpc.getTransactionReceipt(transactionHash, function (err, receipt) {
      if (err) return callback(err);
      if (!isObject(receipt)) {
        console.error("Receipt is not an object:", transactionHash, receipt, isObject(receipt));
        return callback(new Error("Transaction receipt not found for " + transactionHash));
      }
      var marketCreatedLogs = findEventLogsInLogArray("Augur", "MarketCreated", receipt.logs);
      if (marketCreatedLogs == null || !marketCreatedLogs.length || marketCreatedLogs[0] == null || marketCreatedLogs[0].market == null) {
        return callback(new Error("MarketCreated log not found for " + transactionHash));
      }
      callback(null, marketCreatedLogs[0].market);
    });
  }

  module.exports = getMarketFromCreateMarketReceipt;
  },{"../events/find-event-logs-in-log-array":45,"../rpc-interface":87,"../utils/is-object":140}],43:[function(require,module,exports){
  "use strict";

  module.exports = {
    createYesNoMarket: require("./create-yes-no-market"),
    createCategoricalMarket: require("./create-categorical-market"),
    createScalarMarket: require("./create-scalar-market"),
    getMarketCreationCost: require("./get-market-creation-cost"),
    getMarketCreationCostBreakdown: require("./get-market-creation-cost-breakdown"),
    getMarketFromCreateMarketReceipt: require("./get-market-from-create-market-receipt")
  };
  },{"./create-categorical-market":37,"./create-scalar-market":38,"./create-yes-no-market":39,"./get-market-creation-cost":41,"./get-market-creation-cost-breakdown":40,"./get-market-from-create-market-receipt":42}],44:[function(require,module,exports){
  "use strict";

  var ethrpc = require("ethrpc");

  function disconnect() {
    ethrpc.disconnect();
  }

  module.exports = disconnect;
  },{"ethrpc":273}],45:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");
  var eventsAbi = require("../contracts").abi.events;
  var parseLogMessage = require("./parse-message/parse-log-message");

  function findEventLogsInLogArray(contractName, eventName, logs) {
    if (!Array.isArray(logs) || !logs.length) return null;
    var eventAbi = ((eventsAbi || {})[contractName] || {})[eventName];
    if (eventAbi == null) return null;
    var eventSignature = eventAbi.signature;
    var eventInputs = eventAbi.inputs;
    if (eventSignature == null) return null;
    return logs.reduce(function (reducedLogs, log) {
      if (speedomatic.formatInt256(log.topics[0]) !== eventSignature) return reducedLogs;
      return reducedLogs.concat(parseLogMessage(contractName, eventName, log, eventInputs));
    }, []);
  }

  module.exports = findEventLogsInLogArray;
  },{"../contracts":34,"./parse-message/parse-log-message":51,"speedomatic":492}],46:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var async = require("async");
  var encodeNumberAsJSNumber = require("speedomatic").encodeNumberAsJSNumber;
  var parseLogMessage = require("./parse-message/parse-log-message");
  var contracts = require("../contracts");
  var ethrpc = require("../rpc-interface");
  var chunkBlocks = require("../utils/chunk-blocks");
  var listContracts = require("../utils/list-contracts");
  var mapContractAddressesToNames = require("../utils/map-contract-addresses-to-names");
  var mapEventSignaturesToNames = require("../utils/map-event-signatures-to-names");
  var constants = require("../constants");

  /**
   * @param {Object} p Parameters object.
   * @param {number=} p.fromBlock Block number to start looking up logs (default: constants.AUGUR_UPLOAD_BLOCK_NUMBER).
   * @param {number=} p.toBlock Block number where the log lookup should stop (default: current block number).
   * @param {number=} p.blocksPerChunk Number of blocks per getLogs RPC request (default: constants.BLOCKS_PER_CHUNK).
   * @param {function} callback Called when all data has been received and parsed.
   * @return { contractName => { eventName => [parsed event logs] } }
   */
  function getAllAugurLogs(p, batchCallback, finalCallback) {
    var networkId = ethrpc.getNetworkID();
    var contractNameToAddressMap = contracts.addresses[networkId];
    if (contractNameToAddressMap == null) return finalCallback(new Error("No contract address map for networkId: " + networkId));
    var eventsAbi = contracts.abi.events;
    var contractAddressToNameMap = mapContractAddressesToNames(contractNameToAddressMap);
    var eventSignatureToNameMap = mapEventSignaturesToNames(eventsAbi);
    var filterParams = { address: listContracts(contractNameToAddressMap) };
    var fromBlock = p.fromBlock ? encodeNumberAsJSNumber(p.fromBlock) : constants.AUGUR_UPLOAD_BLOCK_NUMBER;
    var currentBlock = parseInt(ethrpc.getCurrentBlock().number, 16);
    var toBlock = p.toBlock ? encodeNumberAsJSNumber(p.toBlock) : currentBlock;
    if (fromBlock > currentBlock || toBlock > currentBlock) {
      return finalCallback(new Error("Block range " + fromBlock + " to " + toBlock + " exceeds currentBlock " + currentBlock));
    }
    async.eachSeries(chunkBlocks(fromBlock, toBlock).reverse(), function (chunkOfBlocks, nextChunkOfBlocks) {
      ethrpc.getLogs(assign({}, filterParams, chunkOfBlocks), function (err, logs) {
        if (err) return nextChunkOfBlocks(err);
        if (!Array.isArray(logs)) return nextChunkOfBlocks(null);
        console.log("got", logs.length, "logs in blocks", chunkOfBlocks);
        var batchAugurLogs = logs.map(function (log) {
          if (log && Array.isArray(log.topics) && log.topics.length) {
            var contractName = contractAddressToNameMap[log.address];
            var eventName = eventSignatureToNameMap[contractName][log.topics[0]];
            if (eventName == null) {
              console.log("Contract " + contractName + " has no event signature " + log.topics[0] + " found on tx " + log.transactionHash);
              return;
            }
            try {
              return parseLogMessage(contractName, eventName, log, eventsAbi[contractName][eventName].inputs);
            } catch (exc) {
              console.error("parseLogMessage error", exc);
              console.log(contractName, eventName, log, eventsAbi[contractName], chunkOfBlocks);
            }
          }
        });
        batchCallback(batchAugurLogs, chunkOfBlocks);
        nextChunkOfBlocks(null);
      });
    }, function (err) {
      if (err) return finalCallback(err);
      finalCallback(null);
    });
  }

  module.exports = getAllAugurLogs;
  },{"../constants":31,"../contracts":34,"../rpc-interface":87,"../utils/chunk-blocks":131,"../utils/list-contracts":142,"../utils/map-contract-addresses-to-names":143,"../utils/map-event-signatures-to-names":144,"./parse-message/parse-log-message":51,"async":153,"lodash":420,"speedomatic":492}],47:[function(require,module,exports){
  "use strict";

  var hashEventSignature = require("./hash-event-signature");

  function hashEventAbi(eventAbi) {
    return hashEventSignature(eventAbi.name + "(" + eventAbi.inputs.map(function (input) {
      return input.type;
    }).join(",") + ")");
  }

  module.exports = hashEventAbi;
  },{"./hash-event-signature":48}],48:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");
  var keccak256 = require("../utils/keccak256");
  var Buffer = require("safe-buffer").Buffer;

  function hashEventSignature(eventName) {
    return speedomatic.formatInt256(keccak256(Buffer.from(eventName, "utf8")).toString("hex"));
  }

  module.exports = hashEventSignature;
  },{"../utils/keccak256":141,"safe-buffer":454,"speedomatic":492}],49:[function(require,module,exports){
  "use strict";

  var EventEmitter = require("event-emitter");

  module.exports = {
    hashEventAbi: require("./hash-event-abi"),
    getAllAugurLogs: require("./get-all-augur-logs"),
    startAugurNodeEventListeners: require("./start-augur-node-event-listeners"),
    stopAugurNodeEventListeners: require("./stop-augur-node-event-listeners"),
    startBlockchainEventListeners: require("./start-blockchain-event-listeners"),
    stopBlockchainEventListeners: require("./stop-blockchain-event-listeners"),
    startBlockListeners: require("./start-block-listeners"),
    stopBlockListeners: require("./stop-block-listeners"),
    nodes: {
      augur: EventEmitter(),
      ethereum: EventEmitter()
    }
  };
  },{"./get-all-augur-logs":46,"./hash-event-abi":47,"./start-augur-node-event-listeners":52,"./start-block-listeners":53,"./start-blockchain-event-listeners":54,"./stop-augur-node-event-listeners":55,"./stop-block-listeners":56,"./stop-blockchain-event-listeners":57,"event-emitter":361}],50:[function(require,module,exports){
  "use strict";

  function parseBlockMessage(message, onMessage) {
    if (message) {
      if (message.length && Array.isArray(message)) {
        for (var i = 0, len = message.length; i < len; ++i) {
          if (message[i]) {
            onMessage(message[i]);
          }
        }
      } else {
        onMessage(message);
      }
    }
  }

  module.exports = parseBlockMessage;
  },{}],51:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var formatLoggedEventInputs = require("../../format/log/format-logged-event-inputs");
  var formatLogMessage = require("../../format/log/format-log-message");
  var isObject = require("../../utils/is-object");

  function parseLogMessage(contractName, eventName, message, abiEventInputs) {
    if (message != null) {
      if (Array.isArray(message)) {
        return message.map(function (singleMessage) {
          return parseLogMessage(contractName, eventName, singleMessage, abiEventInputs);
        });
      } else if (isObject(message) && !message.error && message.topics && message.data) {
        var parsedMessage = assign(formatLoggedEventInputs(message.topics, message.data, abiEventInputs), {
          address: message.address,
          removed: message.removed,
          transactionHash: message.transactionHash,
          transactionIndex: parseInt(message.transactionIndex, 16),
          logIndex: parseInt(message.logIndex, 16),
          blockNumber: parseInt(message.blockNumber, 16),
          blockHash: message.blockHash,
          contractName: contractName,
          eventName: eventName
        });
        return formatLogMessage(contractName, eventName, parsedMessage);
      }
      throw new Error("Bad event log(s) received: " + JSON.stringify(message));
    }
  }

  module.exports = parseLogMessage;
  },{"../../format/log/format-log-message":59,"../../format/log/format-logged-event-inputs":60,"../../utils/is-object":140,"lodash":420}],52:[function(require,module,exports){
  "use strict";

  var async = require("async");
  var augurNode = require("../augur-node");
  var isFunction = require("../utils/is-function");
  var isObject = require("../utils/is-object");
  var noop = require("../utils/noop");

  /**
   * Start listening for events emitted by augur-node.
   * @param {Object.<function>} eventCallbacks Callbacks to fire when events are received, keyed by event name.
   * @param {function=} onSetupComplete Called when all listeners are successfully set up, or if `eventCallbacks` is improperly formatted.
   */
  function startAugurNodeEventListeners(eventCallbacks, onSetupComplete) {
    if (!isFunction(onSetupComplete)) onSetupComplete = noop;
    if (!isObject(eventCallbacks)) return onSetupComplete(new Error("No callbacks found"));

    var startListeners = function startListeners(err) {
      if (err) return onSetupComplete(err);
      async.forEachOf(eventCallbacks, function (callback, eventName, nextEvent) {
        augurNode.subscribeToEvent(eventName, callback, nextEvent);
      }, onSetupComplete);
    };

    // Verify that all callbacks in `eventCallbacks` are functions before starting listeners
    async.forEachOf(eventCallbacks, function (callback, eventName, nextEvent) {
      if (typeof callback !== "function") return nextEvent(new Error("Callback for " + eventName + " is not a function"));
      nextEvent();
    }, startListeners);
  }

  module.exports = startAugurNodeEventListeners;
  },{"../augur-node":17,"../utils/is-function":139,"../utils/is-object":140,"../utils/noop":145,"async":153}],53:[function(require,module,exports){
  "use strict";

  var subscriptions = require("./subscriptions");
  var parseBlockMessage = require("./parse-message/parse-block-message");
  var ethrpc = require("../rpc-interface");
  var isFunction = require("../utils/is-function");

  /**
   * Start listening for blocks.
   * @param {function=} blockCallbacks.onAdded Callback to fire when new blocks are received.
   * @param {function=} blockCallbacks.onRemoved Callback to fire when blocks are removed.
   * @return {boolean} True if listeners were successfully started; false otherwise.
   */
  function startBlockListeners(blockCallbacks) {
    var blockStream = ethrpc.getBlockStream();
    if (!blockStream) return false;
    if (isFunction(blockCallbacks.onAdded)) {
      subscriptions.addOnBlockAddedSubscription(blockStream.subscribeToOnBlockAdded(function (newBlock) {
        parseBlockMessage(newBlock, blockCallbacks.onAdded);
      }));
    }
    if (isFunction(blockCallbacks.onRemoved)) {
      subscriptions.addOnBlockRemovedSubscription(blockStream.subscribeToOnBlockRemoved(function (removedBlock) {
        parseBlockMessage(removedBlock, blockCallbacks.onRemoved);
      }));
    }
    return true;
  }

  module.exports = startBlockListeners;
  },{"../rpc-interface":87,"../utils/is-function":139,"./parse-message/parse-block-message":50,"./subscriptions":58}],54:[function(require,module,exports){
  "use strict";

  var compact = require("lodash").compact;
  var assign = require("lodash").assign;
  var contracts = require("../contracts");
  var ethrpc = require("../rpc-interface");
  var isObject = require("../utils/is-object");
  var parseLogMessage = require("./parse-message/parse-log-message");

  function parseLogs(logs, eventByAddressAndSignature) {
    var parsedLogs = logs.map(function (log) {
      if (eventByAddressAndSignature[log.address] === undefined) {
        throw new Error("Missing mapping for contract address " + log.address);
      }
      var eventDetails = eventByAddressAndSignature[log.address][log.topics[0]];
      // Based on how we grab event logs, it's possible to get an event we don't care about if
      // two contracts have same event, but we only want to subscribe to one of them
      if (eventDetails === undefined) return null;
      return parseLogMessage(eventDetails.contractName, eventDetails.eventName, log, eventDetails.abi);
    });
    return compact(parsedLogs);
  }

  // Iterates through eventCallbacks, generates eth filter and event signature mapping
  function getEventsDetails(eventsToSubscribe, activeContracts) {
    var eventByAddressAndSignature = {};
    var addresses = [];
    var topics = new Set();
    for (var contractName in eventsToSubscribe) {
      if (Object.prototype.hasOwnProperty.call(eventsToSubscribe, contractName)) {
        eventByAddressAndSignature[activeContracts[contractName]] = {};
        addresses.push(activeContracts[contractName]);
        for (var eventNameIndex = 0; eventNameIndex < eventsToSubscribe[contractName].length; eventNameIndex++) {
          var eventName = eventsToSubscribe[contractName][eventNameIndex];
          var eventAbi = contracts.abi.events[contractName][eventName];
          if (!eventAbi || !eventAbi.contract || !eventAbi.signature || !eventAbi.inputs) throw new Error("Missing abi for " + contractName + "." + eventName);
          eventByAddressAndSignature[activeContracts[contractName]][eventAbi.signature] = {
            contractName: contractName,
            eventName: eventName,
            abi: eventAbi.inputs
          };
          topics.add(eventAbi.signature);
        }
      }
    }
    var filter = {
      address: addresses,
      topics: [Array.from(topics)]
    };
    return {
      eventByAddressAndSignature: eventByAddressAndSignature,
      filter: filter
    };
  }

  function flagRemoved(logs) {
    return logs.map(function (log) {
      return assign({}, log, { removed: true });
    });
  }

  /**
   * Start listening for events emitted by the Ethereum blockchain.
   * @param {Object.<function>=} eventsToSubscribe List of interested contract events. Object of arrays. {ContractName: ["Event1", "Event2"]}
   * @param {number=} startingBlockNumber Block height to start blockstream at.
   * @param {function=} logsAddedListener Callback which accepts array of logs added. Always gets one block worth of logs. Called after block added
   * @param {function=} logsRemovedListener Callback which accepts array of logs removed. Always gets one block worth of logs. Called before block removed
   */
  function startBlockchainEventListeners(eventsToSubscribe, startingBlockNumber, logsAddedListener, logsRemovedListener) {
    if (typeof startingBlockNumber !== "undefined") {
      console.log("Starting blockstream at block ", startingBlockNumber);
      ethrpc.startBlockStream(startingBlockNumber);
    }
    var blockStream = ethrpc.getBlockStream();
    if (!blockStream) throw new Error("Not connected to Ethereum");
    if (!isObject(eventsToSubscribe)) throw new Error("No event callbacks found");
    var activeContracts = contracts.addresses[ethrpc.getNetworkID()];

    var eventDetails = getEventsDetails(eventsToSubscribe, activeContracts);
    blockStream.addLogFilter(eventDetails.filter);
    blockStream.subscribeToOnLogsAdded(function (blockHash, logs) {
      return logsAddedListener(blockHash, parseLogs(logs, eventDetails.eventByAddressAndSignature));
    });
    blockStream.subscribeToOnLogsRemoved(function (blockHash, logs) {
      return logsRemovedListener(blockHash, parseLogs(flagRemoved(logs), eventDetails.eventByAddressAndSignature));
    });
  }

  module.exports = startBlockchainEventListeners;
  },{"../contracts":34,"../rpc-interface":87,"../utils/is-object":140,"./parse-message/parse-log-message":51,"lodash":420}],55:[function(require,module,exports){
  "use strict";

  var augurNode = require("../augur-node");
  var noop = require("../utils/noop");

  /**
   * Removes all active listeners for events emitted by augur-node.
   * @param {function=} callback
   */
  function stopAugurNodeEventListeners(callback) {
    augurNode.unsubscribeFromAllEvents(callback || noop);
  }

  module.exports = stopAugurNodeEventListeners;
  },{"../augur-node":17,"../utils/noop":145}],56:[function(require,module,exports){
  "use strict";

  var ethrpc = require("../rpc-interface");
  var subscriptions = require("./subscriptions");

  /**
   * Stop listening for blocks and block removals.
   * @return {boolean} True if listeners were successfully stopped; false otherwise.
   */
  function stopBlockListeners() {
    var blockStream = ethrpc.getBlockStream();
    if (!blockStream) return false;
    var blockSubscriptions = subscriptions.getSubscriptions().block;
    if (blockSubscriptions.added) {
      blockStream.unsubscribeFromOnBlockAdded(blockSubscriptions.added);
      subscriptions.removeOnBlockAddedSubscription();
    }
    if (blockSubscriptions.removed) {
      blockStream.unsubscribeFromOnBlockRemoved(blockSubscriptions.removed);
      subscriptions.removeOnBlockRemovedSubscription();
    }
    return true;
  }

  module.exports = stopBlockListeners;
  },{"../rpc-interface":87,"./subscriptions":58}],57:[function(require,module,exports){
  "use strict";

  var ethrpc = require("../rpc-interface");
  var subscriptions = require("./subscriptions");

  /**
   * Removes all active listeners for events emitted by the Ethereum blockchain.
   * @return {boolean} True if listeners were successfully stopped; false otherwise.
   */
  function stopBlockchainEventListeners() {
    var token,
        blockStream = ethrpc.getBlockStream();
    if (!blockStream) return false;
    for (token in blockStream.onLogAddedSubscribers) {
      if (blockStream.onLogAddedSubscribers.hasOwnProperty(token)) {
        blockStream.unsubscribeFromOnLogAdded(token);
      }
    }
    for (token in blockStream.onLogRemovedSubscribers) {
      if (blockStream.onLogRemovedSubscribers.hasOwnProperty(token)) {
        blockStream.unsubscribeFromOnLogRemoved(token);
      }
    }
    for (token in subscriptions.getSubscriptions()) {
      if (blockStream.logFilters.hasOwnProperty(token)) {
        blockStream.removeLogFilter(token);
        subscriptions.removeSubscription(token);
      }
    }
    return true;
  }

  module.exports = stopBlockchainEventListeners;
  },{"../rpc-interface":87,"./subscriptions":58}],58:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;

  var initialState = { block: {} };

  var subscriptions = assign({}, initialState);

  module.exports.getSubscriptions = function () {
    return subscriptions;
  };

  module.exports.addSubscription = function (contractAddress, token, callback) {
    subscriptions[contractAddress] = { token: token, callback: callback };
  };

  module.exports.removeSubscription = function (token) {
    subscriptions = Object.keys(subscriptions).reduce(function (p, contractAddress) {
      if (subscriptions[contractAddress].token !== token) {
        p[contractAddress] = subscriptions[contractAddress];
      }
      return p;
    }, {});
  };

  module.exports.addOnBlockAddedSubscription = function (token) {
    subscriptions.block.added = token;
  };

  module.exports.addOnBlockRemovedSubscription = function (token) {
    subscriptions.block.removed = token;
  };

  module.exports.removeOnBlockAddedSubscription = function () {
    delete subscriptions.block.added;
  };

  module.exports.removeOnBlockRemovedSubscription = function () {
    delete subscriptions.block.removed;
  };

  module.exports.resetState = function () {
    subscriptions = assign({}, initialState);
  };
  },{"lodash":420}],59:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var speedomatic = require("speedomatic");
  var decodeTag = require("../tag/decode-tag");

  function formatLogMessage(contractName, eventName, message) {
    switch (contractName) {
      case "Augur":
        switch (eventName) {
          case "MarketCreated":
            var extraInfo;
            try {
              extraInfo = JSON.parse(message.extraInfo);
            } catch (exc) {
              if (exc.constructor !== SyntaxError) throw exc;
              extraInfo = null;
            }
            var formattedMessage = {
              extraInfo: extraInfo,
              marketCreationFee: speedomatic.unfix(message.marketCreationFee, "string"),
              topic: decodeTag(message.topic),
              minPrice: speedomatic.unfix(message.minPrice, "string"),
              maxPrice: speedomatic.unfix(message.maxPrice, "string")
            };
            if (message.marketType === "1") {
              formattedMessage.outcomes = message.outcomes.map(function (outcome) {
                return decodeTag(outcome);
              });
            }
            return assign({}, immutableDelete(message, "outcomes"), formattedMessage);
          case "ReportSubmitted":
            return assign({}, message, {
              amountStaked: speedomatic.unfix(message.amountStaked, "string")
            });
          default:
            return message;
        }
      default:
        return message;
    }
  }

  module.exports = formatLogMessage;
  },{"../tag/decode-tag":62,"immutable-delete":377,"lodash":420,"speedomatic":492}],60:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");
  var formatLoggedEventTopic = require("./format-logged-event-topic");

  function formatLoggedEventInputs(loggedTopics, loggedData, abiEventInputs) {
    var decodedData = speedomatic.abiDecodeData(abiEventInputs, loggedData);
    var topicIndex = 0;
    var dataIndex = 0;
    return abiEventInputs.reduce(function (p, eventInput) {
      if (eventInput.indexed) {
        p[eventInput.name] = formatLoggedEventTopic(loggedTopics[topicIndex + 1], eventInput.type);
        ++topicIndex;
      } else {
        p[eventInput.name] = decodedData[dataIndex];
        ++dataIndex;
      }
      return p;
    }, {});
  }

  module.exports = formatLoggedEventInputs;
  },{"./format-logged-event-topic":61,"speedomatic":492}],61:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var speedomatic = require("speedomatic");

  function formatLoggedEventTopic(unformattedValue, inputType) {
    switch (inputType) {
      case "int256":
        return new BigNumber(unformattedValue, 16).toFixed();
      case "uint256":
        return new BigNumber(unformattedValue, 16).abs().toFixed();
      case "int256[]":
      case "uint256[]":
        return unformattedValue.map(function (value) {
          return formatLoggedEventTopic(value, inputType.slice(0, -2));
        });
      case "address":
      case "address[]":
        return speedomatic.formatEthereumAddress(unformattedValue);
      case "bytes32":
      case "bytes32[]":
        return speedomatic.formatInt256(unformattedValue);
      default:
        return unformattedValue;
    }
  }

  module.exports = formatLoggedEventTopic;
  },{"bignumber.js":157,"speedomatic":492}],62:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");

  var decodeTag = function decodeTag(tag) {
    try {
      return tag && tag !== "0x0" && tag !== "0x" ? speedomatic.abiDecodeShortStringAsInt256(speedomatic.unfork(tag, true)) : null;
    } catch (exc) {
      console.error("decodeTag failed:", exc, tag);
      return null;
    }
  };

  module.exports = decodeTag;
  },{"speedomatic":492}],63:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");

  var encodeTag = function encodeTag(tag) {
    if (tag == null || tag === "") return "0x0";
    return speedomatic.abiEncodeShortStringAsInt256(tag.trim());
  };

  module.exports = encodeTag;
  },{"speedomatic":492}],64:[function(require,module,exports){
  "use strict";

  var ethrpc = require("ethrpc");

  function defaultGetGasPrice(callback) {
    callback(ethrpc.getGasPrice());
  }

  var gasPriceFunction = defaultGetGasPrice;

  function getGasPrice(newGasPriceFunction) {
    if (newGasPriceFunction === undefined) {
      gasPriceFunction = defaultGetGasPrice;
    } else {
      gasPriceFunction = newGasPriceFunction;
    }
  }

  module.exports = {
    get: function get() {
      return gasPriceFunction;
    },
    set: getGasPrice
  };
  },{"ethrpc":273}],65:[function(require,module,exports){
  /**
   * Augur JavaScript API
   * @author Jack Peterson (jack@tinybike.net)
   */

  "use strict";

  var BigNumber = require("bignumber.js");
  var version = require("./version");

  BigNumber.config({
    MODULO_MODE: BigNumber.EUCLID,
    ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN
  });

  function Augur() {
    this.version = version;
    this.options = {
      debug: {
        broadcast: false, // broadcast debug logging in ethrpc
        connect: false, // connection debug logging in ethrpc and ethereumjs-connect
        tx: false // transaction debug logging in ethrpc
      }
    };
    this.accounts = require("./accounts");
    this.api = require("./api")();
    this.generateContractApi = require("./api").generateContractApi;
    this.assets = require("./assets");
    this.connect = require("./connect").bind(this);
    this.constants = require("./constants");
    this.contracts = require("./contracts");
    this.createMarket = require("./create-market");
    this.disconnect = require("./disconnect");
    this.events = require("./events");
    this.markets = require("./markets");
    this.reporting = require("./reporting");
    this.rpc = require("./rpc-interface");
    this.trading = require("./trading");
    this.augurNode = require("./augur-node");
    this.utils = require("./utils");
  }

  Object.defineProperty(Augur.prototype, "getGasPrice", require("./get-gas-price"));

  module.exports = Augur;
  module.exports.version = version;
  module.exports.Augur = Augur;
  module.exports.default = Augur;
  },{"./accounts":3,"./api":7,"./assets":10,"./augur-node":17,"./connect":26,"./constants":31,"./contracts":34,"./create-market":43,"./disconnect":44,"./events":49,"./get-gas-price":64,"./markets":72,"./reporting":86,"./rpc-interface":87,"./trading":103,"./utils":138,"./version":147,"bignumber.js":157}],66:[function(require,module,exports){
  /**
   * @todo Provide details for how category popularity is calculated.
   */

  "use strict";

  /**
   * @typedef {Object} Category
   * @property {string} category Name of a category.
   * @property {number|string} popularity Category popularity. (The exact method for calculating this value is still pending.)
   */

  var augurNode = require("../augur-node");

  /**
   * Returns the market categories in a specific universe. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.universe Contract address of the universe from which to retrieve the categories, as a hexadecimal string.
   * @param {string=} p.sortBy Field name by which to sort the categories.
   * @param {boolean=} p.isSortDescending Whether to sort categories in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of categories to return.
   * @param {string=} p.offset Number of categories to truncate from the beginning of the results.
   * @param {function} callback Called after the categories have been retrieved.
   * @return {Category[]} Array representing the categories in the specified universe.
   */
  function getCategories(p, callback) {
    augurNode.submitRequest("getCategories", p, callback);
  }

  module.exports = getCategories;
  },{"../augur-node":17}],67:[function(require,module,exports){
  "use strict";

  /** Type definition for TimestampedPrice.
   * @typedef {Object} TimestampedPrice
   * @property {number} price Display (non-normalized) price, as a base-10 number.
   * @property {number} amount Display price, as a base-10 number.
   * @property {number} timestamp Unix timestamp for this price in seconds, as an integer.
   */

  /** Type definition for SingleOutcomePriceTimeSeries.
   * @typedef {Object} SingleOutcomePriceTimeSeries
   * @property {TimestampedPrice[]} Array of timestamped price points for this outcome.
   */

  /** Type definition for MarketPriceTimeSeries.
   * @typedef {Object} MarketPriceTimeSeries
   * @property {SingleOutcomePriceTimeSeries} Price time-series for a single outcome, keyed by outcome ID.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns the prices and timestamps of a specific market's outcomes over time. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.marketId Market contract address for which to look up orders, as a hexadecimal string.
   * @param {function} callback Called after the price time-series has been received and parsed.
   * @return {MarketPriceTimeSeries} This market's price time-series, keyed by outcome ID.
   */
  function getMarketPriceHistory(p, callback) {
    augurNode.submitRequest("getMarketPriceHistory", p, callback);
  }

  module.exports = getMarketPriceHistory;
  },{"../augur-node":17}],68:[function(require,module,exports){
  "use strict";

  var augurNode = require("../augur-node");

  /**
   * Returns the markets closing between a given time range in a specific universe. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.universe Contract address of the universe from which to get the markets, as a hexadecimal string.
   * @param {number} p.earliestClosingTime Earliest market close timestamp at which to truncate market results, in seconds.
   * @param {number} p.latestClosingTime Latest market close timestamp at which to truncate market results, in seconds.
   * @param {string=} p.sortBy Field name by which to sort the markets.
   * @param {boolean=} p.isSortDescending Whether to sort the markets in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of markets to return.
   * @param {string=} p.offset Number of markets to truncate from the beginning of the results.
   * @param {function} callback Called after the markets have been retrieved.
   * @return {string[]} Array of closing market addresses, as hexadecimal strings.
   */
  function getMarketsClosingInDateRange(p, callback) {
    augurNode.submitRequest("getMarketsClosingInDateRange", p, callback);
  }

  module.exports = getMarketsClosingInDateRange;
  },{"../augur-node":17}],69:[function(require,module,exports){
  /**
   * @todo Add more details for how outstanding shares, outcome volume, & market volume are calculated.
   */
  "use strict";

  /**
   * @typedef {Object} OutcomeInfo
   * @property {number} id Market outcome ID
   * @property {number} volume Trading volume for this outcome. (Method for calculating this is pending.)
   * @property {number} price Price of the outcome.
   * @property {string|null} description Description for the outcome.
   */

  /**
   * @typedef {Object} MarketInfo
   * @property {string} id Address of a market, as a hexadecimal string.
   * @property {string} universe Address of a universe, as a hexadecimal string.
   * @property {string} type Type of market ("yesNo", "categorical", or "scalar").
   * @property {number} numOutcomes Total possible outcomes for the market.
   * @property {number} minPrice Minimum price allowed for a share on a market, in ETH. For yesNo & categorical markets, this is 0 ETH. For scalar markets, this is the bottom end of the range set by the market creator.
   * @property {number} maxPrice Maximum price allowed for a share on a market, in ETH. For yesNo & categorical markets, this is 1 ETH. For scalar markets, this is the top end of the range set by the market creator.
   * @property {string} cumulativeScale Difference between maxPrice and minPrice.
   * @property {string} author Ethereum address of the creator of the market, as a hexadecimal string.
   * @property {number} creationTime Timestamp when the Ethereum block containing the market creation was created, in seconds.
   * @property {number} creationBlock Number of the Ethereum block containing the market creation.
   * @property {number} creationFee Fee paid by the market creator to create the market, in ETH.
   * @property {number} reportingFeeRate Percentage rate of ETH sent to the reporting window containing the market whenever shares are settled. Reporting fees are later used to pay REP holders for Reporting on the Outcome of Markets.
   * @property {number} marketCreatorFeeRate Percentage rate of ETH paid to the market creator whenever shares are settled.
   * @property {number|null} marketCreatorFeesCollected Amount of fees the market creator collected from the market, in ETH.
   * @property {string} category Name of the category the market is in.
   * @property {Array<string|null>} tags Names with which the market has been tagged.
   * @property {number} volume Trading volume for this outcome. (Method for calculating this is pending.)
   * @property {string} openInterest Open interest for the Market.
   * @property {number} outstandingShares Total shares in the market. (Method for calculating this is pending.)
   * @property {REPORTING_STATE|null} reportingState Reporting state name.
   * @property {string} reportingWindow Contract address of the reporting window the market is in, as a hexadecimal string.
   * @property {number} endTime Timestamp when the market event ends, in seconds.
   * @property {number|null} finalizationTime Timestamp when the market was finalized (if any), in seconds.
   * @property {string} description Description of the market.
   * @property {string|null} extraInfo Stringified JSON object containing resolutionSource, tags, longDescription, and outcomeNames (for categorical markets).
   * @property {string} designatedReporter Ethereum address of the market's designated report, as a hexadecimal string.
   * @property {number} designatedReportStake Amount of ETH the designated reporter staked on the outcome submitted in the designated report.
   * @property {string|null} resolutionSource Reference source used to determine the outcome of the market event.
   * @property {number} numTicks Number of possible prices, or ticks, between a market's minimum price and maximum price.
   * @property {number|null} consensus Consensus outcome for the market.
   * @property {OutcomeInfo[]} outcomes Array of OutcomeInfo objects.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns information about markets that are stored on-contract. The returned result includes basic information about the markets as well as information about each market outcome. It does not include Order Book information; however the function `augur.trading.getOrders` can be used to get information about orders for the specified market. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string[]} p.marketIds Contract addresses of the markets for which to get details, as hexadecimal strings.
   * @return {MarketInfo[]}
   */
  function getMarketsInfo(p, callback) {
    augurNode.submitRequest("getMarketsInfo", p, callback);
  }

  module.exports = getMarketsInfo;
  },{"../augur-node":17}],70:[function(require,module,exports){
  "use strict";

  var augurNode = require("../augur-node");

  /**
   * Returns an array of markets in a specific universe. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.universe Contract address of the universe from which to get transfer history.
   * @param {string=} p.sortBy Field name by which to sort the markets.
   * @param {boolean=} p.isSortDescending Whether to sort the markets in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of markets to return.
   * @param {string=} p.offset Number of markts to truncate from the beginning of the results.
   * @param {function} callback Called after the markets have been retrieved.
   * @return {string[]} Array of market addresses in the universe, as hexadecimal strings.
   */
  function getMarkets(p, callback) {
    augurNode.submitRequest("getMarkets", p, callback);
  }

  module.exports = getMarkets;
  },{"../augur-node":17}],71:[function(require,module,exports){
  "use strict";

  /**
  * @typedef {Object} MarketCreatorFee
  * @property {string} marketId Address of a market, as a hexadecimal string.
  * @property {number|string} unclaimedFee Fee available to be claimed from the market, by the market creator, in attoETH
  */

  var augurNode = require("../augur-node");

  /**
   * Returns information about unclaimed market creator fees. Fees are only available on finalized markets.
   * @param {Object} p Parameters object.
   * @param {string[]} p.marketIds Contract addresses of the markets for which to get details, as hexadecimal strings.
   * @return {MarketCreatorFee[]}
   */
  function getUnclaimedMarketCreatorFees(p, callback) {
    augurNode.submitRequest("getUnclaimedMarketCreatorFees", p, callback);
  }

  module.exports = getUnclaimedMarketCreatorFees;
  },{"../augur-node":17}],72:[function(require,module,exports){
  "use strict";

  module.exports = {
    getMarketsInfo: require("./get-markets-info"),
    getMarketPriceHistory: require("./get-market-price-history"),
    getMarkets: require("./get-markets"),
    getMarketsClosingInDateRange: require("./get-markets-closing-in-date-range"),
    getUnclaimedMarketCreatorFees: require("./get-unclaimed-market-creator-fees"),
    getCategories: require("./get-categories")
  };
  },{"./get-categories":66,"./get-market-price-history":67,"./get-markets":70,"./get-markets-closing-in-date-range":68,"./get-markets-info":69,"./get-unclaimed-market-creator-fees":71}],73:[function(require,module,exports){
  "use strict";

  var async = require("async");
  var BigNumber = require("bignumber.js");
  var immutableDelete = require("immutable-delete");
  var assign = require("lodash").assign;
  var api = require("../api");
  var contractTypes = require("../constants").CONTRACT_TYPE;
  var PARALLEL_LIMIT = require("../constants").PARALLEL_LIMIT;

  /**
   * @typedef {Object} CrowdsourcerState
   * @property {string} crowdsourcerId Ethereum contract address of a DisputeCrowdsourcer belonging to a Forked Market, as a hexadecimal string.
   * @property {boolean} needsFork Whether `DisputeCrowdsourcer.fork` has been called successfully on the DisputeCrowdsourcer.
   */

  /**
   * @typedef {Object} InitialReporterState
   * @property {string} initialReporterId Ethereum contract address of the InitialReporter belonging to a Forked Market, as a hexadecimal string.
   * @property {boolean} needsFork Whether `InitialReporter.fork` has been called successfully on the InitialReporter.
   */

  /**
   * @typedef {Object} ForkedMarket
   * @property {Array.<CrowdsourcerState>} crowdsourcers Array of objects containing information about the Forked Market’s DisputeCrowdsourcers.
   * @property {InitialReporterState|null} initialReporter Object containing information about the Forked Market’s InitialReporter.
   */

  /**
   * Claims all reporting fees for a user as follows:
   *
   * For each reporting participant of the forked market in which the user has unclaimed fees:
   *   If `DisputeCrowdsourcer.fork`/`InitialReporter.fork` has not been called:
   *     Call `DisputeCrowdsourcer.forkAndRedeem`/`InitialReporter.forkAndRedeem`
   *   Else:
   *     Call `DisputeCrowdsourcer.redeem`/`InitialReporter.redeem`
   *
   * @param {Object} p Parameters object.
   * @param {string} p.redeemer Ethereum address attempting to redeem reporting fees, as a hexadecimal string.
   * @param {ForkedMarket} p.forkedMarket Object containing information about the Forked Market in which the user has unclaimed fees in the Parent Universe(if there is one).
   * @param {boolean} p.estimateGas Whether to return gas estimates for the transactions instead of actually making the transactions.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the transactions are broadcast to the network. (Currently used as a placeholder and not actually used by this function.)
   * @param {function} p.onSuccess Called if/when all transactions are sealed and confirmed.
   * @param {function} p.onFailed Called if/when all transactions have been attempted and at least one transaction has failed. Error message shows which transactions succeeded and which ones failed.
   */
  function claimReportingFeesForkedMarket(p) {
    var payload = immutableDelete(p, ["redeemer", "forkedMarket", "estimateGas", "onSent", "onSuccess", "onFailed"]);
    var successfulTransactions = {
      crowdsourcerForkAndRedeem: [],
      initialReporterForkAndRedeem: [],
      crowdsourcerRedeem: [],
      initialReporterRedeem: []
    };
    var failedTransactions = {
      crowdsourcerForkAndRedeem: [],
      initialReporterForkAndRedeem: [],
      crowdsourcerRedeem: [],
      initialReporterRedeem: []
    };
    var gasEstimates = {
      crowdsourcerForkAndRedeem: [],
      initialReporterForkAndRedeem: [],
      crowdsourcerRedeem: [],
      initialReporterRedeem: [],
      totals: {
        crowdsourcerForkAndRedeem: new BigNumber(0),
        initialReporterForkAndRedeem: new BigNumber(0),
        crowdsourcerRedeem: new BigNumber(0),
        initialReporterRedeem: new BigNumber(0),
        all: new BigNumber(0)
      }
    };

    var redeemableContracts = [];
    var i;
    if (p.forkedMarket) {
      if (p.forkedMarket.crowdsourcers) {
        for (i = 0; i < p.forkedMarket.crowdsourcers.length; i++) {
          redeemableContracts.push({
            address: p.forkedMarket.crowdsourcers[i].crowdsourcerId,
            needsFork: p.forkedMarket.crowdsourcers[i].needsFork,
            type: contractTypes.DISPUTE_CROWDSOURCER
          });
        }
      }
      if (p.forkedMarket.initialReporter && p.forkedMarket.initialReporter.initialReporterId) {
        redeemableContracts.push({
          address: p.forkedMarket.initialReporter.initialReporterId,
          needsFork: p.forkedMarket.initialReporter.needsFork,
          type: contractTypes.INITIAL_REPORTER
        });
      }
    }

    async.eachLimit(redeemableContracts, PARALLEL_LIMIT, function (contract, nextContract) {
      switch (contract.type) {
        case contractTypes.DISPUTE_CROWDSOURCER:
          if (contract.needsFork) {
            api().DisputeCrowdsourcer.forkAndRedeem(assign({}, payload, {
              tx: {
                to: contract.address,
                estimateGas: p.estimateGas
              },
              onSent: function onSent() {},
              onSuccess: function onSuccess(result) {
                if (p.estimateGas) {
                  result = new BigNumber(result, 16);
                  gasEstimates.crowdsourcerForkAndRedeem.push({ address: contract.address, estimate: result });
                  gasEstimates.totals.crowdsourcerForkAndRedeem = gasEstimates.totals.crowdsourcerForkAndRedeem.plus(result);
                } else {
                  successfulTransactions.crowdsourcerForkAndRedeem.push(contract.address);
                }
                // console.log("Forked and redeemed crowdsourcer", contract.address);
                nextContract();
              },
              onFailed: function onFailed() {
                failedTransactions.crowdsourcerForkAndRedeem.push(contract.address);
                // console.log("Failed to forkAndRedeem crowdsourcer", contract.address);
                nextContract();
              }
            }));
          } else {
            api().DisputeCrowdsourcer.redeem(assign({}, payload, {
              _redeemer: p.redeemer,
              tx: {
                to: contract.address,
                estimateGas: p.estimateGas
              },
              onSent: function onSent() {},
              onSuccess: function onSuccess(result) {
                if (p.estimateGas) {
                  result = new BigNumber(result, 16);
                  gasEstimates.crowdsourcerRedeem.push({ address: contract.address, estimate: result });
                  gasEstimates.totals.crowdsourcerRedeem = gasEstimates.totals.crowdsourcerRedeem.plus(result);
                } else {
                  successfulTransactions.crowdsourcerRedeem.push(contract.address);
                }
                // console.log("Redeemed crowdsourcer", contract.address);
                nextContract();
              },
              onFailed: function onFailed() {
                failedTransactions.crowdsourcerRedeem.push(contract.address);
                // console.log("Failed to redeem crowdsourcer", contract.address);
                nextContract();
              }
            }));
          }
          break;
        case contractTypes.INITIAL_REPORTER:
          if (contract.needsFork) {
            api().InitialReporter.forkAndRedeem(assign({}, payload, {
              tx: {
                to: contract.address,
                estimateGas: p.estimateGas
              },
              onSent: function onSent() {},
              onSuccess: function onSuccess(result) {
                if (p.estimateGas) {
                  result = new BigNumber(result, 16);
                  gasEstimates.initialReporterForkAndRedeem.push({ address: contract.address, estimate: result });
                  gasEstimates.totals.initialReporterForkAndRedeem = gasEstimates.totals.initialReporterForkAndRedeem.plus(result);
                } else {
                  successfulTransactions.initialReporterForkAndRedeem.push(contract.address);
                }
                // console.log("Forked and redeemed initialReporter", contract.address);
                nextContract();
              },
              onFailed: function onFailed() {
                failedTransactions.initialReporterForkAndRedeem.push(contract.address);
                // console.log("Failed to forkAndRedeem initialReporter", contract.address);
                nextContract();
              }
            }));
          } else {
            api().InitialReporter.redeem(assign({}, payload, {
              "": p.redeemer,
              tx: {
                to: contract.address,
                estimateGas: p.estimateGas
              },
              onSent: function onSent() {},
              onSuccess: function onSuccess(result) {
                if (p.estimateGas) {
                  result = new BigNumber(result, 16);
                  gasEstimates.initialReporterRedeem.push({ address: contract.address, estimate: result });
                  gasEstimates.totals.initialReporterRedeem = gasEstimates.totals.initialReporterRedeem.plus(result);
                } else {
                  successfulTransactions.initialReporterRedeem.push(contract.address);
                }
                // console.log("Redeemed initialReporter", contract.address);
                nextContract();
              },
              onFailed: function onFailed() {
                failedTransactions.initialReporterRedeem.push(contract.address);
                // console.log("Failed to redeem initialReporter", contract.address);
                nextContract();
              }
            }));
          }
          break;
        default:
          nextContract();
          break;
      }
    }, function () {
      var result = {
        successfulTransactions: successfulTransactions
      };
      if (p.estimateGas) {
        gasEstimates.totals.all = gasEstimates.totals.crowdsourcerForkAndRedeem.plus(gasEstimates.totals.initialReporterForkAndRedeem).plus(gasEstimates.totals.crowdsourcerRedeem).plus(gasEstimates.totals.initialReporterRedeem);

        gasEstimates.totals.crowdsourcerForkAndRedeem = gasEstimates.totals.crowdsourcerForkAndRedeem.toString();
        gasEstimates.totals.initialReporterForkAndRedeem = gasEstimates.totals.initialReporterForkAndRedeem.toString();
        gasEstimates.totals.crowdsourcerRedeem = gasEstimates.totals.crowdsourcerRedeem.toString();
        gasEstimates.totals.initialReporterRedeem = gasEstimates.totals.initialReporterRedeem.toString();
        gasEstimates.totals.all = gasEstimates.totals.all.toString();

        result = {
          gasEstimates: gasEstimates
        };
      }
      if (failedTransactions.crowdsourcerForkAndRedeem.length > 0 || failedTransactions.initialReporterForkAndRedeem.length > 0 || failedTransactions.crowdsourcerRedeem > 0 || failedTransactions.initialReporterRedeem > 0) {
        result.failedTransactions = failedTransactions;
        return p.onFailed(new Error("Not all transactions were successful.\n" + JSON.stringify(result)));
      }
      p.onSuccess(result);
    });
  }

  module.exports = claimReportingFeesForkedMarket;
  },{"../api":7,"../constants":31,"async":153,"bignumber.js":157,"immutable-delete":377,"lodash":420}],74:[function(require,module,exports){
  "use strict";

  var async = require("async");
  var BigNumber = require("bignumber.js");
  var immutableDelete = require("immutable-delete");
  var assign = require("lodash").assign;
  var api = require("../api");
  var contractTypes = require("../constants").CONTRACT_TYPE;
  var PARALLEL_LIMIT = require("../constants").PARALLEL_LIMIT;

  /**
  * @typedef {Object} NonforkedMarket
  * @property {string} marketId Ethereum contract address of the non-Forked Market, as a hexadecimal string.
  * @property {boolean} crowdsourcersAreDisavowed Whether the non-Forked Market's DisputeCrowdsourcers have been disavowed (i.e., its `Market.disavowCrowdsourcers` function has been called successfully).
  * @property {boolean} isMigrated Whether the non-Forked Market has been migrated to the Child Universe of its original Universe (i.e., its `Market.isMigrated` function has been called successfully).
  * @property {boolean} isFinalized Whether the non-Forked Market has been Finalized (i.e., its `Market.finalize` function has been called successfully).
  * @property {Array.<string>} crowdsourcers Array of Ethereum contract addresses of the non-Forked Market's DisputeCrowdsourcers, as hexadecimal strings.
  * @property {string|null} initialReporter Ethereum contract address of the non-Forked Market's InitialReporter, as a hexadecimal string.
  */

  var CROWDSOURCER_REDEEM_ESTIMATE = new BigNumber(500000, 10);

  function redeemContractFees(p, payload, successfulTransactions, failedTransactions, gasEstimates) {
    var redeemableContracts = [];
    var i;
    for (i = 0; i < p.feeWindows.length; i++) {
      redeemableContracts.push({
        address: p.feeWindows[i],
        type: contractTypes.FEE_WINDOW
      });
    }
    for (i = 0; i < p.nonforkedMarkets.length; i++) {
      for (var j = 0; j < p.nonforkedMarkets[i].crowdsourcers.length; j++) {
        var crowdsourcerAddress = p.nonforkedMarkets[i].crowdsourcers[j];
        var marketWasDisavowed = successfulTransactions.disavowCrowdsourcers.indexOf(p.nonforkedMarkets[i].marketId) !== -1;
        if (p.estimateGas && marketWasDisavowed) {
          gasEstimates.crowdsourcerRedeem.push({ address: crowdsourcerAddress, estimate: CROWDSOURCER_REDEEM_ESTIMATE });
          gasEstimates.totals.crowdsourcerRedeem = gasEstimates.totals.crowdsourcerRedeem.plus(CROWDSOURCER_REDEEM_ESTIMATE);
        } else {
          redeemableContracts.push({
            address: crowdsourcerAddress,
            type: contractTypes.DISPUTE_CROWDSOURCER
          });
        }
      }
      if (p.forkedMarket) {
        if (p.nonforkedMarkets[i].isFinalized) {
          redeemableContracts.push({
            address: p.nonforkedMarkets[i].initialReporter,
            type: contractTypes.INITIAL_REPORTER
          });
        }
      } else {
        redeemableContracts.push({
          address: p.nonforkedMarkets[i].initialReporter,
          type: contractTypes.INITIAL_REPORTER
        });
      }
    }

    var limit = p.estimateGas ? PARALLEL_LIMIT : 1;
    async.eachLimit(redeemableContracts, limit, function (contract, nextContract) {
      switch (contract.type) {
        case contractTypes.FEE_WINDOW:
          api().FeeWindow.redeem(assign({}, payload, {
            _sender: p.redeemer,
            tx: {
              to: contract.address,
              estimateGas: p.estimateGas
            },
            onSent: function onSent() {
              if (!p.estimateGas) {
                nextContract();
              }
            },
            onSuccess: function onSuccess(result) {
              if (p.estimateGas) {
                result = new BigNumber(result, 16);
                gasEstimates.feeWindowRedeem.push({ address: contract.address, estimate: result });
                gasEstimates.totals.feeWindowRedeem = gasEstimates.totals.feeWindowRedeem.plus(result);
              } else {
                successfulTransactions.feeWindowRedeem.push(contract.address);
              }
              if (p.estimateGas) nextContract();
              // console.log("Redeemed feeWindow", contract.address);
            },
            onFailed: function onFailed() {
              failedTransactions.feeWindowRedeem.push(contract.address);
              // console.log("Failed to redeem feeWindow", contract.address);
            }
          }));
          break;
        case contractTypes.DISPUTE_CROWDSOURCER:
          api().DisputeCrowdsourcer.redeem(assign({}, payload, {
            _redeemer: p.redeemer,
            tx: {
              to: contract.address,
              estimateGas: p.estimateGas
            },
            onSent: function onSent() {
              if (!p.estimateGas) {
                nextContract();
              }
            },
            onSuccess: function onSuccess(result) {
              if (p.estimateGas) {
                result = new BigNumber(result, 16);
                gasEstimates.crowdsourcerRedeem.push({ address: contract.address, estimate: result });
                gasEstimates.totals.crowdsourcerRedeem = gasEstimates.totals.crowdsourcerRedeem.plus(result);
              } else {
                successfulTransactions.crowdsourcerRedeem.push(contract.address);
              }
              if (p.estimateGas) nextContract();
              // console.log("Redeemed crowdsourcer", contract.address);
            },
            onFailed: function onFailed() {
              failedTransactions.crowdsourcerRedeem.push(contract.address);
              // console.log("Failed to redeem crowdsourcer", contract.address);
            }
          }));
          break;
        case contractTypes.INITIAL_REPORTER:
          api().InitialReporter.redeem(assign({}, payload, {
            "": p.redeemer,
            tx: {
              to: contract.address,
              estimateGas: p.estimateGas
            },
            onSent: function onSent() {
              if (!p.estimateGas) {
                nextContract();
              }
            },
            onSuccess: function onSuccess(result) {
              if (p.estimateGas) {
                result = new BigNumber(result, 16);
                gasEstimates.initialReporterRedeem.push({ address: contract.address, estimate: result });
                gasEstimates.totals.initialReporterRedeem = gasEstimates.totals.initialReporterRedeem.plus(result);
              } else {
                successfulTransactions.initialReporterRedeem.push(contract.address);
              }
              if (p.estimateGas) nextContract();
              // console.log("Redeemed initialReporter", contract.address);
            },
            onFailed: function onFailed() {
              failedTransactions.initialReporterRedeem.push(contract.address);
              // console.log("Failed to redeem initialReporter", contract.address);
            }
          }));
          break;
        default:
          nextContract();
          break;
      }
    }, function () {
      var result = {
        successfulTransactions: successfulTransactions
      };
      if (p.estimateGas) {
        gasEstimates.totals.all = gasEstimates.totals.disavowCrowdsourcers.plus(gasEstimates.totals.feeWindowRedeem).plus(gasEstimates.totals.crowdsourcerRedeem).plus(gasEstimates.totals.initialReporterRedeem);

        gasEstimates.totals.disavowCrowdsourcers = gasEstimates.totals.disavowCrowdsourcers.toString();
        gasEstimates.totals.feeWindowRedeem = gasEstimates.totals.feeWindowRedeem.toString();
        gasEstimates.totals.crowdsourcerRedeem = gasEstimates.totals.crowdsourcerRedeem.toString();
        gasEstimates.totals.initialReporterRedeem = gasEstimates.totals.initialReporterRedeem.toString();
        gasEstimates.totals.all = gasEstimates.totals.all.toString();

        result = {
          gasEstimates: gasEstimates
        };
      }
      if (failedTransactions.disavowCrowdsourcers.length > 0 || failedTransactions.feeWindowRedeem.length > 0 || failedTransactions.crowdsourcerRedeem > 0 || failedTransactions.initialReporterRedeem > 0) {
        result.failedTransactions = failedTransactions;
        return p.onFailed(new Error("Not all transactions were successful.\n" + JSON.stringify(result)));
      }
      p.onSuccess(result);
    });
  }

  /**
   * Claims all reporting fees for a user as follows:
   *
   * If a forked market exists in the current universe:
   *   For all non-finalized markets in current universe where the user has unclaimed fees in the reporting participants:
   *     Call `Market.disavowCrowdsourcers`
   *
   * Once the above has been completed:
   *   Call `FeeWindow.redeem` on all fee windows in the current universe where the user has unclaimed participation tokens
   *   For reporting participants of non-forked markets:
   *     Call `DisputeCrowdsourcer.redeem`
   *     For initial reporters belonging to non-forked markets:
   *       If a forked market exists in the current universe:
   *         If the initial reporter belongs to a finalized market:
   *           Call `InitialReporter.redeem`
   *       Else:
   *         Call `InitialReporter.redeem`
   *
   * @param {Object} p Parameters object.
   * @param {string} p.redeemer Ethereum address attempting to redeem reporting fees, as a hexadecimal string.
   * @param {Array.<string>} p.feeWindows Array of FeeWindow contract addresses which to claim reporting fees, as hexadecimal strings.
   * @param {Array.<NonforkedMarket>} p.nonforkedMarkets Array containing objects with information about the non-Forked Markets in which the user has unclaimed fees.
   * @param {boolean} p.estimateGas Whether to return gas estimates for the transactions instead of actually making the transactions.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the transactions are broadcast to the network. (Currently used as a placeholder and not actually used by this function.)
   * @param {function} p.onSuccess Called if/when all transactions are sealed and confirmed.
   * @param {function} p.onFailed Called if/when all transactions have been attempted and at least one transaction has failed. Error message shows which transactions succeeded and which ones failed.
   */
  function claimReportingFeesNonforkedMarkets(p) {
    var payload = immutableDelete(p, ["redeemer", "feeWindows", "forkedMarket", "nonforkedMarkets", "estimateGas", "onSent", "onSuccess", "onFailed"]);
    var successfulTransactions = {
      disavowCrowdsourcers: [],
      feeWindowRedeem: [],
      crowdsourcerRedeem: [],
      initialReporterRedeem: []
    };
    var failedTransactions = {
      disavowCrowdsourcers: [],
      feeWindowRedeem: [],
      crowdsourcerRedeem: [],
      initialReporterRedeem: []
    };
    var gasEstimates = {
      disavowCrowdsourcers: [],
      feeWindowRedeem: [],
      crowdsourcerRedeem: [],
      initialReporterRedeem: [],
      totals: {
        disavowCrowdsourcers: new BigNumber(0),
        feeWindowRedeem: new BigNumber(0),
        crowdsourcerRedeem: new BigNumber(0),
        initialReporterRedeem: new BigNumber(0),
        all: new BigNumber(0)
      }
    };

    if (p.forkedMarket) {
      var limit = p.estimateGas ? PARALLEL_LIMIT : 1;
      async.eachLimit(p.nonforkedMarkets, limit, function (nonforkedMarket, nextNonforkedMarket) {
        if (nonforkedMarket.isFinalized || nonforkedMarket.crowdsourcersAreDisavowed) {
          nextNonforkedMarket();
        } else {
          api().Market.disavowCrowdsourcers(assign({}, payload, {
            tx: {
              to: nonforkedMarket.marketId,
              estimateGas: p.estimateGas
            },
            onSent: function onSent() {
              if (!p.estimateGas) {
                nextNonforkedMarket();
              }
            },
            onSuccess: function onSuccess(result) {
              if (p.estimateGas) {
                result = new BigNumber(result, 16);
                gasEstimates.disavowCrowdsourcers.push({ address: nonforkedMarket.marketId, estimate: result });
                gasEstimates.totals.disavowCrowdsourcers = gasEstimates.totals.disavowCrowdsourcers.plus(result);
              }
              successfulTransactions.disavowCrowdsourcers.push(nonforkedMarket.marketId);
              if (p.estimateGas) nextNonforkedMarket();
              // console.log("Disavowed crowdsourcers for market", nonforkedMarket.marketId);
            },
            onFailed: function onFailed() {
              failedTransactions.disavowCrowdsourcers.push(nonforkedMarket.marketId);
              // console.log("Failed to disavow crowdsourcers for", nonforkedMarket.marketId);
            }
          }));
        }
      }, function () {
        redeemContractFees(p, payload, successfulTransactions, failedTransactions, gasEstimates);
      });
    } else {
      redeemContractFees(p, payload, successfulTransactions, failedTransactions, gasEstimates);
    }
  }

  module.exports = claimReportingFeesNonforkedMarkets;
  },{"../api":7,"../constants":31,"async":153,"bignumber.js":157,"immutable-delete":377,"lodash":420}],75:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.market Address of the market to finalize, as a hex string.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when the transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when the transaction is sealed and confirmed.
   * @param {function} p.onFailed Called if/when the transaction fails.
   */
  function finalizeMarket(p) {
    var marketPayload = { tx: { to: p.market } };
    api().Market.isFinalized(marketPayload, function (err, isFinalized) {
      if (err) return p.onFailed(err);
      if (parseInt(isFinalized, 16) === 1) return p.onSuccess(true);
      api().Market.finalize(assign({}, marketPayload, { tx: assign({}, marketPayload.tx, { send: false }) }), function (err, readyToFinalize) {
        if (err) return p.onFailed(err);
        if (readyToFinalize !== true) return p.onSuccess(false);
        api().Market.finalize(assign({}, immutableDelete(p, "market"), marketPayload));
      });
    });
  }

  module.exports = finalizeMarket;
  },{"../api":7,"immutable-delete":377,"lodash":420}],76:[function(require,module,exports){
  "use strict";

  function getCurrentPeriodProgress(reportingPeriodDurationInSeconds, timestamp) {
    var t = timestamp || parseInt(new Date().getTime() / 1000, 10);
    return 100 * (t % reportingPeriodDurationInSeconds) / reportingPeriodDurationInSeconds;
  }

  module.exports = getCurrentPeriodProgress;
  },{}],77:[function(require,module,exports){
  /**
   * @todo Update function return information
   */

  "use strict";

  var augurNode = require("../augur-node");

  /**
   * Returns dispute information about markets. The returned result includes dispute round, and an array of payouts. Optionally includes "reporter" stake in each payout. Requires an Augur Node connection.

   * @param {Object} p Parameters object.
   * @param {string[]} p.marketIds Contract addresses of the markets for which to get details, as hexadecimal strings.
   * @param {string} p.reporter Ethereum address of the user who has staked rep, as a hexadecimal string.
   * @return {DisuteInfo[]}
   */
  function getDisputeInfo(p, callback) {
    augurNode.submitRequest("getDisputeInfo", p, callback);
  }

  module.exports = getDisputeInfo;
  },{"../augur-node":17}],78:[function(require,module,exports){
  "use strict";

  /**
   * @typedef {Object} DisputeToken
   * @property {string} disputeToken Contract address of the Dispute Token, as a hexadecimal string.
   * @property {string} marketId Ethereum address of the Market, as a hexadecimal string.
   * @property {number|null} payout0 Payout numerator 0 of the Dispute Token’s payout set.
   * @property {number|null} payout1 Payout numerator 1 of the Dispute Token’s payout set.
   * @property {number|null} payout2 Payout numerator 2 of the Dispute Token’s payout set. (Set to null for yesNo and Scalar Markets.)
   * @property {number|null} payout3 Payout numerator 3 of the Dispute Token’s payout set. (Set to null for yesNo and Scalar Markets.)
   * @property {number|null} payout4 Payout numerator 4 of the Dispute Token’s payout set. (Set to null for yesNo and Scalar Markets.)
   * @property {number|null} payout5 Payout numerator 5 of the Dispute Token’s payout set. (Set to null for yesNo and Scalar Markets.)
   * @property {number|null} payout6 Payout numerator 6 of the Dispute Token’s payout set. (Set to null for yesNo and Scalar Markets.)
   * @property {number|null} payout7 Payout numerator 7 of the Dispute Token’s payout set. (Set to null for yesNo and Scalar Markets.)
   * @property {boolean|number} isInvalid Whether the Market was determined to be invalid.
   * @property {number} balance Dispute Token balance the owner has staked, in ETH.
   * @property {boolean|null} winningToken Index of the Payout Numerator that was determined to be the Market's Final Outcome.
   * @property {boolean} tentativeWinning Index of the Payout Numerator that is tentatively the winning Outcome.
   * @property {boolean} claimed Whether the Dispute Token has been claimed by the owner.
   * @property {string} reportingState Reporting state of the Market.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns the Dispute Tokens owned by a specific user that are either unclaimed or are in Markets that have not been Finalized.
   *
   * @param {Object} p Parameters object.
   * @param {string} p.universe Contract address of the Universe in which to retrieve the Dispute Tokens, as a hexadecimal string.
   * @param {string} p.account Contract address of the account for which to retrieve the Dispute Tokens, as a hexadecimal string.
   * @param {string?} p.disputeTokenState Token state by which to filter results.
   * @param {function} callback Called after the Dispute Tokens have been retrieved.
   * @return {Array.<DisputeToken>} Dispute Token details, keyed by Dispute Token ID.
   */
  function getDisputeTokens(p, callback) {
    augurNode.submitRequest("getDisputeTokens", p, callback);
  }

  module.exports = getDisputeTokens;
  },{"../augur-node":17}],79:[function(require,module,exports){
  /**
   * @todo Update function description & return information once function has been implemented.
   */

  "use strict";

  var augurNode = require("../augur-node");

  /**
   * Returns the current active fee window for a universe. Optionally, get a reporter's stake. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.universe Contract address of the universe to query for active fee window, as a hexadecimal string.
   * @param {string} p.reporter Ethereum address of the user who has staked rep on fee window fees, as a hexadecimal string.
   * @param {function} callback Called after the fee windows have been retrieved.
   * @return {} Pending.
   */
  function getFeeWindowCurrent(p, callback) {
    augurNode.submitRequest("getFeeWindowCurrent", p, callback);
  }

  module.exports = getFeeWindowCurrent;
  },{"../augur-node":17}],80:[function(require,module,exports){
  "use strict";

  /**
   * @typedef {Object} UnclaimedFeeWindowInfo
   * @property {number} startTime Unix timestamp when the Fee Window begins.
   * @property {number} endTime Unix timestamp when the Fee Window ends.
   * @property {number} balance Balance the user has Staked in the Fee Window, in attoREP.
   * @property {string} expectedFees Expected Reporting Fees, in attoREP, that will be withdrawn when the user redeems their Stake in the Fee Window.
   */

  var augurNode = require("../augur-node");

  /**
   * Calls an Augur Node to return the Fee Windows where a specific user has unclaimed Reporting Fees.
   *
   * @param {Object} p Parameters object.
   * @param {string} p.universe Ethereum contract address of the Universe in which the Fee Windows exist, as a hexadecimal string.
   * @param {string} p.account Ethereum address of the user who has unclaimed Reporting Fees, as a hexadecimal string.
   * @param {boolean} p.includeCurrent Whether to include the current Fee Window in the returned results.
   * @param {function} callback Called after the Fee Windows have been retrieved.
   * @return {Object} Object containing UnclaimedFeeWindowInfo objects, indexed by the Ethereum address of each FeeWindow contract.
   */
  function getFeeWindows(p, callback) {
    augurNode.submitRequest("getFeeWindows", p, callback);
  }

  module.exports = getFeeWindows;
  },{"../augur-node":17}],81:[function(require,module,exports){
  "use strict";

  /**
   * @typedef {Object} InitialReporter
   * @property {string} marketId Ethereum contract address of the Market for which the Initial Report was submitted
   * @property {string} reporter Ethereum address of the Reporter who submitted the Initial Report.
   * @property {number} amountStaked Amount of attoREP the Reporter Staked in the Initial Report.
   * @property {string} initialReporter Ethereum address of the InitialReporter contract to which the Initial Report was submitted.
   * @property {boolean} redeemed Whether the Reporter has redeemed their REP from the InitialReporter contract.
   * @property {boolean} isDesignatedReporter Whether `reporter` was the Designated Reporter (as opposed to the First Public Reporter).
   * @property {number} repBalance Amount of REP that the InitialReporter contract has as its balance.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns a list of InitialReporter contracts that a given Reporter has Staked REP in, along with how much attoREP was Staked and how much has been redeemed.
   *
   * @param {Object} p Parameters object.
   * @param {string} p.reporter Ethereum address of a Reporter who has Staked REP in InitialReporter contracts, as a hexadecimal string.
   * @param {boolean?} p.redeemed If true, the returned results will include only InitialReporter contracts where the Reporter has redeemed Staked REP; if false, the returned results will include only InitialReporter contracts where the Reporter has not redeemed Staked REP. If not specified, the results will include all InitialReporters in which the Repoter has Staked REP.
   * @param {boolean?} p.withRepBalance Whether the InitialReporter contract has a balance greater than 0. If set to true, only InitialReporters with a balance greater than 0 will be returned.
   * @param {function} callback Called after the InitialReporters have been retrieved.
   * @return {Object} Object containing InitialReporter objects, keyed by the Ethereum contract address of the InitialReporter.
   */
  function getInitialReporters(p, callback) {
    augurNode.submitRequest("getInitialReporters", p, callback);
  }

  module.exports = getInitialReporters;
  },{"../augur-node":17}],82:[function(require,module,exports){
  "use strict";

  var augurNode = require("../augur-node");

  function getReportingFees(p, callback) {
    augurNode.submitRequest("getReportingFees", p, callback);
  }

  module.exports = getReportingFees;
  },{"../augur-node":17}],83:[function(require,module,exports){
  /**
   * @todo Add descriptions for Report.isIndeterminate & Report.isSubmitted.
   */

  "use strict";

  /**
   * Serves as an enum for the state of a stake token.
   * @typedef {Object} REPORTING_STATE
   * @property {string} PRE_REPORTING Market's end time has not yet come to pass.
   * @property {string} DESIGNATED_REPORTING Market's end time has occurred, and it is pending a designated report.
   * @property {string} DESIGNATED_DISPUTE Market's designated report has been submitted and is allowed to be disputed.
   * @property {string} AWAITING_NO_REPORT_MIGRATION Either the disignated report was disputed, or the designated reporter failed to submit a report, and the market is waiting for the next reporting phase to begin.
   * @property {string} FIRST_REPORTING Market's designated report was disputed, and users can place stake on outcomes.
   * @property {string} FIRST_DISPUTE Market's first report has been submitted and is allowed to be disputed.
   * @property {string} LAST_REPORTING Market's first report was disputed, and users can place stake on outcomes.
   * @property {string} LAST_DISPUTE Market's first report has been submitted and is allowed to be disputed to cause a fork.
   * @property {string} FORKING Market's last report was disputed, causing a fork. Users can migrate their REP to the universe of their choice.
   * @property {string} FINALIZED An outcome for the market has been determined.
   * @property {string} AWAITING_FORK_MIGRATION Pending documentation. Possibly deprecated.
   * @property {string} AWAITING_FINALIZATION Pending documentation. Possibly deprecated.
   */

  /**
   * @typedef {Object} Report
   * @property {string} transactionHash Hash to look up the reporting transaction receipt.
   * @property {number} logIndex Number of the log index position in the Ethereum block containing the reporting transaction.
   * @property {number} creationBlockNumber Number of the Ethereum block containing the reporting transaction.
   * @property {string} blockHash Hash of the Ethereum block containing the reporting transaction.
   * @property {number} creationTime Timestamp, in seconds, when the Ethereum block containing the reporting transaction was created.
   * @property {string} marketId Contract address of the market, as a hexadecimal string.
   * @property {REPORTING_STATE} marketReportingState Reporting state of the market.
   * @property {string} reportingWindow Reporting window the market is in currently.
   * @property {number[]} payoutNumerators Array representing the payout set.
   * @property {number} amountStaked Description the reporter has staked on the outcome of their report.
   * @property {string} stakeToken Contract address of the stake token, as a hexadecimal string.
   * @property {boolean} isCategorical Whether the market is categorical.
   * @property {boolean} isScalar Whether the market is scalar.
   * @property {boolean} isIndeterminate Description pending.
   * @property {boolean} isSubmitted Description pending.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns information about the reports submitted by a particular user. For reporting windows that have ended, this includes the final outcome of the market, whether the user’s report matched that final outcome, how much REP the user gained or lost from redistribution, and how much the user earned in reporting fees. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.reporter Ethereum address of the reporter for which to retrieve reporting history, as a hexadecimal string.
   * @param {string=} p.universe Contract address of the universe in which to look up the reporting history, as a hexadecimal string. Either this parameter, the market ID, or the reporting window must be specified.
   * @param {string=} p.marketId Contract address of the market in which to look up the reporting history, as a hexadecimal string. Either this parameter, the universe, or the reporting window must be specified.
   * @param {string=} p.reportingWindow Contract address of the reporting window in which to look up the reporting history, as a hexadecimal string. Either this parameter, the universe, or the market ID must be specified.
   * @param {number=} p.earliestCreationTime Earliest timestamp, in seconds, at which to truncate history results. (This timestamp is when the block on the Ethereum blockchain containing the report submission was created.)
   * @param {number=} p.latestCreationTime Latest timestamp, in seconds, at which to truncate history results. (This timestamp is when the block on the Ethereum blockchain containing the report submission was created.)
   * @param {string=} p.sortBy Field name by which to sort the reporting history.
   * @param {boolean=} p.isSortDescending Whether to sort the reporting history in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of reporting history reports to return.
   * @param {string=} p.offset Number of reporting history reports to truncate from the beginning of the results.
   * @param {function} callback Called when reporting history has been received and parsed.
   * @return {Object} Reporting history, keyed by universe or market ID. Each report is of type {@link Report}.
   */
  function getReportingHistory(p, callback) {
    augurNode.submitRequest("getReportingHistory", p, callback);
  }

  module.exports = getReportingHistory;
  },{"../augur-node":17}],84:[function(require,module,exports){
  "use strict";

  var augurNode = require("../augur-node");

  /**
   * Returns the number of markets in various reporting phases, including “DESIGNATED_REPORTING”, “FIRST_REPORTING”, “LAST_REPORTING”, “AWAITING_FINALIZATION” (when a market has been reported on and is in a dispute phase), “FORKING” (for the market that has forked), “AWAITING_FORK_MIGRATION” (for markets that are waiting for a forked market to resolve), and “FINALIZED”. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.reportingWindow Contract address of the reporting window for which to get the summary, as a hexadecimal string.
   * @param {function} callback Called after the reporting summary has been retrieved.
   * @return {Object} Summary of the number of markets in each reporting phase, keyed by reporting phase.
   */
  function getReportingSummary(p, callback) {
    augurNode.submitRequest("getReportingSummary", p, callback);
  }

  module.exports = getReportingSummary;
  },{"../augur-node":17}],85:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var speedomatic = require("speedomatic");
  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.universe Universe address.
   * @param {function} callback Called after stake required has been retrieved.
   * @return {string} Amount of stake required for the designated reporter on this universe, as a base-10 string.
   */
  function getStakeRequiredForDesignatedReporter(p, callback) {
    var universePayload = assign({}, immutableDelete(p, "universe"), { tx: assign({ to: p.universe, send: false }, p.tx) });
    api().Universe.getOrCacheDesignatedReportStake(universePayload, function (err, designatedReportStake) {
      if (err) return callback(err);
      callback(null, speedomatic.unfix(designatedReportStake, "string"));
    });
  }

  module.exports = getStakeRequiredForDesignatedReporter;
  },{"../api":7,"immutable-delete":377,"lodash":420,"speedomatic":492}],86:[function(require,module,exports){
  "use strict";

  module.exports = {
    claimReportingFeesForkedMarket: require("./claim-reporting-fees-forked-market"),
    claimReportingFeesNonforkedMarkets: require("./claim-reporting-fees-nonforked-markets"),
    finalizeMarket: require("./finalize-market"),
    getCurrentPeriodProgress: require("./get-current-period-progress"),
    getDisputeInfo: require("./get-dispute-info"),
    getDisputeTokens: require("./get-dispute-tokens"),
    getFeeWindowCurrent: require("./get-fee-window-current"),
    getFeeWindows: require("./get-fee-windows"),
    getInitialReporters: require("./get-initial-reporters"),
    getReportingFees: require("./get-reporting-fees"),
    getReportingHistory: require("./get-reporting-history"),
    getReportingSummary: require("./get-reporting-summary"),
    getStakeRequiredForDesignatedReporter: require("./get-stake-required-for-designated-reporter")
  };
  },{"./claim-reporting-fees-forked-market":73,"./claim-reporting-fees-nonforked-markets":74,"./finalize-market":75,"./get-current-period-progress":76,"./get-dispute-info":77,"./get-dispute-tokens":78,"./get-fee-window-current":79,"./get-fee-windows":80,"./get-initial-reporters":81,"./get-reporting-fees":82,"./get-reporting-history":83,"./get-reporting-summary":84,"./get-stake-required-for-designated-reporter":85}],87:[function(require,module,exports){
  "use strict";

  var createRpcInterface = function createRpcInterface(ethrpc) {
    return {
      constants: ethrpc.constants,
      errors: ethrpc.errors,
      eth: ethrpc.eth,
      net: ethrpc.net,
      clear: ethrpc.clear,
      startBlockStream: ethrpc.startBlockStream,
      getBlockStream: ethrpc.getBlockStream,
      getCoinbase: ethrpc.getCoinbase,
      getCurrentBlock: ethrpc.getCurrentBlock,
      getGasPrice: ethrpc.getGasPrice,
      getNetworkID: ethrpc.getNetworkID,
      getLogs: ethrpc.getLogs,
      getTransport: ethrpc.getTransport,
      getTransactionReceipt: ethrpc.getTransactionReceipt,
      isUnlocked: ethrpc.isUnlocked,
      packageAndSubmitRawTransaction: ethrpc.packageAndSubmitRawTransaction,
      callContractFunction: ethrpc.callContractFunction,
      transact: ethrpc.transact,
      excludeFromTransactionRelay: ethrpc.excludeFromTransactionRelay,
      registerTransactionRelay: ethrpc.registerTransactionRelay,
      setDebugOptions: ethrpc.setDebugOptions,
      WsTransport: ethrpc.WsTransport,
      publish: ethrpc.publish,
      sha3: ethrpc.sha3
    };
  };

  var ethrpc = createRpcInterface(require("ethrpc"));
  ethrpc.createRpcInterface = createRpcInterface;

  module.exports = ethrpc;
  },{"ethrpc":273}],88:[function(require,module,exports){
  "use strict";

  function calculateAskCost(onChainPrice, onChainAmount, numTicks) {
    return numTicks.minus(onChainPrice).times(onChainAmount);
  }

  module.exports = calculateAskCost;
  },{}],89:[function(require,module,exports){
  "use strict";

  function calculateBidCost(onChainPrice, onChainAmount) {
    return onChainPrice.times(onChainAmount);
  }

  module.exports = calculateBidCost;
  },{}],90:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  function calculateTickSize(numTicks, minPrice, maxPrice) {
    if (!BigNumber.isBigNumber(numTicks)) numTicks = new BigNumber(numTicks, 10);
    if (!BigNumber.isBigNumber(minPrice)) minPrice = new BigNumber(minPrice, 10);
    if (!BigNumber.isBigNumber(maxPrice)) maxPrice = new BigNumber(maxPrice, 10);
    return maxPrice.minus(minPrice).dividedBy(numTicks);
  }

  module.exports = calculateTickSize;
  },{"bignumber.js":157}],91:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var calculateBidCost = require("./calculate-bid-cost");
  var calculateAskCost = require("./calculate-ask-cost");
  var calculateTickSize = require("./calculate-tick-size");
  var convertDisplayPriceToOnChainPrice = require("../utils/convert-display-price-to-on-chain-price");
  var convertDisplayAmountToOnChainAmount = require("../utils/convert-display-amount-to-on-chain-amount");

  /** Type definition for TradeCost.
   * @typedef {Object} TradeCost
   * @property {BigNumber} cost Wei (attoether) value needed for this trade.
   * @property {BigNumber} onChainAmount On-chain number of shares for this trade.
   * @property {BigNumber} onChainPrice On-chain price for this trade.
   */

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.displayPrice Normalized display price for this trade, as a base-10 string.
   * @param {string} p.displayAmount Number of shares to trade, as a base-10 string.
   * @param {string} p.sharesProvided Number of shares already owned and provided for this trade, as a base-10 string.
   * @param {string} p.numTicks The number of ticks for this market.
   * @param {string} p.maxDisplayPrice The maximum display price for this market, as a base-10 string.
   * @param {string} p.minDisplayPrice The minimum display price for this market, as a base-10 string.
   * @param {number} p.orderType Order type (0 for "buy", 1 for "sell").
   * @return {TradeCost} Cost breakdown of this trade.
   */
  function calculateTradeCost(p) {
    var minDisplayPrice = new BigNumber(p.minDisplayPrice, 10);
    var maxDisplayPrice = new BigNumber(p.maxDisplayPrice, 10);
    var displayPrice = new BigNumber(p.displayPrice, 10);
    var displayAmount = new BigNumber(p.displayAmount, 10);
    var sharesProvided = new BigNumber(p.sharesProvided || "0", 10);
    var numTicks = new BigNumber(p.numTicks, 10);
    var displayRange = maxDisplayPrice.minus(minDisplayPrice);
    var tickSize = calculateTickSize(numTicks, p.minDisplayPrice, p.maxDisplayPrice);
    var onChainPrice = convertDisplayPriceToOnChainPrice(displayPrice, minDisplayPrice, tickSize);
    var onChainAmount = convertDisplayAmountToOnChainAmount(displayAmount, displayRange, numTicks);
    var onChainSharesProvided = convertDisplayAmountToOnChainAmount(sharesProvided, displayRange, numTicks);
    var onChainAmountForPrice = onChainAmount.minus(onChainSharesProvided);
    var cost;
    if (p.orderType === 0) {
      onChainPrice = onChainPrice.integerValue(BigNumber.ROUND_CEIL);
      cost = calculateBidCost(onChainPrice, onChainAmountForPrice);
    } else {
      onChainPrice = onChainPrice.integerValue(BigNumber.ROUND_FLOOR);
      cost = calculateAskCost(onChainPrice, onChainAmountForPrice, numTicks);
    }
    console.log(JSON.stringify({ cost: cost.toFixed(), onChainAmount: onChainAmount.toFixed(), onChainSharesProvided: onChainSharesProvided.toFixed(), onChainPrice: onChainPrice.toFixed() }));
    return { cost: cost.integerValue(BigNumber.ROUND_CEIL), onChainAmount: onChainAmount.integerValue(BigNumber.ROUND_FLOOR), onChainPrice: onChainPrice };
  }

  module.exports = calculateTradeCost;
  },{"../utils/convert-display-amount-to-on-chain-amount":133,"../utils/convert-display-price-to-on-chain-price":134,"./calculate-ask-cost":88,"./calculate-bid-cost":89,"./calculate-tick-size":90,"bignumber.js":157}],92:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var async = require("async");
  var immutableDelete = require("immutable-delete");
  var claimTradingProceeds = require("./claim-trading-proceeds");
  var PARALLEL_LIMIT = require("../constants").PARALLEL_LIMIT;

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.markets Array of market addresses for which to claim proceeds.
   * @param {string} p._shareHolder User address that holds the shares.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when each transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when all transactions are sealed and confirmed.
   * @param {function} p.onFailed Called if/when any of the transactions fail.
   */
  function claimMarketsTradingProceeds(p) {
    var claimTradingProceedsPayload = immutableDelete(p, "markets");
    var claimedMarkets = [];
    async.eachLimit(p.markets, PARALLEL_LIMIT, function (market, nextMarket) {
      claimTradingProceeds(assign({}, claimTradingProceedsPayload, {
        _market: market,
        onSuccess: function onSuccess() {
          claimedMarkets.push(market);
          nextMarket();
        },
        onFailed: nextMarket
      }));
    }, function (err) {
      if (err) return p.onFailed(err);
      p.onSuccess(claimedMarkets);
    });
  }

  module.exports = claimMarketsTradingProceeds;
  },{"../constants":31,"./claim-trading-proceeds":93,"async":153,"immutable-delete":377,"lodash":420}],93:[function(require,module,exports){
  "use strict";

  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p._market Market address for which to claim proceeds.
   * @param {string} p._shareHolder User address that holds the shares.
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called if/when each transaction is broadcast to the network.
   * @param {function} p.onSuccess Called if/when all transactions are sealed and confirmed.
   * @param {function} p.onFailed Called if/when any of the transactions fail.
   */
  function claimTradingProceeds(p) {
    api().Market.getFinalizationTime({ tx: { to: p._market } }, function (err, finalizationTime) {
      if (err) return p.onFailed(err);
      if (parseInt(finalizationTime, 16) === 0) return p.onFailed(null); // market not yet finalized
      api().ClaimTradingProceeds.claimTradingProceeds(p);
    });
  }

  module.exports = claimTradingProceeds;
  },{"../api":7}],94:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  /**
   * Rescale a price to its display range [minPrice, maxPrice]: displayPrice = normalizedPrice*(maxPrice - minPrice) + minPrice
   * @param {Object} p Parameters object.
   * @param {BigNumber|string} p.minPrice This market's minimum possible price, as a BigNumber or base-10 string.
   * @param {BigNumber|string} p.maxPrice This market's maximum possible price, as a BigNumber or base-10 string.
   * @param {BigNumber|string} p.normalizedPrice The price to be denormalized, as a BigNumber or base-10 string.
   * @return {string} Price rescaled to [minPrice, maxPrice], as a base-10 string.
   */
  function denormalizePrice(p) {
    var minPrice = p.minPrice;
    var maxPrice = p.maxPrice;
    var normalizedPrice = p.normalizedPrice;
    if (!BigNumber.isBigNumber(minPrice)) minPrice = new BigNumber(minPrice, 10);
    if (!BigNumber.isBigNumber(maxPrice)) maxPrice = new BigNumber(maxPrice, 10);
    if (!BigNumber.isBigNumber(normalizedPrice)) normalizedPrice = new BigNumber(normalizedPrice, 10);
    if (minPrice.gt(maxPrice)) throw new Error("Minimum value larger than maximum value");
    if (normalizedPrice.lt(0)) throw new Error("Normalized price is below 0");
    if (normalizedPrice.gt(1)) throw new Error("Normalized price is above 1");
    return normalizedPrice.times(maxPrice.minus(minPrice)).plus(minPrice).toFixed();
  }

  module.exports = denormalizePrice;
  },{"bignumber.js":157}],95:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  var compareOrdersByPrice = {
    0: function _(order1, order2) {
      return BigNumber.isBigNumber(order1.fullPrecisionPrice) ? order1.fullPrecisionPrice.minus(order2.fullPrecisionPrice) : new BigNumber(order1.fullPrecisionPrice, 10).minus(new BigNumber(order2.fullPrecisionPrice, 10));
    },
    1: function _(order1, order2) {
      return BigNumber.isBigNumber(order2.fullPrecisionPrice) ? order2.fullPrecisionPrice.minus(order1.fullPrecisionPrice) : new BigNumber(order2.fullPrecisionPrice, 10).minus(new BigNumber(order1.fullPrecisionPrice, 10));
    }
  };

  /** Type definition for singleOutcomeOrderBookSideOrder.
   * @typedef {Object} singleOutcomeOrderBookSideOrder
   * @property {string} amount Number of shares to trade.
   * @property {string} fullPrecisionPrice Full price in ETH at which to trade.
   * @property {string} owner Ethereum address of the order's owner, as a 20-byte hexadecimal string.
   */

  /**
   * Bids are sorted descendingly, asks are sorted ascendingly.
   * @param {Object} p Parameters object.
   * @param {Array.<singleOutcomeOrderBookSideOrder>} p.singleOutcomeOrderBookSide Bid or ask orders for a particular outcome of a market.
   * @param {number} p.orderType Order type (0 for "buy", 1 for "sell").
   * @param {string} p.price Limit price for this order (i.e. the worst price the user will accept), as a base-10 string.
   * @return {Array.<singleOutcomeOrderBookSideOrder>} Array of filtered and sorted orders.
   */
  function filterAndSortByPrice(p) {
    if (!p || !p.singleOutcomeOrderBookSide) return [];
    var isMarketOrder = p.price == null;
    return Object.keys(p.singleOutcomeOrderBookSide).map(function (orderId) {
      return p.singleOutcomeOrderBookSide[orderId];
    }).filter(function (order) {
      var isMatchingPrice;
      if (!order || !order.fullPrecisionPrice) return false;
      if (isMarketOrder) {
        isMatchingPrice = true;
      } else {
        if (BigNumber.isBigNumber(order.fullPrecisionPrice)) {
          isMatchingPrice = p.orderType === 0 ? order.fullPrecisionPrice.lte(p.price) : order.fullPrecisionPrice.gte(p.price);
        } else {
          isMatchingPrice = p.orderType === 0 ? new BigNumber(order.fullPrecisionPrice, 10).lte(p.price) : new BigNumber(order.fullPrecisionPrice, 10).gte(p.price);
        }
      }
      return isMatchingPrice;
    }).sort(compareOrdersByPrice[p.orderType]);
  }

  module.exports = filterAndSortByPrice;
  },{"bignumber.js":157}],96:[function(require,module,exports){
  (function (Buffer){
  "use strict";

  var secureRandom = require("secure-random");
  var TRADE_GROUP_ID_NUM_BYTES = require("../constants").TRADE_GROUP_ID_NUM_BYTES;

  function generateTradeGroupId(tradeGroupIdNumBytes) {
    return "0x" + Buffer.from(secureRandom(tradeGroupIdNumBytes || TRADE_GROUP_ID_NUM_BYTES)).toString("hex");
  }

  module.exports = generateTradeGroupId;
  }).call(this,require("buffer").Buffer)
  },{"../constants":31,"buffer":166,"secure-random":461}],97:[function(require,module,exports){
  "use strict";

  /**
   * @typedef BetterWorseOrders
   * @property {string|null} betterOrderId ID of the order with the next best price over the specified order ID, as a hexadecimal string.
   * @property {string|null} worseOrderId ID of the order with the next worse price over the specified order ID, as a hexadecimal string.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns the IDs of the orders for a given outcome that have a better and worse price than the specified price. If no better/worse orders exist, null will be returned. This function should be called prior to calling augur.api.CreateOrder.publicCreateOrder in order to get the _betterOrderId and _worseOrderId parameters that it accepts. (_betterOrderId and _worseOrderId are used to optimize the sorting of Orders on the Order Book.) Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.marketId Contract address of the market for which to retrieve the better/worse orders, as a hexadecimal string.
   * @param {string} p.outcome Market outcome for which to find better/worse orders.
   * @param {string} p.orderType Desired type of order. Valid values are "buy" and "sell".
   * @param {number} p.price Price point at which to find better/worse orders.
   * @param {function} callback Called when better/worse orders have been retrieved.
   * @return {BetterWorseOrders} Object containing the better/worse order IDs, as hexidecimal strings.
   */
  function getBetterWorseOrders(p, callback) {
    augurNode.submitRequest("getBetterWorseOrders", p, callback);
  }

  module.exports = getBetterWorseOrders;
  },{"../augur-node":17}],98:[function(require,module,exports){
  "use strict";

  /**
   * Serves as an enum for the state of an order.
   * @typedef {Object} ORDER_STATE
   * @property {string} ALL Order is open, closed, or canceled. (If no order state is specified, this is the default value.)
   * @property {string} OPEN Order is available to be filled.
   * @property {string} CLOSED Order has been filled.
   * @property {string} CANCELED Order has been canceled (although it may have been partially filled).
   */

  /** Type definition for Order.
   * @typedef {Object} Order
   * @property {string} orderId ID of the order, as a 32-byte hexadecimal string.
   * @property {string} shareToken Contract address of the share token for which the order was placed, as a hexadecimal string.
   * @property {string} transactionHash Hash to look up the order transaction receipt.
   * @property {number} logIndex Number of the log index position in the Ethereum block containing the order transaction.
   * @property {string} owner The order maker's Ethereum address, as a hexadecimal string.
   * @property {number} creationTime Timestamp, in seconds, when the Ethereum block containing the order transaction was created.
   * @property {number} creationBlockNumber Number of the Ethereum block containing the order transaction.
   * @property {ORDER_STATE} orderState State of orders by which to filter results. Valid values are "ALL", "CANCELED", "CLOSED", & "OPEN".
   * @property {string} price Rounded display price, as a base-10 number.
   * @property {string} amount Current rounded number of shares to trade, as a base-10 number.
   * @property {string} originalAmount Original rounded number of shares to trade, as a base-10 number.
   * @property {string} fullPrecisionPrice Full-precision (un-rounded) display price, as a base-10 number.
   * @property {string} fullPrecisionAmount Current full-precision (un-rounded) number of shares to trade, as a base-10 number.
   * @property {string} originalFullPrecisionAmount Original full-precision (un-rounded) number of shares to trade, as a base-10 number.
   * @property {string} tokensEscrowed Number of the order maker's tokens held in escrow, as a base-10 number.
   * @property {string} sharesEscrowed Number of the order maker's shares held in escrow, as a base-10 number.
   */

  /** Type definition for SingleSideOrderBook.
   * @typedef {Object} SingleSideOrderBook
   * @property {Object|null} buy Buy (bid) Orders objects, keyed by order ID.
   * @property {Object|null} sell Sell (ask) Order objects, keyed by order ID.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns a list of orders in a given universe or market. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string=} p.universe Contract address of the universe from which to retrieve orders, as a hexadecimal string. Either this parameter or the marketId must be specified.
   * @param {string=} p.marketId Contract address of the market from which to retrieve orders, as a hexadecimal string. Either this parameter or the universe must be specified.
   * @param {number=} p.outcome Market outcome to filter results by. Valid values are in the range [0,7].
   * @param {string=} p.creator Ethereum address of the order creator, as a hexadecimal string.
   * @param {ORDER_STATE=} p.orderState State of orders by which to filter results. Valid values are "ALL", "CANCELED", "CLOSED", & "OPEN".
   * @param {number=} p.earliestCreationTime Earliest timestamp, in seconds, at which to truncate order results. (This timestamp is when the block on the Ethereum blockchain containing the transfer was created.)
   * @param {number=} p.latestCreationTime Latest timestamp, in seconds, at which to truncate order results. (This timestamp is when the block on the Ethereum blockchain containing the transfer was created.)
   * @param {string=} p.sortBy Field name by which to sort the orders.
   * @param {boolean=} p.isSortDescending Whether to sort orders in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of orders to return.
   * @param {string=} p.offset Number of orders to truncate from the beginning of the results.
   * @param {function} callback Called when the requested orders for this market/universe have been received and parsed.
   * @return {Object} Object containing a SingleSideOrderBook object for one side of the order book (buy or sell), keyed by universe/market and outcome.
   */
  function getOrders(p, callback) {
    augurNode.submitRequest("getOrders", p, function (err, openOrders) {
      if (err) return callback(err);
      callback(null, openOrders || {});
    });
  }

  module.exports = getOrders;
  },{"../augur-node":17}],99:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var async = require("async");
  var speedomatic = require("speedomatic");
  var api = require("../api");
  var convertFixedPointToDecimal = require("../utils/convert-fixed-point-to-decimal");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.address Address for which to look up share balances.
   * @param {string} p.market Market for which to look up share balances.
   * @param {string} p.tickSize Tick size (interval) for this market.
   * @return {string[]} Number of shares for each outcome of this market.
   */
  function getPositionInMarket(p, callback) {
    var marketPayload = { tx: { to: p.market } };
    api().Market.getNumberOfOutcomes(marketPayload, function (err, numberOfOutcomes) {
      if (err) return callback(err);
      var positionInMarket = new Array(parseInt(numberOfOutcomes, 16));
      async.forEachOf(positionInMarket, function (_, outcome, nextOutcome) {
        api().Market.getShareToken(assign({ _outcome: outcome }, marketPayload), function (err, shareToken) {
          if (err) return nextOutcome(err);
          api().ShareToken.balanceOf({ _owner: p.address, tx: { to: shareToken } }, function (err, shareTokenBalance) {
            if (err) return nextOutcome(err);
            positionInMarket[outcome] = convertFixedPointToDecimal(shareTokenBalance, speedomatic.fix(p.tickSize, "string"));
            nextOutcome();
          });
        });
      }, function (err) {
        if (err) return callback(err);
        callback(null, positionInMarket);
      });
    });
  }

  module.exports = getPositionInMarket;
  },{"../api":7,"../utils/convert-fixed-point-to-decimal":135,"async":153,"lodash":420,"speedomatic":492}],100:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var eventsAbi = require("../contracts").abi.events;
  var ethrpc = require("../rpc-interface");
  var parseLogMessage = require("../events/parse-message/parse-log-message");
  var convertOnChainAmountToDisplayAmount = require("../utils/convert-on-chain-amount-to-display-amount");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.transactionHash Transaction hash to look up a receipt for.
   * @param {BigNumber} p.startingOnChainAmount Amount remaining in the trade prior to this transaction.
   * @param {BigNumber=} p.tickSize Tick size (for debug logging only).
   * @return {BigNumber} Number of shares remaining.
   */
  function getTradeAmountRemaining(p, callback) {
    var tradeOnChainAmountRemaining = p.startingOnChainAmount;
    console.log("getTradeAmountRemaining initial amount remaining:", tradeOnChainAmountRemaining.toFixed(), "ocs", convertOnChainAmountToDisplayAmount(tradeOnChainAmountRemaining, p.tickSize).toFixed(), "shares");
    ethrpc.getTransactionReceipt(p.transactionHash, function (err, transactionReceipt) {
      if (err) return callback(new Error("getTransactionReceipt failed"));
      if (!transactionReceipt) return callback(new Error("transaction receipt not found"));
      if (!Array.isArray(transactionReceipt.logs) || !transactionReceipt.logs.length) {
        return callback(null, tradeOnChainAmountRemaining);
      }
      var orderFilledEventSignature = eventsAbi.Augur.OrderFilled.signature;
      var orderCreatedEventSignature = eventsAbi.Augur.OrderCreated.signature;
      var logs = transactionReceipt.logs;
      for (var i = 0, numLogs = logs.length; i < numLogs; ++i) {
        if (logs[i].topics[0] === orderFilledEventSignature) {
          var orderFilledLog = parseLogMessage("Augur", "OrderFilled", logs[i], eventsAbi.Augur.OrderFilled.inputs);
          var onChainAmountFilled = new BigNumber(orderFilledLog.amountFilled, 10);
          tradeOnChainAmountRemaining = tradeOnChainAmountRemaining.minus(onChainAmountFilled);
          console.log("single-log amount filled:", onChainAmountFilled.toFixed(), "ocs", convertOnChainAmountToDisplayAmount(onChainAmountFilled, p.tickSize).toFixed(), "shares");
          console.log("amount remaining after this log:", tradeOnChainAmountRemaining.toFixed(), "ocs", convertOnChainAmountToDisplayAmount(tradeOnChainAmountRemaining, p.tickSize).toFixed(), "shares");
        } else if (logs[i].topics[0] === orderCreatedEventSignature) {
          tradeOnChainAmountRemaining = new BigNumber(0);
        }
      }
      callback(null, tradeOnChainAmountRemaining);
    });
  }

  module.exports = getTradeAmountRemaining;
  },{"../contracts":34,"../events/parse-message/parse-log-message":51,"../rpc-interface":87,"../utils/convert-on-chain-amount-to-display-amount":136,"bignumber.js":157}],101:[function(require,module,exports){
  /**
   * @todo Add descriptions for UserTrade.price, UserTrade.amount, UserTrade.timestamp, & UserTrade.tradeGroupId.
   */
  "use strict";

  /**
   * @typedef {Object} UserTrade
   * @property {string} transactionHash Hash to look up the trade transaction receipt.
   * @property {number} logIndex Number of the log index position in the Ethereum block containing the trade transaction.
   * @property {string} type Type of trade. Valid values are "buy" and "sell".
   * @property {number} price Description pending.
   * @property {number} amount Description pending.
   * @property {boolean} maker Whether the specified user is the order maker (as opposed to filler).
   * @property {number} marketCreatorFees Amount of fees paid to market creator, in ETH.
   * @property {number} reporterFees Amount of fees paid to reporters, in ETH.
   * @property {string} marketId Contract address of the market, as a hexadecimal string.
   * @property {number} outcome Outcome being bought/sold.
   * @property {string} shareToken Contract address of the share token that was bought or sold, as a hexadecimal string.
   * @property {number} timestamp Description pending.
   * @property {number|null} tradeGroupId ID logged with each trade transaction (can be used to group trades client-side), as a hex string.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns information about the trades a specific user has made. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.account Ethereum address of the user for which to retrieve trading history, as a hexadecimal string.
   * @param {string=} p.universe Contract address of the universe in which to look up the trading history, as a hexadecimal string. Either this parameter or the market ID must be specified.
   * @param {string=} p.marketId Contract address of the market in which to look up the trading history, as a hexadecimal string. Either this parameter or the universe must be specified.
   * @param {string} p.outcome Outcome of the share being bought/sold.
   * @param {string} p.orderType Type of trade. Valid values are "buy" and "sell".
   * @param {string=} p.sortBy Field name by which to sort the trading history.
   * @param {boolean=} p.isSortDescending Whether to sort the trading history in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of trading history reports to return.
   * @param {string=} p.offset Number of trading history reports to truncate from the beginning of the results.
   * @param {function} callback Called when trading history has been received and parsed.
   * @return {UserTrade[]} Array of the user's trades, keyed by universe/market ID.
  */
  function getUserTradingHistory(p, callback) {
    augurNode.submitRequest("getTradingHistory", p, callback);
  }

  module.exports = getUserTradingHistory;
  },{"../augur-node":17}],102:[function(require,module,exports){
  /**
   * @todo Add descriptions for UserTradePosition.numSharesAdjustedForUserIntention, UserTradePosition.realizedProfitLoss, & UserTradePosition.unrealizedProfitLoss.
   */
  "use strict";

  /**
   * @typedef {Object} UserTradePosition
   * @property {string} marketId Contract address of the market, as a hexadecimal string.
   * @property {number} outcome Outcome of the shares the user owns.
   * @property {number} numShares Quantity of shares currently owned by the user.
   * @property {number} numSharesAdjustedForUserIntention Description pending.
   * @property {number} realizedProfitLoss Description pending.
   * @property {number} unrealizedProfitLoss Description pending.
   */

  var augurNode = require("../augur-node");

  /**
   * Returns the trading positions held by a specific user. Requires an Augur Node connection.
   * @param {Object} p Parameters object.
   * @param {string} p.account Ethereum address of the user for which to retrieve trading positions, as a hexadecimal string.
   * @param {string=} p.universe Contract address of the universe in which to look up the trading positions, as a hexadecimal string. Either this parameter or the market ID must be specified.
   * @param {string=} p.marketId Contract address of the market in which to look up the trading positions, as a hexadecimal string. Either this parameter or the universe must be specified.
   * @param {string} p.outcome Outcome of the share held for the market.
   * @param {string=} p.sortBy Field name by which to sort the trading positions.
   * @param {boolean=} p.isSortDescending Whether to sort the trading positions in descending order by sortBy field.
   * @param {string=} p.limit Maximum number of trading positions reports to return.
   * @param {string=} p.offset Number of trading positions reports to truncate from the beginning of the results.
   * @param {function} callback Called when the trading positions have been received and parsed.
   * @return {UserTradePosition[]} Array of the user's trading positions.
   */
  function getUserTradingPositions(p, callback) {
    augurNode.submitRequest("getUserTradingPositions", p, callback);
  }

  module.exports = getUserTradingPositions;
  },{"../augur-node":17}],103:[function(require,module,exports){
  "use strict";

  module.exports = {
    getBetterWorseOrders: require("./get-better-worse-orders"),
    getUserTradingHistory: require("./get-user-trading-history"),
    getUserTradingPositions: require("./get-user-trading-positions"),
    getPositionInMarket: require("./get-position-in-market"),
    filterAndSortByPrice: require("./filter-and-sort-by-price"),
    claimMarketsTradingProceeds: require("./claim-markets-trading-proceeds"),
    claimTradingProceeds: require("./claim-trading-proceeds"),
    simulateTrade: require("./simulation"),
    calculateProfitLoss: require("./profit-loss"),
    normalizePrice: require("./normalize-price"),
    denormalizePrice: require("./denormalize-price"),
    placeTrade: require("./place-trade"),
    tradeUntilAmountIsZero: require("./trade-until-amount-is-zero"),
    getOrders: require("./get-orders"),
    calculateTradeCost: require("./calculate-trade-cost"),
    generateTradeGroupId: require("./generate-trade-group-id")
  };
  },{"./calculate-trade-cost":91,"./claim-markets-trading-proceeds":92,"./claim-trading-proceeds":93,"./denormalize-price":94,"./filter-and-sort-by-price":95,"./generate-trade-group-id":96,"./get-better-worse-orders":97,"./get-orders":98,"./get-position-in-market":99,"./get-user-trading-history":101,"./get-user-trading-positions":102,"./normalize-price":104,"./place-trade":105,"./profit-loss":112,"./simulation":120,"./trade-until-amount-is-zero":130}],104:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  /**
   * Rescale a price to lie on [0, 1]: normalizedPrice = (price - minPrice) / (maxPrice - minPrice)
   * @param {Object} p Parameters object.
   * @param {BigNumber|string} p.minPrice This market's minimum possible price, as a BigNumber or base-10 string.
   * @param {BigNumber|string} p.maxPrice This market's maximum possible price, as a BigNumber or base-10 string.
   * @param {BigNumber|string} p.price The price to be normalized, as a BigNumber or base-10 string.
   * @return {string} Price rescaled to [0, 1], as a base-10 string.
   */
  function normalizePrice(p) {
    var minPrice = p.minPrice;
    var maxPrice = p.maxPrice;
    var price = p.price;
    if (!BigNumber.isBigNumber(minPrice)) minPrice = new BigNumber(minPrice, 10);
    if (!BigNumber.isBigNumber(maxPrice)) maxPrice = new BigNumber(maxPrice, 10);
    if (!BigNumber.isBigNumber(price)) price = new BigNumber(price, 10);
    if (minPrice.gt(maxPrice)) throw new Error("Minimum value larger than maximum value");
    if (price.lt(minPrice)) throw new Error("Price is below the minimum value");
    if (price.gt(maxPrice)) throw new Error("Price is above the maximum value");
    return price.minus(minPrice).dividedBy(maxPrice.minus(minPrice)).toFixed();
  }

  module.exports = normalizePrice;
  },{"bignumber.js":157}],105:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var immutableDelete = require("immutable-delete");
  var BigNumber = require("bignumber.js");
  var getBetterWorseOrders = require("./get-better-worse-orders");
  var tradeUntilAmountIsZero = require("./trade-until-amount-is-zero");
  var api = require("../api");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p.amount Number of shares to trade, as a base-10 string.
   * @param {string} p.sharesProvided Number of shares already owned and provided for this trade, as a base-10 string.
   * @param {string} p.limitPrice Display (non-normalized) limit price for this trade, as a base-10 string.
   * @param {string} p.estimatedCost Total cost (in ETH) of this trade, as a base-10 string.
   * @param {string} p.minPrice The minimum display (non-normalized) price for this market, as a base-10 string.
   * @param {string} p.maxPrice The maximum display (non-normalized) price for this market, as a base-10 string.
   * @param {string} p.numTicks The number of ticks for this market.
   * @param {number} p._direction Order type (0 for "buy", 1 for "sell").
   * @param {string} p._market Market in which to trade, as a hex string.
   * @param {number} p._outcome Outcome ID to trade, must be an integer value on [0, 7].
   * @param {string=} p._tradeGroupId ID logged with each trade transaction (can be used to group trades client-side), as a hex string.
   * @param {boolean=} p.doNotCreateOrders If set to true, this trade will only take existing orders off the book, not create new ones (default: false).
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called when the first trading transaction is broadcast to the network.
   * @param {function} p.onSuccess Called when the full trade completes successfully.
   * @param {function} p.onFailed Called if any part of the trade fails.
   */
  function placeTrade(p) {
    getBetterWorseOrders({
      orderType: ["buy", "sell"][p._direction],
      marketId: p._market,
      outcome: p._outcome,
      price: p.limitPrice
    }, function (err, betterWorseOrders) {
      if (err) return p.onFailed(err);
      api().Market.getNumberOfOutcomes({ tx: { to: p._market } }, function (err, numOutcomes) {
        if (err) return p.onFailed(err);
        tradeUntilAmountIsZero(assign({}, immutableDelete(p, ["limitPrice", "amount"]), {
          _price: p.limitPrice,
          _fxpAmount: p.amount,
          numOutcomes: new BigNumber(numOutcomes, 16),
          _betterOrderId: (betterWorseOrders || {}).betterOrderId || "0x0",
          _worseOrderId: (betterWorseOrders || {}).worseOrderId || "0x0"
        }));
      });
    });
  }

  module.exports = placeTrade;
  },{"../api":7,"./get-better-worse-orders":97,"./trade-until-amount-is-zero":130,"bignumber.js":157,"immutable-delete":377,"lodash":420}],106:[function(require,module,exports){
  "use strict";

  var longerPositionPL = require("./longer-position-pl");
  var shorterPositionPL = require("./shorter-position-pl");

  // Trades where user is the maker:
  //  - buy orders (matched user's ask): user loses shares, gets cash
  //  - sell orders (matched user's bid): user loses cash, gets shares
  function calculateMakerPL(PL, type, price, shares) {

    // Sell: matched user's bid order
    if (type === "sell") {
      // console.log('sell (maker):', PL.position.toFixed(), PL.meanOpenPrice.toFixed(), price.toFixed(), shares.toFixed(), JSON.stringify(PL.tradeQueue));
      return longerPositionPL(PL, shares, price);
    }

    // Buy: matched user's ask order
    // console.log('buy (maker):', PL.position.toFixed(), PL.meanOpenPrice.toFixed(), price.toFixed(), shares.toFixed(), JSON.stringify(PL.tradeQueue));
    return shorterPositionPL(PL, shares, price);
  }

  module.exports = calculateMakerPL;
  },{"./longer-position-pl":113,"./shorter-position-pl":115}],107:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var immutableDelete = require("immutable-delete");
  var calculateUnrealizedPL = require("./calculate-unrealized-pl");
  var calculateTradesPL = require("./calculate-trades-pl");
  var updateRealizedPL = require("./update-realized-pl");
  var constants = require("../../constants");
  var ZERO = constants.ZERO;

  /**
   * Type definition for ProfitLoss.
   * @typedef {Object} ProfitLoss
   * @property {string} meanOpenPrice Mean price of trades at time of buy-in, in attoETH.
   * @property {string} position Net trading position, where the quantity is the number of Share Units. An overall "sell" position is negative, and an overall "buy" position is positive.
   * @property {string} realized Amount of realized profits or losses from all trades, in attoETH.
   * @property {string} unrealized Unrealized profit/loss in attoETH, calculated as Share Units held * (last trade price - price on buy-in).
   * @property {string} total Sum of realized and unrealized profit/loss.
   */

  /**
   * Calculates realized and unrealized profit/loss for trades in a single outcome.
   *
   * Note: buy/sell labels are from taker's point-of-view.
   *
   * @param {Object} p Parameters object.
   * @param {Object[]} p.trades Trades for a single outcome {type, amount, price, maker}.
   * @param {string=} p.lastPrice Price of this outcome's most recent trade, as a base-10 string (default: 0).
   * @return {ProfitLoss} Realized and unrealized P/L {position, realized, unrealized}.
   */
  function calculateProfitLoss(p) {
    var PL = {
      position: ZERO,
      meanOpenPrice: ZERO,
      realized: ZERO,
      unrealized: ZERO,
      queued: ZERO,
      completeSetsBought: ZERO,
      tradeQueue: []
    };
    var lastPrice = p.lastPrice == null ? ZERO : new BigNumber(p.lastPrice, 10);
    if (p.trades) {
      PL = calculateTradesPL(PL, p.trades);
      // console.log("Raw P/L:", JSON.stringify(PL, null, 2));
      var queuedShares = ZERO;
      if (PL.tradeQueue && PL.tradeQueue.length) {
        // console.log("Trade queue:", JSON.stringify(PL.tradeQueue));
        for (var i = 0, n = PL.tradeQueue.length; i < n; ++i) {
          queuedShares = queuedShares.plus(PL.tradeQueue[i].shares);
          PL.queued = updateRealizedPL(PL.tradeQueue[i].meanOpenPrice, PL.queued, PL.tradeQueue[i].shares.negated(), PL.tradeQueue[i].price);
        }
      }
      // console.log("Queued shares:", queuedShares.toFixed());
      // console.log("Last trade price:", lastPrice.toFixed());
      PL.unrealized = calculateUnrealizedPL(PL.position, PL.meanOpenPrice, lastPrice);
      // console.log("Unrealized P/L:", PL.unrealized.toFixed());
      if (PL.position.abs().lt(constants.PRECISION.zero)) {
        PL.position = ZERO;
        PL.meanOpenPrice = ZERO;
        PL.unrealized = ZERO;
      }
    }
    PL.position = PL.position.toFixed();
    PL.meanOpenPrice = PL.meanOpenPrice.toFixed();
    PL.realized = PL.realized.plus(PL.queued);
    PL.total = PL.realized.plus(PL.unrealized).toFixed();
    PL.realized = PL.realized.toFixed();
    PL.unrealized = PL.unrealized.toFixed();
    // console.log("Queued P/L:", PL.queued.toFixed());
    return immutableDelete(PL, ["completeSetsBought", "tradeQueue", "queued"]);
  }

  module.exports = calculateProfitLoss;
  },{"../../constants":31,"./calculate-trades-pl":110,"./calculate-unrealized-pl":111,"./update-realized-pl":117,"bignumber.js":157,"immutable-delete":377}],108:[function(require,module,exports){
  "use strict";

  var longerPositionPL = require("./longer-position-pl");
  var shorterPositionPL = require("./shorter-position-pl");

  // Trades where user is the taker:
  //  - buy orders: user loses cash, gets shares
  //  - sell orders: user loses shares, gets cash
  function calculateTakerPL(PL, type, price, shares) {

    // Buy order
    if (type === "buy") {
      // console.log('buy (taker):', PL.position.toFixed(), PL.meanOpenPrice.toFixed(), price.toFixed(), shares.toFixed(), JSON.stringify(PL.tradeQueue));
      return longerPositionPL(PL, shares, price);
    }

    // Sell order
    // console.log('sell (taker):', PL.position.toFixed(), PL.meanOpenPrice.toFixed(), price.toFixed(), shares.toFixed(), JSON.stringify(PL.tradeQueue));
    return shorterPositionPL(PL, shares, price);
  }

  module.exports = calculateTakerPL;
  },{"./longer-position-pl":113,"./shorter-position-pl":115}],109:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var calculateTakerPL = require("./calculate-taker-pl");
  var sellCompleteSetsPL = require("./sell-complete-sets-pl");
  var calculateMakerPL = require("./calculate-maker-pl");

  function calculateTradePL(PL, trade) {
    if (trade.isCompleteSet) {
      if (trade.type === "buy") {
        return calculateTakerPL(PL, trade.type, new BigNumber(trade.price, 10), new BigNumber(trade.amount, 10));
      }
      return sellCompleteSetsPL(PL, new BigNumber(trade.amount, 10), new BigNumber(trade.price, 10));
    } else if (trade.maker) {
      return calculateMakerPL(PL, trade.type, new BigNumber(trade.price, 10), new BigNumber(trade.amount, 10));
    }
    return calculateTakerPL(PL, trade.type, new BigNumber(trade.price, 10), new BigNumber(trade.amount, 10));
  }

  module.exports = calculateTradePL;
  },{"./calculate-maker-pl":106,"./calculate-taker-pl":108,"./sell-complete-sets-pl":114,"bignumber.js":157}],110:[function(require,module,exports){
  "use strict";

  var calculateTradePL = require("./calculate-trade-pl");

  function calculateTradesPL(PL, trades) {
    var i,
        numTrades = trades.length;
    if (numTrades) {
      for (i = 0; i < numTrades; ++i) {
        PL = calculateTradePL(PL, trades[i]);
      }
    }
    return PL;
  }

  module.exports = calculateTradesPL;
  },{"./calculate-trade-pl":109}],111:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var ZERO = require("../../constants").ZERO;

  // unrealized P/L: shares held * (last trade price - price on buy in)
  function calculateUnrealizedPL(position, meanOpenPrice, lastTradePrice) {
    if (lastTradePrice.eq(ZERO)) return ZERO;
    return position.times(new BigNumber(lastTradePrice, 10).minus(meanOpenPrice));
  }

  module.exports = calculateUnrealizedPL;
  },{"../../constants":31,"bignumber.js":157}],112:[function(require,module,exports){
  "use strict";

  module.exports = require("./calculate-profit-loss");
  },{"./calculate-profit-loss":107}],113:[function(require,module,exports){
  "use strict";

  var updateMeanOpenPrice = require("./update-mean-open-price");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;

  // weighted price = (old total shares / new total shares) * weighted price + (shares traded / new total shares) * trade price
  // realized P/L = shares sold * (price on cash out - price on buy in)
  function longerPositionPL(PL, shares, price) {
    var updatedPL = {
      position: PL.position.plus(shares),
      meanOpenPrice: PL.meanOpenPrice,
      realized: PL.realized,
      completeSetsBought: PL.completeSetsBought,
      queued: PL.queued,
      tradeQueue: PL.tradeQueue
    };

    // If position >= 0, user is increasing a long position:
    //  - update weighted price of open positions
    if (PL.position.abs().lte(PRECISION.zero)) {
      updatedPL.meanOpenPrice = price;
    } else if (PL.position.gt(PRECISION.zero)) {
      updatedPL.meanOpenPrice = updateMeanOpenPrice(PL.position, PL.meanOpenPrice, shares, price);

      // If position < 0, user is decreasing a short position:
    } else {
      if (!updatedPL.tradeQueue) updatedPL.tradeQueue = [];

      // If |position| >= shares, user is buying back a short position:
      //  - update queued P/L (becomes realized P/L when complete sets sold)
      if (PL.position.abs().gte(shares)) {
        updatedPL.tradeQueue.push({
          meanOpenPrice: PL.meanOpenPrice,
          realized: PL.realized,
          shares: shares,
          price: price
        });

        // If |position| < shares, user is buying back short then going long:
        //  - update queued P/L for the short position (buy to 0)
        //  - update mean open price for the remainder of shares
      } else {
        updatedPL.tradeQueue.push({
          meanOpenPrice: PL.meanOpenPrice,
          realized: PL.realized,
          shares: PL.position.abs(),
          price: price
        });
        updatedPL.meanOpenPrice = updateMeanOpenPrice(ZERO, PL.meanOpenPrice, PL.position.plus(shares), price);
      }
    }

    return updatedPL;
  }

  module.exports = longerPositionPL;
  },{"../../constants":31,"./update-mean-open-price":116}],114:[function(require,module,exports){
  "use strict";

  var updateRealizedPL = require("./update-realized-pl");
  var ZERO = require("../../constants").ZERO;

  function sellCompleteSetsPL(PL, shares, price) {
    var updatedPL = {
      position: PL.position,
      meanOpenPrice: PL.meanOpenPrice,
      realized: PL.realized,
      completeSetsBought: PL.completeSetsBought,
      queued: PL.queued,
      tradeQueue: PL.tradeQueue
    };

    // If position <= 0, user is closing out a short position:
    //  - update realized P/L
    if (PL.position.lte(ZERO)) {
      if (shares.gt(ZERO) && updatedPL.tradeQueue && updatedPL.tradeQueue.length) {
        while (updatedPL.tradeQueue.length) {
          if (updatedPL.tradeQueue[0].shares.gt(shares)) {
            updatedPL.realized = updateRealizedPL(updatedPL.tradeQueue[0].meanOpenPrice, updatedPL.realized, shares.negated(), updatedPL.tradeQueue[0].price);
            updatedPL.tradeQueue[0].shares = updatedPL.tradeQueue[0].shares.minus(shares);
            break;
          } else {
            updatedPL.realized = updateRealizedPL(updatedPL.tradeQueue[0].meanOpenPrice, updatedPL.realized, updatedPL.tradeQueue[0].shares.negated(), updatedPL.tradeQueue[0].price);
            updatedPL.tradeQueue.splice(0, 1);
          }
        }
      }

      // If position > 0, user is decreasing their long position:
      //  - decrease position
    } else {
      updatedPL.position = updatedPL.position.minus(shares);
      updatedPL.realized = updateRealizedPL(PL.meanOpenPrice, PL.realized, shares, price);
    }

    return updatedPL;
  }

  module.exports = sellCompleteSetsPL;
  },{"../../constants":31,"./update-realized-pl":117}],115:[function(require,module,exports){
  "use strict";

  var updateMeanOpenPrice = require("./update-mean-open-price");
  var updateRealizedPL = require("./update-realized-pl");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;

  function shorterPositionPL(PL, shares, price) {
    var updatedPL = {
      position: PL.position.minus(shares),
      meanOpenPrice: PL.meanOpenPrice,
      realized: PL.realized,
      completeSetsBought: PL.completeSetsBought,
      queued: PL.queued,
      tradeQueue: PL.tradeQueue
    };

    // If position < 0, user is increasing a short position:
    //  - treat as a "negative buy" for P/L
    //  - update weighted price of open positions
    if (PL.position.abs().lte(PRECISION.zero)) {
      updatedPL.meanOpenPrice = price;
    } else if (PL.position.lt(PRECISION.zero)) {
      updatedPL.meanOpenPrice = updateMeanOpenPrice(PL.position, PL.meanOpenPrice, shares.negated(), price);

      // If position > 0, user is decreasing a long position
    } else {

      // If position >= shares, user is doing a regular sale:
      //  - update realized P/L
      if (PL.position.gte(shares)) {
        updatedPL.realized = updateRealizedPL(PL.meanOpenPrice, PL.realized, shares, price);

        // If position < shares, user is selling then short selling:
        //  - update realized P/L for the current position (sell to 0)
        //  - update mean open price for the remainder of shares (short sell)
      } else {
        updatedPL.realized = updateRealizedPL(PL.meanOpenPrice, PL.realized, PL.position, price);
        updatedPL.meanOpenPrice = updateMeanOpenPrice(ZERO, PL.meanOpenPrice, PL.position.minus(shares), price);
      }
    }

    return updatedPL;
  }

  module.exports = shorterPositionPL;
  },{"../../constants":31,"./update-mean-open-price":116,"./update-realized-pl":117}],116:[function(require,module,exports){
  "use strict";

  function updateMeanOpenPrice(position, meanOpenPrice, shares, price) {
    return position.dividedBy(shares.plus(position)).times(meanOpenPrice).plus(shares.dividedBy(shares.plus(position)).times(price));
  }

  module.exports = updateMeanOpenPrice;
  },{}],117:[function(require,module,exports){
  "use strict";

  function updateRealizedPL(meanOpenPrice, realized, shares, price) {
    return realized.plus(shares.times(price.minus(meanOpenPrice)));
  }

  module.exports = updateRealizedPL;
  },{}],118:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  function calculateNearlyCompleteSets(outcomeId, desiredShares, shareBalances, takerSharesDepleted) {
    var sharesAvailable = desiredShares;
    for (var i = 0; i < shareBalances.length; ++i) {
      if (i !== outcomeId) {
        sharesAvailable = BigNumber.min(shareBalances[i].minus(takerSharesDepleted), sharesAvailable);
      }
    }
    return sharesAvailable;
  }

  module.exports = calculateNearlyCompleteSets;
  },{"bignumber.js":157}],119:[function(require,module,exports){
  "use strict";

  var constants = require("../../constants");
  var ZERO = constants.ZERO;

  // sharePrice can be long (taking ask, making a bid) or short (taking bid, making an ask)
  // range in this context is used similarly to numTicks
  function calculateSettlementFee(completeSets, marketCreatorFeeRate, range, shouldCollectReportingFees, reportingFeeRate, sharePrice) {
    var payout = completeSets.times(sharePrice).times(range);
    var marketCreatorFee = payout.times(marketCreatorFeeRate).div(range);
    var reportingFee = payout.times(shouldCollectReportingFees ? reportingFeeRate : ZERO).div(range);
    var fee = marketCreatorFee.plus(reportingFee);
    return fee;
  }

  module.exports = calculateSettlementFee;
  },{"../../constants":31}],120:[function(require,module,exports){
  "use strict";

  module.exports = require("./simulate-trade");
  },{"./simulate-trade":128}],121:[function(require,module,exports){
  "use strict";

  function modifyOtherShareBalances(outcomeId, sharesDepleted, shareBalances, isIncrease) {
    var numOutcomes = shareBalances.length;
    var modifiedShareBalances = new Array(numOutcomes);
    for (var i = 0; i < numOutcomes; ++i) {
      if (i === outcomeId) {
        modifiedShareBalances[i] = shareBalances[i];
      } else {
        modifiedShareBalances[i] = isIncrease ? shareBalances[i].plus(sharesDepleted) : shareBalances[i].minus(sharesDepleted);
      }
    }
    return modifiedShareBalances;
  }

  module.exports = modifyOtherShareBalances;
  },{}],122:[function(require,module,exports){
  "use strict";

  var simulateCreateBidOrder = require("./simulate-create-bid-order");
  var simulateFillAskOrder = require("./simulate-fill-ask-order");
  var sumSimulatedResults = require("./sum-simulated-results");
  var filterAndSortByPrice = require("../filter-and-sort-by-price");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;

  function simulateBuy(outcome, sharesToCover, shareBalances, tokenBalance, minPrice, maxPrice, price, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, sellOrderBook) {
    var simulatedBuy = {
      sharesFilled: ZERO,
      settlementFees: ZERO,
      worstCaseFees: ZERO,
      sharesDepleted: ZERO,
      otherSharesDepleted: ZERO,
      tokensDepleted: ZERO,
      shareBalances: shareBalances
    };
    var matchingSortedAsks = filterAndSortByPrice({ singleOutcomeOrderBookSide: sellOrderBook, orderType: 0, price: price });

    // if no matching asks, then user is bidding: no settlement fees
    if (!matchingSortedAsks.length && price !== null) {
      simulatedBuy = sumSimulatedResults(simulatedBuy, simulateCreateBidOrder(sharesToCover, price, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, outcome, shareBalances));

      // if there are matching asks, user is buying
    } else {
      var simulatedFillAskOrder = simulateFillAskOrder(sharesToCover, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, matchingSortedAsks, outcome, shareBalances);
      simulatedBuy = sumSimulatedResults(simulatedBuy, simulatedFillAskOrder);
      if (simulatedFillAskOrder.sharesToCover.gt(PRECISION.zero) && price !== null) {
        simulatedBuy = sumSimulatedResults(simulatedBuy, simulateCreateBidOrder(simulatedFillAskOrder.sharesToCover, price, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, outcome, simulatedFillAskOrder.shareBalances));
      }
    }

    return simulatedBuy;
  }

  module.exports = simulateBuy;
  },{"../../constants":31,"../filter-and-sort-by-price":95,"./simulate-create-bid-order":124,"./simulate-fill-ask-order":125,"./sum-simulated-results":129}],123:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;
  var calculateSettlementFee = require("./calculate-settlement-fee");

  function simulateCreateAskOrder(numShares, price, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, outcome, shareBalances) {
    var numOutcomes = shareBalances.length;
    if (outcome < 0 || outcome >= numOutcomes || typeof outcome === "undefined" || typeof shareBalances[outcome] === "undefined") throw new Error("Invalid outcome ID " + outcome);
    if (numShares.lte(PRECISION.zero)) throw new Error("Number of shares is too small");
    if (price.gt(maxPrice)) throw new Error("Price is above the maximum price");
    var worstCaseFees = ZERO;
    var tokensEscrowed = ZERO;
    var sharesEscrowed = ZERO;
    var sharePriceLong = price.minus(minPrice);
    if (shareBalances[outcome].gt(ZERO)) {
      sharesEscrowed = BigNumber.min(shareBalances[outcome], numShares);
      numShares = numShares.minus(sharesEscrowed);
      shareBalances[outcome] = shareBalances[outcome].minus(sharesEscrowed);
    }
    if (numShares.gt(ZERO)) tokensEscrowed = numShares.times(maxPrice.minus(price));
    if (sharesEscrowed.gt(ZERO)) worstCaseFees = calculateSettlementFee(sharesEscrowed, marketCreatorFeeRate, maxPrice.minus(minPrice), shouldCollectReportingFees, reportingFeeRate, sharePriceLong);
    return {
      worstCaseFees: worstCaseFees,
      sharesDepleted: sharesEscrowed,
      tokensDepleted: tokensEscrowed,
      shareBalances: shareBalances
    };
  }

  module.exports = simulateCreateAskOrder;
  },{"../../constants":31,"./calculate-settlement-fee":119,"bignumber.js":157}],124:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;
  var calculateSettlementFee = require("./calculate-settlement-fee");

  function simulateCreateBidOrder(numShares, price, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, outcome, shareBalances) {
    var numOutcomes = shareBalances.length;
    if (outcome < 0 || outcome >= numOutcomes || typeof outcome === "undefined" || typeof shareBalances[outcome] === "undefined") throw new Error("Invalid outcome ID");
    if (numShares.lte(PRECISION.zero)) throw new Error("Number of shares is too small");
    if (price.lt(minPrice)) throw new Error("Price is below the minimum price");
    var worstCaseFees = ZERO;
    var sharePriceLong = price.minus(minPrice);
    var sharePriceShort = maxPrice.minus(price);
    var tokensEscrowed = ZERO;
    var sharesEscrowed = new BigNumber(2, 10).exponentiatedBy(254);
    for (var i = 0; i < numOutcomes; ++i) {
      if (i !== outcome) {
        sharesEscrowed = BigNumber.min(shareBalances[i], sharesEscrowed);
      }
    }
    sharesEscrowed = BigNumber.min(sharesEscrowed, numShares);
    if (sharesEscrowed.gt(ZERO)) {
      numShares = numShares.minus(sharesEscrowed);
      for (i = 0; i < numOutcomes; ++i) {
        if (i !== outcome) {
          shareBalances[i] = shareBalances[i].minus(sharesEscrowed);
        }
      }

      worstCaseFees = calculateSettlementFee(sharesEscrowed, marketCreatorFeeRate, maxPrice.minus(minPrice), shouldCollectReportingFees, reportingFeeRate, sharePriceShort);
    }
    if (numShares.gt(ZERO)) tokensEscrowed = numShares.times(sharePriceLong);
    return {
      worstCaseFees: worstCaseFees,
      otherSharesDepleted: sharesEscrowed,
      tokensDepleted: tokensEscrowed,
      shareBalances: shareBalances
    };
  }

  module.exports = simulateCreateBidOrder;
  },{"../../constants":31,"./calculate-settlement-fee":119,"bignumber.js":157}],125:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var calculateNearlyCompleteSets = require("./calculate-nearly-complete-sets");
  var calculateSettlementFee = require("./calculate-settlement-fee");
  var modifyOtherShareBalances = require("./modify-other-share-balances");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;

  function simulateFillAskOrder(sharesToCover, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, matchingSortedAsks, outcome, shareBalances) {
    var numOutcomes = shareBalances.length;
    if (outcome < 0 || outcome >= numOutcomes) throw new Error("Invalid outcome ID");
    if (sharesToCover.lte(PRECISION.zero)) throw new Error("Number of shares is too small");
    var settlementFees = ZERO;
    var makerSharesDepleted = ZERO;
    var makerTokensDepleted = ZERO;
    var takerSharesDepleted = ZERO;
    var takerTokensDepleted = ZERO;
    var takerSharesGainedByDepletingTokens = ZERO;
    var sharesFilled = ZERO;
    matchingSortedAsks.forEach(function (matchingAsk) {
      var takerDesiredShares = BigNumber.min(new BigNumber(matchingAsk.amount, 10), sharesToCover);
      var makerSharesEscrowed = BigNumber.min(new BigNumber(matchingAsk.sharesEscrowed, 10), sharesToCover);
      var orderDisplayPrice = new BigNumber(matchingAsk.fullPrecisionPrice, 10);
      var sharePriceShort = maxPrice.minus(orderDisplayPrice);
      var sharePriceLong = orderDisplayPrice.minus(minPrice);
      var takerSharesAvailable = calculateNearlyCompleteSets(outcome, takerDesiredShares, shareBalances, takerSharesDepleted);
      sharesToCover = sharesToCover.minus(takerDesiredShares);
      sharesFilled = sharesFilled.plus(takerDesiredShares);

      // complete sets sold if maker is closing a long, taker is closing a short
      if (makerSharesEscrowed.gt(PRECISION.zero) && takerSharesAvailable.gt(PRECISION.zero)) {
        var completeSets = BigNumber.min(makerSharesEscrowed, takerSharesAvailable);
        settlementFees = settlementFees.plus(calculateSettlementFee(completeSets, marketCreatorFeeRate, maxPrice.minus(minPrice), shouldCollectReportingFees, reportingFeeRate, sharePriceShort));
        makerSharesDepleted = makerSharesDepleted.plus(completeSets);
        takerSharesDepleted = takerSharesDepleted.plus(completeSets);
        takerDesiredShares = takerDesiredShares.minus(completeSets);
        makerSharesEscrowed = makerSharesEscrowed.minus(completeSets);
      }

      // maker is closing a long, taker is opening a long: no complete sets sold
      if (makerSharesEscrowed.gt(PRECISION.zero) && takerDesiredShares.gt(PRECISION.zero)) {
        var tokensRequiredToCoverTaker = makerSharesEscrowed.times(sharePriceLong);
        makerSharesDepleted = makerSharesDepleted.plus(makerSharesEscrowed);
        takerTokensDepleted = takerTokensDepleted.plus(tokensRequiredToCoverTaker);
        takerSharesGainedByDepletingTokens = takerSharesGainedByDepletingTokens.plus(makerSharesEscrowed);
        takerDesiredShares = takerDesiredShares.minus(makerSharesEscrowed);
        makerSharesEscrowed = ZERO;
      }

      // maker is opening a short, taker is closing a short
      if (takerSharesAvailable.gt(PRECISION.zero) && takerDesiredShares.gt(PRECISION.zero)) {
        var tokensRequiredToCoverMaker = takerSharesAvailable.times(sharePriceShort);
        makerTokensDepleted = makerTokensDepleted.plus(tokensRequiredToCoverMaker);
        takerSharesDepleted = takerSharesDepleted.plus(takerSharesAvailable);
        takerDesiredShares = takerDesiredShares.minus(takerSharesAvailable);
        takerSharesAvailable = ZERO;
      }

      // maker is opening a short, taker is opening a long
      if (takerDesiredShares.gt(PRECISION.zero)) {
        var takerPortionOfCompleteSetCost = takerDesiredShares.times(sharePriceLong);
        var makerPortionOfCompleteSetCost = takerDesiredShares.times(sharePriceShort);
        makerTokensDepleted = makerTokensDepleted.plus(makerPortionOfCompleteSetCost);
        takerTokensDepleted = takerTokensDepleted.plus(takerPortionOfCompleteSetCost);
        takerSharesGainedByDepletingTokens = takerSharesGainedByDepletingTokens.plus(takerDesiredShares);
        takerDesiredShares = ZERO;
      }
    });
    if (takerSharesDepleted.gt(ZERO)) {
      shareBalances = modifyOtherShareBalances(outcome, takerSharesDepleted, shareBalances, false);
    }
    if (takerTokensDepleted.gt(ZERO)) {
      shareBalances[outcome] = shareBalances[outcome].plus(takerSharesGainedByDepletingTokens);
    }
    return {
      sharesFilled: sharesFilled,
      sharesToCover: sharesToCover,
      settlementFees: settlementFees,
      worstCaseFees: settlementFees,
      otherSharesDepleted: takerSharesDepleted,
      tokensDepleted: takerTokensDepleted,
      shareBalances: shareBalances
    };
  }

  module.exports = simulateFillAskOrder;
  },{"../../constants":31,"./calculate-nearly-complete-sets":118,"./calculate-settlement-fee":119,"./modify-other-share-balances":121,"bignumber.js":157}],126:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");
  var calculateSettlementFee = require("./calculate-settlement-fee");
  var modifyOtherShareBalances = require("./modify-other-share-balances");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;

  function simulateFillBidOrder(sharesToCover, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, matchingSortedBids, outcome, shareBalances) {
    var numOutcomes = shareBalances.length;
    if (outcome < 0 || outcome >= numOutcomes) throw new Error("Invalid outcome ID");
    if (sharesToCover.lte(PRECISION.zero)) throw new Error("Number of shares is too small");
    var settlementFees = ZERO;
    var makerSharesDepleted = ZERO;
    var makerTokensDepleted = ZERO;
    var takerSharesDepleted = ZERO;
    var takerTokensDepleted = ZERO;
    var takerOtherSharesGainedByDepletingTokens = ZERO;
    var sharesFilled = ZERO;
    matchingSortedBids.forEach(function (matchingBid) {
      var takerDesiredSharesForThisOrder = BigNumber.min(new BigNumber(matchingBid.amount, 10), sharesToCover);
      var orderDisplayPrice = new BigNumber(matchingBid.fullPrecisionPrice, 10);
      var sharePriceShort = maxPrice.minus(orderDisplayPrice);
      var sharePriceLong = orderDisplayPrice.minus(minPrice);
      var makerSharesEscrowed = BigNumber.min(new BigNumber(matchingBid.sharesEscrowed, 10), sharesToCover);
      sharesToCover = sharesToCover.minus(takerDesiredSharesForThisOrder);
      var takerSharesAvailable = BigNumber.min(takerDesiredSharesForThisOrder, shareBalances[outcome].minus(takerSharesDepleted));
      sharesFilled = sharesFilled.plus(takerDesiredSharesForThisOrder);

      // maker is closing a short, taker is closing a long: complete sets sold
      if (makerSharesEscrowed.gt(PRECISION.zero) && takerSharesAvailable.gt(PRECISION.zero)) {
        var completeSets = BigNumber.min(makerSharesEscrowed, takerSharesAvailable);
        settlementFees = settlementFees.plus(calculateSettlementFee(completeSets, marketCreatorFeeRate, maxPrice.minus(minPrice), shouldCollectReportingFees, reportingFeeRate, sharePriceLong));
        makerSharesDepleted = makerSharesDepleted.plus(completeSets);
        takerSharesDepleted = takerSharesDepleted.plus(completeSets);
        takerSharesAvailable = takerSharesAvailable.minus(completeSets);
        makerSharesEscrowed = makerSharesEscrowed.minus(completeSets);
        takerDesiredSharesForThisOrder = takerDesiredSharesForThisOrder.minus(completeSets);
      }

      // maker is closing a short, taker is opening a short
      if (makerSharesEscrowed.gt(PRECISION.zero) && takerDesiredSharesForThisOrder.gt(PRECISION.zero)) {
        var tokensRequiredToCoverTaker = makerSharesEscrowed.times(sharePriceShort);
        makerSharesDepleted = makerSharesDepleted.plus(makerSharesEscrowed);
        takerTokensDepleted = takerTokensDepleted.plus(tokensRequiredToCoverTaker);
        takerOtherSharesGainedByDepletingTokens = takerOtherSharesGainedByDepletingTokens.plus(makerSharesEscrowed);
        takerDesiredSharesForThisOrder = takerDesiredSharesForThisOrder.minus(makerSharesEscrowed);
        makerSharesEscrowed = ZERO;
      }

      // maker is opening a long, taker is closing a long
      if (takerSharesAvailable.gt(PRECISION.zero) && takerDesiredSharesForThisOrder.gt(PRECISION.zero)) {
        var tokensRequiredToCoverMaker = takerSharesAvailable.times(sharePriceLong);
        makerTokensDepleted = makerTokensDepleted.plus(tokensRequiredToCoverMaker);
        takerSharesDepleted = takerSharesDepleted.plus(takerSharesAvailable);
        takerDesiredSharesForThisOrder = takerDesiredSharesForThisOrder.minus(takerSharesAvailable);
        takerSharesAvailable = ZERO;
      }

      // maker is opening a long, taker is opening a short
      if (takerDesiredSharesForThisOrder.gt(PRECISION.zero)) {
        var takerPortionOfCompleteSetCost = takerDesiredSharesForThisOrder.times(sharePriceShort);
        var makerPortionOfCompleteSetCost = takerDesiredSharesForThisOrder.times(sharePriceLong);
        makerTokensDepleted = makerTokensDepleted.plus(makerPortionOfCompleteSetCost);
        takerTokensDepleted = takerTokensDepleted.plus(takerPortionOfCompleteSetCost);
        takerOtherSharesGainedByDepletingTokens = takerOtherSharesGainedByDepletingTokens.plus(takerDesiredSharesForThisOrder);
        takerDesiredSharesForThisOrder = ZERO;
      }
    });
    if (takerSharesDepleted.gt(ZERO)) {
      shareBalances[outcome] = shareBalances[outcome].minus(takerSharesDepleted);
    }
    if (takerOtherSharesGainedByDepletingTokens.gt(ZERO)) {
      shareBalances = modifyOtherShareBalances(outcome, takerOtherSharesGainedByDepletingTokens, shareBalances, true);
    }
    return {
      sharesFilled: sharesFilled,
      sharesToCover: sharesToCover,
      settlementFees: settlementFees,
      worstCaseFees: settlementFees,
      sharesDepleted: takerSharesDepleted,
      tokensDepleted: takerTokensDepleted,
      shareBalances: shareBalances
    };
  }

  module.exports = simulateFillBidOrder;
  },{"../../constants":31,"./calculate-settlement-fee":119,"./modify-other-share-balances":121,"bignumber.js":157}],127:[function(require,module,exports){
  "use strict";

  var simulateCreateAskOrder = require("./simulate-create-ask-order");
  var simulateFillBidOrder = require("./simulate-fill-bid-order");
  var sumSimulatedResults = require("./sum-simulated-results");
  var filterAndSortByPrice = require("../filter-and-sort-by-price");
  var constants = require("../../constants");
  var PRECISION = constants.PRECISION;
  var ZERO = constants.ZERO;

  function simulateSell(outcome, sharesToCover, shareBalances, tokenBalance, minPrice, maxPrice, price, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, buyOrderBook) {
    var simulatedSell = {
      sharesFilled: ZERO,
      settlementFees: ZERO,
      worstCaseFees: ZERO,
      sharesDepleted: ZERO,
      otherSharesDepleted: ZERO,
      tokensDepleted: ZERO,
      shareBalances: shareBalances
    };
    var matchingSortedBids = filterAndSortByPrice({ singleOutcomeOrderBookSide: buyOrderBook, orderType: 1, price: price });

    // if no matching bids, then user is asking: no settlement fees
    if (!matchingSortedBids.length && price !== null) {
      simulatedSell = sumSimulatedResults(simulatedSell, simulateCreateAskOrder(sharesToCover, price, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, outcome, shareBalances));

      // if there are matching bids, user is selling
    } else {
      var simulatedFillBidOrder = simulateFillBidOrder(sharesToCover, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, matchingSortedBids, outcome, shareBalances);
      simulatedSell = sumSimulatedResults(simulatedSell, simulatedFillBidOrder);
      if (simulatedFillBidOrder.sharesToCover.gt(PRECISION.zero) && price !== null) {
        simulatedSell = sumSimulatedResults(simulatedSell, simulateCreateAskOrder(simulatedFillBidOrder.sharesToCover, price, minPrice, maxPrice, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, outcome, simulatedFillBidOrder.shareBalances));
      }
    }

    return simulatedSell;
  }

  module.exports = simulateSell;
  },{"../../constants":31,"../filter-and-sort-by-price":95,"./simulate-create-ask-order":123,"./simulate-fill-bid-order":126,"./sum-simulated-results":129}],128:[function(require,module,exports){
  "use strict";

  /** Type definition for SimulateTradeSingleOutcomeOrderBookOrder.
   * @typedef {Object} SimulateTradeSingleOutcomeOrderBookOrder
   * @property {string} amount Number of shares to trade.
   * @property {string} fullPrecisionPrice Full price in ETH at which to trade.
   * @property {string} sharesEscrowed Number of shares escrowed in the trade.
   * @property {string} owner Ethereum address of the order's owner, as a 20-byte hexadecimal string.
   */

  /** Type definition for SingleOutcomeOrderBook.
   * @typedef {Object} SingleOutcomeOrderBook
   * @property {Array.<SimulateTradeSingleOutcomeOrderBookOrder>|null} buy Buy orders (bids), indexed by order ID as a 32-byte hexadecimal string.
   * @property {Array.<SimulateTradeSingleOutcomeOrderBookOrder>|null} sell Sell orders (asks), indexed by order ID as a 32-byte hexadecimal string.
   */

  /** Type definition for SimulatedTrade.
   * @typedef {Object} SimulatedTrade
   * @property {string} sharesFilled Number of shares filled by the trade.
   * @property {string} settlementFees Projected settlement fees paid on this trade, as a base-10 string.
   * @property {string} worstCaseFees Maximum amount of settlement fees to be paid, as a base-10 string.
   * @property {string} sharesDepleted Projected number of shares of the traded outcome spent on this trade, as a base-10 string.
   * @property {string} otherSharesDepleted Projected number of shares of the other (non-traded) outcomes spent on this trade, as a base-10 string.
   * @property {string} tokensDepleted Projected number of tokens spent on this trade, as a base-10 string.
   * @property {Array.<string>} shareBalances Projected final balances after the trade is complete, as an array of base-10 strings.
   */

  var BigNumber = require("bignumber.js");
  var simulateBuy = require("./simulate-buy");
  var simulateSell = require("./simulate-sell");

  /**
   * Determine the sequence of makes/takes that will be executed to fill the specified order, and return the user's
   * projected balances and fees paid after this sequence is completed.
   * Note: simulateTrade automatically normalizes share prices, so "display prices" can be directly passed in
   * for minPrice, maxPrice, and price.
   * @param {Object} p Trade simulation parameters.
   * @param {number} p.orderType Order type (0 for "buy", 1 for "sell").
   * @param {number} p.outcome Outcome ID to trade, must be an integer value on [0, 7].
   * @param {string} p.shares Number of shares to trade, as a base-10 string.
   * @param {Array.<string>} p.shareBalances Number of shares the user owns of each outcome in ascending order, as an array of base-10 strings.
   * @param {string} p.tokenBalance Number of tokens (e.g., wrapped ether) the user owns, as a base-10 string.
   * @param {string} p.minPrice This market's minimum possible price, as a base-10 string.
   * @param {string} p.maxPrice This market's maximum possible price, as a base-10 string.
   * @param {string} p.numTicks The number of ticks for this market.
   * @param {string=} p.price Limit price for this order (i.e. the worst price the user will accept), as a base-10 string.
   * @param {string} p.marketCreatorFeeRate The fee rate charged by the market creator (e.g., pass in "0.01" if the fee is 1%), as a base-10 string.
   * @param {string} p.reportingFeeRate The reporting fee for the market.
   * @param {boolean=} p.shouldCollectReportingFees False if reporting fees are not collected; this is rare and only occurs in disowned markets (default: true).
   * @param {SingleOutcomeOrderBook} p.singleOutcomeOrderBook The full order book (buy and sell) for this market and outcome.
   * @return {SimulatedTrade} Projected fees paid, shares and tokens spent, and final balances after the trade is complete.
   */
  function simulateTrade(p) {
    if (p.orderType !== 0 && p.orderType !== 1) throw new Error("Order type must be 0 (buy) or 1 (sell)");
    var sharesToCover = new BigNumber(p.shares, 10);
    var price = p.price != null ? new BigNumber(p.price, 10) : null;
    var minPrice = new BigNumber(p.minPrice, 10);
    var maxPrice = new BigNumber(p.maxPrice, 10);
    var tokenBalance = new BigNumber(p.tokenBalance, 10);
    var marketCreatorFeeRate = new BigNumber(p.marketCreatorFeeRate, 10);
    var reportingFeeRate = new BigNumber(p.reportingFeeRate, 10);
    var shouldCollectReportingFees = p.shouldCollectReportingFees === false ? 0 : 1;
    var shareBalances = p.shareBalances.map(function (shareBalance) {
      return new BigNumber(shareBalance, 10);
    });
    var simulatedTrade = p.orderType === 0 ? simulateBuy(p.outcome, sharesToCover, shareBalances, tokenBalance, minPrice, maxPrice, price, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, p.singleOutcomeOrderBook.sell) : simulateSell(p.outcome, sharesToCover, shareBalances, tokenBalance, minPrice, maxPrice, price, marketCreatorFeeRate, reportingFeeRate, shouldCollectReportingFees, p.singleOutcomeOrderBook.buy);
    return {
      sharesFilled: simulatedTrade.sharesFilled.toFixed(),
      settlementFees: simulatedTrade.settlementFees.toFixed(),
      worstCaseFees: simulatedTrade.worstCaseFees.toFixed(),
      sharesDepleted: simulatedTrade.sharesDepleted.toFixed(),
      otherSharesDepleted: simulatedTrade.otherSharesDepleted.toFixed(),
      tokensDepleted: simulatedTrade.tokensDepleted.toFixed(),
      shareBalances: simulatedTrade.shareBalances.map(function (shareBalance) {
        return shareBalance.toFixed();
      })
    };
  }

  module.exports = simulateTrade;
  },{"./simulate-buy":122,"./simulate-sell":127,"bignumber.js":157}],129:[function(require,module,exports){
  "use strict";

  function sumSimulatedResults(sumOfSimulatedResults, simulatedResults) {
    return Object.keys(sumOfSimulatedResults).reduce(function (updatedSumOfSimulatedResults, tradeField) {
      if (tradeField === "shareBalances") {
        updatedSumOfSimulatedResults[tradeField] = simulatedResults[tradeField];
      } else if (simulatedResults[tradeField] !== undefined) {
        updatedSumOfSimulatedResults[tradeField] = sumOfSimulatedResults[tradeField].plus(simulatedResults[tradeField]);
      } else {
        updatedSumOfSimulatedResults[tradeField] = sumOfSimulatedResults[tradeField];
      }
      return updatedSumOfSimulatedResults;
    }, {});
  }

  module.exports = sumSimulatedResults;
  },{}],130:[function(require,module,exports){
  "use strict";

  var assign = require("lodash").assign;
  var speedomatic = require("speedomatic");
  var BigNumber = require("bignumber.js");
  var immutableDelete = require("immutable-delete");
  var calculateTradeCost = require("./calculate-trade-cost");
  var calculateTickSize = require("./calculate-tick-size");
  var getTradeAmountRemaining = require("./get-trade-amount-remaining");
  var convertBigNumberToHexString = require("../utils/convert-big-number-to-hex-string");
  var convertOnChainAmountToDisplayAmount = require("../utils/convert-on-chain-amount-to-display-amount");
  var api = require("../api");
  var noop = require("../utils/noop");
  var constants = require("../constants");

  /**
   * @param {Object} p Parameters object.
   * @param {string} p._price Normalized limit price for this trade, as a base-10 string.
   * @param {string} p._fxpAmount Number of shares to trade, as a base-10 string.
   * @param {string} p.sharesProvided Number of shares already owned and provided for this trade, as a base-10 string.
   * @param {string} p.numTicks The number of ticks for this market.
   * @param {number} p._direction Order type (0 for "buy", 1 for "sell").
   * @param {string} p._market Market in which to trade, as a hex string.
   * @param {number} p._outcome Outcome ID to trade, must be an integer value on [0, 7].
   * @param {number} p.numOutcomes The number of outcomes in the market, must be an integer value on [2, 8].
   * @param {string} p.minPrice The minimum display price for this market, as a base-10 string.
   * @param {string} p.maxPrice The maximum display price for this market, as a base-10 string.
   * @param {string=} p._tradeGroupId ID logged with each trade transaction (can be used to group trades client-side), as a hex string.
   * @param {boolean=} p.doNotCreateOrders If set to true, this trade will only take existing orders off the book, not create new ones (default: false).
   * @param {{signer: buffer|function, accountType: string}=} p.meta Authentication metadata for raw transactions.
   * @param {function} p.onSent Called when the first trading transaction is broadcast to the network.
   * @param {function} p.onSuccess Called when the full trade completes successfully.
   * @param {function} p.onFailed Called if any part of the trade fails.
   */
  function tradeUntilAmountIsZero(p) {
    console.log("tradeUntilAmountIsZero:", immutableDelete(p, ["meta", "onSent", "onSuccess", "onFailed"]));
    var displayAmount = p._fxpAmount;
    var displayPrice = p._price;
    var orderType = p._direction;
    var tradeCost = calculateTradeCost({
      displayPrice: displayPrice,
      displayAmount: displayAmount,
      sharesProvided: p.sharesProvided,
      numTicks: p.numTicks,
      orderType: orderType,
      minDisplayPrice: p.minPrice,
      maxDisplayPrice: p.maxPrice
    });
    var onChainAmount = tradeCost.onChainAmount;
    var onChainPrice = tradeCost.onChainPrice;
    var cost = tradeCost.cost;
    var numTradesPerTx = new BigNumber(1);
    var placeOrderGas = p.sharesProvided > 0 ? constants.PLACE_ORDER_WITH_SHARES[p.numOutcomes] : constants.PLACE_ORDER_NO_SHARES[p.numOutcomes];
    var orderCreationCost = p.doNotCreateOrders ? new BigNumber(0) : placeOrderGas;
    var gasLimit = orderCreationCost.plus(constants.WORST_CASE_FILL[p.numOutcomes]);
    while (gasLimit.plus(constants.WORST_CASE_FILL[p.numOutcomes]).lt(constants.MAX_GAS_LIMIT_FOR_TRADE) && numTradesPerTx.lt(constants.MAX_FILLS_PER_TX)) {
      numTradesPerTx = numTradesPerTx.plus(1);
      gasLimit = gasLimit.plus(constants.WORST_CASE_FILL[p.numOutcomes]);
    }
    gasLimit = gasLimit.plus(constants.TRADE_GAS_BUFFER);
    console.log("gasLimit: ", gasLimit.toFixed(), " numTradesPerTx: ", numTradesPerTx.toFixed());
    console.log("cost:", cost.toFixed(), "wei", speedomatic.unfix(cost, "string"), "eth");
    if (tradeCost.onChainAmount.lt(constants.PRECISION.zero)) {
      console.info("tradeUntilAmountIsZero complete: only dust remaining");
      return p.onSuccess(null);
    }
    var tradePayload = assign({}, immutableDelete(p, ["doNotCreateOrders", "numTicks", "minPrice", "maxPrice", "sharesProvided"]), {
      tx: assign({
        value: convertBigNumberToHexString(cost),
        gas: convertBigNumberToHexString(gasLimit)
      }, p.tx),
      _loopLimit: convertBigNumberToHexString(numTradesPerTx),
      _fxpAmount: convertBigNumberToHexString(onChainAmount),
      _price: convertBigNumberToHexString(onChainPrice),
      onSuccess: function onSuccess(res) {
        var tickSize = calculateTickSize(p.numTicks, p.minPrice, p.maxPrice);
        getTradeAmountRemaining({
          transactionHash: res.hash,
          startingOnChainAmount: onChainAmount,
          tickSize: tickSize
        }, function (err, tradeOnChainAmountRemaining) {
          if (err) return p.onFailed(err);
          console.log("starting amount: ", onChainAmount.toFixed(), "ocs", convertOnChainAmountToDisplayAmount(onChainAmount, tickSize).toFixed(), "shares");
          console.log("remaining amount:", tradeOnChainAmountRemaining.toFixed(), "ocs", convertOnChainAmountToDisplayAmount(tradeOnChainAmountRemaining, tickSize).toFixed(), "shares");
          if (tradeOnChainAmountRemaining.eq(onChainAmount)) {
            if (p.doNotCreateOrders) return p.onSuccess(tradeOnChainAmountRemaining.toFixed());
            return p.onFailed(new Error("Trade completed but amount of trade unchanged"));
          }
          var newAmount = convertOnChainAmountToDisplayAmount(tradeOnChainAmountRemaining, tickSize);
          var newSharesProvided = newAmount.minus(new BigNumber(displayAmount, 10).minus(new BigNumber(p.sharesProvided, 10)));
          newSharesProvided = newSharesProvided.lt(0) ? "0" : newSharesProvided.toFixed();
          tradeUntilAmountIsZero(assign({}, p, {
            _fxpAmount: newAmount.toFixed(),
            sharesProvided: newSharesProvided,
            onSent: noop // so that p.onSent only fires when the first transaction is sent
          }));
        });
      }
    });
    if (p.doNotCreateOrders) {
      api().Trade.publicFillBestOrderWithLimit(tradePayload);
    } else {
      api().Trade.publicTradeWithLimit(tradePayload);
    }
  }

  module.exports = tradeUntilAmountIsZero;
  },{"../api":7,"../constants":31,"../utils/convert-big-number-to-hex-string":132,"../utils/convert-on-chain-amount-to-display-amount":136,"../utils/noop":145,"./calculate-tick-size":90,"./calculate-trade-cost":91,"./get-trade-amount-remaining":100,"bignumber.js":157,"immutable-delete":377,"lodash":420,"speedomatic":492}],131:[function(require,module,exports){
  "use strict";

  var BLOCKS_PER_CHUNK = require("../constants").BLOCKS_PER_CHUNK;

  function chunkBlocks(fromBlock, toBlock) {
    var toBlockChunk, fromBlockChunk, chunks;
    if (fromBlock < 1) fromBlock = 1;
    if (toBlock < fromBlock) return [];
    toBlockChunk = toBlock;
    fromBlockChunk = toBlock - BLOCKS_PER_CHUNK;
    chunks = [];
    while (toBlockChunk >= fromBlock) {
      if (fromBlockChunk < fromBlock) {
        fromBlockChunk = fromBlock;
      }
      chunks.push({ fromBlock: fromBlockChunk, toBlock: toBlockChunk });
      fromBlockChunk -= BLOCKS_PER_CHUNK;
      toBlockChunk -= BLOCKS_PER_CHUNK;
      if (toBlockChunk === toBlock - BLOCKS_PER_CHUNK) {
        toBlockChunk--;
      }
    }
    return chunks;
  }

  module.exports = chunkBlocks;
  },{"../constants":31}],132:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");

  function convertBigNumberToHexString(bigNumber) {
    return speedomatic.prefixHex(bigNumber.toString(16));
  }

  module.exports = convertBigNumberToHexString;
  },{"speedomatic":492}],133:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");

  function convertDisplayAmountToOnChainAmount(displayAmount, displayRange, numTicks) {
    var tickSize = displayRange.dividedBy(numTicks);
    return speedomatic.fix(displayAmount).times(tickSize);
  }

  module.exports = convertDisplayAmountToOnChainAmount;
  },{"speedomatic":492}],134:[function(require,module,exports){
  "use strict";

  function convertDisplayPriceToOnChainPrice(displayPrice, minDisplayPrice, tickSize) {
    return displayPrice.minus(minDisplayPrice).dividedBy(tickSize);
  }

  module.exports = convertDisplayPriceToOnChainPrice;
  },{}],135:[function(require,module,exports){
  "use strict";

  var BigNumber = require("bignumber.js");

  /**
   * @param {string|number} decimalValue
   * @param {string|number} conversionFactor
   * @return {string}
   */
  function convertFixedPointToDecimal(fixedPointValue, conversionFactor) {
    return new BigNumber(fixedPointValue, 10).dividedBy(new BigNumber(conversionFactor, 10)).toFixed();
  }

  module.exports = convertFixedPointToDecimal;
  },{"bignumber.js":157}],136:[function(require,module,exports){
  "use strict";

  var speedomatic = require("speedomatic");

  function convertOnChainAmountToDisplayAmount(onChainAmount, tickSize) {
    return speedomatic.unfix(onChainAmount.dividedBy(tickSize));
  }

  module.exports = convertOnChainAmountToDisplayAmount;
  },{"speedomatic":492}],137:[function(require,module,exports){
  "use strict";

  function convertOnChainPriceToDisplayPrice(onChainPrice, minDisplayPrice, tickSize) {
    return onChainPrice.times(tickSize).plus(minDisplayPrice);
  }

  module.exports = convertOnChainPriceToDisplayPrice;
  },{}],138:[function(require,module,exports){
  "use strict";

  module.exports = {
    convertBigNumberToHexString: require("./convert-big-number-to-hex-string"),
    convertDisplayPriceToOnChainPrice: require("./convert-display-price-to-on-chain-price"),
    convertOnChainPriceToDisplayPrice: require("./convert-on-chain-price-to-display-price"),
    convertDisplayAmountToOnChainAmount: require("./convert-display-amount-to-on-chain-amount"),
    convertOnChainAmountToDisplayAmount: require("./convert-on-chain-amount-to-display-amount")
  };
  },{"./convert-big-number-to-hex-string":132,"./convert-display-amount-to-on-chain-amount":133,"./convert-display-price-to-on-chain-price":134,"./convert-on-chain-amount-to-display-amount":136,"./convert-on-chain-price-to-display-price":137}],139:[function(require,module,exports){
  "use strict";

  var isFunction = function isFunction(f) {
    return typeof f === "function";
  };

  module.exports = isFunction;
  },{}],140:[function(require,module,exports){
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  module.exports = function (item) {
    return (typeof item === "undefined" ? "undefined" : _typeof(item)) === "object" && !Array.isArray(item) && item !== null;
  };
  },{}],141:[function(require,module,exports){
  "use strict";

  var createKeccakHash = require("keccak/js");

  function keccak256(buffer) {
    return createKeccakHash("keccak256").update(buffer).digest();
  }

  module.exports = keccak256;
  },{"keccak/js":383}],142:[function(require,module,exports){
  "use strict";

  module.exports = function (contracts) {
    return Object.keys(contracts).map(function (contractName) {
      return contracts[contractName];
    });
  };
  },{}],143:[function(require,module,exports){
  "use strict";

  module.exports = function (contracts) {
    return Object.keys(contracts).reduce(function (p, contractName) {
      p[contracts[contractName]] = contractName;
      return p;
    }, {});
  };
  },{}],144:[function(require,module,exports){
  "use strict";

  module.exports = function (eventsAbi) {
    return Object.keys(eventsAbi).reduce(function (p, contractName) {
      if (!p[contractName]) p[contractName] = {};
      var contractEventsAbi = eventsAbi[contractName];
      Object.keys(contractEventsAbi).forEach(function (eventName) {
        p[contractName][contractEventsAbi[eventName].signature] = eventName;
      });
      return p;
    }, {});
  };
  },{}],145:[function(require,module,exports){
  "use strict";

  var noop = function noop() {};

  module.exports = noop;
  },{}],146:[function(require,module,exports){
  "use strict";

  var fs = require("fs");

  function readJsonFile(path, callback) {
    fs.readFile(path, function (err, data) {
      try {
        if (err) return callback(err);
        callback(null, JSON.parse(data));
      } catch (e) {
        callback(e);
      }
    });
  }

  module.exports = readJsonFile;
  },{"fs":165}],147:[function(require,module,exports){
  'use strict';

  // generated by genversion
  module.exports = '6.1.2';
  },{}],148:[function(require,module,exports){
  (function (global){
  var augur = global.augur || require("./build/index");
  global.Augur = augur;

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./build/index":65}],149:[function(require,module,exports){
  (function (global){
  'use strict';

  // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
  // original notice:

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  function compare(a, b) {
    if (a === b) {
      return 0;
    }

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) {
      return -1;
    }
    if (y < x) {
      return 1;
    }
    return 0;
  }
  function isBuffer(b) {
    if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
      return global.Buffer.isBuffer(b);
    }
    return !!(b != null && b._isBuffer);
  }

  // based on node assert, original notice:

  // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
  //
  // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
  //
  // Originally from narwhal.js (http://narwhaljs.org)
  // Copyright (c) 2009 Thomas Robinson <280north.com>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the 'Software'), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  var util = require('util/');
  var hasOwn = Object.prototype.hasOwnProperty;
  var pSlice = Array.prototype.slice;
  var functionsHaveNames = (function () {
    return function foo() {}.name === 'foo';
  }());
  function pToString (obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (isBuffer(arrbuf)) {
      return false;
    }
    if (typeof global.ArrayBuffer !== 'function') {
      return false;
    }
    if (typeof ArrayBuffer.isView === 'function') {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  var assert = module.exports = ok;

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  var regex = /\s*function\s+([^\(\s]*)\s*/;
  // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
  function getName(func) {
    if (!util.isFunction(func)) {
      return;
    }
    if (functionsHaveNames) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;

        // try to strip useless frames
        var fn_name = getName(stackStartFunction);
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }

        this.stack = out;
      }
    }
  };

  // assert.AssertionError instanceof Error
  util.inherits(assert.AssertionError, Error);

  function truncate(s, n) {
    if (typeof s === 'string') {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect(something) {
    if (functionsHaveNames || !util.isFunction(something)) {
      return util.inspect(something);
    }
    var rawname = getName(something);
    var name = rawname ? ': ' + rawname : '';
    return '[Function' +  name + ']';
  }
  function getMessage(self) {
    return truncate(inspect(self.actual), 128) + ' ' +
           self.operator + ' ' +
           truncate(inspect(self.expected), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);

  assert.equal = function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
  };

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);

  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);

  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };

  assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
    }
  };

  function _deepEqual(actual, expected, strict, memos) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;
    } else if (isBuffer(actual) && isBuffer(expected)) {
      return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (util.isDate(actual) && util.isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if ((actual === null || typeof actual !== 'object') &&
               (expected === null || typeof expected !== 'object')) {
      return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
    } else if (isView(actual) && isView(expected) &&
               pToString(actual) === pToString(expected) &&
               !(actual instanceof Float32Array ||
                 actual instanceof Float64Array)) {
      return compare(new Uint8Array(actual.buffer),
                     new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else if (isBuffer(actual) !== isBuffer(expected)) {
      return false;
    } else {
      memos = memos || {actual: [], expected: []};

      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }

      memos.actual.push(actual);
      memos.expected.push(expected);

      return objEquiv(actual, expected, strict, memos);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === undefined || b === null || b === undefined)
      return false;
    // if one is a primitive, the other must be same
    if (util.isPrimitive(a) || util.isPrimitive(b))
      return a === b;
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      return false;
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    var key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length !== kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        return false;
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);

  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };

  assert.notDeepStrictEqual = notDeepStrictEqual;
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
    }
  }


  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);

  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    }

    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
      // Ignore.  The instanceof check doesn't work for arrow functions.
    }

    if (Error.isPrototypeOf(expected)) {
      return false;
    }

    return expected.call({}, actual) === true;
  }

  function _tryBlock(block) {
    var error;
    try {
      block();
    } catch (e) {
      error = e;
    }
    return error;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (typeof block !== 'function') {
      throw new TypeError('"block" argument must be a function');
    }

    if (typeof expected === 'string') {
      message = expected;
      expected = null;
    }

    actual = _tryBlock(block);

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    var userProvidedMessage = typeof message === 'string';
    var isUnwantedException = !shouldThrow && util.isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;

    if ((isUnwantedException &&
        userProvidedMessage &&
        expectedException(actual, expected)) ||
        isUnexpectedException) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);

  assert.throws = function(block, /*optional*/error, /*optional*/message) {
    _throws(true, block, error, message);
  };

  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
    _throws(false, block, error, message);
  };

  assert.ifError = function(err) { if (err) throw err; };

  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"util/":152}],150:[function(require,module,exports){
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }

  },{}],151:[function(require,module,exports){
  module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  }
  },{}],152:[function(require,module,exports){
  (function (process,global){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = require('./support/isBuffer');

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = require('inherits');

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./support/isBuffer":151,"_process":428,"inherits":150}],153:[function(require,module,exports){
  (function (process,global,setImmediate){
  /*!
   * async
   * https://github.com/caolan/async
   *
   * Copyright 2010-2014 Caolan McMahon
   * Released under the MIT license
   */
  (function () {

      var async = {};
      function noop() {}
      function identity(v) {
          return v;
      }
      function toBool(v) {
          return !!v;
      }
      function notId(v) {
          return !v;
      }

      // global on the server, window in the browser
      var previous_async;

      // Establish the root object, `window` (`self`) in the browser, `global`
      // on the server, or `this` in some virtual machines. We use `self`
      // instead of `window` for `WebWorker` support.
      var root = typeof self === 'object' && self.self === self && self ||
              typeof global === 'object' && global.global === global && global ||
              this;

      if (root != null) {
          previous_async = root.async;
      }

      async.noConflict = function () {
          root.async = previous_async;
          return async;
      };

      function only_once(fn) {
          return function() {
              if (fn === null) throw new Error("Callback was already called.");
              fn.apply(this, arguments);
              fn = null;
          };
      }

      function _once(fn) {
          return function() {
              if (fn === null) return;
              fn.apply(this, arguments);
              fn = null;
          };
      }

      //// cross-browser compatiblity functions ////

      var _toString = Object.prototype.toString;

      var _isArray = Array.isArray || function (obj) {
          return _toString.call(obj) === '[object Array]';
      };

      // Ported from underscore.js isObject
      var _isObject = function(obj) {
          var type = typeof obj;
          return type === 'function' || type === 'object' && !!obj;
      };

      function _isArrayLike(arr) {
          return _isArray(arr) || (
              // has a positive integer length property
              typeof arr.length === "number" &&
              arr.length >= 0 &&
              arr.length % 1 === 0
          );
      }

      function _arrayEach(arr, iterator) {
          var index = -1,
              length = arr.length;

          while (++index < length) {
              iterator(arr[index], index, arr);
          }
      }

      function _map(arr, iterator) {
          var index = -1,
              length = arr.length,
              result = Array(length);

          while (++index < length) {
              result[index] = iterator(arr[index], index, arr);
          }
          return result;
      }

      function _range(count) {
          return _map(Array(count), function (v, i) { return i; });
      }

      function _reduce(arr, iterator, memo) {
          _arrayEach(arr, function (x, i, a) {
              memo = iterator(memo, x, i, a);
          });
          return memo;
      }

      function _forEachOf(object, iterator) {
          _arrayEach(_keys(object), function (key) {
              iterator(object[key], key);
          });
      }

      function _indexOf(arr, item) {
          for (var i = 0; i < arr.length; i++) {
              if (arr[i] === item) return i;
          }
          return -1;
      }

      var _keys = Object.keys || function (obj) {
          var keys = [];
          for (var k in obj) {
              if (obj.hasOwnProperty(k)) {
                  keys.push(k);
              }
          }
          return keys;
      };

      function _keyIterator(coll) {
          var i = -1;
          var len;
          var keys;
          if (_isArrayLike(coll)) {
              len = coll.length;
              return function next() {
                  i++;
                  return i < len ? i : null;
              };
          } else {
              keys = _keys(coll);
              len = keys.length;
              return function next() {
                  i++;
                  return i < len ? keys[i] : null;
              };
          }
      }

      // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
      // This accumulates the arguments passed into an array, after a given index.
      // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
      function _restParam(func, startIndex) {
          startIndex = startIndex == null ? func.length - 1 : +startIndex;
          return function() {
              var length = Math.max(arguments.length - startIndex, 0);
              var rest = Array(length);
              for (var index = 0; index < length; index++) {
                  rest[index] = arguments[index + startIndex];
              }
              switch (startIndex) {
                  case 0: return func.call(this, rest);
                  case 1: return func.call(this, arguments[0], rest);
              }
              // Currently unused but handle cases outside of the switch statement:
              // var args = Array(startIndex + 1);
              // for (index = 0; index < startIndex; index++) {
              //     args[index] = arguments[index];
              // }
              // args[startIndex] = rest;
              // return func.apply(this, args);
          };
      }

      function _withoutIndex(iterator) {
          return function (value, index, callback) {
              return iterator(value, callback);
          };
      }

      //// exported async module functions ////

      //// nextTick implementation with browser-compatible fallback ////

      // capture the global reference to guard against fakeTimer mocks
      var _setImmediate = typeof setImmediate === 'function' && setImmediate;

      var _delay = _setImmediate ? function(fn) {
          // not a direct alias for IE10 compatibility
          _setImmediate(fn);
      } : function(fn) {
          setTimeout(fn, 0);
      };

      if (typeof process === 'object' && typeof process.nextTick === 'function') {
          async.nextTick = process.nextTick;
      } else {
          async.nextTick = _delay;
      }
      async.setImmediate = _setImmediate ? _delay : async.nextTick;


      async.forEach =
      async.each = function (arr, iterator, callback) {
          return async.eachOf(arr, _withoutIndex(iterator), callback);
      };

      async.forEachSeries =
      async.eachSeries = function (arr, iterator, callback) {
          return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
      };


      async.forEachLimit =
      async.eachLimit = function (arr, limit, iterator, callback) {
          return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
      };

      async.forEachOf =
      async.eachOf = function (object, iterator, callback) {
          callback = _once(callback || noop);
          object = object || [];

          var iter = _keyIterator(object);
          var key, completed = 0;

          while ((key = iter()) != null) {
              completed += 1;
              iterator(object[key], key, only_once(done));
          }

          if (completed === 0) callback(null);

          function done(err) {
              completed--;
              if (err) {
                  callback(err);
              }
              // Check key is null in case iterator isn't exhausted
              // and done resolved synchronously.
              else if (key === null && completed <= 0) {
                  callback(null);
              }
          }
      };

      async.forEachOfSeries =
      async.eachOfSeries = function (obj, iterator, callback) {
          callback = _once(callback || noop);
          obj = obj || [];
          var nextKey = _keyIterator(obj);
          var key = nextKey();
          function iterate() {
              var sync = true;
              if (key === null) {
                  return callback(null);
              }
              iterator(obj[key], key, only_once(function (err) {
                  if (err) {
                      callback(err);
                  }
                  else {
                      key = nextKey();
                      if (key === null) {
                          return callback(null);
                      } else {
                          if (sync) {
                              async.setImmediate(iterate);
                          } else {
                              iterate();
                          }
                      }
                  }
              }));
              sync = false;
          }
          iterate();
      };



      async.forEachOfLimit =
      async.eachOfLimit = function (obj, limit, iterator, callback) {
          _eachOfLimit(limit)(obj, iterator, callback);
      };

      function _eachOfLimit(limit) {

          return function (obj, iterator, callback) {
              callback = _once(callback || noop);
              obj = obj || [];
              var nextKey = _keyIterator(obj);
              if (limit <= 0) {
                  return callback(null);
              }
              var done = false;
              var running = 0;
              var errored = false;

              (function replenish () {
                  if (done && running <= 0) {
                      return callback(null);
                  }

                  while (running < limit && !errored) {
                      var key = nextKey();
                      if (key === null) {
                          done = true;
                          if (running <= 0) {
                              callback(null);
                          }
                          return;
                      }
                      running += 1;
                      iterator(obj[key], key, only_once(function (err) {
                          running -= 1;
                          if (err) {
                              callback(err);
                              errored = true;
                          }
                          else {
                              replenish();
                          }
                      }));
                  }
              })();
          };
      }


      function doParallel(fn) {
          return function (obj, iterator, callback) {
              return fn(async.eachOf, obj, iterator, callback);
          };
      }
      function doParallelLimit(fn) {
          return function (obj, limit, iterator, callback) {
              return fn(_eachOfLimit(limit), obj, iterator, callback);
          };
      }
      function doSeries(fn) {
          return function (obj, iterator, callback) {
              return fn(async.eachOfSeries, obj, iterator, callback);
          };
      }

      function _asyncMap(eachfn, arr, iterator, callback) {
          callback = _once(callback || noop);
          arr = arr || [];
          var results = _isArrayLike(arr) ? [] : {};
          eachfn(arr, function (value, index, callback) {
              iterator(value, function (err, v) {
                  results[index] = v;
                  callback(err);
              });
          }, function (err) {
              callback(err, results);
          });
      }

      async.map = doParallel(_asyncMap);
      async.mapSeries = doSeries(_asyncMap);
      async.mapLimit = doParallelLimit(_asyncMap);

      // reduce only has a series version, as doing reduce in parallel won't
      // work in many situations.
      async.inject =
      async.foldl =
      async.reduce = function (arr, memo, iterator, callback) {
          async.eachOfSeries(arr, function (x, i, callback) {
              iterator(memo, x, function (err, v) {
                  memo = v;
                  callback(err);
              });
          }, function (err) {
              callback(err, memo);
          });
      };

      async.foldr =
      async.reduceRight = function (arr, memo, iterator, callback) {
          var reversed = _map(arr, identity).reverse();
          async.reduce(reversed, memo, iterator, callback);
      };

      async.transform = function (arr, memo, iterator, callback) {
          if (arguments.length === 3) {
              callback = iterator;
              iterator = memo;
              memo = _isArray(arr) ? [] : {};
          }

          async.eachOf(arr, function(v, k, cb) {
              iterator(memo, v, k, cb);
          }, function(err) {
              callback(err, memo);
          });
      };

      function _filter(eachfn, arr, iterator, callback) {
          var results = [];
          eachfn(arr, function (x, index, callback) {
              iterator(x, function (v) {
                  if (v) {
                      results.push({index: index, value: x});
                  }
                  callback();
              });
          }, function () {
              callback(_map(results.sort(function (a, b) {
                  return a.index - b.index;
              }), function (x) {
                  return x.value;
              }));
          });
      }

      async.select =
      async.filter = doParallel(_filter);

      async.selectLimit =
      async.filterLimit = doParallelLimit(_filter);

      async.selectSeries =
      async.filterSeries = doSeries(_filter);

      function _reject(eachfn, arr, iterator, callback) {
          _filter(eachfn, arr, function(value, cb) {
              iterator(value, function(v) {
                  cb(!v);
              });
          }, callback);
      }
      async.reject = doParallel(_reject);
      async.rejectLimit = doParallelLimit(_reject);
      async.rejectSeries = doSeries(_reject);

      function _createTester(eachfn, check, getResult) {
          return function(arr, limit, iterator, cb) {
              function done() {
                  if (cb) cb(getResult(false, void 0));
              }
              function iteratee(x, _, callback) {
                  if (!cb) return callback();
                  iterator(x, function (v) {
                      if (cb && check(v)) {
                          cb(getResult(true, x));
                          cb = iterator = false;
                      }
                      callback();
                  });
              }
              if (arguments.length > 3) {
                  eachfn(arr, limit, iteratee, done);
              } else {
                  cb = iterator;
                  iterator = limit;
                  eachfn(arr, iteratee, done);
              }
          };
      }

      async.any =
      async.some = _createTester(async.eachOf, toBool, identity);

      async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

      async.all =
      async.every = _createTester(async.eachOf, notId, notId);

      async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

      function _findGetResult(v, x) {
          return x;
      }
      async.detect = _createTester(async.eachOf, identity, _findGetResult);
      async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
      async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

      async.sortBy = function (arr, iterator, callback) {
          async.map(arr, function (x, callback) {
              iterator(x, function (err, criteria) {
                  if (err) {
                      callback(err);
                  }
                  else {
                      callback(null, {value: x, criteria: criteria});
                  }
              });
          }, function (err, results) {
              if (err) {
                  return callback(err);
              }
              else {
                  callback(null, _map(results.sort(comparator), function (x) {
                      return x.value;
                  }));
              }

          });

          function comparator(left, right) {
              var a = left.criteria, b = right.criteria;
              return a < b ? -1 : a > b ? 1 : 0;
          }
      };

      async.auto = function (tasks, concurrency, callback) {
          if (typeof arguments[1] === 'function') {
              // concurrency is optional, shift the args.
              callback = concurrency;
              concurrency = null;
          }
          callback = _once(callback || noop);
          var keys = _keys(tasks);
          var remainingTasks = keys.length;
          if (!remainingTasks) {
              return callback(null);
          }
          if (!concurrency) {
              concurrency = remainingTasks;
          }

          var results = {};
          var runningTasks = 0;

          var hasError = false;

          var listeners = [];
          function addListener(fn) {
              listeners.unshift(fn);
          }
          function removeListener(fn) {
              var idx = _indexOf(listeners, fn);
              if (idx >= 0) listeners.splice(idx, 1);
          }
          function taskComplete() {
              remainingTasks--;
              _arrayEach(listeners.slice(0), function (fn) {
                  fn();
              });
          }

          addListener(function () {
              if (!remainingTasks) {
                  callback(null, results);
              }
          });

          _arrayEach(keys, function (k) {
              if (hasError) return;
              var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
              var taskCallback = _restParam(function(err, args) {
                  runningTasks--;
                  if (args.length <= 1) {
                      args = args[0];
                  }
                  if (err) {
                      var safeResults = {};
                      _forEachOf(results, function(val, rkey) {
                          safeResults[rkey] = val;
                      });
                      safeResults[k] = args;
                      hasError = true;

                      callback(err, safeResults);
                  }
                  else {
                      results[k] = args;
                      async.setImmediate(taskComplete);
                  }
              });
              var requires = task.slice(0, task.length - 1);
              // prevent dead-locks
              var len = requires.length;
              var dep;
              while (len--) {
                  if (!(dep = tasks[requires[len]])) {
                      throw new Error('Has nonexistent dependency in ' + requires.join(', '));
                  }
                  if (_isArray(dep) && _indexOf(dep, k) >= 0) {
                      throw new Error('Has cyclic dependencies');
                  }
              }
              function ready() {
                  return runningTasks < concurrency && _reduce(requires, function (a, x) {
                      return (a && results.hasOwnProperty(x));
                  }, true) && !results.hasOwnProperty(k);
              }
              if (ready()) {
                  runningTasks++;
                  task[task.length - 1](taskCallback, results);
              }
              else {
                  addListener(listener);
              }
              function listener() {
                  if (ready()) {
                      runningTasks++;
                      removeListener(listener);
                      task[task.length - 1](taskCallback, results);
                  }
              }
          });
      };



      async.retry = function(times, task, callback) {
          var DEFAULT_TIMES = 5;
          var DEFAULT_INTERVAL = 0;

          var attempts = [];

          var opts = {
              times: DEFAULT_TIMES,
              interval: DEFAULT_INTERVAL
          };

          function parseTimes(acc, t){
              if(typeof t === 'number'){
                  acc.times = parseInt(t, 10) || DEFAULT_TIMES;
              } else if(typeof t === 'object'){
                  acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                  acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
              } else {
                  throw new Error('Unsupported argument type for \'times\': ' + typeof t);
              }
          }

          var length = arguments.length;
          if (length < 1 || length > 3) {
              throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
          } else if (length <= 2 && typeof times === 'function') {
              callback = task;
              task = times;
          }
          if (typeof times !== 'function') {
              parseTimes(opts, times);
          }
          opts.callback = callback;
          opts.task = task;

          function wrappedTask(wrappedCallback, wrappedResults) {
              function retryAttempt(task, finalAttempt) {
                  return function(seriesCallback) {
                      task(function(err, result){
                          seriesCallback(!err || finalAttempt, {err: err, result: result});
                      }, wrappedResults);
                  };
              }

              function retryInterval(interval){
                  return function(seriesCallback){
                      setTimeout(function(){
                          seriesCallback(null);
                      }, interval);
                  };
              }

              while (opts.times) {

                  var finalAttempt = !(opts.times-=1);
                  attempts.push(retryAttempt(opts.task, finalAttempt));
                  if(!finalAttempt && opts.interval > 0){
                      attempts.push(retryInterval(opts.interval));
                  }
              }

              async.series(attempts, function(done, data){
                  data = data[data.length - 1];
                  (wrappedCallback || opts.callback)(data.err, data.result);
              });
          }

          // If a callback is passed, run this as a controll flow
          return opts.callback ? wrappedTask() : wrappedTask;
      };

      async.waterfall = function (tasks, callback) {
          callback = _once(callback || noop);
          if (!_isArray(tasks)) {
              var err = new Error('First argument to waterfall must be an array of functions');
              return callback(err);
          }
          if (!tasks.length) {
              return callback();
          }
          function wrapIterator(iterator) {
              return _restParam(function (err, args) {
                  if (err) {
                      callback.apply(null, [err].concat(args));
                  }
                  else {
                      var next = iterator.next();
                      if (next) {
                          args.push(wrapIterator(next));
                      }
                      else {
                          args.push(callback);
                      }
                      ensureAsync(iterator).apply(null, args);
                  }
              });
          }
          wrapIterator(async.iterator(tasks))();
      };

      function _parallel(eachfn, tasks, callback) {
          callback = callback || noop;
          var results = _isArrayLike(tasks) ? [] : {};

          eachfn(tasks, function (task, key, callback) {
              task(_restParam(function (err, args) {
                  if (args.length <= 1) {
                      args = args[0];
                  }
                  results[key] = args;
                  callback(err);
              }));
          }, function (err) {
              callback(err, results);
          });
      }

      async.parallel = function (tasks, callback) {
          _parallel(async.eachOf, tasks, callback);
      };

      async.parallelLimit = function(tasks, limit, callback) {
          _parallel(_eachOfLimit(limit), tasks, callback);
      };

      async.series = function(tasks, callback) {
          _parallel(async.eachOfSeries, tasks, callback);
      };

      async.iterator = function (tasks) {
          function makeCallback(index) {
              function fn() {
                  if (tasks.length) {
                      tasks[index].apply(null, arguments);
                  }
                  return fn.next();
              }
              fn.next = function () {
                  return (index < tasks.length - 1) ? makeCallback(index + 1): null;
              };
              return fn;
          }
          return makeCallback(0);
      };

      async.apply = _restParam(function (fn, args) {
          return _restParam(function (callArgs) {
              return fn.apply(
                  null, args.concat(callArgs)
              );
          });
      });

      function _concat(eachfn, arr, fn, callback) {
          var result = [];
          eachfn(arr, function (x, index, cb) {
              fn(x, function (err, y) {
                  result = result.concat(y || []);
                  cb(err);
              });
          }, function (err) {
              callback(err, result);
          });
      }
      async.concat = doParallel(_concat);
      async.concatSeries = doSeries(_concat);

      async.whilst = function (test, iterator, callback) {
          callback = callback || noop;
          if (test()) {
              var next = _restParam(function(err, args) {
                  if (err) {
                      callback(err);
                  } else if (test.apply(this, args)) {
                      iterator(next);
                  } else {
                      callback.apply(null, [null].concat(args));
                  }
              });
              iterator(next);
          } else {
              callback(null);
          }
      };

      async.doWhilst = function (iterator, test, callback) {
          var calls = 0;
          return async.whilst(function() {
              return ++calls <= 1 || test.apply(this, arguments);
          }, iterator, callback);
      };

      async.until = function (test, iterator, callback) {
          return async.whilst(function() {
              return !test.apply(this, arguments);
          }, iterator, callback);
      };

      async.doUntil = function (iterator, test, callback) {
          return async.doWhilst(iterator, function() {
              return !test.apply(this, arguments);
          }, callback);
      };

      async.during = function (test, iterator, callback) {
          callback = callback || noop;

          var next = _restParam(function(err, args) {
              if (err) {
                  callback(err);
              } else {
                  args.push(check);
                  test.apply(this, args);
              }
          });

          var check = function(err, truth) {
              if (err) {
                  callback(err);
              } else if (truth) {
                  iterator(next);
              } else {
                  callback(null);
              }
          };

          test(check);
      };

      async.doDuring = function (iterator, test, callback) {
          var calls = 0;
          async.during(function(next) {
              if (calls++ < 1) {
                  next(null, true);
              } else {
                  test.apply(this, arguments);
              }
          }, iterator, callback);
      };

      function _queue(worker, concurrency, payload) {
          if (concurrency == null) {
              concurrency = 1;
          }
          else if(concurrency === 0) {
              throw new Error('Concurrency must not be zero');
          }
          function _insert(q, data, pos, callback) {
              if (callback != null && typeof callback !== "function") {
                  throw new Error("task callback must be a function");
              }
              q.started = true;
              if (!_isArray(data)) {
                  data = [data];
              }
              if(data.length === 0 && q.idle()) {
                  // call drain immediately if there are no tasks
                  return async.setImmediate(function() {
                      q.drain();
                  });
              }
              _arrayEach(data, function(task) {
                  var item = {
                      data: task,
                      callback: callback || noop
                  };

                  if (pos) {
                      q.tasks.unshift(item);
                  } else {
                      q.tasks.push(item);
                  }

                  if (q.tasks.length === q.concurrency) {
                      q.saturated();
                  }
              });
              async.setImmediate(q.process);
          }
          function _next(q, tasks) {
              return function(){
                  workers -= 1;

                  var removed = false;
                  var args = arguments;
                  _arrayEach(tasks, function (task) {
                      _arrayEach(workersList, function (worker, index) {
                          if (worker === task && !removed) {
                              workersList.splice(index, 1);
                              removed = true;
                          }
                      });

                      task.callback.apply(task, args);
                  });
                  if (q.tasks.length + workers === 0) {
                      q.drain();
                  }
                  q.process();
              };
          }

          var workers = 0;
          var workersList = [];
          var q = {
              tasks: [],
              concurrency: concurrency,
              payload: payload,
              saturated: noop,
              empty: noop,
              drain: noop,
              started: false,
              paused: false,
              push: function (data, callback) {
                  _insert(q, data, false, callback);
              },
              kill: function () {
                  q.drain = noop;
                  q.tasks = [];
              },
              unshift: function (data, callback) {
                  _insert(q, data, true, callback);
              },
              process: function () {
                  while(!q.paused && workers < q.concurrency && q.tasks.length){

                      var tasks = q.payload ?
                          q.tasks.splice(0, q.payload) :
                          q.tasks.splice(0, q.tasks.length);

                      var data = _map(tasks, function (task) {
                          return task.data;
                      });

                      if (q.tasks.length === 0) {
                          q.empty();
                      }
                      workers += 1;
                      workersList.push(tasks[0]);
                      var cb = only_once(_next(q, tasks));
                      worker(data, cb);
                  }
              },
              length: function () {
                  return q.tasks.length;
              },
              running: function () {
                  return workers;
              },
              workersList: function () {
                  return workersList;
              },
              idle: function() {
                  return q.tasks.length + workers === 0;
              },
              pause: function () {
                  q.paused = true;
              },
              resume: function () {
                  if (q.paused === false) { return; }
                  q.paused = false;
                  var resumeCount = Math.min(q.concurrency, q.tasks.length);
                  // Need to call q.process once per concurrent
                  // worker to preserve full concurrency after pause
                  for (var w = 1; w <= resumeCount; w++) {
                      async.setImmediate(q.process);
                  }
              }
          };
          return q;
      }

      async.queue = function (worker, concurrency) {
          var q = _queue(function (items, cb) {
              worker(items[0], cb);
          }, concurrency, 1);

          return q;
      };

      async.priorityQueue = function (worker, concurrency) {

          function _compareTasks(a, b){
              return a.priority - b.priority;
          }

          function _binarySearch(sequence, item, compare) {
              var beg = -1,
                  end = sequence.length - 1;
              while (beg < end) {
                  var mid = beg + ((end - beg + 1) >>> 1);
                  if (compare(item, sequence[mid]) >= 0) {
                      beg = mid;
                  } else {
                      end = mid - 1;
                  }
              }
              return beg;
          }

          function _insert(q, data, priority, callback) {
              if (callback != null && typeof callback !== "function") {
                  throw new Error("task callback must be a function");
              }
              q.started = true;
              if (!_isArray(data)) {
                  data = [data];
              }
              if(data.length === 0) {
                  // call drain immediately if there are no tasks
                  return async.setImmediate(function() {
                      q.drain();
                  });
              }
              _arrayEach(data, function(task) {
                  var item = {
                      data: task,
                      priority: priority,
                      callback: typeof callback === 'function' ? callback : noop
                  };

                  q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                  if (q.tasks.length === q.concurrency) {
                      q.saturated();
                  }
                  async.setImmediate(q.process);
              });
          }

          // Start with a normal queue
          var q = async.queue(worker, concurrency);

          // Override push to accept second parameter representing priority
          q.push = function (data, priority, callback) {
              _insert(q, data, priority, callback);
          };

          // Remove unshift function
          delete q.unshift;

          return q;
      };

      async.cargo = function (worker, payload) {
          return _queue(worker, 1, payload);
      };

      function _console_fn(name) {
          return _restParam(function (fn, args) {
              fn.apply(null, args.concat([_restParam(function (err, args) {
                  if (typeof console === 'object') {
                      if (err) {
                          if (console.error) {
                              console.error(err);
                          }
                      }
                      else if (console[name]) {
                          _arrayEach(args, function (x) {
                              console[name](x);
                          });
                      }
                  }
              })]));
          });
      }
      async.log = _console_fn('log');
      async.dir = _console_fn('dir');
      /*async.info = _console_fn('info');
      async.warn = _console_fn('warn');
      async.error = _console_fn('error');*/

      async.memoize = function (fn, hasher) {
          var memo = {};
          var queues = {};
          var has = Object.prototype.hasOwnProperty;
          hasher = hasher || identity;
          var memoized = _restParam(function memoized(args) {
              var callback = args.pop();
              var key = hasher.apply(null, args);
              if (has.call(memo, key)) {
                  async.setImmediate(function () {
                      callback.apply(null, memo[key]);
                  });
              }
              else if (has.call(queues, key)) {
                  queues[key].push(callback);
              }
              else {
                  queues[key] = [callback];
                  fn.apply(null, args.concat([_restParam(function (args) {
                      memo[key] = args;
                      var q = queues[key];
                      delete queues[key];
                      for (var i = 0, l = q.length; i < l; i++) {
                          q[i].apply(null, args);
                      }
                  })]));
              }
          });
          memoized.memo = memo;
          memoized.unmemoized = fn;
          return memoized;
      };

      async.unmemoize = function (fn) {
          return function () {
              return (fn.unmemoized || fn).apply(null, arguments);
          };
      };

      function _times(mapper) {
          return function (count, iterator, callback) {
              mapper(_range(count), iterator, callback);
          };
      }

      async.times = _times(async.map);
      async.timesSeries = _times(async.mapSeries);
      async.timesLimit = function (count, limit, iterator, callback) {
          return async.mapLimit(_range(count), limit, iterator, callback);
      };

      async.seq = function (/* functions... */) {
          var fns = arguments;
          return _restParam(function (args) {
              var that = this;

              var callback = args[args.length - 1];
              if (typeof callback == 'function') {
                  args.pop();
              } else {
                  callback = noop;
              }

              async.reduce(fns, args, function (newargs, fn, cb) {
                  fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
                      cb(err, nextargs);
                  })]));
              },
              function (err, results) {
                  callback.apply(that, [err].concat(results));
              });
          });
      };

      async.compose = function (/* functions... */) {
          return async.seq.apply(null, Array.prototype.reverse.call(arguments));
      };


      function _applyEach(eachfn) {
          return _restParam(function(fns, args) {
              var go = _restParam(function(args) {
                  var that = this;
                  var callback = args.pop();
                  return eachfn(fns, function (fn, _, cb) {
                      fn.apply(that, args.concat([cb]));
                  },
                  callback);
              });
              if (args.length) {
                  return go.apply(this, args);
              }
              else {
                  return go;
              }
          });
      }

      async.applyEach = _applyEach(async.eachOf);
      async.applyEachSeries = _applyEach(async.eachOfSeries);


      async.forever = function (fn, callback) {
          var done = only_once(callback || noop);
          var task = ensureAsync(fn);
          function next(err) {
              if (err) {
                  return done(err);
              }
              task(next);
          }
          next();
      };

      function ensureAsync(fn) {
          return _restParam(function (args) {
              var callback = args.pop();
              args.push(function () {
                  var innerArgs = arguments;
                  if (sync) {
                      async.setImmediate(function () {
                          callback.apply(null, innerArgs);
                      });
                  } else {
                      callback.apply(null, innerArgs);
                  }
              });
              var sync = true;
              fn.apply(this, args);
              sync = false;
          });
      }

      async.ensureAsync = ensureAsync;

      async.constant = _restParam(function(values) {
          var args = [null].concat(values);
          return function (callback) {
              return callback.apply(this, args);
          };
      });

      async.wrapSync =
      async.asyncify = function asyncify(func) {
          return _restParam(function (args) {
              var callback = args.pop();
              var result;
              try {
                  result = func.apply(this, args);
              } catch (e) {
                  return callback(e);
              }
              // if result is Promise object
              if (_isObject(result) && typeof result.then === "function") {
                  result.then(function(value) {
                      callback(null, value);
                  })["catch"](function(err) {
                      callback(err.message ? err : new Error(err));
                  });
              } else {
                  callback(null, result);
              }
          });
      };

      // Node.js
      if (typeof module === 'object' && module.exports) {
          module.exports = async;
      }
      // AMD / RequireJS
      else if (typeof define === 'function' && define.amd) {
          define([], function () {
              return async;
          });
      }
      // included directly via <script> tag
      else {
          root.async = async;
      }

  }());

  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
  <<<<<<< HEAD
  },{"_process":427,"timers":177}],154:[function(require,module,exports){
  var v1 = require('./v1');
  var v4 = require('./v4');

  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;

  module.exports = uuid;

  },{"./v1":157,"./v4":158}],155:[function(require,module,exports){
  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  module.exports = bytesToUuid;

  },{}],156:[function(require,module,exports){
  // Unique ID creation requires a high quality random # generator.  In the
  // browser this is a little complicated due to unknown quality of Math.random()
  // and inconsistent support for the `crypto` API.  We do the best we can via
  // feature-detection

  // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
  var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||
                        (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));
  if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }

  },{}],157:[function(require,module,exports){
  var rng = require('./lib/rng');
  var bytesToUuid = require('./lib/bytesToUuid');

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;
  var _clockseq;

  // Previous uuid creation time
  var _lastMSecs = 0;
  var _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
      var seedBytes = rng();
      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
          seedBytes[0] | 0x01,
          seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
        ];
      }
      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid(b);
  }

  module.exports = v1;

  },{"./lib/bytesToUuid":155,"./lib/rng":156}],158:[function(require,module,exports){
  var rng = require('./lib/rng');
  var bytesToUuid = require('./lib/bytesToUuid');

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid(rnds);
  }

  module.exports = v4;

  },{"./lib/bytesToUuid":155,"./lib/rng":156}],159:[function(require,module,exports){
  "use strict";
  var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator = (this && this.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var block_reconciler_1 = require("./block-reconciler");
  var log_reconciler_1 = require("./log-reconciler");
  var immutable_1 = require("immutable");
  var createUuid = require("uuid");
  var BlockAndLogStreamer = /** @class */ (function () {
      /**
       * @param getBlockByHash async function that returns a block given a particular hash or null/throws if the block is not found
       * @param getLogs async function that returns the logs matching the given filter
       * @param onError called if a subscriber throws an error, the error will otherwise be swallowed
       * @param configuration additional optional configuration items
       */
      function BlockAndLogStreamer(getBlockByHash, getLogs, onError, configuration) {
          var _this = this;
          this.lastKnownGoodBlockHistory = immutable_1.List();
          this.blockHistory = Promise.resolve(this.lastKnownGoodBlockHistory);
          this.lastKnownGoodLogHistory = immutable_1.List();
          this.logHistory = Promise.resolve(this.lastKnownGoodLogHistory);
          this.pendingCallbacks = [];
          this.onError = function () { };
          this.logFilters = {};
          this.onBlockAddedSubscribers = {};
          this.onBlockRemovedSubscribers = {};
          this.onLogAddedSubscribers = {};
          this.onLogRemovedSubscribers = {};
          this.reconcileNewBlock = function (block) { return __awaiter(_this, void 0, void 0, function () {
              var blockHistory, logHistory, error_1;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          _a.trys.push([0, 3, , 4]);
                          this.blockHistory = block_reconciler_1.reconcileBlockHistory(this.getBlockByHash, this.blockHistory, block, this.onBlockAdded, this.onBlockRemoved, this.blockRetention);
                          return [4 /*yield*/, this.blockHistory];
                      case 1:
                          blockHistory = _a.sent();
                          return [4 /*yield*/, this.logHistory];
                      case 2:
                          logHistory = _a.sent();
                          // everything reconciled correctly, checkpoint state
                          this.lastKnownGoodBlockHistory = blockHistory;
                          this.lastKnownGoodLogHistory = logHistory;
                          this.pendingCallbacks.forEach(function (callback) { return callback(); });
                          this.pendingCallbacks = [];
                          return [3 /*break*/, 4];
                      case 3:
                          error_1 = _a.sent();
                          // NOTE: this catch block may be hit multiple times for a single failure root cause, thus we need to be careful to only do idempotent operations in here
                          // something went wrong, rollback to last checkpoint
                          this.blockHistory = Promise.resolve(this.lastKnownGoodBlockHistory);
                          this.logHistory = Promise.resolve(this.lastKnownGoodLogHistory);
                          this.pendingCallbacks = [];
                          throw error_1;
                      case 4: return [2 /*return*/];
                  }
              });
          }); };
          this.onBlockAdded = function (block) { return __awaiter(_this, void 0, void 0, function () {
              var logFilters;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          logFilters = Object.keys(this.logFilters).map(function (key) { return _this.logFilters[key]; });
                          this.logHistory = log_reconciler_1.reconcileLogHistoryWithAddedBlock(this.getLogs, this.logHistory, block, this.onLogAdded, logFilters, this.blockRetention);
                          return [4 /*yield*/, this.logHistory];
                      case 1:
                          _a.sent();
                          Object.keys(this.onBlockAddedSubscribers)
                              .map(function (key) { return _this.onBlockAddedSubscribers[key]; })
                              .map(function (callback) { return logAndSwallowWrapper(callback, _this.onError); })
                              .forEach(function (callback) { return _this.pendingCallbacks.push(function () { return callback(block); }); });
                          return [2 /*return*/];
                  }
              });
          }); };
          this.onBlockRemoved = function (block) { return __awaiter(_this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          this.logHistory = log_reconciler_1.reconcileLogHistoryWithRemovedBlock(this.logHistory, block, this.onLogRemoved);
                          return [4 /*yield*/, this.logHistory];
                      case 1:
                          _a.sent();
                          Object.keys(this.onBlockRemovedSubscribers)
                              .map(function (key) { return _this.onBlockRemovedSubscribers[key]; })
                              .map(function (callback) { return logAndSwallowWrapper(callback, _this.onError); })
                              .forEach(function (callback) { return _this.pendingCallbacks.push(function () { return callback(block); }); });
                          return [2 /*return*/];
                  }
              });
          }); };
          this.onLogAdded = function (log) { return __awaiter(_this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                  Object.keys(this.onLogAddedSubscribers)
                      .map(function (key) { return _this.onLogAddedSubscribers[key]; })
                      .map(function (callback) { return logAndSwallowWrapper(callback, _this.onError); })
                      .forEach(function (callback) { return _this.pendingCallbacks.push(function () { return callback(log); }); });
                  return [2 /*return*/];
              });
          }); };
          this.onLogRemoved = function (log) { return __awaiter(_this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                  Object.keys(this.onLogRemovedSubscribers)
                      .map(function (key) { return _this.onLogRemovedSubscribers[key]; })
                      .map(function (callback) { return logAndSwallowWrapper(callback, _this.onError); })
                      .forEach(function (callback) { return _this.pendingCallbacks.push(function () { return callback(log); }); });
                  return [2 /*return*/];
              });
          }); };
          this.getLatestReconciledBlock = function () {
              return _this.lastKnownGoodBlockHistory.isEmpty() ? null : _this.lastKnownGoodBlockHistory.last();
          };
          this.addLogFilter = function (filter) {
              var uuid = "log filter token " + createUuid();
              _this.logFilters[uuid] = filter;
              return uuid;
          };
          this.removeLogFilter = function (token) {
              if (!token.startsWith("log filter token "))
                  throw new Error("Expected a log filter token.  Actual: " + token);
              delete _this.logFilters[token];
          };
          this.subscribeToOnBlockAdded = function (onBlockAdded) {
              var uuid = "on block added token " + createUuid();
              _this.onBlockAddedSubscribers[uuid] = onBlockAdded;
              return uuid;
          };
          this.unsubscribeFromOnBlockAdded = function (token) {
              if (!token.startsWith("on block added token "))
                  throw new Error("Expected a block added subscription token.  Actual: " + token);
              delete _this.onBlockAddedSubscribers[token];
          };
          this.subscribeToOnBlockRemoved = function (onBlockRemoved) {
              var uuid = "on block removed token " + createUuid();
              _this.onBlockRemovedSubscribers[uuid] = onBlockRemoved;
              return uuid;
          };
          this.unsubscribeFromOnBlockRemoved = function (token) {
              if (!token.startsWith("on block removed token "))
                  throw new Error("Expected a block added subscription token.  Actual: " + token);
              delete _this.onBlockRemovedSubscribers[token];
          };
          this.subscribeToOnLogAdded = function (onLogAdded) {
              var uuid = "on log added token " + createUuid();
              _this.onLogAddedSubscribers[uuid] = onLogAdded;
              return uuid;
          };
          this.unsubscribeFromOnLogAdded = function (token) {
              if (!token.startsWith("on log added token "))
                  throw new Error("Expected a log added subscription token.  Actual: " + token);
              delete _this.onLogAddedSubscribers[token];
          };
          this.subscribeToOnLogRemoved = function (onLogRemoved) {
              var uuid = "on log removed token " + createUuid();
              _this.onLogRemovedSubscribers[uuid] = onLogRemoved;
              return uuid;
          };
          this.unsubscribeFromOnLogRemoved = function (token) {
              if (!token.startsWith("on log removed token "))
                  throw new Error("Expected a log added subscription token.  Actual: " + token);
              delete _this.onLogRemovedSubscribers[token];
          };
          if (getBlockByHash === undefined)
              throw new Error("getBlockByHash must be provided");
          this.getBlockByHash = getBlockByHash;
          if (getLogs === undefined)
              throw new Error("getLogs must be provided");
          this.getLogs = getLogs;
          if (onError === undefined)
              throw new Error("onError must be provided");
          this.onError = onError;
          this.blockRetention = (configuration && configuration.blockRetention) ? configuration.blockRetention : 100;
      }
      return BlockAndLogStreamer;
  }());
  exports.BlockAndLogStreamer = BlockAndLogStreamer;
  function logAndSwallowWrapper(callback, onError) {
      return function (parameter) {
          try {
              callback(parameter);
          }
          catch (error) {
              onError(error);
          }
      };
  }

  },{"./block-reconciler":160,"./log-reconciler":162,"immutable":377,"uuid":154}],160:[function(require,module,exports){
  "use strict";
  var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator = (this && this.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  var _this = this;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.reconcileBlockHistory = function (getBlockByHash, blockHistory, newBlock, onBlockAdded, onBlockRemoved, blockRetention) {
      if (blockRetention === void 0) { blockRetention = 100; }
      return __awaiter(_this, void 0, void 0, function () {
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0: return [4 /*yield*/, blockHistory];
                  case 1:
                      blockHistory = _a.sent();
                      if (!isFirstBlock(blockHistory)) return [3 /*break*/, 3];
                      return [4 /*yield*/, addNewHeadBlock(blockHistory, newBlock, onBlockAdded, blockRetention)];
                  case 2: return [2 /*return*/, _a.sent()];
                  case 3:
                      if (!isOlderThanOldestBlock(blockHistory, newBlock)) return [3 /*break*/, 6];
                      return [4 /*yield*/, rollback(blockHistory, onBlockRemoved)];
                  case 4:
                      blockHistory = _a.sent();
                      return [4 /*yield*/, addNewHeadBlock(blockHistory, newBlock, onBlockAdded, blockRetention)];
                  case 5: return [2 /*return*/, _a.sent()];
                  case 6:
                      if (isAlreadyInHistory(blockHistory, newBlock))
                          return [2 /*return*/, blockHistory];
                      if (!isNewHeadBlock(blockHistory, newBlock)) return [3 /*break*/, 8];
                      return [4 /*yield*/, addNewHeadBlock(blockHistory, newBlock, onBlockAdded, blockRetention)];
                  case 7: return [2 /*return*/, _a.sent()];
                  case 8:
                      if (!parentHashIsInHistory(blockHistory, newBlock)) return [3 /*break*/, 13];
                      _a.label = 9;
                  case 9:
                      if (!(blockHistory.last().hash !== newBlock.parentHash)) return [3 /*break*/, 11];
                      return [4 /*yield*/, removeHeadBlock(blockHistory, onBlockRemoved)];
                  case 10:
                      blockHistory = _a.sent();
                      return [3 /*break*/, 9];
                  case 11: return [4 /*yield*/, addNewHeadBlock(blockHistory, newBlock, onBlockAdded, blockRetention)];
                  case 12: return [2 /*return*/, _a.sent()];
                  case 13: return [4 /*yield*/, backfill(getBlockByHash, blockHistory, newBlock, onBlockAdded, onBlockRemoved, blockRetention)];
                  case 14: return [2 /*return*/, _a.sent()];
              }
          });
      });
  };
  var rollback = function (blockHistory, onBlockRemoved) { return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  if (!!blockHistory.isEmpty()) return [3 /*break*/, 2];
                  return [4 /*yield*/, removeHeadBlock(blockHistory, onBlockRemoved)];
              case 1:
                  // CONSIDER: if this throws an exception, removals may have been announced that are actually still in history since throwing will result in no history update. we can't catch errors here because there isn't a clear way to recover from them, the failure may be a downstream system telling us that the block removal isn't possible because they are in a bad state. we could try re-announcing the successfully added blocks, but there would still be a problem with the failed block (should it be re-announced?) and the addition announcements may also fail
                  blockHistory = _a.sent();
                  return [3 /*break*/, 0];
              case 2: return [2 /*return*/, blockHistory];
          }
      });
  }); };
  var backfill = function (getBlockByHash, blockHistory, newBlock, onBlockAdded, onBlockRemoved, blockRetention) { return __awaiter(_this, void 0, void 0, function () {
      var parentBlock;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  if (!(newBlock.parentHash === "0x0000000000000000000000000000000000000000000000000000000000000000")) return [3 /*break*/, 2];
                  return [4 /*yield*/, rollback(blockHistory, onBlockRemoved)];
              case 1: return [2 /*return*/, _a.sent()];
              case 2: return [4 /*yield*/, getBlockByHash(newBlock.parentHash)];
              case 3:
                  parentBlock = _a.sent();
                  if (parentBlock === null)
                      throw new Error("Failed to fetch parent block.");
                  if (!(parseInt(parentBlock.number, 16) + blockRetention < parseInt(blockHistory.last().number, 16))) return [3 /*break*/, 5];
                  return [4 /*yield*/, rollback(blockHistory, onBlockRemoved)];
              case 4: return [2 /*return*/, _a.sent()];
              case 5: return [4 /*yield*/, exports.reconcileBlockHistory(getBlockByHash, blockHistory, parentBlock, onBlockAdded, onBlockRemoved, blockRetention)];
              case 6:
                  blockHistory = _a.sent();
                  return [4 /*yield*/, exports.reconcileBlockHistory(getBlockByHash, blockHistory, newBlock, onBlockAdded, onBlockRemoved, blockRetention)];
              case 7: return [2 /*return*/, _a.sent()];
          }
      });
  }); };
  var addNewHeadBlock = function (blockHistory, newBlock, onBlockAdded, blockRetention) { return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  // this is here as a final sanity check, in case we somehow got into an unexpected state, there are no known (and should never be) ways to reach this exception
                  if (!blockHistory.isEmpty() && blockHistory.last().hash !== newBlock.parentHash)
                      throw new Error("New head block's parent isn't our current head.");
                  // CONSIDER: the user getting this notification won't have any visibility into the updated block history yet. should we announce new blocks in a `setTimeout`? should we provide block history with new logs? an announcement failure will result in unwinding the stack and returning the original blockHistory, if we are in the process of backfilling we may have already announced previous blocks that won't actually end up in history (they won't get removed if a re-org occurs and may be re-announced). we can't catch errors thrown by the callback because it may be trying to signal to use that the block has become invalid and is un-processable
                  return [4 /*yield*/, onBlockAdded(newBlock)];
              case 1:
                  // CONSIDER: the user getting this notification won't have any visibility into the updated block history yet. should we announce new blocks in a `setTimeout`? should we provide block history with new logs? an announcement failure will result in unwinding the stack and returning the original blockHistory, if we are in the process of backfilling we may have already announced previous blocks that won't actually end up in history (they won't get removed if a re-org occurs and may be re-announced). we can't catch errors thrown by the callback because it may be trying to signal to use that the block has become invalid and is un-processable
                  _a.sent();
                  blockHistory = blockHistory.push(newBlock);
                  return [2 /*return*/, blockHistory.takeLast(blockRetention).toList()];
          }
      });
  }); };
  var removeHeadBlock = function (blockHistory, onBlockRemoved) { return __awaiter(_this, void 0, void 0, function () {
      var removedBlock;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  removedBlock = blockHistory.last();
                  blockHistory = blockHistory.pop();
                  return [4 /*yield*/, onBlockRemoved(removedBlock)];
              case 1:
                  _a.sent();
                  return [2 /*return*/, blockHistory];
          }
      });
  }); };
  var isFirstBlock = function (blockHistory) {
      return blockHistory.isEmpty();
  };
  var isOlderThanOldestBlock = function (blockHistory, newBlock) {
      return parseInt(blockHistory.first().number, 16) > parseInt(newBlock.number, 16);
  };
  var isAlreadyInHistory = function (blockHistory, newBlock) {
      // `block!` is required until the next version of `immutable` is published to NPM (current version 3.8.1) which improves the type definitions
      return blockHistory.some(function (block) { return block.hash === newBlock.hash; });
  };
  var isNewHeadBlock = function (blockHistory, newBlock) {
      return blockHistory.last().hash === newBlock.parentHash;
  };
  var parentHashIsInHistory = function (blockHistory, newBlock) {
      // `block!` is required until the next version of `immutable` is published to NPM (current version 3.8.1) which improves the type definitions
      return blockHistory.some(function (block) { return block.hash === newBlock.parentHash; });
  };

  },{}],161:[function(require,module,exports){
  "use strict";
  // NOTE --
  //  Commented out to avoid cross origin error produced when running again webpack
  //  More research is necessary to resolve, as it may simply be a configuration issue.
  //  Repro Steps: Checkout augur `new-contracts` branch + run `yarn dev` to start the dev server.
  //  When accessing within a browser, attempts to get files via XHR produces cross origin errors due the proto being `webpack-internal`
  // import * as sourceMapSupport from "source-map-support";
  // sourceMapSupport.install();
  Object.defineProperty(exports, "__esModule", { value: true });
  var block_and_log_streamer_1 = require("./block-and-log-streamer");
  exports.BlockAndLogStreamer = block_and_log_streamer_1.BlockAndLogStreamer;

  },{"./block-and-log-streamer":159}],162:[function(require,module,exports){
  "use strict";
  var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator = (this && this.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  var _this = this;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.reconcileLogHistoryWithAddedBlock = function (getLogs, logHistory, newBlock, onLogAdded, filters, historyBlockLength) {
      if (filters === void 0) { filters = []; }
      if (historyBlockLength === void 0) { historyBlockLength = 100; }
      return __awaiter(_this, void 0, void 0, function () {
          var logs;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0: return [4 /*yield*/, logHistory];
                  case 1:
                      logHistory = _a.sent();
                      return [4 /*yield*/, getFilteredLogs(getLogs, newBlock, filters)];
                  case 2:
                      logs = _a.sent();
                      ensureBlockhash(newBlock, logs);
                      return [4 /*yield*/, addNewLogsToHead(logHistory, logs, onLogAdded)];
                  case 3:
                      logHistory = _a.sent();
                      return [4 /*yield*/, pruneOldLogs(logHistory, newBlock, historyBlockLength)];
                  case 4:
                      logHistory = _a.sent();
                      return [2 /*return*/, logHistory];
              }
          });
      });
  };
  var getFilteredLogs = function (getLogs, newBlock, filters) { return __awaiter(_this, void 0, void 0, function () {
      var logPromises, nestedLogs;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  logPromises = filters
                      .map(function (filter) { return ({ fromBlock: newBlock.number, toBlock: newBlock.number, address: filter.address, topics: filter.topics, }); })
                      .map(function (filter) { return getLogs(filter); });
                  return [4 /*yield*/, Promise.all(logPromises)];
              case 1:
                  nestedLogs = _a.sent();
                  return [2 /*return*/, nestedLogs.reduce(function (allLogs, logs) { return allLogs.concat(logs); }, [])];
          }
      });
  }); };
  var addNewLogsToHead = function (logHistory, newLogs, onLogAdded) { return __awaiter(_this, void 0, void 0, function () {
      var sortedLogs, _loop_1, _i, sortedLogs_1, logToAdd;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  sortedLogs = newLogs.sort(function (logA, logB) { return parseInt(logA.logIndex, 16) - parseInt(logB.logIndex, 16); });
                  _loop_1 = function (logToAdd) {
                      return __generator(this, function (_a) {
                          switch (_a.label) {
                              case 0:
                                  // we may already have this log because two filters can return the same log
                                  if (logHistory.some(function (logInHistory) { return logInHistory.blockHash === logToAdd.blockHash && logInHistory.logIndex === logToAdd.logIndex; }))
                                      return [2 /*return*/, "continue"];
                                  ensureOrder(logHistory.last(), logToAdd);
                                  return [4 /*yield*/, addNewLogToHead(logHistory, logToAdd, onLogAdded)];
                              case 1:
                                  logHistory = _a.sent();
                                  return [2 /*return*/];
                          }
                      });
                  };
                  _i = 0, sortedLogs_1 = sortedLogs;
                  _a.label = 1;
              case 1:
                  if (!(_i < sortedLogs_1.length)) return [3 /*break*/, 4];
                  logToAdd = sortedLogs_1[_i];
                  return [5 /*yield**/, _loop_1(logToAdd)];
              case 2:
                  _a.sent();
                  _a.label = 3;
              case 3:
                  _i++;
                  return [3 /*break*/, 1];
              case 4: return [2 /*return*/, logHistory];
          }
      });
  }); };
  var pruneOldLogs = function (logHistory, newBlock, historyBlockLength) { return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
          // `log!` is required until the next major version of `immutable` is published to NPM (current version 3.8.2) which improves the type definitions
          return [2 /*return*/, logHistory.skipUntil(function (log) { return parseInt(newBlock.number, 16) - parseInt(log.blockNumber, 16) < historyBlockLength; }).toList()];
      });
  }); };
  var addNewLogToHead = function (logHistory, newLog, onLogAdded) { return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  logHistory = logHistory.push(newLog);
                  // CONSIDER: the user getting this notification won't have any visibility into the updated log history yet. should we announce new logs in a `setTimeout`? should we provide log history with new logs?
                  return [4 /*yield*/, onLogAdded(newLog)];
              case 1:
                  // CONSIDER: the user getting this notification won't have any visibility into the updated log history yet. should we announce new logs in a `setTimeout`? should we provide log history with new logs?
                  _a.sent();
                  return [2 /*return*/, logHistory];
          }
      });
  }); };
  var ensureOrder = function (headLog, newLog) {
      if (headLog === undefined)
          return;
      var headBlockNumber = parseInt(headLog.blockNumber, 16);
      var newLogBlockNumber = parseInt(newLog.blockNumber, 16);
      if (headBlockNumber > newLogBlockNumber)
          throw new Error("received log for a block (" + newLogBlockNumber + ") older than current head log's block (" + headBlockNumber + ")");
      if (headBlockNumber !== newLogBlockNumber)
          return;
      var headLogIndex = parseInt(headLog.logIndex, 16);
      var newLogIndex = parseInt(newLog.logIndex, 16);
      if (headLogIndex >= newLogIndex)
          throw new Error("received log with same block number (" + newLogBlockNumber + ") but index (" + newLogIndex + ") is the same or older than previous index (" + headLogIndex + ")");
  };
  var ensureBlockhash = function (block, logs) {
      // FIXME: This technique for verifying we got the right logs will not work if there were no logs present in the block!  This means it is possible to miss logs.  Can be fixed once https://eips.ethereum.org/EIPS/eip-234 is implemented
      logs.forEach(function (log) {
          if (log.blockHash !== block.hash)
              throw new Error("Received log for block hash " + log.blockHash + " when asking for logs of block " + block.hash + ".");
      });
  };
  exports.reconcileLogHistoryWithRemovedBlock = function (logHistory, removedBlock, onLogRemoved) { return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0: return [4 /*yield*/, logHistory];
              case 1:
                  logHistory = _a.sent();
                  _a.label = 2;
              case 2:
                  if (!(!logHistory.isEmpty() && logHistory.last().blockHash === removedBlock.hash)) return [3 /*break*/, 4];
                  return [4 /*yield*/, onLogRemoved(logHistory.last())];
              case 3:
                  _a.sent();
                  logHistory = logHistory.pop();
                  return [3 /*break*/, 2];
              case 4:
                  // sanity check, no known way to trigger the error
                  if (logHistory.some(function (log) { return log.blockHash === removedBlock.hash; }))
                      throw new Error("found logs for removed block not at head of log history");
                  return [2 /*return*/, logHistory];
          }
      });
  }); };

  },{}],163:[function(require,module,exports){
  =======
  },{"_process":428,"timers":168}],154:[function(require,module,exports){
  >>>>>>> 166c87ca4b742a787b341ec105aac1ca70bf776b
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.abi = require('./contracts/abi');

  },{"./contracts/abi":155}],155:[function(require,module,exports){
  module.exports={
    "Augur": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amountRedeemed",
            "type": "uint256"
          },
          {
            "name": "_repReceived",
            "type": "uint256"
          },
          {
            "name": "_reportingFeesReceived",
            "type": "uint256"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          }
        ],
        "name": "logDisputeCrowdsourcerRedeemed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_topic",
            "type": "bytes32"
          },
          {
            "name": "_description",
            "type": "string"
          },
          {
            "name": "_extraInfo",
            "type": "string"
          },
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_marketCreator",
            "type": "address"
          },
          {
            "name": "_outcomes",
            "type": "bytes32[]"
          },
          {
            "name": "_minPrice",
            "type": "int256"
          },
          {
            "name": "_maxPrice",
            "type": "int256"
          },
          {
            "name": "_marketType",
            "type": "uint8"
          }
        ],
        "name": "logMarketCreated",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_orderType",
            "type": "uint8"
          },
          {
            "name": "_amount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_creator",
            "type": "address"
          },
          {
            "name": "_moneyEscrowed",
            "type": "uint256"
          },
          {
            "name": "_sharesEscrowed",
            "type": "uint256"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          },
          {
            "name": "_orderId",
            "type": "bytes32"
          },
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_shareToken",
            "type": "address"
          }
        ],
        "name": "logOrderCreated",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logDisputeCrowdsourcerTokensBurned",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "name": "logReportingParticipantDisavowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_originalUniverse",
            "type": "address"
          }
        ],
        "name": "logMarketMigrated",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "logMarketTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logFeeTokenMinted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          }
        ],
        "name": "logMarketFinalized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "logMarketMailboxTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "logFeeTokenTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_amountRedeemed",
            "type": "uint256"
          },
          {
            "name": "_reportingFeesReceived",
            "type": "uint256"
          }
        ],
        "name": "logFeeWindowRedeemed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logReputationTokenBurned",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "logUniverseForked",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_disputeCrowdsourcer",
            "type": "address"
          }
        ],
        "name": "logDisputeCrowdsourcerCompleted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "logDisputeCrowdsourcerTokensTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_disputeCrowdsourcer",
            "type": "address"
          },
          {
            "name": "_amountStaked",
            "type": "uint256"
          }
        ],
        "name": "logDisputeCrowdsourcerContribution",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logFeeWindowBurned",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_shareToken",
            "type": "address"
          },
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_numShares",
            "type": "uint256"
          },
          {
            "name": "_numPayoutTokens",
            "type": "uint256"
          },
          {
            "name": "_finalTokenBalance",
            "type": "uint256"
          }
        ],
        "name": "logTradingProceedsClaimed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logFeeWindowMinted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_shareToken",
            "type": "address"
          },
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_orderId",
            "type": "bytes32"
          },
          {
            "name": "_orderType",
            "type": "uint8"
          },
          {
            "name": "_tokenRefund",
            "type": "uint256"
          },
          {
            "name": "_sharesRefund",
            "type": "uint256"
          }
        ],
        "name": "logOrderCanceled",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amountStaked",
            "type": "uint256"
          },
          {
            "name": "_isDesignatedReporter",
            "type": "bool"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "logInitialReportSubmitted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "logFeeWindowTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logReputationTokenMinted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_disputeCrowdsourcer",
            "type": "address"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_size",
            "type": "uint256"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "disputeCrowdsourcerCreated",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_shareToken",
            "type": "address"
          },
          {
            "name": "_filler",
            "type": "address"
          },
          {
            "name": "_orderId",
            "type": "bytes32"
          },
          {
            "name": "_numCreatorShares",
            "type": "uint256"
          },
          {
            "name": "_numCreatorTokens",
            "type": "uint256"
          },
          {
            "name": "_numFillerShares",
            "type": "uint256"
          },
          {
            "name": "_numFillerTokens",
            "type": "uint256"
          },
          {
            "name": "_marketCreatorFees",
            "type": "uint256"
          },
          {
            "name": "_reporterFees",
            "type": "uint256"
          },
          {
            "name": "_amountFilled",
            "type": "uint256"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "logOrderFilled",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "logShareTokensTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_parentPayoutDistributionHash",
            "type": "bytes32"
          },
          {
            "name": "_parentPayoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_parentInvalid",
            "type": "bool"
          }
        ],
        "name": "createChildUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          }
        ],
        "name": "isKnownUniverse",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_feeWindow",
            "type": "address"
          },
          {
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "logFeeWindowCreated",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "createGenesisUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logFeeTokenBurned",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logShareTokenBurned",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logShareTokenMinted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_isOn",
            "type": "bool"
          }
        ],
        "name": "logEscapeHatchChanged",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "logDisputeCrowdsourcerTokensMinted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_crowdsourcer",
            "type": "address"
          }
        ],
        "name": "isKnownCrowdsourcer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_topic",
            "type": "bytes32"
          },
          {
            "name": "_description",
            "type": "string"
          },
          {
            "name": "_extraInfo",
            "type": "string"
          },
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_marketCreator",
            "type": "address"
          },
          {
            "name": "_minPrice",
            "type": "int256"
          },
          {
            "name": "_maxPrice",
            "type": "int256"
          },
          {
            "name": "_marketType",
            "type": "uint8"
          }
        ],
        "name": "logMarketCreated",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_account",
            "type": "address"
          },
          {
            "name": "_numCompleteSets",
            "type": "uint256"
          }
        ],
        "name": "logCompleteSetsPurchased",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          }
        ],
        "name": "logMarketParticipantsDisavowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newTimestamp",
            "type": "uint256"
          }
        ],
        "name": "logTimestampSet",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "logInitialReporterTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amountRedeemed",
            "type": "uint256"
          },
          {
            "name": "_repReceived",
            "type": "uint256"
          },
          {
            "name": "_reportingFeesReceived",
            "type": "uint256"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          }
        ],
        "name": "logInitialReporterRedeemed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "trustedTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "logReputationTokensTransferred",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_account",
            "type": "address"
          },
          {
            "name": "_numCompleteSets",
            "type": "uint256"
          }
        ],
        "name": "logCompleteSetsSold",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "topic",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "name": "description",
            "type": "string"
          },
          {
            "indexed": false,
            "name": "extraInfo",
            "type": "string"
          },
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "marketCreator",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "outcomes",
            "type": "bytes32[]"
          },
          {
            "indexed": false,
            "name": "marketCreationFee",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "minPrice",
            "type": "int256"
          },
          {
            "indexed": false,
            "name": "maxPrice",
            "type": "int256"
          },
          {
            "indexed": false,
            "name": "marketType",
            "type": "uint8"
          }
        ],
        "name": "MarketCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "reporter",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amountStaked",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "isDesignatedReporter",
            "type": "bool"
          },
          {
            "indexed": false,
            "name": "payoutNumerators",
            "type": "uint256[]"
          },
          {
            "indexed": false,
            "name": "invalid",
            "type": "bool"
          }
        ],
        "name": "InitialReportSubmitted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "disputeCrowdsourcer",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "payoutNumerators",
            "type": "uint256[]"
          },
          {
            "indexed": false,
            "name": "size",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "invalid",
            "type": "bool"
          }
        ],
        "name": "DisputeCrowdsourcerCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "reporter",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "disputeCrowdsourcer",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amountStaked",
            "type": "uint256"
          }
        ],
        "name": "DisputeCrowdsourcerContribution",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "disputeCrowdsourcer",
            "type": "address"
          }
        ],
        "name": "DisputeCrowdsourcerCompleted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "reporter",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amountRedeemed",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "repReceived",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "reportingFeesReceived",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "payoutNumerators",
            "type": "uint256[]"
          }
        ],
        "name": "InitialReporterRedeemed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "reporter",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "disputeCrowdsourcer",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amountRedeemed",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "repReceived",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "reportingFeesReceived",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "payoutNumerators",
            "type": "uint256[]"
          }
        ],
        "name": "DisputeCrowdsourcerRedeemed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "reportingParticipant",
            "type": "address"
          }
        ],
        "name": "ReportingParticipantDisavowed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          }
        ],
        "name": "MarketParticipantsDisavowed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "reporter",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "feeWindow",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amountRedeemed",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "reportingFeesReceived",
            "type": "uint256"
          }
        ],
        "name": "FeeWindowRedeemed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          }
        ],
        "name": "MarketFinalized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "originalUniverse",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "newUniverse",
            "type": "address"
          }
        ],
        "name": "MarketMigrated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          }
        ],
        "name": "UniverseForked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "parentUniverse",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "childUniverse",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "payoutNumerators",
            "type": "uint256[]"
          },
          {
            "indexed": false,
            "name": "invalid",
            "type": "bool"
          }
        ],
        "name": "UniverseCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "shareToken",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "orderId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "name": "orderType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "name": "tokenRefund",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "sharesRefund",
            "type": "uint256"
          }
        ],
        "name": "OrderCanceled",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "orderType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "price",
            "type": "uint256"
          },
          {
            "indexed": true,
            "name": "creator",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "moneyEscrowed",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "sharesEscrowed",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "tradeGroupId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "name": "orderId",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "shareToken",
            "type": "address"
          }
        ],
        "name": "OrderCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "shareToken",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "filler",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "orderId",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "name": "numCreatorShares",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "numCreatorTokens",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "numFillerShares",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "numFillerTokens",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "marketCreatorFees",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "reporterFees",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "amountFilled",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "OrderFilled",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "numCompleteSets",
            "type": "uint256"
          }
        ],
        "name": "CompleteSetsPurchased",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "numCompleteSets",
            "type": "uint256"
          }
        ],
        "name": "CompleteSetsSold",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "shareToken",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "numShares",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "numPayoutTokens",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "finalTokenBalance",
            "type": "uint256"
          }
        ],
        "name": "TradingProceedsClaimed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "token",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "tokenType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "name": "market",
            "type": "address"
          }
        ],
        "name": "TokensTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "token",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "tokenType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "name": "market",
            "type": "address"
          }
        ],
        "name": "TokensMinted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "token",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "tokenType",
            "type": "uint8"
          },
          {
            "indexed": false,
            "name": "market",
            "type": "address"
          }
        ],
        "name": "TokensBurned",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "feeWindow",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "startTime",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "endTime",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "FeeWindowCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "to",
            "type": "address"
          }
        ],
        "name": "InitialReporterTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "to",
            "type": "address"
          }
        ],
        "name": "MarketTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "market",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "mailbox",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "to",
            "type": "address"
          }
        ],
        "name": "MarketMailboxTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "isOn",
            "type": "bool"
          }
        ],
        "name": "EscapeHatchChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "newTimestamp",
            "type": "uint256"
          }
        ],
        "name": "TimestampSet",
        "type": "event"
      }
    ],
    "Controlled": [
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      }
    ],
    "Controller": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "getContractDetails",
        "outputs": [
          {
            "name": "",
            "type": "address"
          },
          {
            "name": "",
            "type": "bytes20"
          },
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "stopInEmergency",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          },
          {
            "name": "_address",
            "type": "address"
          },
          {
            "name": "_commitHash",
            "type": "bytes20"
          },
          {
            "name": "_bytecodeHash",
            "type": "bytes32"
          }
        ],
        "name": "registerContract",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "onlyInEmergency",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_target",
            "type": "address"
          }
        ],
        "name": "assertIsWhitelisted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getAugur",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "emergencyStop",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "stopped",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "registry",
        "outputs": [
          {
            "name": "name",
            "type": "bytes32"
          },
          {
            "name": "contractAddress",
            "type": "address"
          },
          {
            "name": "commitHash",
            "type": "bytes20"
          },
          {
            "name": "bytecodeHash",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_target",
            "type": "address"
          }
        ],
        "name": "removeFromWhitelist",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "name": "whitelist",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_target",
            "type": "address"
          }
        ],
        "name": "addToWhitelist",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "lookup",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      }
    ],
    "LegacyReputationToken": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "unpause",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "faucet",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "paused",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "pause",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_universe",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "_sender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "_repBalance",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "_timestamp",
            "type": "uint256"
          }
        ],
        "name": "FundedAccount",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "Pause",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "Unpause",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "TestNetReputationToken": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTotalTheoreticalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "migrateOutByPayout",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "faucet",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "migrateOut",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getLegacyRepToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getIsMigratingFromLegacy",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_holders",
            "type": "address[]"
          }
        ],
        "name": "migrateBalancesFromLegacyRep",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedFeeWindowTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTotalMigrated",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "migrateIn",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "updateParentTotalTheoreticalSupply",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedReportingParticipantTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "updateSiblingMigrationTotal",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amountMigrated",
            "type": "uint256"
          }
        ],
        "name": "mintForReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_owners",
            "type": "address[]"
          },
          {
            "name": "_spenders",
            "type": "address[]"
          }
        ],
        "name": "migrateAllowancesFromLegacyRep",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTargetSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedMarketTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedUniverseTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "Time": [
      {
        "constant": true,
        "inputs": [],
        "name": "getTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "TimeControlled": [
      {
        "constant": true,
        "inputs": [],
        "name": "getTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_timestamp",
            "type": "uint256"
          }
        ],
        "name": "setTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "incrementTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      }
    ],
    "EscapeHatchController": [
      {
        "constant": false,
        "inputs": [],
        "name": "emergencyStop",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controller",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "OrdersFinder": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders5",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[5]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders20",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[20]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "orders",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders1000",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[1000]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders50",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[50]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders500",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[500]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders200",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[200]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders100",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[100]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getExistingOrders10",
        "outputs": [
          {
            "name": "_results",
            "type": "bytes32[10]"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "name": "_orders",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      }
    ],
    "DisputeCrowdsourcerFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_size",
            "type": "uint256"
          },
          {
            "name": "_payoutDistributionHash",
            "type": "bytes32"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "createDisputeCrowdsourcer",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "FeeTokenFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_feeWindow",
            "type": "address"
          }
        ],
        "name": "createFeeToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "FeeWindowFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_feeWindowId",
            "type": "uint256"
          }
        ],
        "name": "createFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "InitialReporterFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_designatedReporter",
            "type": "address"
          }
        ],
        "name": "createInitialReporter",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "MailboxFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "name": "createMailbox",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "MapFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "createMap",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "MarketFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_endTime",
            "type": "uint256"
          },
          {
            "name": "_feePerEthInWei",
            "type": "uint256"
          },
          {
            "name": "_denominationToken",
            "type": "address"
          },
          {
            "name": "_designatedReporterAddress",
            "type": "address"
          },
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_numOutcomes",
            "type": "uint256"
          },
          {
            "name": "_numTicks",
            "type": "uint256"
          }
        ],
        "name": "createMarket",
        "outputs": [
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "ReputationTokenFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_universe",
            "type": "address"
          }
        ],
        "name": "createReputationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "ShareTokenFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "createShareToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "UniverseFactory": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_parentUniverse",
            "type": "address"
          },
          {
            "name": "_parentPayoutDistributionHash",
            "type": "bytes32"
          }
        ],
        "name": "createUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "Delegator": [
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          },
          {
            "name": "_controllerLookupName",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "payable": true,
        "stateMutability": "payable",
        "type": "fallback"
      }
    ],
    "Map": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "contains",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          },
          {
            "name": "_value",
            "type": "address"
          }
        ],
        "name": "add",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "getAsAddress",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "getValueOrZero",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "get",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "remove",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getCount",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          },
          {
            "name": "_value",
            "type": "bytes32"
          }
        ],
        "name": "add",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_key",
            "type": "bytes32"
          }
        ],
        "name": "getAsAddressOrZero",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "DisputeCrowdsourcer": [
      {
        "constant": true,
        "inputs": [],
        "name": "isInvalid",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "forkAndRedeem",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "liquidateLosing",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isDisavowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_participant",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "contribute",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_size",
            "type": "uint256"
          },
          {
            "name": "_payoutDistributionHash",
            "type": "bytes32"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "migrate",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_redeemer",
            "type": "address"
          }
        ],
        "name": "redeem",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getReputationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "withdrawInEmergency",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getPayoutNumerator",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getPayoutDistributionHash",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getSize",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getMarket",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getStake",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "FeeToken": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "mintForReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_feeWindow",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_target",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "feeWindowBurn",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "FeeWindow": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isActive",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumMarkets",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getEndTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTotalFeeStake",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_buyer",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedUniverseBuy",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "onMarketFinalized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_sender",
            "type": "address"
          }
        ],
        "name": "redeem",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumIncorrectDesignatedReportMarkets",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "mintFeeTokens",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isOver",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getReputationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "redeemForReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "withdrawInEmergency",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getStartTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getFeeToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_feeWindowId",
            "type": "uint256"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumInvalidMarkets",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "buy",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumDesignatedReportNoShows",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "InitialReporter": [
      {
        "constant": true,
        "inputs": [],
        "name": "isInvalid",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "forkAndRedeem",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "liquidateLosing",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "migrateREP",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "designatedReporterShowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_payoutDistributionHash",
            "type": "bytes32"
          },
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "report",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_designatedReporter",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getDesignatedReporter",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isDisavowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "designatedReporterWasCorrect",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "migrate",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getReportTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "name": "redeem",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "resetReportTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getReputationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "withdrawInEmergency",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getPayoutNumerator",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getPayoutDistributionHash",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getSize",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getMarket",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getStake",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "Mailbox": [
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "withdrawTokens",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "withdrawEther",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "depositEther",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "Market": [
      {
        "constant": true,
        "inputs": [],
        "name": "isInvalid",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "migrateThroughOneFork",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "doInitialReport",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialReporter",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getMarketCreatorSettlementFeeDivisor",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          },
          {
            "name": "_endTime",
            "type": "uint256"
          },
          {
            "name": "_feePerEthInAttoeth",
            "type": "uint256"
          },
          {
            "name": "_cash",
            "type": "address"
          },
          {
            "name": "_designatedReporterAddress",
            "type": "address"
          },
          {
            "name": "_creator",
            "type": "address"
          },
          {
            "name": "_numOutcomes",
            "type": "uint256"
          },
          {
            "name": "_numTicks",
            "type": "uint256"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "_success",
            "type": "bool"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          }
        ],
        "name": "derivePayoutDistributionHash",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumberOfOutcomes",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getParticipantStake",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "participants",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "designatedReporterShowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getWinningPayoutNumerator",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getEndTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "disavowCrowdsourcers",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "finalize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyShareToken",
            "type": "address"
          }
        ],
        "name": "isContainerForShareToken",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "contribute",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getDesignatedReporter",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getShareToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_payoutDistributionHash",
            "type": "bytes32"
          }
        ],
        "name": "getStakeInOutcome",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "crowdsourcers",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getWinningReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getValidityBondAttoeth",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getWinningPayoutDistributionHash",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isFinalized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "approveSpenders",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "designatedReporterWasCorrect",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getDesignatedReportingEndTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "assertBalances",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getFinalizationTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getReputationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumTicks",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_index",
            "type": "uint256"
          }
        ],
        "name": "getReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_payoutDistributionHash",
            "type": "bytes32"
          }
        ],
        "name": "getCrowdsourcer",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "finalizeFork",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "withdrawInEmergency",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialReporterAddress",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getForkingMarket",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getDenominationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getMarketCreatorMailbox",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyReportingParticipant",
            "type": "address"
          }
        ],
        "name": "isContainerForReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "deriveMarketCreatorFeeAmount",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNumParticipants",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "RepPriceOracle": [
      {
        "constant": true,
        "inputs": [],
        "name": "getRepPriceInAttoEth",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOwner",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_repPriceInAttoEth",
            "type": "uint256"
          }
        ],
        "name": "setRepPriceInAttoEth",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "Reporting": [],
    "ReputationToken": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTotalTheoreticalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_payoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_invalid",
            "type": "bool"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "migrateOutByPayout",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "migrateOut",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getLegacyRepToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getIsMigratingFromLegacy",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_holders",
            "type": "address[]"
          }
        ],
        "name": "migrateBalancesFromLegacyRep",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedFeeWindowTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTotalMigrated",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_reporter",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "migrateIn",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "updateParentTotalTheoreticalSupply",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedReportingParticipantTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_universe",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "updateSiblingMigrationTotal",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amountMigrated",
            "type": "uint256"
          }
        ],
        "name": "mintForReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_owners",
            "type": "address[]"
          },
          {
            "name": "_spenders",
            "type": "address[]"
          }
        ],
        "name": "migrateAllowancesFromLegacyRep",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTargetSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedMarketTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedUniverseTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "Universe": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "incrementOpenInterestFromMarket",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCreateNextFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "decrementOpenInterestFromMarket",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getRepMarketCapInAttoeth",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCreatePreviousFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyFeeToken",
            "type": "address"
          }
        ],
        "name": "isContainerForFeeToken",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getDisputeRoundDurationInSeconds",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_feeWindowId",
            "type": "uint256"
          }
        ],
        "name": "getFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "fork",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTargetRepMarketCapInAttoeth",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCreatePreviousPreviousFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyShareToken",
            "type": "address"
          }
        ],
        "name": "isContainerForShareToken",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "buyParticipationTokens",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_badMarkets",
            "type": "uint256"
          },
          {
            "name": "_totalMarkets",
            "type": "uint256"
          },
          {
            "name": "_targetDivisor",
            "type": "uint256"
          },
          {
            "name": "_previousValue",
            "type": "uint256"
          },
          {
            "name": "_defaultValue",
            "type": "uint256"
          },
          {
            "name": "_floor",
            "type": "uint256"
          }
        ],
        "name": "calculateFloatingValue",
        "outputs": [
          {
            "name": "_newValue",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialReportMinValue",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCreateCurrentFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOpenInterestInAttoEth",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getPreviousFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getWinningChildUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_endTime",
            "type": "uint256"
          },
          {
            "name": "_feePerEthInWei",
            "type": "uint256"
          },
          {
            "name": "_denominationToken",
            "type": "address"
          },
          {
            "name": "_designatedReporterAddress",
            "type": "address"
          },
          {
            "name": "_minPrice",
            "type": "int256"
          },
          {
            "name": "_maxPrice",
            "type": "int256"
          },
          {
            "name": "_numTicks",
            "type": "uint256"
          },
          {
            "name": "_topic",
            "type": "bytes32"
          },
          {
            "name": "_description",
            "type": "string"
          },
          {
            "name": "_extraInfo",
            "type": "string"
          }
        ],
        "name": "createScalarMarket",
        "outputs": [
          {
            "name": "_newMarket",
            "type": "address"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "removeMarketFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getForkEndTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getCurrentFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getForkReputationGoal",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_reportingParticipants",
            "type": "address[]"
          },
          {
            "name": "_feeWindows",
            "type": "address[]"
          }
        ],
        "name": "redeemStake",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCacheReportingFeeDivisor",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyChild",
            "type": "address"
          }
        ],
        "name": "isParentOf",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "updateForkValues",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyMarket",
            "type": "address"
          }
        ],
        "name": "isContainerForMarket",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getParentUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_timestamp",
            "type": "uint256"
          }
        ],
        "name": "getFeeWindowByTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCacheValidityBond",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getInitialReportStakeSize",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "decrementOpenInterest",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_timestamp",
            "type": "uint256"
          }
        ],
        "name": "getOrCreateFeeWindowByTimestamp",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getReputationToken",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_parentUniverse",
            "type": "address"
          },
          {
            "name": "_parentPayoutDistributionHash",
            "type": "bytes32"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isForking",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getParentPayoutDistributionHash",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyFeeWindow",
            "type": "address"
          }
        ],
        "name": "isContainerForFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_endTime",
            "type": "uint256"
          },
          {
            "name": "_feePerEthInWei",
            "type": "uint256"
          },
          {
            "name": "_denominationToken",
            "type": "address"
          },
          {
            "name": "_designatedReporterAddress",
            "type": "address"
          },
          {
            "name": "_topic",
            "type": "bytes32"
          },
          {
            "name": "_description",
            "type": "string"
          },
          {
            "name": "_extraInfo",
            "type": "string"
          }
        ],
        "name": "createYesNoMarket",
        "outputs": [
          {
            "name": "_newMarket",
            "type": "address"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getForkingMarket",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "incrementOpenInterest",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_endTime",
            "type": "uint256"
          },
          {
            "name": "_feePerEthInWei",
            "type": "uint256"
          },
          {
            "name": "_denominationToken",
            "type": "address"
          },
          {
            "name": "_designatedReporterAddress",
            "type": "address"
          },
          {
            "name": "_outcomes",
            "type": "bytes32[]"
          },
          {
            "name": "_topic",
            "type": "bytes32"
          },
          {
            "name": "_description",
            "type": "string"
          },
          {
            "name": "_extraInfo",
            "type": "string"
          }
        ],
        "name": "createCategoricalMarket",
        "outputs": [
          {
            "name": "_newMarket",
            "type": "address"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_timestamp",
            "type": "uint256"
          }
        ],
        "name": "getFeeWindowId",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_parentPayoutNumerators",
            "type": "uint256[]"
          },
          {
            "name": "_parentInvalid",
            "type": "bool"
          }
        ],
        "name": "createChildUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_feeWindow",
            "type": "address"
          }
        ],
        "name": "getOrCreateFeeWindowBefore",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCacheDesignatedReportStake",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCacheMarketCreationCost",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_parentPayoutDistributionHash",
            "type": "bytes32"
          }
        ],
        "name": "getChildUniverse",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getNextFeeWindow",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_parentPayoutDistributionHash",
            "type": "bytes32"
          }
        ],
        "name": "updateTentativeWinningChildUniverse",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_shadyReportingParticipant",
            "type": "address"
          }
        ],
        "name": "isContainerForReportingParticipant",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getDisputeThresholdForFork",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getOrCacheDesignatedReportNoShowBond",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "addMarketTo",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "CancelOrder": [
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "cancelOrder",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "Cash": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "withdrawEtherTo",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "withdrawEther",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "depositEtherFor",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "depositEther",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "withdrawEtherToIfPossible",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "ClaimTradingProceeds": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "calculateCreatorFee",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "calculateReportingFee",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_numberOfShares",
            "type": "uint256"
          }
        ],
        "name": "divideUpWinnings",
        "outputs": [
          {
            "name": "_proceeds",
            "type": "uint256"
          },
          {
            "name": "_shareHolderShare",
            "type": "uint256"
          },
          {
            "name": "_creatorShare",
            "type": "uint256"
          },
          {
            "name": "_reporterShare",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_shareHolder",
            "type": "address"
          }
        ],
        "name": "claimTradingProceeds",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_numberOfShares",
            "type": "uint256"
          }
        ],
        "name": "calculateProceeds",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "CompleteSets": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "publicBuyCompleteSetsWithCash",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "sellCompleteSets",
        "outputs": [
          {
            "name": "_creatorFee",
            "type": "uint256"
          },
          {
            "name": "_reportingFee",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "publicSellCompleteSetsWithCash",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "buyCompleteSets",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "publicBuyCompleteSets",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "publicSellCompleteSets",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "CreateOrder": [
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_attoshares",
            "type": "uint256"
          },
          {
            "name": "_displayPrice",
            "type": "uint256"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "publicCreateOrder",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_creator",
            "type": "address"
          },
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_attoshares",
            "type": "uint256"
          },
          {
            "name": "_displayPrice",
            "type": "uint256"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "createOrder",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "FillOrder": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_filler",
            "type": "address"
          },
          {
            "name": "_orderId",
            "type": "bytes32"
          },
          {
            "name": "_amountFillerWants",
            "type": "uint256"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "fillOrder",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          },
          {
            "name": "_amountFillerWants",
            "type": "uint256"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "publicFillOrder",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "Order": [],
    "Orders": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getAmount",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_blockNumber",
            "type": "uint256"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_moneyEscrowed",
            "type": "uint256"
          },
          {
            "name": "_sharesEscrowed",
            "type": "uint256"
          }
        ],
        "name": "getOrderId",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          }
        ],
        "name": "assertIsNotBetterPrice",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "incrementTotalEscrowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          },
          {
            "name": "_sharesFilled",
            "type": "uint256"
          },
          {
            "name": "_tokensFilled",
            "type": "uint256"
          }
        ],
        "name": "recordFillOrder",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          }
        ],
        "name": "setPrice",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getPrice",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "name": "getTotalEscrowed",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          }
        ],
        "name": "assertIsNotWorsePrice",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getOrderMoneyEscrowed",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "isBetterPrice",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getOutcome",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_sender",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_moneyEscrowed",
            "type": "uint256"
          },
          {
            "name": "_sharesEscrowed",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "saveOrder",
        "outputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getBestOrderId",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getLastOutcomePrice",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getWorseOrderId",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "getWorstOrderId",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getBetterOrderId",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "decrementTotalEscrowed",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getMarket",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getOrderType",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "isWorsePrice",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getOrderCreator",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "getOrderSharesEscrowed",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_orderId",
            "type": "bytes32"
          }
        ],
        "name": "removeOrder",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "OrdersFetcher": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_highestOrderId",
            "type": "bytes32"
          }
        ],
        "name": "descendOrderList",
        "outputs": [
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_bestOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worstOrderId",
            "type": "bytes32"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          }
        ],
        "name": "findBoundingOrders",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          },
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_type",
            "type": "uint8"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_lowestOrderId",
            "type": "bytes32"
          }
        ],
        "name": "ascendOrderList",
        "outputs": [
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "ShareToken": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_fxpValue",
            "type": "uint256"
          }
        ],
        "name": "createShares",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedFillOrderTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "ETERNAL_APPROVAL_VALUE",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedOrderTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_source",
            "type": "address"
          },
          {
            "name": "_destination",
            "type": "address"
          },
          {
            "name": "_attotokens",
            "type": "uint256"
          }
        ],
        "name": "trustedCancelOrderTransfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getOutcome",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_value",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          }
        ],
        "name": "initialize",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_fxpValue",
            "type": "uint256"
          }
        ],
        "name": "destroyShares",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseApproval",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getTypeName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getInitialized",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getMarket",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Mint",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "target",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Burn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      }
    ],
    "Trade": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          },
          {
            "name": "_loopLimit",
            "type": "uint256"
          }
        ],
        "name": "publicSellWithLimit",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_direction",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "publicTrade",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_direction",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          },
          {
            "name": "_loopLimit",
            "type": "uint256"
          }
        ],
        "name": "publicTradeWithLimit",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_direction",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          },
          {
            "name": "_loopLimit",
            "type": "uint256"
          }
        ],
        "name": "publicFillBestOrderWithLimit",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "publicSell",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_direction",
            "type": "uint8"
          },
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "publicFillBestOrder",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          },
          {
            "name": "_loopLimit",
            "type": "uint256"
          }
        ],
        "name": "publicBuyWithLimit",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          },
          {
            "name": "_outcome",
            "type": "uint256"
          },
          {
            "name": "_fxpAmount",
            "type": "uint256"
          },
          {
            "name": "_price",
            "type": "uint256"
          },
          {
            "name": "_betterOrderId",
            "type": "bytes32"
          },
          {
            "name": "_worseOrderId",
            "type": "bytes32"
          },
          {
            "name": "_tradeGroupId",
            "type": "bytes32"
          }
        ],
        "name": "publicBuy",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "TradingEscapeHatch": [
      {
        "constant": true,
        "inputs": [],
        "name": "getController",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "name": "getFrozenShareValueInMarket",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_controller",
            "type": "address"
          }
        ],
        "name": "setController",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "controllerLookupName",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_market",
            "type": "address"
          }
        ],
        "name": "claimSharesInUpdate",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ]
  }
  },{}],156:[function(require,module,exports){
  'use strict'

  exports.byteLength = byteLength
  exports.toByteArray = toByteArray
  exports.fromByteArray = fromByteArray

  var lookup = []
  var revLookup = []
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i]
    revLookup[code.charCodeAt(i)] = i
  }

  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63

  function getLens (b64) {
    var len = b64.length

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=')
    if (validLen === -1) validLen = len

    var placeHoldersLen = validLen === len
      ? 0
      : 4 - (validLen % 4)

    return [validLen, placeHoldersLen]
  }

  // base64 is 4/3 + up to two characters of the original data
  function byteLength (b64) {
    var lens = getLens(b64)
    var validLen = lens[0]
    var placeHoldersLen = lens[1]
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }

  function _byteLength (b64, validLen, placeHoldersLen) {
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }

  function toByteArray (b64) {
    var tmp
    var lens = getLens(b64)
    var validLen = lens[0]
    var placeHoldersLen = lens[1]

    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

    var curByte = 0

    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0
      ? validLen - 4
      : validLen

    for (var i = 0; i < len; i += 4) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 18) |
        (revLookup[b64.charCodeAt(i + 1)] << 12) |
        (revLookup[b64.charCodeAt(i + 2)] << 6) |
        revLookup[b64.charCodeAt(i + 3)]
      arr[curByte++] = (tmp >> 16) & 0xFF
      arr[curByte++] = (tmp >> 8) & 0xFF
      arr[curByte++] = tmp & 0xFF
    }

    if (placeHoldersLen === 2) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 2) |
        (revLookup[b64.charCodeAt(i + 1)] >> 4)
      arr[curByte++] = tmp & 0xFF
    }

    if (placeHoldersLen === 1) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 10) |
        (revLookup[b64.charCodeAt(i + 1)] << 4) |
        (revLookup[b64.charCodeAt(i + 2)] >> 2)
      arr[curByte++] = (tmp >> 8) & 0xFF
      arr[curByte++] = tmp & 0xFF
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] +
      lookup[num >> 12 & 0x3F] +
      lookup[num >> 6 & 0x3F] +
      lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp
    var output = []
    for (var i = start; i < end; i += 3) {
      tmp =
        ((uint8[i] << 16) & 0xFF0000) +
        ((uint8[i + 1] << 8) & 0xFF00) +
        (uint8[i + 2] & 0xFF)
      output.push(tripletToBase64(tmp))
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    var tmp
    var len = uint8.length
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    var parts = []
    var maxChunkLength = 16383 // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(
        uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
      ))
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1]
      parts.push(
        lookup[tmp >> 2] +
        lookup[(tmp << 4) & 0x3F] +
        '=='
      )
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1]
      parts.push(
        lookup[tmp >> 10] +
        lookup[(tmp >> 4) & 0x3F] +
        lookup[(tmp << 2) & 0x3F] +
        '='
      )
    }

    return parts.join('')
  }

  <<<<<<< HEAD
  },{}],166:[function(require,module,exports){
  ;(function (globalObject) {
      'use strict';

  /*
   *      bignumber.js v6.0.0
   *      A JavaScript library for arbitrary-precision arithmetic.
   *      https://github.com/MikeMcl/bignumber.js
   *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
   *      MIT Licensed.
   *
   *      BigNumber.prototype methods     |  BigNumber methods
   *                                      |
   *      absoluteValue            abs    |  clone
   *      comparedTo                      |  config               set
   *      decimalPlaces            dp     |      DECIMAL_PLACES
   *      dividedBy                div    |      ROUNDING_MODE
   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
   *      exponentiatedBy          pow    |      RANGE
   *      integerValue                    |      CRYPTO
   *      isEqualTo                eq     |      MODULO_MODE
   *      isFinite                        |      POW_PRECISION
   *      isGreaterThan            gt     |      FORMAT
   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
   *      isInteger                       |  isBigNumber
   *      isLessThan               lt     |  maximum              max
   *      isLessThanOrEqualTo      lte    |  minimum              min
   *      isNaN                           |  random
   *      isNegative                      |
   *      isPositive                      |
   *      isZero                          |
   *      minus                           |
   *      modulo                   mod    |
   *      multipliedBy             times  |
   *      negated                         |
   *      plus                            |
   *      precision                sd     |
   *      shiftedBy                       |
   *      squareRoot               sqrt   |
   *      toExponential                   |
   *      toFixed                         |
   *      toFormat                        |
   *      toFraction                      |
   *      toJSON                          |
   *      toNumber                        |
   *      toPrecision                     |
   *      toString                        |
   *      valueOf                         |
   *
   */


      var BigNumber,
          isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

          mathceil = Math.ceil,
          mathfloor = Math.floor,

          bignumberError = '[BigNumber Error] ',
          tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
          // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
          POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,

          // EDITABLE
          // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
          // the arguments to toExponential, toFixed, toFormat, and toPrecision.
          MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function clone(configObject) {
          var div, convertBase, parseNumeric,
              P = BigNumber.prototype,
              ONE = new BigNumber(1),


              //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


              // The default values below must be integers within the inclusive ranges stated.
              // The values can also be changed at run-time using BigNumber.set.

              // The maximum number of decimal places for operations involving division.
              DECIMAL_PLACES = 20,                     // 0 to MAX

              // The rounding mode used when rounding to the above decimal places, and when using
              // toExponential, toFixed, toFormat and toPrecision, and round (default value).
              // UP         0 Away from zero.
              // DOWN       1 Towards zero.
              // CEIL       2 Towards +Infinity.
              // FLOOR      3 Towards -Infinity.
              // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
              // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
              // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
              // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
              // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
              ROUNDING_MODE = 4,                       // 0 to 8

              // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              TO_EXP_NEG = -7,                         // 0 to -MAX

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              TO_EXP_POS = 21,                         // 0 to MAX

              // RANGE : [MIN_EXP, MAX_EXP]

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              MIN_EXP = -1e7,                          // -1 to -MAX

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
              MAX_EXP = 1e7,                           // 1 to MAX

              // Whether to use cryptographically-secure random number generation, if available.
              CRYPTO = false,                          // true or false

              // The modulo mode used when calculating the modulus: a mod n.
              // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
              // The remainder (r) is calculated as: r = a - n * q.
              //
              // UP        0 The remainder is positive if the dividend is negative, else is negative.
              // DOWN      1 The remainder has the same sign as the dividend.
              //             This modulo mode is commonly known as 'truncated division' and is
              //             equivalent to (a % n) in JavaScript.
              // FLOOR     3 The remainder has the same sign as the divisor (Python %).
              // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
              // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
              //             The remainder is always positive.
              //
              // The truncated division, floored division, Euclidian division and IEEE 754 remainder
              // modes are commonly used for the modulus operation.
              // Although the other rounding modes can also be used, they may not give useful results.
              MODULO_MODE = 1,                         // 0 to 9

              // The maximum number of significant digits of the result of the exponentiatedBy operation.
              // If POW_PRECISION is 0, there will be unlimited significant digits.
              POW_PRECISION = 0,                    // 0 to MAX

              // The format specification used by the BigNumber.prototype.toFormat method.
              FORMAT = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',      // non-breaking space
                  fractionGroupSize: 0
              },

              // The alphabet used for base conversion.
              // It must be at least 2 characters long, with no '.' or repeated character.
              // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
              ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


          //------------------------------------------------------------------------------------------


          // CONSTRUCTOR


          /*
           * The BigNumber constructor and exported function.
           * Create and return a new instance of a BigNumber object.
           *
           * n {number|string|BigNumber} A numeric value.
           * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
           */
          function BigNumber( n, b ) {
              var alphabet, c, e, i, isNum, len, str,
                  x = this;

              // Enable constructor usage without new.
              if ( !( x instanceof BigNumber ) ) {

                  // Don't throw on constructor call without new (#81).
                  // '[BigNumber Error] Constructor call without new: {n}'
                  //throw Error( bignumberError + ' Constructor call without new: ' + n );
                  return new BigNumber( n, b );
              }

              if ( b == null ) {

                  // Duplicate.
                  if ( n instanceof BigNumber ) {
                      x.s = n.s;
                      x.e = n.e;
                      x.c = ( n = n.c ) ? n.slice() : n;
                      return;
                  }

                  isNum = typeof n == 'number';

                  if ( isNum && n * 0 == 0 ) {

                      // Use `1 / n` to handle minus zero also.
                      x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

                      // Faster path for integers.
                      if ( n === ~~n ) {
                          for ( e = 0, i = n; i >= 10; i /= 10, e++ );
                          x.e = e;
                          x.c = [n];
                          return;
                      }

                      str = n + '';
                  } else {
                      if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, isNum );
                      x.s = str.charCodeAt(0) == 45 ? ( str = str.slice(1), -1 ) : 1;
                  }

              } else {

                  // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                  intCheck( b, 2, ALPHABET.length, 'Base' );
                  str = n + '';

                  // Allow exponential notation to be used with base 10 argument, while
                  // also rounding to DECIMAL_PLACES as with other bases.
                  if ( b == 10 ) {
                      x = new BigNumber( n instanceof BigNumber ? n : str );
                      return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
                  }

                  isNum = typeof n == 'number';

                  if (isNum) {

                      // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                      if ( n * 0 != 0 ) return parseNumeric( x, str, isNum, b );

                      x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

                      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                      if ( str.replace( /^0\.0*|\./, '' ).length > 15 ) {
                          throw Error
                            ( tooManyDigits + n );
                      }

                      // Prevent later check for length on converted number.
                      isNum = false;
                  } else {
                      x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;

                      // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                      if ( b > 10 && b < 37 ) str = str.toLowerCase();
                  }

                  alphabet = ALPHABET.slice( 0, b );
                  e = i = 0;

                  // Check that str is a valid base b number.
                  // Don't use RegExp so alphabet can contain special characters.
                  for ( len = str.length; i < len; i++ ) {
                      if ( alphabet.indexOf( c = str.charAt(i) ) < 0 ) {
                          if ( c == '.' ) {

                              // If '.' is not the first character and it has not be found before.
                              if ( i > e ) {
                                  e = len;
                                  continue;
                              }
                          }

                          return parseNumeric( x, n + '', isNum, b );
                      }
                  }

                  str = convertBase( str, b, 10, x.s );
              }

              // Decimal point?
              if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

              // Exponential form?
              if ( ( i = str.search( /e/i ) ) > 0 ) {

                  // Determine exponent.
                  if ( e < 0 ) e = i;
                  e += +str.slice( i + 1 );
                  str = str.substring( 0, i );
              } else if ( e < 0 ) {

                  // Integer.
                  e = str.length;
              }

              // Determine leading zeros.
              for ( i = 0; str.charCodeAt(i) === 48; i++ );

              // Determine trailing zeros.
              for ( len = str.length; str.charCodeAt(--len) === 48; );
              str = str.slice( i, len + 1 );

              if (str) {
                  len = str.length;

                  // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                  if ( isNum && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {
                      throw Error
                        ( tooManyDigits + ( x.s * n ) );
                  }

                  e = e - i - 1;

                   // Overflow?
                  if ( e > MAX_EXP ) {

                      // Infinity.
                      x.c = x.e = null;

                  // Underflow?
                  } else if ( e < MIN_EXP ) {

                      // Zero.
                      x.c = [ x.e = 0 ];
                  } else {
                      x.e = e;
                      x.c = [];

                      // Transform base

                      // e is the base 10 exponent.
                      // i is where to slice str to get the first element of the coefficient array.
                      i = ( e + 1 ) % LOG_BASE;
                      if ( e < 0 ) i += LOG_BASE;

                      if ( i < len ) {
                          if (i) x.c.push( +str.slice( 0, i ) );

                          for ( len -= LOG_BASE; i < len; ) {
                              x.c.push( +str.slice( i, i += LOG_BASE ) );
                          }

                          str = str.slice(i);
                          i = LOG_BASE - str.length;
                      } else {
                          i -= len;
                      }

                      for ( ; i--; str += '0' );
                      x.c.push( +str );
                  }
              } else {

                  // Zero.
                  x.c = [ x.e = 0 ];
              }
          }


          // CONSTRUCTOR PROPERTIES


          BigNumber.clone = clone;

          BigNumber.ROUND_UP = 0;
          BigNumber.ROUND_DOWN = 1;
          BigNumber.ROUND_CEIL = 2;
          BigNumber.ROUND_FLOOR = 3;
          BigNumber.ROUND_HALF_UP = 4;
          BigNumber.ROUND_HALF_DOWN = 5;
          BigNumber.ROUND_HALF_EVEN = 6;
          BigNumber.ROUND_HALF_CEIL = 7;
          BigNumber.ROUND_HALF_FLOOR = 8;
          BigNumber.EUCLID = 9;


          /*
           * Configure infrequently-changing library-wide settings.
           *
           * Accept an object with the following optional properties (if the value of a property is
           * a number, it must be an integer within the inclusive range stated):
           *
           *   DECIMAL_PLACES   {number}           0 to MAX
           *   ROUNDING_MODE    {number}           0 to 8
           *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
           *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
           *   CRYPTO           {boolean}          true or false
           *   MODULO_MODE      {number}           0 to 9
           *   POW_PRECISION       {number}           0 to MAX
           *   ALPHABET         {string}           A string of two or more unique characters, and not
           *                                       containing '.'. The empty string, null or undefined
           *                                       resets the alphabet to its default value.
           *   FORMAT           {object}           An object with some of the following properties:
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           * (The values assigned to the above FORMAT object properties are not checked for validity.)
           *
           * E.g.
           * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
           *
           * Ignore properties/parameters set to null or undefined, except for ALPHABET.
           *
           * Return an object with the properties current values.
           */
          BigNumber.config = BigNumber.set = function (obj) {
              var p, v;

              if ( obj != null ) {

                  if ( typeof obj == 'object' ) {

                      // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                      // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'DECIMAL_PLACES' ) ) {
                          v = obj[p];
                          intCheck( v, 0, MAX, p );
                          DECIMAL_PLACES = v;
                      }

                      // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                      // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'ROUNDING_MODE' ) ) {
                          v = obj[p];
                          intCheck( v, 0, 8, p );
                          ROUNDING_MODE = v;
                      }

                      // EXPONENTIAL_AT {number|number[]}
                      // Integer, -MAX to MAX inclusive or
                      // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                      // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'EXPONENTIAL_AT' ) ) {
                          v = obj[p];
                          if ( isArray(v) ) {
                              intCheck( v[0], -MAX, 0, p );
                              intCheck( v[1], 0, MAX, p );
                              TO_EXP_NEG = v[0];
                              TO_EXP_POS = v[1];
                          } else {
                              intCheck( v, -MAX, MAX, p );
                              TO_EXP_NEG = -( TO_EXP_POS = v < 0 ? -v : v );
                          }
                      }

                      // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                      // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                      // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                      if ( obj.hasOwnProperty( p = 'RANGE' ) ) {
                          v = obj[p];
                          if ( isArray(v) ) {
                              intCheck( v[0], -MAX, -1, p );
                              intCheck( v[1], 1, MAX, p );
                              MIN_EXP = v[0];
                              MAX_EXP = v[1];
                          } else {
                              intCheck( v, -MAX, MAX, p );
                              if (v) {
                                  MIN_EXP = -( MAX_EXP = v < 0 ? -v : v );
                              } else {
                                  throw Error
                                    ( bignumberError + p + ' cannot be zero: ' + v );
                              }
                          }
                      }

                      // CRYPTO {boolean} true or false.
                      // '[BigNumber Error] CRYPTO not true or false: {v}'
                      // '[BigNumber Error] crypto unavailable'
                      if ( obj.hasOwnProperty( p = 'CRYPTO' ) ) {
                          v = obj[p];
                          if ( v === !!v ) {
                              if (v) {
                                  if ( typeof crypto != 'undefined' && crypto &&
                                    (crypto.getRandomValues || crypto.randomBytes) ) {
                                      CRYPTO = v;
                                  } else {
                                      CRYPTO = !v;
                                      throw Error
                                        ( bignumberError + 'crypto unavailable' );
                                  }
                              } else {
                                  CRYPTO = v;
                              }
                          } else {
                              throw Error
                                ( bignumberError + p + ' not true or false: ' + v );
                          }
                      }

                      // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                      // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'MODULO_MODE' ) ) {
                          v = obj[p];
                          intCheck( v, 0, 9, p );
                          MODULO_MODE = v;
                      }

                      // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                      // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'POW_PRECISION' ) ) {
                          v = obj[p];
                          intCheck( v, 0, MAX, p );
                          POW_PRECISION = v;
                      }

                      // FORMAT {object}
                      // '[BigNumber Error] FORMAT not an object: {v}'
                      if ( obj.hasOwnProperty( p = 'FORMAT' ) ) {
                          v = obj[p];
                          if ( typeof v == 'object' ) FORMAT = v;
                          else throw Error
                            ( bignumberError + p + ' not an object: ' + v );
                      }

                      // ALPHABET {string}
                      // '[BigNumber Error] ALPHABET invalid: {v}'
                      if ( obj.hasOwnProperty( p = 'ALPHABET' ) ) {
                          v = obj[p];

                          // Disallow if only one character, or contains '.' or a repeated character.
                          if ( typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v) ) {
                              ALPHABET = v;
                          } else {
                              throw Error
                                ( bignumberError + p + ' invalid: ' + v );
                          }
                      }

                  } else {

                      // '[BigNumber Error] Object expected: {v}'
                      throw Error
                        ( bignumberError + 'Object expected: ' + obj );
                  }
              }

              return {
                  DECIMAL_PLACES: DECIMAL_PLACES,
                  ROUNDING_MODE: ROUNDING_MODE,
                  EXPONENTIAL_AT: [ TO_EXP_NEG, TO_EXP_POS ],
                  RANGE: [ MIN_EXP, MAX_EXP ],
                  CRYPTO: CRYPTO,
                  MODULO_MODE: MODULO_MODE,
                  POW_PRECISION: POW_PRECISION,
                  FORMAT: FORMAT,
                  ALPHABET: ALPHABET
              };
          };


          /*
           * Return true if v is a BigNumber instance, otherwise return false.
           *
           * v {any}
           */
          BigNumber.isBigNumber = function (v) {
              return v instanceof BigNumber || v && v._isBigNumber === true || false;
          };


          /*
           * Return a new BigNumber whose value is the maximum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.maximum = BigNumber.max = function () {
              return maxOrMin( arguments, P.lt );
          };


          /*
           * Return a new BigNumber whose value is the minimum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.minimum = BigNumber.min = function () {
              return maxOrMin( arguments, P.gt );
          };


          /*
           * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
           * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
           * '[BigNumber Error] crypto unavailable'
           */
          BigNumber.random = (function () {
              var pow2_53 = 0x20000000000000;

              // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
              // Check if Math.random() produces more than 32 bits of randomness.
              // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
              // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
              var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                ? function () { return mathfloor( Math.random() * pow2_53 ); }
                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                    (Math.random() * 0x800000 | 0); };

              return function (dp) {
                  var a, b, e, k, v,
                      i = 0,
                      c = [],
                      rand = new BigNumber(ONE);

                  if ( dp == null ) dp = DECIMAL_PLACES;
                  else intCheck( dp, 0, MAX );

                  k = mathceil( dp / LOG_BASE );

                  if (CRYPTO) {

                      // Browsers supporting crypto.getRandomValues.
                      if (crypto.getRandomValues) {

                          a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

                          for ( ; i < k; ) {

                              // 53 bits:
                              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                              //                                     11111 11111111 11111111
                              // 0x20000 is 2^21.
                              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                              // Rejection sampling:
                              // 0 <= v < 9007199254740992
                              // Probability that v >= 9e15, is
                              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                              if ( v >= 9e15 ) {
                                  b = crypto.getRandomValues( new Uint32Array(2) );
                                  a[i] = b[0];
                                  a[i + 1] = b[1];
                              } else {

                                  // 0 <= v <= 8999999999999999
                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 2;
                              }
                          }
                          i = k / 2;

                      // Node.js supporting crypto.randomBytes.
                      } else if (crypto.randomBytes) {

                          // buffer
                          a = crypto.randomBytes( k *= 7 );

                          for ( ; i < k; ) {

                              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                              // 0x100000000 is 2^32, 0x1000000 is 2^24
                              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                              // 0 <= v < 9007199254740992
                              v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
                                    ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
                                    ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

                              if ( v >= 9e15 ) {
                                  crypto.randomBytes(7).copy( a, i );
                              } else {

                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 7;
                              }
                          }
                          i = k / 7;
                      } else {
                          CRYPTO = false;
                          throw Error
                            ( bignumberError + 'crypto unavailable' );
                      }
                  }

                  // Use Math.random.
                  if (!CRYPTO) {

                      for ( ; i < k; ) {
                          v = random53bitInt();
                          if ( v < 9e15 ) c[i++] = v % 1e14;
                      }
                  }

                  k = c[--i];
                  dp %= LOG_BASE;

                  // Convert trailing digits to zeros according to dp.
                  if ( k && dp ) {
                      v = POWS_TEN[LOG_BASE - dp];
                      c[i] = mathfloor( k / v ) * v;
                  }

                  // Remove trailing elements which are zero.
                  for ( ; c[i] === 0; c.pop(), i-- );

                  // Zero?
                  if ( i < 0 ) {
                      c = [ e = 0 ];
                  } else {

                      // Remove leading elements which are zero and adjust exponent accordingly.
                      for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                      // Count the digits of the first element of c to determine leading zeros, and...
                      for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

                      // adjust the exponent accordingly.
                      if ( i < LOG_BASE ) e -= LOG_BASE - i;
                  }

                  rand.e = e;
                  rand.c = c;
                  return rand;
              };
          })();


          // PRIVATE FUNCTIONS


          // Called by BigNumber and BigNumber.prototype.toString.
          convertBase = ( function () {
              var decimal = '0123456789';

              /*
               * Convert string of baseIn to an array of numbers of baseOut.
               * Eg. toBaseOut('255', 10, 16) returns [15, 15].
               * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
               */
              function toBaseOut( str, baseIn, baseOut, alphabet ) {
                  var j,
                      arr = [0],
                      arrL,
                      i = 0,
                      len = str.length;

                  for ( ; i < len; ) {
                      for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );

                      arr[0] += alphabet.indexOf( str.charAt( i++ ) );

                      for ( j = 0; j < arr.length; j++ ) {

                          if ( arr[j] > baseOut - 1 ) {
                              if ( arr[j + 1] == null ) arr[j + 1] = 0;
                              arr[j + 1] += arr[j] / baseOut | 0;
                              arr[j] %= baseOut;
                          }
                      }
                  }

                  return arr.reverse();
              }

              // Convert a numeric string of baseIn to a numeric string of baseOut.
              // If the caller is toString, we are converting from base 10 to baseOut.
              // If the caller is BigNumber, we are converting from baseIn to base 10.
              return function ( str, baseIn, baseOut, sign, callerIsToString ) {
                  var alphabet, d, e, k, r, x, xc, y,
                      i = str.indexOf( '.' ),
                      dp = DECIMAL_PLACES,
                      rm = ROUNDING_MODE;

                  // Non-integer.
                  if ( i >= 0 ) {
                      k = POW_PRECISION;

                      // Unlimited precision.
                      POW_PRECISION = 0;
                      str = str.replace( '.', '' );
                      y = new BigNumber(baseIn);
                      x = y.pow( str.length - i );
                      POW_PRECISION = k;

                      // Convert str as if an integer, then restore the fraction part by dividing the
                      // result by its base raised to a power.

                      y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e, '0' ),
                        10, baseOut, decimal );
                      y.e = y.c.length;
                  }

                  // Convert the number as integer.

                  xc = toBaseOut( str, baseIn, baseOut, callerIsToString
                    ? ( alphabet = ALPHABET, decimal )
                    : ( alphabet = decimal, ALPHABET ) );


                  // xc now represents str as an integer and converted to baseOut. e is the exponent.
                  e = k = xc.length;

                  // Remove trailing zeros.
                  for ( ; xc[--k] == 0; xc.pop() );

                  // Zero?
                  if ( !xc[0] ) return alphabet.charAt(0);

                  // Does str represent an integer? If so, no need for the division.
                  if ( i < 0 ) {
                      --e;
                  } else {
                      x.c = xc;
                      x.e = e;

                      // The sign is needed for correct rounding.
                      x.s = sign;
                      x = div( x, y, dp, rm, baseOut );
                      xc = x.c;
                      r = x.r;
                      e = x.e;
                  }

                  // xc now represents str converted to baseOut.

                  // THe index of the rounding digit.
                  d = e + dp + 1;

                  // The rounding digit: the digit to the right of the digit that may be rounded up.
                  i = xc[d];

                  // Look at the rounding digits and mode to determine whether to round up.

                  k = baseOut / 2;
                  r = r || d < 0 || xc[d + 1] != null;

                  r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                             : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                               rm == ( x.s < 0 ? 8 : 7 ) );

                  // If the index of the rounding digit is not greater than zero, or xc represents
                  // zero, then the result of the base conversion is zero or, if rounding up, a value
                  // such as 0.00001.
                  if ( d < 1 || !xc[0] ) {

                      // 1^-dp or 0
                      str = r ? toFixedPoint( alphabet.charAt(1), -dp, alphabet.charAt(0) )
                              : alphabet.charAt(0);
                  } else {

                      // Truncate xc to the required number of decimal places.
                      xc.length = d;

                      // Round up?
                      if (r) {

                          // Rounding up may mean the previous digit has to be rounded up and so on.
                          for ( --baseOut; ++xc[--d] > baseOut; ) {
                              xc[d] = 0;

                              if ( !d ) {
                                  ++e;
                                  xc = [1].concat(xc);
                              }
                          }
                      }

                      // Determine trailing zeros.
                      for ( k = xc.length; !xc[--k]; );

                      // E.g. [4, 11, 15] becomes 4bf.
                      for ( i = 0, str = ''; i <= k; str += alphabet.charAt( xc[i++] ) );

                      // Add leading zeros, decimal point and trailing zeros as required.
                      str = toFixedPoint( str, e, alphabet.charAt(0) );
                  }

                  // The caller will add the sign.
                  return str;
              };
          })();


          // Perform division in the specified base. Called by div and convertBase.
          div = (function () {

              // Assume non-zero x and k.
              function multiply( x, k, base ) {
                  var m, temp, xlo, xhi,
                      carry = 0,
                      i = x.length,
                      klo = k % SQRT_BASE,
                      khi = k / SQRT_BASE | 0;

                  for ( x = x.slice(); i--; ) {
                      xlo = x[i] % SQRT_BASE;
                      xhi = x[i] / SQRT_BASE | 0;
                      m = khi * xlo + xhi * klo;
                      temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
                      carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
                      x[i] = temp % base;
                  }

                  if (carry) x = [carry].concat(x);

                  return x;
              }

              function compare( a, b, aL, bL ) {
                  var i, cmp;

                  if ( aL != bL ) {
                      cmp = aL > bL ? 1 : -1;
                  } else {

                      for ( i = cmp = 0; i < aL; i++ ) {

                          if ( a[i] != b[i] ) {
                              cmp = a[i] > b[i] ? 1 : -1;
                              break;
                          }
                      }
                  }
                  return cmp;
              }

              function subtract( a, b, aL, base ) {
                  var i = 0;

                  // Subtract b from a.
                  for ( ; aL--; ) {
                      a[aL] -= i;
                      i = a[aL] < b[aL] ? 1 : 0;
                      a[aL] = i * base + a[aL] - b[aL];
                  }

                  // Remove leading zeros.
                  for ( ; !a[0] && a.length > 1; a.splice(0, 1) );
              }

              // x: dividend, y: divisor.
              return function ( x, y, dp, rm, base ) {
                  var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                      yL, yz,
                      s = x.s == y.s ? 1 : -1,
                      xc = x.c,
                      yc = y.c;

                  // Either NaN, Infinity or 0?
                  if ( !xc || !xc[0] || !yc || !yc[0] ) {

                      return new BigNumber(

                        // Return NaN if either NaN, or both Infinity or 0.
                        !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                      );
                  }

                  q = new BigNumber(s);
                  qc = q.c = [];
                  e = x.e - y.e;
                  s = dp + e + 1;

                  if ( !base ) {
                      base = BASE;
                      e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
                      s = s / LOG_BASE | 0;
                  }

                  // Result exponent may be one less then the current value of e.
                  // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                  for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );

                  if ( yc[i] > ( xc[i] || 0 ) ) e--;

                  if ( s < 0 ) {
                      qc.push(1);
                      more = true;
                  } else {
                      xL = xc.length;
                      yL = yc.length;
                      i = 0;
                      s += 2;

                      // Normalise xc and yc so highest order digit of yc is >= base / 2.

                      n = mathfloor( base / ( yc[0] + 1 ) );

                      // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                      // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                      if ( n > 1 ) {
                          yc = multiply( yc, n, base );
                          xc = multiply( xc, n, base );
                          yL = yc.length;
                          xL = xc.length;
                      }

                      xi = yL;
                      rem = xc.slice( 0, yL );
                      remL = rem.length;

                      // Add zeros to make remainder as long as divisor.
                      for ( ; remL < yL; rem[remL++] = 0 );
                      yz = yc.slice();
                      yz = [0].concat(yz);
                      yc0 = yc[0];
                      if ( yc[1] >= base / 2 ) yc0++;
                      // Not necessary, but to prevent trial digit n > base, when using base 3.
                      // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                      do {
                          n = 0;

                          // Compare divisor and remainder.
                          cmp = compare( yc, rem, yL, remL );

                          // If divisor < remainder.
                          if ( cmp < 0 ) {

                              // Calculate trial digit, n.

                              rem0 = rem[0];
                              if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

                              // n is how many times the divisor goes into the current remainder.
                              n = mathfloor( rem0 / yc0 );

                              //  Algorithm:
                              //  1. product = divisor * trial digit (n)
                              //  2. if product > remainder: product -= divisor, n--
                              //  3. remainder -= product
                              //  4. if product was < remainder at 2:
                              //    5. compare new remainder and divisor
                              //    6. If remainder > divisor: remainder -= divisor, n++

                              if ( n > 1 ) {

                                  // n may be > base only when base is 3.
                                  if (n >= base) n = base - 1;

                                  // product = divisor * trial digit.
                                  prod = multiply( yc, n, base );
                                  prodL = prod.length;
                                  remL = rem.length;

                                  // Compare product and remainder.
                                  // If product > remainder.
                                  // Trial digit n too high.
                                  // n is 1 too high about 5% of the time, and is not known to have
                                  // ever been more than 1 too high.
                                  while ( compare( prod, rem, prodL, remL ) == 1 ) {
                                      n--;

                                      // Subtract divisor from product.
                                      subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                      prodL = prod.length;
                                      cmp = 1;
                                  }
                              } else {

                                  // n is 0 or 1, cmp is -1.
                                  // If n is 0, there is no need to compare yc and rem again below,
                                  // so change cmp to 1 to avoid it.
                                  // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                  if ( n == 0 ) {

                                      // divisor < remainder, so n must be at least 1.
                                      cmp = n = 1;
                                  }

                                  // product = divisor
                                  prod = yc.slice();
                                  prodL = prod.length;
                              }

                              if ( prodL < remL ) prod = [0].concat(prod);

                              // Subtract product from remainder.
                              subtract( rem, prod, remL, base );
                              remL = rem.length;

                               // If product was < remainder.
                              if ( cmp == -1 ) {

                                  // Compare divisor and new remainder.
                                  // If divisor < new remainder, subtract divisor from remainder.
                                  // Trial digit n too low.
                                  // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                  while ( compare( yc, rem, yL, remL ) < 1 ) {
                                      n++;

                                      // Subtract divisor from remainder.
                                      subtract( rem, yL < remL ? yz : yc, remL, base );
                                      remL = rem.length;
                                  }
                              }
                          } else if ( cmp === 0 ) {
                              n++;
                              rem = [0];
                          } // else cmp === 1 and n will be 0

                          // Add the next digit, n, to the result array.
                          qc[i++] = n;

                          // Update the remainder.
                          if ( rem[0] ) {
                              rem[remL++] = xc[xi] || 0;
                          } else {
                              rem = [ xc[xi] ];
                              remL = 1;
                          }
                      } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                      more = rem[0] != null;

                      // Leading zero?
                      if ( !qc[0] ) qc.splice(0, 1);
                  }

                  if ( base == BASE ) {

                      // To calculate q.e, first get the number of digits of qc[0].
                      for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );

                      round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

                  // Caller is convertBase.
                  } else {
                      q.e = e;
                      q.r = +more;
                  }

                  return q;
              };
          })();


          /*
           * Return a string representing the value of BigNumber n in fixed-point or exponential
           * notation rounded to the specified decimal places or significant digits.
           *
           * n: a BigNumber.
           * i: the index of the last digit required (i.e. the digit that may be rounded up).
           * rm: the rounding mode.
           * id: 1 (toExponential) or 2 (toPrecision).
           */
          function format( n, i, rm, id ) {
              var c0, e, ne, len, str;

              if ( rm == null ) rm = ROUNDING_MODE;
              else intCheck( rm, 0, 8 );

              if ( !n.c ) return n.toString();

              c0 = n.c[0];
              ne = n.e;

              if ( i == null ) {
                  str = coeffToString( n.c );
                  str = id == 1 || id == 2 && ne <= TO_EXP_NEG
                    ? toExponential( str, ne )
                    : toFixedPoint( str, ne, '0' );
              } else {
                  n = round( new BigNumber(n), i, rm );

                  // n.e may have changed if the value was rounded up.
                  e = n.e;

                  str = coeffToString( n.c );
                  len = str.length;

                  // toPrecision returns exponential notation if the number of significant digits
                  // specified is less than the number of digits necessary to represent the integer
                  // part of the value in fixed-point notation.

                  // Exponential notation.
                  if ( id == 1 || id == 2 && ( i <= e || e <= TO_EXP_NEG ) ) {

                      // Append zeros?
                      for ( ; len < i; str += '0', len++ );
                      str = toExponential( str, e );

                  // Fixed-point notation.
                  } else {
                      i -= ne;
                      str = toFixedPoint( str, e, '0' );

                      // Append zeros?
                      if ( e + 1 > len ) {
                          if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
                      } else {
                          i += e - len;
                          if ( i > 0 ) {
                              if ( e + 1 == len ) str += '.';
                              for ( ; i--; str += '0' );
                          }
                      }
                  }
              }

              return n.s < 0 && c0 ? '-' + str : str;
          }


          // Handle BigNumber.max and BigNumber.min.
          function maxOrMin( args, method ) {
              var m, n,
                  i = 0;

              if ( isArray( args[0] ) ) args = args[0];
              m = new BigNumber( args[0] );

              for ( ; ++i < args.length; ) {
                  n = new BigNumber( args[i] );

                  // If any number is NaN, return NaN.
                  if ( !n.s ) {
                      m = n;
                      break;
                  } else if ( method.call( m, n ) ) {
                      m = n;
                  }
              }

              return m;
          }


          /*
           * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
           * Called by minus, plus and times.
           */
          function normalise( n, c, e ) {
              var i = 1,
                  j = c.length;

               // Remove trailing zeros.
              for ( ; !c[--j]; c.pop() );

              // Calculate the base 10 exponent. First get the number of digits of c[0].
              for ( j = c[0]; j >= 10; j /= 10, i++ );

              // Overflow?
              if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

                  // Infinity.
                  n.c = n.e = null;

              // Underflow?
              } else if ( e < MIN_EXP ) {

                  // Zero.
                  n.c = [ n.e = 0 ];
              } else {
                  n.e = e;
                  n.c = c;
              }

              return n;
          }


          // Handle values that fail the validity test in BigNumber.
          parseNumeric = (function () {
              var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                  dotAfter = /^([^.]+)\.$/,
                  dotBefore = /^\.([^.]+)$/,
                  isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                  whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

              return function ( x, str, isNum, b ) {
                  var base,
                      s = isNum ? str : str.replace( whitespaceOrPlus, '' );

                  // No exception on ±Infinity or NaN.
                  if ( isInfinityOrNaN.test(s) ) {
                      x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                      x.c = x.e = null;
                  } else {
                      if ( !isNum ) {

                          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                          s = s.replace( basePrefix, function ( m, p1, p2 ) {
                              base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                              return !b || b == base ? p1 : m;
                          });

                          if (b) {
                              base = b;

                              // E.g. '1.' to '1', '.1' to '0.1'
                              s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
                          }

                          if ( str != s ) return new BigNumber( s, base );
                      }

                      // '[BigNumber Error] Not a number: {n}'
                      // '[BigNumber Error] Not a base {b} number: {n}'
                      throw Error
                        ( bignumberError + 'Not a' + ( b ? ' base ' + b : '' ) + ' number: ' + str );
                  }
              }
          })();


          /*
           * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
           * If r is truthy, it is known that there are more digits after the rounding digit.
           */
          function round( x, sd, rm, r ) {
              var d, i, j, k, n, ni, rd,
                  xc = x.c,
                  pows10 = POWS_TEN;

              // if x is not Infinity or NaN...
              if (xc) {

                  // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                  // n is a base 1e14 number, the value of the element of array x.c containing rd.
                  // ni is the index of n within x.c.
                  // d is the number of digits of n.
                  // i is the index of rd within n including leading zeros.
                  // j is the actual index of rd within n (if < 0, rd is a leading zero).
                  out: {

                      // Get the number of digits of the first element of xc.
                      for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
                      i = sd - d;

                      // If the rounding digit is in the first element of xc...
                      if ( i < 0 ) {
                          i += LOG_BASE;
                          j = sd;
                          n = xc[ ni = 0 ];

                          // Get the rounding digit at index j of n.
                          rd = n / pows10[ d - j - 1 ] % 10 | 0;
                      } else {
                          ni = mathceil( ( i + 1 ) / LOG_BASE );

                          if ( ni >= xc.length ) {

                              if (r) {

                                  // Needed by sqrt.
                                  for ( ; xc.length <= ni; xc.push(0) );
                                  n = rd = 0;
                                  d = 1;
                                  i %= LOG_BASE;
                                  j = i - LOG_BASE + 1;
                              } else {
                                  break out;
                              }
                          } else {
                              n = k = xc[ni];

                              // Get the number of digits of n.
                              for ( d = 1; k >= 10; k /= 10, d++ );

                              // Get the index of rd within n.
                              i %= LOG_BASE;

                              // Get the index of rd within n, adjusted for leading zeros.
                              // The number of leading zeros of n is given by LOG_BASE - d.
                              j = i - LOG_BASE + d;

                              // Get the rounding digit at index j of n.
                              rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
                          }
                      }

                      r = r || sd < 0 ||

                      // Are there any non-zero digits after the rounding digit?
                      // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                      // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                        xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

                      r = rm < 4
                        ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                        : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

                          // Check whether the digit to the left of the rounding digit is odd.
                          ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
                            rm == ( x.s < 0 ? 8 : 7 ) );

                      if ( sd < 1 || !xc[0] ) {
                          xc.length = 0;

                          if (r) {

                              // Convert sd to decimal places.
                              sd -= x.e + 1;

                              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                              xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];
                              x.e = -sd || 0;
                          } else {

                              // Zero.
                              xc[0] = x.e = 0;
                          }

                          return x;
                      }

                      // Remove excess digits.
                      if ( i == 0 ) {
                          xc.length = ni;
                          k = 1;
                          ni--;
                      } else {
                          xc.length = ni + 1;
                          k = pows10[ LOG_BASE - i ];

                          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                          // j > 0 means i > number of leading zeros of n.
                          xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
                      }

                      // Round up?
                      if (r) {

                          for ( ; ; ) {

                              // If the digit to be rounded up is in the first element of xc...
                              if ( ni == 0 ) {

                                  // i will be the length of xc[0] before k is added.
                                  for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
                                  j = xc[0] += k;
                                  for ( k = 1; j >= 10; j /= 10, k++ );

                                  // if i != k the length has increased.
                                  if ( i != k ) {
                                      x.e++;
                                      if ( xc[0] == BASE ) xc[0] = 1;
                                  }

                                  break;
                              } else {
                                  xc[ni] += k;
                                  if ( xc[ni] != BASE ) break;
                                  xc[ni--] = 0;
                                  k = 1;
                              }
                          }
                      }

                      // Remove trailing zeros.
                      for ( i = xc.length; xc[--i] === 0; xc.pop() );
                  }

                  // Overflow? Infinity.
                  if ( x.e > MAX_EXP ) {
                      x.c = x.e = null;

                  // Underflow? Zero.
                  } else if ( x.e < MIN_EXP ) {
                      x.c = [ x.e = 0 ];
                  }
              }

              return x;
          }


          // PROTOTYPE/INSTANCE METHODS


          /*
           * Return a new BigNumber whose value is the absolute value of this BigNumber.
           */
          P.absoluteValue = P.abs = function () {
              var x = new BigNumber(this);
              if ( x.s < 0 ) x.s = 1;
              return x;
          };


          /*
           * Return
           *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
           *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
           *   0 if they have the same value,
           *   or null if the value of either is NaN.
           */
          P.comparedTo = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) );
          };


          /*
           * If dp is undefined or null or true or false, return the number of decimal places of the
           * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
           *
           * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
           * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
           * ROUNDING_MODE if rm is omitted.
           *
           * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.decimalPlaces = P.dp = function ( dp, rm ) {
              var c, n, v,
                  x = this;

              if ( dp != null ) {
                  intCheck( dp, 0, MAX );
                  if ( rm == null ) rm = ROUNDING_MODE;
                  else intCheck( rm, 0, 8 );

                  return round( new BigNumber(x), dp + x.e + 1, rm );
              }

              if ( !( c = x.c ) ) return null;
              n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

              // Subtract the number of trailing zeros of the last number.
              if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
              if ( n < 0 ) n = 0;

              return n;
          };


          /*
           *  n / 0 = I
           *  n / N = N
           *  n / I = 0
           *  0 / n = 0
           *  0 / 0 = N
           *  0 / N = N
           *  0 / I = 0
           *  N / n = N
           *  N / 0 = N
           *  N / N = N
           *  N / I = N
           *  I / n = I
           *  I / 0 = I
           *  I / N = N
           *  I / I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
           * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.dividedBy = P.div = function ( y, b ) {
              return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
          };


          /*
           * Return a new BigNumber whose value is the integer part of dividing the value of this
           * BigNumber by the value of BigNumber(y, b).
           */
          P.dividedToIntegerBy = P.idiv = function ( y, b ) {
              return div( this, new BigNumber( y, b ), 0, 1 );
          };


          /*
           * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isEqualTo = P.eq = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) ) === 0;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
           * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
           */
          P.integerValue = function (rm) {
              var n = new BigNumber(this);
              if ( rm == null ) rm = ROUNDING_MODE;
              else intCheck( rm, 0, 8 );
              return round( n, n.e + 1, rm );
          };


          /*
           * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isGreaterThan = P.gt = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) ) > 0;
          };


          /*
           * Return true if the value of this BigNumber is greater than or equal to the value of
           * BigNumber(y, b), otherwise return false.
           */
          P.isGreaterThanOrEqualTo = P.gte = function ( y, b ) {
              return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

          };


          /*
           * Return true if the value of this BigNumber is a finite number, otherwise return false.
           */
          P.isFinite = function () {
              return !!this.c;
          };


          /*
           * Return true if the value of this BigNumber is an integer, otherwise return false.
           */
          P.isInteger = function () {
              return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
          };


          /*
           * Return true if the value of this BigNumber is NaN, otherwise return false.
           */
          P.isNaN = function () {
              return !this.s;
          };


          /*
           * Return true if the value of this BigNumber is negative, otherwise return false.
           */
          P.isNegative = function () {
              return this.s < 0;
          };


          /*
           * Return true if the value of this BigNumber is positive, otherwise return false.
           */
          P.isPositive = function () {
              return this.s > 0;
          };


          /*
           * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
           */
          P.isZero = function () {
              return !!this.c && this.c[0] == 0;
          };


          /*
           * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isLessThan = P.lt = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) ) < 0;
          };


          /*
           * Return true if the value of this BigNumber is less than or equal to the value of
           * BigNumber(y, b), otherwise return false.
           */
          P.isLessThanOrEqualTo = P.lte = function ( y, b ) {
              return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
          };


          /*
           *  n - 0 = n
           *  n - N = N
           *  n - I = -I
           *  0 - n = -n
           *  0 - 0 = 0
           *  0 - N = N
           *  0 - I = -I
           *  N - n = N
           *  N - 0 = N
           *  N - N = N
           *  N - I = N
           *  I - n = I
           *  I - 0 = I
           *  I - N = N
           *  I - I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber minus the value of
           * BigNumber(y, b).
           */
          P.minus = function ( y, b ) {
              var i, j, t, xLTy,
                  x = this,
                  a = x.s;

              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
              if ( a != b ) {
                  y.s = -b;
                  return x.plus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Either Infinity?
                  if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

                  // Either zero?
                  if ( !xc[0] || !yc[0] ) {

                      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                      return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                        ROUNDING_MODE == 3 ? -0 : 0 );
                  }
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Determine which is the bigger number.
              if ( a = xe - ye ) {

                  if ( xLTy = a < 0 ) {
                      a = -a;
                      t = xc;
                  } else {
                      ye = xe;
                      t = yc;
                  }

                  t.reverse();

                  // Prepend zeros to equalise exponents.
                  for ( b = a; b--; t.push(0) );
                  t.reverse();
              } else {

                  // Exponents equal. Check digit by digit.
                  j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

                  for ( a = b = 0; b < j; b++ ) {

                      if ( xc[b] != yc[b] ) {
                          xLTy = xc[b] < yc[b];
                          break;
                      }
                  }
              }

              // x < y? Point xc to the array of the bigger number.
              if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

              b = ( j = yc.length ) - ( i = xc.length );

              // Append zeros to xc if shorter.
              // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
              if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
              b = BASE - 1;

              // Subtract yc from xc.
              for ( ; j > a; ) {

                  if ( xc[--j] < yc[j] ) {
                      for ( i = j; i && !xc[--i]; xc[i] = b );
                      --xc[i];
                      xc[j] += BASE;
                  }

                  xc[j] -= yc[j];
              }

              // Remove leading zeros and adjust exponent accordingly.
              for ( ; xc[0] == 0; xc.splice(0, 1), --ye );

              // Zero?
              if ( !xc[0] ) {

                  // Following IEEE 754 (2008) 6.3,
                  // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                  y.s = ROUNDING_MODE == 3 ? -1 : 1;
                  y.c = [ y.e = 0 ];
                  return y;
              }

              // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
              // for finite x and y.
              return normalise( y, xc, ye );
          };


          /*
           *   n % 0 =  N
           *   n % N =  N
           *   n % I =  n
           *   0 % n =  0
           *  -0 % n = -0
           *   0 % 0 =  N
           *   0 % N =  N
           *   0 % I =  0
           *   N % n =  N
           *   N % 0 =  N
           *   N % N =  N
           *   N % I =  N
           *   I % n =  N
           *   I % 0 =  N
           *   I % N =  N
           *   I % I =  N
           *
           * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
           * BigNumber(y, b). The result depends on the value of MODULO_MODE.
           */
          P.modulo = P.mod = function ( y, b ) {
              var q, s,
                  x = this;

              y = new BigNumber( y, b );

              // Return NaN if x is Infinity or NaN, or y is NaN or zero.
              if ( !x.c || !y.s || y.c && !y.c[0] ) {
                  return new BigNumber(NaN);

              // Return x if y is Infinity or x is zero.
              } else if ( !y.c || x.c && !x.c[0] ) {
                  return new BigNumber(x);
              }

              if ( MODULO_MODE == 9 ) {

                  // Euclidian division: q = sign(y) * floor(x / abs(y))
                  // r = x - qy    where  0 <= r < abs(y)
                  s = y.s;
                  y.s = 1;
                  q = div( x, y, 0, 3 );
                  y.s = s;
                  q.s *= s;
              } else {
                  q = div( x, y, 0, MODULO_MODE );
              }

              return x.minus( q.times(y) );
          };


          /*
           *  n * 0 = 0
           *  n * N = N
           *  n * I = I
           *  0 * n = 0
           *  0 * 0 = 0
           *  0 * N = N
           *  0 * I = N
           *  N * n = N
           *  N * 0 = N
           *  N * N = N
           *  N * I = N
           *  I * n = I
           *  I * 0 = N
           *  I * N = N
           *  I * I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
           * of BigNumber(y, b).
           */
          P.multipliedBy = P.times = function ( y, b ) {
              var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                  base, sqrtBase,
                  x = this,
                  xc = x.c,
                  yc = ( y = new BigNumber( y, b ) ).c;

              // Either NaN, ±Infinity or ±0?
              if ( !xc || !yc || !xc[0] || !yc[0] ) {

                  // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                  if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
                      y.c = y.e = y.s = null;
                  } else {
                      y.s *= x.s;

                      // Return ±Infinity if either is ±Infinity.
                      if ( !xc || !yc ) {
                          y.c = y.e = null;

                      // Return ±0 if either is ±0.
                      } else {
                          y.c = [0];
                          y.e = 0;
                      }
                  }

                  return y;
              }

              e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
              y.s *= x.s;
              xcL = xc.length;
              ycL = yc.length;

              // Ensure xc points to longer array and xcL to its length.
              if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

              // Initialise the result array with zeros.
              for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

              base = BASE;
              sqrtBase = SQRT_BASE;

              for ( i = ycL; --i >= 0; ) {
                  c = 0;
                  ylo = yc[i] % sqrtBase;
                  yhi = yc[i] / sqrtBase | 0;

                  for ( k = xcL, j = i + k; j > i; ) {
                      xlo = xc[--k] % sqrtBase;
                      xhi = xc[k] / sqrtBase | 0;
                      m = yhi * xlo + xhi * ylo;
                      xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
                      c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
                      zc[j--] = xlo % base;
                  }

                  zc[j] = c;
              }

              if (c) {
                  ++e;
              } else {
                  zc.splice(0, 1);
              }

              return normalise( y, zc, e );
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber negated,
           * i.e. multiplied by -1.
           */
          P.negated = function () {
              var x = new BigNumber(this);
              x.s = -x.s || null;
              return x;
          };


          /*
           *  n + 0 = n
           *  n + N = N
           *  n + I = I
           *  0 + n = n
           *  0 + 0 = 0
           *  0 + N = N
           *  0 + I = I
           *  N + n = N
           *  N + 0 = N
           *  N + N = N
           *  N + I = N
           *  I + n = I
           *  I + 0 = I
           *  I + N = N
           *  I + I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber plus the value of
           * BigNumber(y, b).
           */
          P.plus = function ( y, b ) {
              var t,
                  x = this,
                  a = x.s;

              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
               if ( a != b ) {
                  y.s = -b;
                  return x.minus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Return ±Infinity if either ±Infinity.
                  if ( !xc || !yc ) return new BigNumber( a / 0 );

                  // Either zero?
                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
              if ( a = xe - ye ) {
                  if ( a > 0 ) {
                      ye = xe;
                      t = yc;
                  } else {
                      a = -a;
                      t = xc;
                  }

                  t.reverse();
                  for ( ; a--; t.push(0) );
                  t.reverse();
              }

              a = xc.length;
              b = yc.length;

              // Point xc to the longer array, and b to the shorter length.
              if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

              // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
              for ( a = 0; b; ) {
                  a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
                  xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
              }

              if (a) {
                  xc = [a].concat(xc);
                  ++ye;
              }

              // No need to check for zero, as +x + +y != 0 && -x + -y != 0
              // ye = MAX_EXP + 1 possible
              return normalise( y, xc, ye );
          };


          /*
           * If sd is undefined or null or true or false, return the number of significant digits of
           * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
           * If sd is true include integer-part trailing zeros in the count.
           *
           * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
           * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
           * ROUNDING_MODE if rm is omitted.
           *
           * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
           *                     boolean: whether to count integer-part trailing zeros: true or false.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
           */
          P.precision = P.sd = function ( sd, rm ) {
              var c, n, v,
                  x = this;

              if ( sd != null && sd !== !!sd ) {
                  intCheck( sd, 1, MAX );
                  if ( rm == null ) rm = ROUNDING_MODE;
                  else intCheck( rm, 0, 8 );

                  return round( new BigNumber(x), sd, rm );
              }

              if ( !( c = x.c ) ) return null;
              v = c.length - 1;
              n = v * LOG_BASE + 1;

              if ( v = c[v] ) {

                  // Subtract the number of trailing zeros of the last element.
                  for ( ; v % 10 == 0; v /= 10, n-- );

                  // Add the number of digits of the first element.
                  for ( v = c[0]; v >= 10; v /= 10, n++ );
              }

              if ( sd && x.e + 1 > n ) n = x.e + 1;

              return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
           * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
           *
           * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
           */
          P.shiftedBy = function (k) {
              intCheck( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER );
              return this.times( '1e' + k );
          };


          /*
           *  sqrt(-n) =  N
           *  sqrt( N) =  N
           *  sqrt(-I) =  N
           *  sqrt( I) =  I
           *  sqrt( 0) =  0
           *  sqrt(-0) = -0
           *
           * Return a new BigNumber whose value is the square root of the value of this BigNumber,
           * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.squareRoot = P.sqrt = function () {
              var m, n, r, rep, t,
                  x = this,
                  c = x.c,
                  s = x.s,
                  e = x.e,
                  dp = DECIMAL_PLACES + 4,
                  half = new BigNumber('0.5');

              // Negative/NaN/Infinity/zero?
              if ( s !== 1 || !c || !c[0] ) {
                  return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
              }

              // Initial estimate.
              s = Math.sqrt( +x );

              // Math.sqrt underflow/overflow?
              // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
              if ( s == 0 || s == 1 / 0 ) {
                  n = coeffToString(c);
                  if ( ( n.length + e ) % 2 == 0 ) n += '0';
                  s = Math.sqrt(n);
                  e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

                  if ( s == 1 / 0 ) {
                      n = '1e' + e;
                  } else {
                      n = s.toExponential();
                      n = n.slice( 0, n.indexOf('e') + 1 ) + e;
                  }

                  r = new BigNumber(n);
              } else {
                  r = new BigNumber( s + '' );
              }

              // Check for zero.
              // r could be zero if MIN_EXP is changed after the this value was created.
              // This would cause a division by zero (x/t) and hence Infinity below, which would cause
              // coeffToString to throw.
              if ( r.c[0] ) {
                  e = r.e;
                  s = e + dp;
                  if ( s < 3 ) s = 0;

                  // Newton-Raphson iteration.
                  for ( ; ; ) {
                      t = r;
                      r = half.times( t.plus( div( x, t, dp, 1 ) ) );

                      if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
                           coeffToString( r.c ) ).slice( 0, s ) ) {

                          // The exponent of r may here be one less than the final result exponent,
                          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                          // are indexed correctly.
                          if ( r.e < e ) --s;
                          n = n.slice( s - 3, s + 1 );

                          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                          // iteration.
                          if ( n == '9999' || !rep && n == '4999' ) {

                              // On the first iteration only, check to see if rounding up gives the
                              // exact result as the nines may infinitely repeat.
                              if ( !rep ) {
                                  round( t, t.e + DECIMAL_PLACES + 2, 0 );

                                  if ( t.times(t).eq(x) ) {
                                      r = t;
                                      break;
                                  }
                              }

                              dp += 4;
                              s += 4;
                              rep = 1;
                          } else {

                              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                              // result. If not, then there are further digits and m will be truthy.
                              if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                                  // Truncate to the first rounding digit.
                                  round( r, r.e + DECIMAL_PLACES + 2, 1 );
                                  m = !r.times(r).eq(x);
                              }

                              break;
                          }
                      }
                  }
              }

              return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
          };


          /*
           * Return a string representing the value of this BigNumber in exponential notation and
           * rounded using ROUNDING_MODE to dp fixed decimal places.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toExponential = function ( dp, rm ) {
              if ( dp != null ) {
                  intCheck( dp, 0, MAX );
                  dp++;
              }
              return format( this, dp, rm, 1 );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounding
           * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
           * but e.g. (-0.00001).toFixed(0) is '-0'.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toFixed = function ( dp, rm ) {
              if ( dp != null ) {
                  intCheck( dp, 0, MAX );
                  dp = dp + this.e + 1;
              }
              return format( this, dp, rm );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounded
           * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
           * of the FORMAT object (see BigNumber.set).
           *
           * FORMAT = {
           *      decimalSeparator : '.',
           *      groupSeparator : ',',
           *      groupSize : 3,
           *      secondaryGroupSize : 0,
           *      fractionGroupSeparator : '\xA0',    // non-breaking space
           *      fractionGroupSize : 0
           * };
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toFormat = function ( dp, rm ) {
              var str = this.toFixed( dp, rm );

              if ( this.c ) {
                  var i,
                      arr = str.split('.'),
                      g1 = +FORMAT.groupSize,
                      g2 = +FORMAT.secondaryGroupSize,
                      groupSeparator = FORMAT.groupSeparator,
                      intPart = arr[0],
                      fractionPart = arr[1],
                      isNeg = this.s < 0,
                      intDigits = isNeg ? intPart.slice(1) : intPart,
                      len = intDigits.length;

                  if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                  if ( g1 > 0 && len > 0 ) {
                      i = len % g1 || g1;
                      intPart = intDigits.substr( 0, i );

                      for ( ; i < len; i += g1 ) {
                          intPart += groupSeparator + intDigits.substr( i, g1 );
                      }

                      if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
                      if (isNeg) intPart = '-' + intPart;
                  }

                  str = fractionPart
                    ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
                      ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                        '$&' + FORMAT.fractionGroupSeparator )
                      : fractionPart )
                    : intPart;
              }

              return str;
          };


          /*
           * Return a string array representing the value of this BigNumber as a simple fraction with
           * an integer numerator and an integer denominator. The denominator will be a positive
           * non-zero value less than or equal to the specified maximum denominator. If a maximum
           * denominator is not specified, the denominator will be the lowest value necessary to
           * represent the number exactly.
           *
           * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
           *
           * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
           */
          P.toFraction = function (md) {
              var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
                  x = this,
                  xc = x.c;

              if ( md != null ) {
                  n = new BigNumber(md);

                  if ( !n.isInteger() || n.lt(ONE) ) {
                      throw Error
                        ( bignumberError + 'Argument ' +
                          ( n.isInteger() ? 'out of range: ' : 'not an integer: ' ) + md );
                  }
              }

              if ( !xc ) return x.toString();

              d = new BigNumber(ONE);
              n1 = d0 = new BigNumber(ONE);
              d1 = n0 = new BigNumber(ONE);
              s = coeffToString(xc);

              // Determine initial denominator.
              // d is a power of 10 and the minimum max denominator that specifies the value exactly.
              e = d.e = s.length - x.e - 1;
              d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
              md = !md || n.comparedTo(d) > 0 ? ( e > 0 ? d : n1 ) : n;

              exp = MAX_EXP;
              MAX_EXP = 1 / 0;
              n = new BigNumber(s);

              // n0 = d1 = 0
              n0.c[0] = 0;

              for ( ; ; )  {
                  q = div( n, d, 0, 1 );
                  d2 = d0.plus( q.times(d1) );
                  if ( d2.comparedTo(md) == 1 ) break;
                  d0 = d1;
                  d1 = d2;
                  n1 = n0.plus( q.times( d2 = n1 ) );
                  n0 = d2;
                  d = n.minus( q.times( d2 = d ) );
                  n = d2;
              }

              d2 = div( md.minus(d0), d1, 0, 1 );
              n0 = n0.plus( d2.times(n1) );
              d0 = d0.plus( d2.times(d1) );
              n0.s = n1.s = x.s;
              e *= 2;

              // Determine which fraction is closer to x, n0/d0 or n1/d1
              arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().comparedTo(
                    div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
                      ? [ n1.toString(), d1.toString() ]
                      : [ n0.toString(), d0.toString() ];

              MAX_EXP = exp;
              return arr;
          };


          /*
           * Return the value of this BigNumber converted to a number primitive.
           */
          P.toNumber = function () {
              return +this;
          };


          /*
           * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
           *
           * If m is present, return the result modulo m.
           * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
           * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
           *
           * The modular power operation works efficiently when x, n, and m are positive integers,
           * otherwise it is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
           *
           * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           * [m] {number|string|BigNumber} The modulus.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {n}'
           *
           * Performs 54 loop iterations for n of 9007199254740991.
           */
          P.exponentiatedBy = P.pow = function ( n, m ) {
              var i, k, y, z,
                  x = this;

              intCheck( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER );
              if ( m != null ) m = new BigNumber(m);

              if (m) {
                  if ( n > 1 && x.gt(ONE) && x.isInteger() && m.gt(ONE) && m.isInteger() ) {
                      x = x.mod(m);
                  } else {
                      z = m;

                      // Nullify m so only a single mod operation is performed at the end.
                      m = null;
                  }
              } else if (POW_PRECISION) {

                  // Truncating each coefficient array to a length of k after each multiplication
                  // equates to truncating significant digits to POW_PRECISION + [28, 41],
                  // i.e. there will be a minimum of 28 guard digits retained.
                  //k = mathceil( POW_PRECISION / LOG_BASE + 1.5 );   // gives [9, 21] guard digits.
                  k = mathceil( POW_PRECISION / LOG_BASE + 2 );
              }

              y = new BigNumber(ONE);

              for ( i = mathfloor( n < 0 ? -n : n ); ; ) {
                  if ( i % 2 ) {
                      y = y.times(x);
                      if ( !y.c ) break;
                      if (k) {
                          if ( y.c.length > k ) y.c.length = k;
                      } else if (m) {
                          y = y.mod(m);
                      }
                  }

                  i = mathfloor( i / 2 );
                  if ( !i ) break;
                  x = x.times(x);
                  if (k) {
                      if ( x.c && x.c.length > k ) x.c.length = k;
                  } else if (m) {
                      x = x.mod(m);
                  }
              }

              if (m) return y;
              if ( n < 0 ) y = ONE.div(y);

              return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
          };


          /*
           * Return a string representing the value of this BigNumber rounded to sd significant digits
           * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
           * necessary to represent the integer part of the value in fixed-point notation, then use
           * exponential notation.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
           */
          P.toPrecision = function ( sd, rm ) {
              if ( sd != null ) intCheck( sd, 1, MAX );
              return format( this, sd, rm, 2 );
          };


          /*
           * Return a string representing the value of this BigNumber in base b, or base 10 if b is
           * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
           * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
           * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
           * TO_EXP_NEG, return exponential notation.
           *
           * [b] {number} Integer, 2 to ALPHABET.length inclusive.
           *
           * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
           */
          P.toString = function (b) {
              var str,
                  n = this,
                  s = n.s,
                  e = n.e;

              // Infinity or NaN?
              if ( e === null ) {

                  if (s) {
                      str = 'Infinity';
                      if ( s < 0 ) str = '-' + str;
                  } else {
                      str = 'NaN';
                  }
              } else {
                  str = coeffToString( n.c );

                  if ( b == null ) {
                      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                        ? toExponential( str, e )
                        : toFixedPoint( str, e, '0' );
                  } else {
                      intCheck( b, 2, ALPHABET.length, 'Base' );
                      str = convertBase( toFixedPoint( str, e, '0' ), 10, b, s, true );
                  }

                  if ( s < 0 && n.c[0] ) str = '-' + str;
              }

              return str;
          };


          /*
           * Return as toString, but do not accept a base argument, and include the minus sign for
           * negative zero.
           */
          P.valueOf = P.toJSON = function () {
              var str,
                  n = this,
                  e = n.e;

              if ( e === null ) return n.toString();

              str = coeffToString( n.c );

              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                  ? toExponential( str, e )
                  : toFixedPoint( str, e, '0' );

              return n.s < 0 ? '-' + str : str;
          };


          P._isBigNumber = true;

          if ( configObject != null ) BigNumber.set(configObject);

          return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS


      function bitFloor(n) {
          var i = n | 0;
          return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
          var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

          for ( ; i < j; ) {
              s = a[i++] + '';
              z = LOG_BASE - s.length;
              for ( ; z--; s = '0' + s );
              r += s;
          }

          // Determine trailing zeros.
          for ( j = r.length; r.charCodeAt(--j) === 48; );
          return r.slice( 0, j + 1 || 1 );
      }


      // Compare the value of BigNumbers x and y.
      function compare( x, y ) {
          var a, b,
              xc = x.c,
              yc = y.c,
              i = x.s,
              j = y.s,
              k = x.e,
              l = y.e;

          // Either NaN?
          if ( !i || !j ) return null;

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if ( a || b ) return a ? b ? 0 : -j : i;

          // Signs differ?
          if ( i != j ) return i;

          a = i < 0;
          b = k == l;

          // Either Infinity?
          if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

          // Compare exponents.
          if ( !b ) return k > l ^ a ? 1 : -1;

          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

          // Compare digit by digit.
          for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Check that n is a primitive number, an integer, and in range, otherwise throw.
       */
      function intCheck( n, min, max, name ) {
          if ( n < min || n > max || n !== ( n < 0 ? mathceil(n) : mathfloor(n) ) ) {
              throw Error
                ( bignumberError + ( name || 'Argument' ) + ( typeof n == 'number'
                    ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                    : ' not a primitive number: ' ) + n );
          }
      }


      function isArray(obj) {
          return Object.prototype.toString.call(obj) == '[object Array]';
      }


      function toExponential( str, e ) {
          return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
            ( e < 0 ? 'e' : 'e+' ) + e;
      }


      function toFixedPoint( str, e, z ) {
          var len, zs;

          // Negative exponent?
          if ( e < 0 ) {

              // Prepend zeros.
              for ( zs = z + '.'; ++e; zs += z );
              str = zs + str;

          // Positive exponent
          } else {
              len = str.length;

              // Append zeros.
              if ( ++e > len ) {
                  for ( zs = z, e -= len; --e; zs += z );
                  str += zs;
              } else if ( e < len ) {
                  str = str.slice( 0, e ) + '.' + str.slice(e);
              }
          }

          return str;
      }


      // EXPORT


      BigNumber = clone();
      BigNumber['default'] = BigNumber.BigNumber = BigNumber;


      // AMD.
      if ( typeof define == 'function' && define.amd ) {
          define( function () { return BigNumber; } );

      // Node.js and other environments that support module.exports.
      } else if ( typeof module != 'undefined' && module.exports ) {
          module.exports = BigNumber;

      // Browser.
      } else {
          if ( !globalObject ) {
              globalObject = typeof self != 'undefined' ? self : Function('return this')();
          }

          globalObject.BigNumber = BigNumber;
      }
  })(this);
  =======
  },{}],157:[function(require,module,exports){
  ;(function (globalObject) {
      'use strict';

  /*
   *      bignumber.js v6.0.0
   *      A JavaScript library for arbitrary-precision arithmetic.
   *      https://github.com/MikeMcl/bignumber.js
   *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
   *      MIT Licensed.
   *
   *      BigNumber.prototype methods     |  BigNumber methods
   *                                      |
   *      absoluteValue            abs    |  clone
   *      comparedTo                      |  config               set
   *      decimalPlaces            dp     |      DECIMAL_PLACES
   *      dividedBy                div    |      ROUNDING_MODE
   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
   *      exponentiatedBy          pow    |      RANGE
   *      integerValue                    |      CRYPTO
   *      isEqualTo                eq     |      MODULO_MODE
   *      isFinite                        |      POW_PRECISION
   *      isGreaterThan            gt     |      FORMAT
   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
   *      isInteger                       |  isBigNumber
   *      isLessThan               lt     |  maximum              max
   *      isLessThanOrEqualTo      lte    |  minimum              min
   *      isNaN                           |  random
   *      isNegative                      |
   *      isPositive                      |
   *      isZero                          |
   *      minus                           |
   *      modulo                   mod    |
   *      multipliedBy             times  |
   *      negated                         |
   *      plus                            |
   *      precision                sd     |
   *      shiftedBy                       |
   *      squareRoot               sqrt   |
   *      toExponential                   |
   *      toFixed                         |
   *      toFormat                        |
   *      toFraction                      |
   *      toJSON                          |
   *      toNumber                        |
   *      toPrecision                     |
   *      toString                        |
   *      valueOf                         |
   *
   */


      var BigNumber,
          isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

          mathceil = Math.ceil,
          mathfloor = Math.floor,

          bignumberError = '[BigNumber Error] ',
          tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
          // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
          POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,

          // EDITABLE
          // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
          // the arguments to toExponential, toFixed, toFormat, and toPrecision.
          MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function clone(configObject) {
          var div, convertBase, parseNumeric,
              P = BigNumber.prototype,
              ONE = new BigNumber(1),


              //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


              // The default values below must be integers within the inclusive ranges stated.
              // The values can also be changed at run-time using BigNumber.set.

              // The maximum number of decimal places for operations involving division.
              DECIMAL_PLACES = 20,                     // 0 to MAX

              // The rounding mode used when rounding to the above decimal places, and when using
              // toExponential, toFixed, toFormat and toPrecision, and round (default value).
              // UP         0 Away from zero.
              // DOWN       1 Towards zero.
              // CEIL       2 Towards +Infinity.
              // FLOOR      3 Towards -Infinity.
              // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
              // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
              // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
              // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
              // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
              ROUNDING_MODE = 4,                       // 0 to 8

              // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              TO_EXP_NEG = -7,                         // 0 to -MAX

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              TO_EXP_POS = 21,                         // 0 to MAX

              // RANGE : [MIN_EXP, MAX_EXP]

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              MIN_EXP = -1e7,                          // -1 to -MAX

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
              MAX_EXP = 1e7,                           // 1 to MAX

              // Whether to use cryptographically-secure random number generation, if available.
              CRYPTO = false,                          // true or false

              // The modulo mode used when calculating the modulus: a mod n.
              // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
              // The remainder (r) is calculated as: r = a - n * q.
              //
              // UP        0 The remainder is positive if the dividend is negative, else is negative.
              // DOWN      1 The remainder has the same sign as the dividend.
              //             This modulo mode is commonly known as 'truncated division' and is
              //             equivalent to (a % n) in JavaScript.
              // FLOOR     3 The remainder has the same sign as the divisor (Python %).
              // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
              // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
              //             The remainder is always positive.
              //
              // The truncated division, floored division, Euclidian division and IEEE 754 remainder
              // modes are commonly used for the modulus operation.
              // Although the other rounding modes can also be used, they may not give useful results.
              MODULO_MODE = 1,                         // 0 to 9

              // The maximum number of significant digits of the result of the exponentiatedBy operation.
              // If POW_PRECISION is 0, there will be unlimited significant digits.
              POW_PRECISION = 0,                    // 0 to MAX

              // The format specification used by the BigNumber.prototype.toFormat method.
              FORMAT = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',      // non-breaking space
                  fractionGroupSize: 0
              },

              // The alphabet used for base conversion.
              // It must be at least 2 characters long, with no '.' or repeated character.
              // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
              ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


          //------------------------------------------------------------------------------------------


          // CONSTRUCTOR


          /*
           * The BigNumber constructor and exported function.
           * Create and return a new instance of a BigNumber object.
           *
           * n {number|string|BigNumber} A numeric value.
           * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
           */
          function BigNumber( n, b ) {
              var alphabet, c, e, i, isNum, len, str,
                  x = this;

              // Enable constructor usage without new.
              if ( !( x instanceof BigNumber ) ) {

                  // Don't throw on constructor call without new (#81).
                  // '[BigNumber Error] Constructor call without new: {n}'
                  //throw Error( bignumberError + ' Constructor call without new: ' + n );
                  return new BigNumber( n, b );
              }

              if ( b == null ) {

                  // Duplicate.
                  if ( n instanceof BigNumber ) {
                      x.s = n.s;
                      x.e = n.e;
                      x.c = ( n = n.c ) ? n.slice() : n;
                      return;
                  }

                  isNum = typeof n == 'number';

                  if ( isNum && n * 0 == 0 ) {

                      // Use `1 / n` to handle minus zero also.
                      x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

                      // Faster path for integers.
                      if ( n === ~~n ) {
                          for ( e = 0, i = n; i >= 10; i /= 10, e++ );
                          x.e = e;
                          x.c = [n];
                          return;
                      }

                      str = n + '';
                  } else {
                      if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, isNum );
                      x.s = str.charCodeAt(0) == 45 ? ( str = str.slice(1), -1 ) : 1;
                  }

              } else {

                  // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                  intCheck( b, 2, ALPHABET.length, 'Base' );
                  str = n + '';

                  // Allow exponential notation to be used with base 10 argument, while
                  // also rounding to DECIMAL_PLACES as with other bases.
                  if ( b == 10 ) {
                      x = new BigNumber( n instanceof BigNumber ? n : str );
                      return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
                  }

                  isNum = typeof n == 'number';

                  if (isNum) {

                      // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                      if ( n * 0 != 0 ) return parseNumeric( x, str, isNum, b );

                      x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

                      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                      if ( str.replace( /^0\.0*|\./, '' ).length > 15 ) {
                          throw Error
                            ( tooManyDigits + n );
                      }

                      // Prevent later check for length on converted number.
                      isNum = false;
                  } else {
                      x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;

                      // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                      if ( b > 10 && b < 37 ) str = str.toLowerCase();
                  }

                  alphabet = ALPHABET.slice( 0, b );
                  e = i = 0;

                  // Check that str is a valid base b number.
                  // Don't use RegExp so alphabet can contain special characters.
                  for ( len = str.length; i < len; i++ ) {
                      if ( alphabet.indexOf( c = str.charAt(i) ) < 0 ) {
                          if ( c == '.' ) {

                              // If '.' is not the first character and it has not be found before.
                              if ( i > e ) {
                                  e = len;
                                  continue;
                              }
                          }

                          return parseNumeric( x, n + '', isNum, b );
                      }
                  }

                  str = convertBase( str, b, 10, x.s );
              }

              // Decimal point?
              if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

              // Exponential form?
              if ( ( i = str.search( /e/i ) ) > 0 ) {

                  // Determine exponent.
                  if ( e < 0 ) e = i;
                  e += +str.slice( i + 1 );
                  str = str.substring( 0, i );
              } else if ( e < 0 ) {

                  // Integer.
                  e = str.length;
              }

              // Determine leading zeros.
              for ( i = 0; str.charCodeAt(i) === 48; i++ );

              // Determine trailing zeros.
              for ( len = str.length; str.charCodeAt(--len) === 48; );
              str = str.slice( i, len + 1 );

              if (str) {
                  len = str.length;

                  // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                  if ( isNum && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {
                      throw Error
                        ( tooManyDigits + ( x.s * n ) );
                  }

                  e = e - i - 1;

                   // Overflow?
                  if ( e > MAX_EXP ) {

                      // Infinity.
                      x.c = x.e = null;

                  // Underflow?
                  } else if ( e < MIN_EXP ) {

                      // Zero.
                      x.c = [ x.e = 0 ];
                  } else {
                      x.e = e;
                      x.c = [];

                      // Transform base

                      // e is the base 10 exponent.
                      // i is where to slice str to get the first element of the coefficient array.
                      i = ( e + 1 ) % LOG_BASE;
                      if ( e < 0 ) i += LOG_BASE;

                      if ( i < len ) {
                          if (i) x.c.push( +str.slice( 0, i ) );

                          for ( len -= LOG_BASE; i < len; ) {
                              x.c.push( +str.slice( i, i += LOG_BASE ) );
                          }

                          str = str.slice(i);
                          i = LOG_BASE - str.length;
                      } else {
                          i -= len;
                      }

                      for ( ; i--; str += '0' );
                      x.c.push( +str );
                  }
              } else {

                  // Zero.
                  x.c = [ x.e = 0 ];
              }
          }


          // CONSTRUCTOR PROPERTIES


          BigNumber.clone = clone;

          BigNumber.ROUND_UP = 0;
          BigNumber.ROUND_DOWN = 1;
          BigNumber.ROUND_CEIL = 2;
          BigNumber.ROUND_FLOOR = 3;
          BigNumber.ROUND_HALF_UP = 4;
          BigNumber.ROUND_HALF_DOWN = 5;
          BigNumber.ROUND_HALF_EVEN = 6;
          BigNumber.ROUND_HALF_CEIL = 7;
          BigNumber.ROUND_HALF_FLOOR = 8;
          BigNumber.EUCLID = 9;


          /*
           * Configure infrequently-changing library-wide settings.
           *
           * Accept an object with the following optional properties (if the value of a property is
           * a number, it must be an integer within the inclusive range stated):
           *
           *   DECIMAL_PLACES   {number}           0 to MAX
           *   ROUNDING_MODE    {number}           0 to 8
           *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
           *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
           *   CRYPTO           {boolean}          true or false
           *   MODULO_MODE      {number}           0 to 9
           *   POW_PRECISION       {number}           0 to MAX
           *   ALPHABET         {string}           A string of two or more unique characters, and not
           *                                       containing '.'. The empty string, null or undefined
           *                                       resets the alphabet to its default value.
           *   FORMAT           {object}           An object with some of the following properties:
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           * (The values assigned to the above FORMAT object properties are not checked for validity.)
           *
           * E.g.
           * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
           *
           * Ignore properties/parameters set to null or undefined, except for ALPHABET.
           *
           * Return an object with the properties current values.
           */
          BigNumber.config = BigNumber.set = function (obj) {
              var p, v;

              if ( obj != null ) {

                  if ( typeof obj == 'object' ) {

                      // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                      // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'DECIMAL_PLACES' ) ) {
                          v = obj[p];
                          intCheck( v, 0, MAX, p );
                          DECIMAL_PLACES = v;
                      }

                      // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                      // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'ROUNDING_MODE' ) ) {
                          v = obj[p];
                          intCheck( v, 0, 8, p );
                          ROUNDING_MODE = v;
                      }

                      // EXPONENTIAL_AT {number|number[]}
                      // Integer, -MAX to MAX inclusive or
                      // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                      // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'EXPONENTIAL_AT' ) ) {
                          v = obj[p];
                          if ( isArray(v) ) {
                              intCheck( v[0], -MAX, 0, p );
                              intCheck( v[1], 0, MAX, p );
                              TO_EXP_NEG = v[0];
                              TO_EXP_POS = v[1];
                          } else {
                              intCheck( v, -MAX, MAX, p );
                              TO_EXP_NEG = -( TO_EXP_POS = v < 0 ? -v : v );
                          }
                      }

                      // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                      // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                      // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                      if ( obj.hasOwnProperty( p = 'RANGE' ) ) {
                          v = obj[p];
                          if ( isArray(v) ) {
                              intCheck( v[0], -MAX, -1, p );
                              intCheck( v[1], 1, MAX, p );
                              MIN_EXP = v[0];
                              MAX_EXP = v[1];
                          } else {
                              intCheck( v, -MAX, MAX, p );
                              if (v) {
                                  MIN_EXP = -( MAX_EXP = v < 0 ? -v : v );
                              } else {
                                  throw Error
                                    ( bignumberError + p + ' cannot be zero: ' + v );
                              }
                          }
                      }

                      // CRYPTO {boolean} true or false.
                      // '[BigNumber Error] CRYPTO not true or false: {v}'
                      // '[BigNumber Error] crypto unavailable'
                      if ( obj.hasOwnProperty( p = 'CRYPTO' ) ) {
                          v = obj[p];
                          if ( v === !!v ) {
                              if (v) {
                                  if ( typeof crypto != 'undefined' && crypto &&
                                    (crypto.getRandomValues || crypto.randomBytes) ) {
                                      CRYPTO = v;
                                  } else {
                                      CRYPTO = !v;
                                      throw Error
                                        ( bignumberError + 'crypto unavailable' );
                                  }
                              } else {
                                  CRYPTO = v;
                              }
                          } else {
                              throw Error
                                ( bignumberError + p + ' not true or false: ' + v );
                          }
                      }

                      // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                      // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'MODULO_MODE' ) ) {
                          v = obj[p];
                          intCheck( v, 0, 9, p );
                          MODULO_MODE = v;
                      }

                      // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                      // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                      if ( obj.hasOwnProperty( p = 'POW_PRECISION' ) ) {
                          v = obj[p];
                          intCheck( v, 0, MAX, p );
                          POW_PRECISION = v;
                      }

                      // FORMAT {object}
                      // '[BigNumber Error] FORMAT not an object: {v}'
                      if ( obj.hasOwnProperty( p = 'FORMAT' ) ) {
                          v = obj[p];
                          if ( typeof v == 'object' ) FORMAT = v;
                          else throw Error
                            ( bignumberError + p + ' not an object: ' + v );
                      }

                      // ALPHABET {string}
                      // '[BigNumber Error] ALPHABET invalid: {v}'
                      if ( obj.hasOwnProperty( p = 'ALPHABET' ) ) {
                          v = obj[p];

                          // Disallow if only one character, or contains '.' or a repeated character.
                          if ( typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v) ) {
                              ALPHABET = v;
                          } else {
                              throw Error
                                ( bignumberError + p + ' invalid: ' + v );
                          }
                      }

                  } else {

                      // '[BigNumber Error] Object expected: {v}'
                      throw Error
                        ( bignumberError + 'Object expected: ' + obj );
                  }
              }

              return {
                  DECIMAL_PLACES: DECIMAL_PLACES,
                  ROUNDING_MODE: ROUNDING_MODE,
                  EXPONENTIAL_AT: [ TO_EXP_NEG, TO_EXP_POS ],
                  RANGE: [ MIN_EXP, MAX_EXP ],
                  CRYPTO: CRYPTO,
                  MODULO_MODE: MODULO_MODE,
                  POW_PRECISION: POW_PRECISION,
                  FORMAT: FORMAT,
                  ALPHABET: ALPHABET
              };
          };


          /*
           * Return true if v is a BigNumber instance, otherwise return false.
           *
           * v {any}
           */
          BigNumber.isBigNumber = function (v) {
              return v instanceof BigNumber || v && v._isBigNumber === true || false;
          };


          /*
           * Return a new BigNumber whose value is the maximum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.maximum = BigNumber.max = function () {
              return maxOrMin( arguments, P.lt );
          };


          /*
           * Return a new BigNumber whose value is the minimum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.minimum = BigNumber.min = function () {
              return maxOrMin( arguments, P.gt );
          };


          /*
           * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
           * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
           * '[BigNumber Error] crypto unavailable'
           */
          BigNumber.random = (function () {
              var pow2_53 = 0x20000000000000;

              // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
              // Check if Math.random() produces more than 32 bits of randomness.
              // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
              // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
              var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                ? function () { return mathfloor( Math.random() * pow2_53 ); }
                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                    (Math.random() * 0x800000 | 0); };

              return function (dp) {
                  var a, b, e, k, v,
                      i = 0,
                      c = [],
                      rand = new BigNumber(ONE);

                  if ( dp == null ) dp = DECIMAL_PLACES;
                  else intCheck( dp, 0, MAX );

                  k = mathceil( dp / LOG_BASE );

                  if (CRYPTO) {

                      // Browsers supporting crypto.getRandomValues.
                      if (crypto.getRandomValues) {

                          a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

                          for ( ; i < k; ) {

                              // 53 bits:
                              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                              //                                     11111 11111111 11111111
                              // 0x20000 is 2^21.
                              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                              // Rejection sampling:
                              // 0 <= v < 9007199254740992
                              // Probability that v >= 9e15, is
                              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                              if ( v >= 9e15 ) {
                                  b = crypto.getRandomValues( new Uint32Array(2) );
                                  a[i] = b[0];
                                  a[i + 1] = b[1];
                              } else {

                                  // 0 <= v <= 8999999999999999
                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 2;
                              }
                          }
                          i = k / 2;

                      // Node.js supporting crypto.randomBytes.
                      } else if (crypto.randomBytes) {

                          // buffer
                          a = crypto.randomBytes( k *= 7 );

                          for ( ; i < k; ) {

                              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                              // 0x100000000 is 2^32, 0x1000000 is 2^24
                              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                              // 0 <= v < 9007199254740992
                              v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
                                    ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
                                    ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

                              if ( v >= 9e15 ) {
                                  crypto.randomBytes(7).copy( a, i );
                              } else {

                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 7;
                              }
                          }
                          i = k / 7;
                      } else {
                          CRYPTO = false;
                          throw Error
                            ( bignumberError + 'crypto unavailable' );
                      }
                  }

                  // Use Math.random.
                  if (!CRYPTO) {

                      for ( ; i < k; ) {
                          v = random53bitInt();
                          if ( v < 9e15 ) c[i++] = v % 1e14;
                      }
                  }

                  k = c[--i];
                  dp %= LOG_BASE;

                  // Convert trailing digits to zeros according to dp.
                  if ( k && dp ) {
                      v = POWS_TEN[LOG_BASE - dp];
                      c[i] = mathfloor( k / v ) * v;
                  }

                  // Remove trailing elements which are zero.
                  for ( ; c[i] === 0; c.pop(), i-- );

                  // Zero?
                  if ( i < 0 ) {
                      c = [ e = 0 ];
                  } else {

                      // Remove leading elements which are zero and adjust exponent accordingly.
                      for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                      // Count the digits of the first element of c to determine leading zeros, and...
                      for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

                      // adjust the exponent accordingly.
                      if ( i < LOG_BASE ) e -= LOG_BASE - i;
                  }

                  rand.e = e;
                  rand.c = c;
                  return rand;
              };
          })();


          // PRIVATE FUNCTIONS


          // Called by BigNumber and BigNumber.prototype.toString.
          convertBase = ( function () {
              var decimal = '0123456789';

              /*
               * Convert string of baseIn to an array of numbers of baseOut.
               * Eg. toBaseOut('255', 10, 16) returns [15, 15].
               * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
               */
              function toBaseOut( str, baseIn, baseOut, alphabet ) {
                  var j,
                      arr = [0],
                      arrL,
                      i = 0,
                      len = str.length;

                  for ( ; i < len; ) {
                      for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );

                      arr[0] += alphabet.indexOf( str.charAt( i++ ) );

                      for ( j = 0; j < arr.length; j++ ) {

                          if ( arr[j] > baseOut - 1 ) {
                              if ( arr[j + 1] == null ) arr[j + 1] = 0;
                              arr[j + 1] += arr[j] / baseOut | 0;
                              arr[j] %= baseOut;
                          }
                      }
                  }

                  return arr.reverse();
              }

              // Convert a numeric string of baseIn to a numeric string of baseOut.
              // If the caller is toString, we are converting from base 10 to baseOut.
              // If the caller is BigNumber, we are converting from baseIn to base 10.
              return function ( str, baseIn, baseOut, sign, callerIsToString ) {
                  var alphabet, d, e, k, r, x, xc, y,
                      i = str.indexOf( '.' ),
                      dp = DECIMAL_PLACES,
                      rm = ROUNDING_MODE;

                  // Non-integer.
                  if ( i >= 0 ) {
                      k = POW_PRECISION;

                      // Unlimited precision.
                      POW_PRECISION = 0;
                      str = str.replace( '.', '' );
                      y = new BigNumber(baseIn);
                      x = y.pow( str.length - i );
                      POW_PRECISION = k;

                      // Convert str as if an integer, then restore the fraction part by dividing the
                      // result by its base raised to a power.

                      y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e, '0' ),
                        10, baseOut, decimal );
                      y.e = y.c.length;
                  }

                  // Convert the number as integer.

                  xc = toBaseOut( str, baseIn, baseOut, callerIsToString
                    ? ( alphabet = ALPHABET, decimal )
                    : ( alphabet = decimal, ALPHABET ) );


                  // xc now represents str as an integer and converted to baseOut. e is the exponent.
                  e = k = xc.length;

                  // Remove trailing zeros.
                  for ( ; xc[--k] == 0; xc.pop() );

                  // Zero?
                  if ( !xc[0] ) return alphabet.charAt(0);

                  // Does str represent an integer? If so, no need for the division.
                  if ( i < 0 ) {
                      --e;
                  } else {
                      x.c = xc;
                      x.e = e;

                      // The sign is needed for correct rounding.
                      x.s = sign;
                      x = div( x, y, dp, rm, baseOut );
                      xc = x.c;
                      r = x.r;
                      e = x.e;
                  }

                  // xc now represents str converted to baseOut.

                  // THe index of the rounding digit.
                  d = e + dp + 1;

                  // The rounding digit: the digit to the right of the digit that may be rounded up.
                  i = xc[d];

                  // Look at the rounding digits and mode to determine whether to round up.

                  k = baseOut / 2;
                  r = r || d < 0 || xc[d + 1] != null;

                  r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                             : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                               rm == ( x.s < 0 ? 8 : 7 ) );

                  // If the index of the rounding digit is not greater than zero, or xc represents
                  // zero, then the result of the base conversion is zero or, if rounding up, a value
                  // such as 0.00001.
                  if ( d < 1 || !xc[0] ) {

                      // 1^-dp or 0
                      str = r ? toFixedPoint( alphabet.charAt(1), -dp, alphabet.charAt(0) )
                              : alphabet.charAt(0);
                  } else {

                      // Truncate xc to the required number of decimal places.
                      xc.length = d;

                      // Round up?
                      if (r) {

                          // Rounding up may mean the previous digit has to be rounded up and so on.
                          for ( --baseOut; ++xc[--d] > baseOut; ) {
                              xc[d] = 0;

                              if ( !d ) {
                                  ++e;
                                  xc = [1].concat(xc);
                              }
                          }
                      }

                      // Determine trailing zeros.
                      for ( k = xc.length; !xc[--k]; );

                      // E.g. [4, 11, 15] becomes 4bf.
                      for ( i = 0, str = ''; i <= k; str += alphabet.charAt( xc[i++] ) );

                      // Add leading zeros, decimal point and trailing zeros as required.
                      str = toFixedPoint( str, e, alphabet.charAt(0) );
                  }

                  // The caller will add the sign.
                  return str;
              };
          })();


          // Perform division in the specified base. Called by div and convertBase.
          div = (function () {

              // Assume non-zero x and k.
              function multiply( x, k, base ) {
                  var m, temp, xlo, xhi,
                      carry = 0,
                      i = x.length,
                      klo = k % SQRT_BASE,
                      khi = k / SQRT_BASE | 0;

                  for ( x = x.slice(); i--; ) {
                      xlo = x[i] % SQRT_BASE;
                      xhi = x[i] / SQRT_BASE | 0;
                      m = khi * xlo + xhi * klo;
                      temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
                      carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
                      x[i] = temp % base;
                  }

                  if (carry) x = [carry].concat(x);

                  return x;
              }

              function compare( a, b, aL, bL ) {
                  var i, cmp;

                  if ( aL != bL ) {
                      cmp = aL > bL ? 1 : -1;
                  } else {

                      for ( i = cmp = 0; i < aL; i++ ) {

                          if ( a[i] != b[i] ) {
                              cmp = a[i] > b[i] ? 1 : -1;
                              break;
                          }
                      }
                  }
                  return cmp;
              }

              function subtract( a, b, aL, base ) {
                  var i = 0;

                  // Subtract b from a.
                  for ( ; aL--; ) {
                      a[aL] -= i;
                      i = a[aL] < b[aL] ? 1 : 0;
                      a[aL] = i * base + a[aL] - b[aL];
                  }

                  // Remove leading zeros.
                  for ( ; !a[0] && a.length > 1; a.splice(0, 1) );
              }

              // x: dividend, y: divisor.
              return function ( x, y, dp, rm, base ) {
                  var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                      yL, yz,
                      s = x.s == y.s ? 1 : -1,
                      xc = x.c,
                      yc = y.c;

                  // Either NaN, Infinity or 0?
                  if ( !xc || !xc[0] || !yc || !yc[0] ) {

                      return new BigNumber(

                        // Return NaN if either NaN, or both Infinity or 0.
                        !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                      );
                  }

                  q = new BigNumber(s);
                  qc = q.c = [];
                  e = x.e - y.e;
                  s = dp + e + 1;

                  if ( !base ) {
                      base = BASE;
                      e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
                      s = s / LOG_BASE | 0;
                  }

                  // Result exponent may be one less then the current value of e.
                  // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                  for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );

                  if ( yc[i] > ( xc[i] || 0 ) ) e--;

                  if ( s < 0 ) {
                      qc.push(1);
                      more = true;
                  } else {
                      xL = xc.length;
                      yL = yc.length;
                      i = 0;
                      s += 2;

                      // Normalise xc and yc so highest order digit of yc is >= base / 2.

                      n = mathfloor( base / ( yc[0] + 1 ) );

                      // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                      // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                      if ( n > 1 ) {
                          yc = multiply( yc, n, base );
                          xc = multiply( xc, n, base );
                          yL = yc.length;
                          xL = xc.length;
                      }

                      xi = yL;
                      rem = xc.slice( 0, yL );
                      remL = rem.length;

                      // Add zeros to make remainder as long as divisor.
                      for ( ; remL < yL; rem[remL++] = 0 );
                      yz = yc.slice();
                      yz = [0].concat(yz);
                      yc0 = yc[0];
                      if ( yc[1] >= base / 2 ) yc0++;
                      // Not necessary, but to prevent trial digit n > base, when using base 3.
                      // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                      do {
                          n = 0;

                          // Compare divisor and remainder.
                          cmp = compare( yc, rem, yL, remL );

                          // If divisor < remainder.
                          if ( cmp < 0 ) {

                              // Calculate trial digit, n.

                              rem0 = rem[0];
                              if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

                              // n is how many times the divisor goes into the current remainder.
                              n = mathfloor( rem0 / yc0 );

                              //  Algorithm:
                              //  1. product = divisor * trial digit (n)
                              //  2. if product > remainder: product -= divisor, n--
                              //  3. remainder -= product
                              //  4. if product was < remainder at 2:
                              //    5. compare new remainder and divisor
                              //    6. If remainder > divisor: remainder -= divisor, n++

                              if ( n > 1 ) {

                                  // n may be > base only when base is 3.
                                  if (n >= base) n = base - 1;

                                  // product = divisor * trial digit.
                                  prod = multiply( yc, n, base );
                                  prodL = prod.length;
                                  remL = rem.length;

                                  // Compare product and remainder.
                                  // If product > remainder.
                                  // Trial digit n too high.
                                  // n is 1 too high about 5% of the time, and is not known to have
                                  // ever been more than 1 too high.
                                  while ( compare( prod, rem, prodL, remL ) == 1 ) {
                                      n--;

                                      // Subtract divisor from product.
                                      subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                      prodL = prod.length;
                                      cmp = 1;
                                  }
                              } else {

                                  // n is 0 or 1, cmp is -1.
                                  // If n is 0, there is no need to compare yc and rem again below,
                                  // so change cmp to 1 to avoid it.
                                  // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                  if ( n == 0 ) {

                                      // divisor < remainder, so n must be at least 1.
                                      cmp = n = 1;
                                  }

                                  // product = divisor
                                  prod = yc.slice();
                                  prodL = prod.length;
                              }

                              if ( prodL < remL ) prod = [0].concat(prod);

                              // Subtract product from remainder.
                              subtract( rem, prod, remL, base );
                              remL = rem.length;

                               // If product was < remainder.
                              if ( cmp == -1 ) {

                                  // Compare divisor and new remainder.
                                  // If divisor < new remainder, subtract divisor from remainder.
                                  // Trial digit n too low.
                                  // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                  while ( compare( yc, rem, yL, remL ) < 1 ) {
                                      n++;

                                      // Subtract divisor from remainder.
                                      subtract( rem, yL < remL ? yz : yc, remL, base );
                                      remL = rem.length;
                                  }
                              }
                          } else if ( cmp === 0 ) {
                              n++;
                              rem = [0];
                          } // else cmp === 1 and n will be 0

                          // Add the next digit, n, to the result array.
                          qc[i++] = n;

                          // Update the remainder.
                          if ( rem[0] ) {
                              rem[remL++] = xc[xi] || 0;
                          } else {
                              rem = [ xc[xi] ];
                              remL = 1;
                          }
                      } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                      more = rem[0] != null;

                      // Leading zero?
                      if ( !qc[0] ) qc.splice(0, 1);
                  }

                  if ( base == BASE ) {

                      // To calculate q.e, first get the number of digits of qc[0].
                      for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );

                      round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

                  // Caller is convertBase.
                  } else {
                      q.e = e;
                      q.r = +more;
                  }

                  return q;
              };
          })();


          /*
           * Return a string representing the value of BigNumber n in fixed-point or exponential
           * notation rounded to the specified decimal places or significant digits.
           *
           * n: a BigNumber.
           * i: the index of the last digit required (i.e. the digit that may be rounded up).
           * rm: the rounding mode.
           * id: 1 (toExponential) or 2 (toPrecision).
           */
          function format( n, i, rm, id ) {
              var c0, e, ne, len, str;

              if ( rm == null ) rm = ROUNDING_MODE;
              else intCheck( rm, 0, 8 );

              if ( !n.c ) return n.toString();

              c0 = n.c[0];
              ne = n.e;

              if ( i == null ) {
                  str = coeffToString( n.c );
                  str = id == 1 || id == 2 && ne <= TO_EXP_NEG
                    ? toExponential( str, ne )
                    : toFixedPoint( str, ne, '0' );
              } else {
                  n = round( new BigNumber(n), i, rm );

                  // n.e may have changed if the value was rounded up.
                  e = n.e;

                  str = coeffToString( n.c );
                  len = str.length;

                  // toPrecision returns exponential notation if the number of significant digits
                  // specified is less than the number of digits necessary to represent the integer
                  // part of the value in fixed-point notation.

                  // Exponential notation.
                  if ( id == 1 || id == 2 && ( i <= e || e <= TO_EXP_NEG ) ) {

                      // Append zeros?
                      for ( ; len < i; str += '0', len++ );
                      str = toExponential( str, e );

                  // Fixed-point notation.
                  } else {
                      i -= ne;
                      str = toFixedPoint( str, e, '0' );

                      // Append zeros?
                      if ( e + 1 > len ) {
                          if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
                      } else {
                          i += e - len;
                          if ( i > 0 ) {
                              if ( e + 1 == len ) str += '.';
                              for ( ; i--; str += '0' );
                          }
                      }
                  }
              }

              return n.s < 0 && c0 ? '-' + str : str;
          }


          // Handle BigNumber.max and BigNumber.min.
          function maxOrMin( args, method ) {
              var m, n,
                  i = 0;

              if ( isArray( args[0] ) ) args = args[0];
              m = new BigNumber( args[0] );

              for ( ; ++i < args.length; ) {
                  n = new BigNumber( args[i] );

                  // If any number is NaN, return NaN.
                  if ( !n.s ) {
                      m = n;
                      break;
                  } else if ( method.call( m, n ) ) {
                      m = n;
                  }
              }

              return m;
          }


          /*
           * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
           * Called by minus, plus and times.
           */
          function normalise( n, c, e ) {
              var i = 1,
                  j = c.length;

               // Remove trailing zeros.
              for ( ; !c[--j]; c.pop() );

              // Calculate the base 10 exponent. First get the number of digits of c[0].
              for ( j = c[0]; j >= 10; j /= 10, i++ );

              // Overflow?
              if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

                  // Infinity.
                  n.c = n.e = null;

              // Underflow?
              } else if ( e < MIN_EXP ) {

                  // Zero.
                  n.c = [ n.e = 0 ];
              } else {
                  n.e = e;
                  n.c = c;
              }

              return n;
          }


          // Handle values that fail the validity test in BigNumber.
          parseNumeric = (function () {
              var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                  dotAfter = /^([^.]+)\.$/,
                  dotBefore = /^\.([^.]+)$/,
                  isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                  whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

              return function ( x, str, isNum, b ) {
                  var base,
                      s = isNum ? str : str.replace( whitespaceOrPlus, '' );

                  // No exception on ±Infinity or NaN.
                  if ( isInfinityOrNaN.test(s) ) {
                      x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                      x.c = x.e = null;
                  } else {
                      if ( !isNum ) {

                          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                          s = s.replace( basePrefix, function ( m, p1, p2 ) {
                              base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                              return !b || b == base ? p1 : m;
                          });

                          if (b) {
                              base = b;

                              // E.g. '1.' to '1', '.1' to '0.1'
                              s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
                          }

                          if ( str != s ) return new BigNumber( s, base );
                      }

                      // '[BigNumber Error] Not a number: {n}'
                      // '[BigNumber Error] Not a base {b} number: {n}'
                      throw Error
                        ( bignumberError + 'Not a' + ( b ? ' base ' + b : '' ) + ' number: ' + str );
                  }
              }
          })();


          /*
           * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
           * If r is truthy, it is known that there are more digits after the rounding digit.
           */
          function round( x, sd, rm, r ) {
              var d, i, j, k, n, ni, rd,
                  xc = x.c,
                  pows10 = POWS_TEN;

              // if x is not Infinity or NaN...
              if (xc) {

                  // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                  // n is a base 1e14 number, the value of the element of array x.c containing rd.
                  // ni is the index of n within x.c.
                  // d is the number of digits of n.
                  // i is the index of rd within n including leading zeros.
                  // j is the actual index of rd within n (if < 0, rd is a leading zero).
                  out: {

                      // Get the number of digits of the first element of xc.
                      for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
                      i = sd - d;

                      // If the rounding digit is in the first element of xc...
                      if ( i < 0 ) {
                          i += LOG_BASE;
                          j = sd;
                          n = xc[ ni = 0 ];

                          // Get the rounding digit at index j of n.
                          rd = n / pows10[ d - j - 1 ] % 10 | 0;
                      } else {
                          ni = mathceil( ( i + 1 ) / LOG_BASE );

                          if ( ni >= xc.length ) {

                              if (r) {

                                  // Needed by sqrt.
                                  for ( ; xc.length <= ni; xc.push(0) );
                                  n = rd = 0;
                                  d = 1;
                                  i %= LOG_BASE;
                                  j = i - LOG_BASE + 1;
                              } else {
                                  break out;
                              }
                          } else {
                              n = k = xc[ni];

                              // Get the number of digits of n.
                              for ( d = 1; k >= 10; k /= 10, d++ );

                              // Get the index of rd within n.
                              i %= LOG_BASE;

                              // Get the index of rd within n, adjusted for leading zeros.
                              // The number of leading zeros of n is given by LOG_BASE - d.
                              j = i - LOG_BASE + d;

                              // Get the rounding digit at index j of n.
                              rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
                          }
                      }

                      r = r || sd < 0 ||

                      // Are there any non-zero digits after the rounding digit?
                      // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                      // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                        xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

                      r = rm < 4
                        ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                        : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

                          // Check whether the digit to the left of the rounding digit is odd.
                          ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
                            rm == ( x.s < 0 ? 8 : 7 ) );

                      if ( sd < 1 || !xc[0] ) {
                          xc.length = 0;

                          if (r) {

                              // Convert sd to decimal places.
                              sd -= x.e + 1;

                              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                              xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];
                              x.e = -sd || 0;
                          } else {

                              // Zero.
                              xc[0] = x.e = 0;
                          }

                          return x;
                      }

                      // Remove excess digits.
                      if ( i == 0 ) {
                          xc.length = ni;
                          k = 1;
                          ni--;
                      } else {
                          xc.length = ni + 1;
                          k = pows10[ LOG_BASE - i ];

                          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                          // j > 0 means i > number of leading zeros of n.
                          xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
                      }

                      // Round up?
                      if (r) {

                          for ( ; ; ) {

                              // If the digit to be rounded up is in the first element of xc...
                              if ( ni == 0 ) {

                                  // i will be the length of xc[0] before k is added.
                                  for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
                                  j = xc[0] += k;
                                  for ( k = 1; j >= 10; j /= 10, k++ );

                                  // if i != k the length has increased.
                                  if ( i != k ) {
                                      x.e++;
                                      if ( xc[0] == BASE ) xc[0] = 1;
                                  }

                                  break;
                              } else {
                                  xc[ni] += k;
                                  if ( xc[ni] != BASE ) break;
                                  xc[ni--] = 0;
                                  k = 1;
                              }
                          }
                      }

                      // Remove trailing zeros.
                      for ( i = xc.length; xc[--i] === 0; xc.pop() );
                  }

                  // Overflow? Infinity.
                  if ( x.e > MAX_EXP ) {
                      x.c = x.e = null;

                  // Underflow? Zero.
                  } else if ( x.e < MIN_EXP ) {
                      x.c = [ x.e = 0 ];
                  }
              }

              return x;
          }


          // PROTOTYPE/INSTANCE METHODS


          /*
           * Return a new BigNumber whose value is the absolute value of this BigNumber.
           */
          P.absoluteValue = P.abs = function () {
              var x = new BigNumber(this);
              if ( x.s < 0 ) x.s = 1;
              return x;
          };


          /*
           * Return
           *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
           *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
           *   0 if they have the same value,
           *   or null if the value of either is NaN.
           */
          P.comparedTo = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) );
          };


          /*
           * If dp is undefined or null or true or false, return the number of decimal places of the
           * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
           *
           * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
           * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
           * ROUNDING_MODE if rm is omitted.
           *
           * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.decimalPlaces = P.dp = function ( dp, rm ) {
              var c, n, v,
                  x = this;

              if ( dp != null ) {
                  intCheck( dp, 0, MAX );
                  if ( rm == null ) rm = ROUNDING_MODE;
                  else intCheck( rm, 0, 8 );

                  return round( new BigNumber(x), dp + x.e + 1, rm );
              }

              if ( !( c = x.c ) ) return null;
              n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

              // Subtract the number of trailing zeros of the last number.
              if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
              if ( n < 0 ) n = 0;

              return n;
          };


          /*
           *  n / 0 = I
           *  n / N = N
           *  n / I = 0
           *  0 / n = 0
           *  0 / 0 = N
           *  0 / N = N
           *  0 / I = 0
           *  N / n = N
           *  N / 0 = N
           *  N / N = N
           *  N / I = N
           *  I / n = I
           *  I / 0 = I
           *  I / N = N
           *  I / I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
           * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.dividedBy = P.div = function ( y, b ) {
              return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
          };


          /*
           * Return a new BigNumber whose value is the integer part of dividing the value of this
           * BigNumber by the value of BigNumber(y, b).
           */
          P.dividedToIntegerBy = P.idiv = function ( y, b ) {
              return div( this, new BigNumber( y, b ), 0, 1 );
          };


          /*
           * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isEqualTo = P.eq = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) ) === 0;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
           * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
           */
          P.integerValue = function (rm) {
              var n = new BigNumber(this);
              if ( rm == null ) rm = ROUNDING_MODE;
              else intCheck( rm, 0, 8 );
              return round( n, n.e + 1, rm );
          };


          /*
           * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isGreaterThan = P.gt = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) ) > 0;
          };


          /*
           * Return true if the value of this BigNumber is greater than or equal to the value of
           * BigNumber(y, b), otherwise return false.
           */
          P.isGreaterThanOrEqualTo = P.gte = function ( y, b ) {
              return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

          };


          /*
           * Return true if the value of this BigNumber is a finite number, otherwise return false.
           */
          P.isFinite = function () {
              return !!this.c;
          };


          /*
           * Return true if the value of this BigNumber is an integer, otherwise return false.
           */
          P.isInteger = function () {
              return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
          };


          /*
           * Return true if the value of this BigNumber is NaN, otherwise return false.
           */
          P.isNaN = function () {
              return !this.s;
          };


          /*
           * Return true if the value of this BigNumber is negative, otherwise return false.
           */
          P.isNegative = function () {
              return this.s < 0;
          };


          /*
           * Return true if the value of this BigNumber is positive, otherwise return false.
           */
          P.isPositive = function () {
              return this.s > 0;
          };


          /*
           * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
           */
          P.isZero = function () {
              return !!this.c && this.c[0] == 0;
          };


          /*
           * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
           * otherwise return false.
           */
          P.isLessThan = P.lt = function ( y, b ) {
              return compare( this, new BigNumber( y, b ) ) < 0;
          };


          /*
           * Return true if the value of this BigNumber is less than or equal to the value of
           * BigNumber(y, b), otherwise return false.
           */
          P.isLessThanOrEqualTo = P.lte = function ( y, b ) {
              return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
          };


          /*
           *  n - 0 = n
           *  n - N = N
           *  n - I = -I
           *  0 - n = -n
           *  0 - 0 = 0
           *  0 - N = N
           *  0 - I = -I
           *  N - n = N
           *  N - 0 = N
           *  N - N = N
           *  N - I = N
           *  I - n = I
           *  I - 0 = I
           *  I - N = N
           *  I - I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber minus the value of
           * BigNumber(y, b).
           */
          P.minus = function ( y, b ) {
              var i, j, t, xLTy,
                  x = this,
                  a = x.s;

              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
              if ( a != b ) {
                  y.s = -b;
                  return x.plus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Either Infinity?
                  if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

                  // Either zero?
                  if ( !xc[0] || !yc[0] ) {

                      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                      return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                        ROUNDING_MODE == 3 ? -0 : 0 );
                  }
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Determine which is the bigger number.
              if ( a = xe - ye ) {

                  if ( xLTy = a < 0 ) {
                      a = -a;
                      t = xc;
                  } else {
                      ye = xe;
                      t = yc;
                  }

                  t.reverse();

                  // Prepend zeros to equalise exponents.
                  for ( b = a; b--; t.push(0) );
                  t.reverse();
              } else {

                  // Exponents equal. Check digit by digit.
                  j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

                  for ( a = b = 0; b < j; b++ ) {

                      if ( xc[b] != yc[b] ) {
                          xLTy = xc[b] < yc[b];
                          break;
                      }
                  }
              }

              // x < y? Point xc to the array of the bigger number.
              if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

              b = ( j = yc.length ) - ( i = xc.length );

              // Append zeros to xc if shorter.
              // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
              if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
              b = BASE - 1;

              // Subtract yc from xc.
              for ( ; j > a; ) {

                  if ( xc[--j] < yc[j] ) {
                      for ( i = j; i && !xc[--i]; xc[i] = b );
                      --xc[i];
                      xc[j] += BASE;
                  }

                  xc[j] -= yc[j];
              }

              // Remove leading zeros and adjust exponent accordingly.
              for ( ; xc[0] == 0; xc.splice(0, 1), --ye );

              // Zero?
              if ( !xc[0] ) {

                  // Following IEEE 754 (2008) 6.3,
                  // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                  y.s = ROUNDING_MODE == 3 ? -1 : 1;
                  y.c = [ y.e = 0 ];
                  return y;
              }

              // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
              // for finite x and y.
              return normalise( y, xc, ye );
          };


          /*
           *   n % 0 =  N
           *   n % N =  N
           *   n % I =  n
           *   0 % n =  0
           *  -0 % n = -0
           *   0 % 0 =  N
           *   0 % N =  N
           *   0 % I =  0
           *   N % n =  N
           *   N % 0 =  N
           *   N % N =  N
           *   N % I =  N
           *   I % n =  N
           *   I % 0 =  N
           *   I % N =  N
           *   I % I =  N
           *
           * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
           * BigNumber(y, b). The result depends on the value of MODULO_MODE.
           */
          P.modulo = P.mod = function ( y, b ) {
              var q, s,
                  x = this;

              y = new BigNumber( y, b );

              // Return NaN if x is Infinity or NaN, or y is NaN or zero.
              if ( !x.c || !y.s || y.c && !y.c[0] ) {
                  return new BigNumber(NaN);

              // Return x if y is Infinity or x is zero.
              } else if ( !y.c || x.c && !x.c[0] ) {
                  return new BigNumber(x);
              }

              if ( MODULO_MODE == 9 ) {

                  // Euclidian division: q = sign(y) * floor(x / abs(y))
                  // r = x - qy    where  0 <= r < abs(y)
                  s = y.s;
                  y.s = 1;
                  q = div( x, y, 0, 3 );
                  y.s = s;
                  q.s *= s;
              } else {
                  q = div( x, y, 0, MODULO_MODE );
              }

              return x.minus( q.times(y) );
          };


          /*
           *  n * 0 = 0
           *  n * N = N
           *  n * I = I
           *  0 * n = 0
           *  0 * 0 = 0
           *  0 * N = N
           *  0 * I = N
           *  N * n = N
           *  N * 0 = N
           *  N * N = N
           *  N * I = N
           *  I * n = I
           *  I * 0 = N
           *  I * N = N
           *  I * I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
           * of BigNumber(y, b).
           */
          P.multipliedBy = P.times = function ( y, b ) {
              var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                  base, sqrtBase,
                  x = this,
                  xc = x.c,
                  yc = ( y = new BigNumber( y, b ) ).c;

              // Either NaN, ±Infinity or ±0?
              if ( !xc || !yc || !xc[0] || !yc[0] ) {

                  // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                  if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
                      y.c = y.e = y.s = null;
                  } else {
                      y.s *= x.s;

                      // Return ±Infinity if either is ±Infinity.
                      if ( !xc || !yc ) {
                          y.c = y.e = null;

                      // Return ±0 if either is ±0.
                      } else {
                          y.c = [0];
                          y.e = 0;
                      }
                  }

                  return y;
              }

              e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
              y.s *= x.s;
              xcL = xc.length;
              ycL = yc.length;

              // Ensure xc points to longer array and xcL to its length.
              if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

              // Initialise the result array with zeros.
              for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

              base = BASE;
              sqrtBase = SQRT_BASE;

              for ( i = ycL; --i >= 0; ) {
                  c = 0;
                  ylo = yc[i] % sqrtBase;
                  yhi = yc[i] / sqrtBase | 0;

                  for ( k = xcL, j = i + k; j > i; ) {
                      xlo = xc[--k] % sqrtBase;
                      xhi = xc[k] / sqrtBase | 0;
                      m = yhi * xlo + xhi * ylo;
                      xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
                      c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
                      zc[j--] = xlo % base;
                  }

                  zc[j] = c;
              }

              if (c) {
                  ++e;
              } else {
                  zc.splice(0, 1);
              }

              return normalise( y, zc, e );
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber negated,
           * i.e. multiplied by -1.
           */
          P.negated = function () {
              var x = new BigNumber(this);
              x.s = -x.s || null;
              return x;
          };


          /*
           *  n + 0 = n
           *  n + N = N
           *  n + I = I
           *  0 + n = n
           *  0 + 0 = 0
           *  0 + N = N
           *  0 + I = I
           *  N + n = N
           *  N + 0 = N
           *  N + N = N
           *  N + I = N
           *  I + n = I
           *  I + 0 = I
           *  I + N = N
           *  I + I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber plus the value of
           * BigNumber(y, b).
           */
          P.plus = function ( y, b ) {
              var t,
                  x = this,
                  a = x.s;

              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
               if ( a != b ) {
                  y.s = -b;
                  return x.minus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Return ±Infinity if either ±Infinity.
                  if ( !xc || !yc ) return new BigNumber( a / 0 );

                  // Either zero?
                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
              if ( a = xe - ye ) {
                  if ( a > 0 ) {
                      ye = xe;
                      t = yc;
                  } else {
                      a = -a;
                      t = xc;
                  }

                  t.reverse();
                  for ( ; a--; t.push(0) );
                  t.reverse();
              }

              a = xc.length;
              b = yc.length;

              // Point xc to the longer array, and b to the shorter length.
              if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

              // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
              for ( a = 0; b; ) {
                  a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
                  xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
              }

              if (a) {
                  xc = [a].concat(xc);
                  ++ye;
              }

              // No need to check for zero, as +x + +y != 0 && -x + -y != 0
              // ye = MAX_EXP + 1 possible
              return normalise( y, xc, ye );
          };


          /*
           * If sd is undefined or null or true or false, return the number of significant digits of
           * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
           * If sd is true include integer-part trailing zeros in the count.
           *
           * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
           * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
           * ROUNDING_MODE if rm is omitted.
           *
           * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
           *                     boolean: whether to count integer-part trailing zeros: true or false.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
           */
          P.precision = P.sd = function ( sd, rm ) {
              var c, n, v,
                  x = this;

              if ( sd != null && sd !== !!sd ) {
                  intCheck( sd, 1, MAX );
                  if ( rm == null ) rm = ROUNDING_MODE;
                  else intCheck( rm, 0, 8 );

                  return round( new BigNumber(x), sd, rm );
              }

              if ( !( c = x.c ) ) return null;
              v = c.length - 1;
              n = v * LOG_BASE + 1;

              if ( v = c[v] ) {

                  // Subtract the number of trailing zeros of the last element.
                  for ( ; v % 10 == 0; v /= 10, n-- );

                  // Add the number of digits of the first element.
                  for ( v = c[0]; v >= 10; v /= 10, n++ );
              }

              if ( sd && x.e + 1 > n ) n = x.e + 1;

              return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
           * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
           *
           * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
           */
          P.shiftedBy = function (k) {
              intCheck( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER );
              return this.times( '1e' + k );
          };


          /*
           *  sqrt(-n) =  N
           *  sqrt( N) =  N
           *  sqrt(-I) =  N
           *  sqrt( I) =  I
           *  sqrt( 0) =  0
           *  sqrt(-0) = -0
           *
           * Return a new BigNumber whose value is the square root of the value of this BigNumber,
           * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.squareRoot = P.sqrt = function () {
              var m, n, r, rep, t,
                  x = this,
                  c = x.c,
                  s = x.s,
                  e = x.e,
                  dp = DECIMAL_PLACES + 4,
                  half = new BigNumber('0.5');

              // Negative/NaN/Infinity/zero?
              if ( s !== 1 || !c || !c[0] ) {
                  return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
              }

              // Initial estimate.
              s = Math.sqrt( +x );

              // Math.sqrt underflow/overflow?
              // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
              if ( s == 0 || s == 1 / 0 ) {
                  n = coeffToString(c);
                  if ( ( n.length + e ) % 2 == 0 ) n += '0';
                  s = Math.sqrt(n);
                  e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

                  if ( s == 1 / 0 ) {
                      n = '1e' + e;
                  } else {
                      n = s.toExponential();
                      n = n.slice( 0, n.indexOf('e') + 1 ) + e;
                  }

                  r = new BigNumber(n);
              } else {
                  r = new BigNumber( s + '' );
              }

              // Check for zero.
              // r could be zero if MIN_EXP is changed after the this value was created.
              // This would cause a division by zero (x/t) and hence Infinity below, which would cause
              // coeffToString to throw.
              if ( r.c[0] ) {
                  e = r.e;
                  s = e + dp;
                  if ( s < 3 ) s = 0;

                  // Newton-Raphson iteration.
                  for ( ; ; ) {
                      t = r;
                      r = half.times( t.plus( div( x, t, dp, 1 ) ) );

                      if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
                           coeffToString( r.c ) ).slice( 0, s ) ) {

                          // The exponent of r may here be one less than the final result exponent,
                          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                          // are indexed correctly.
                          if ( r.e < e ) --s;
                          n = n.slice( s - 3, s + 1 );

                          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                          // iteration.
                          if ( n == '9999' || !rep && n == '4999' ) {

                              // On the first iteration only, check to see if rounding up gives the
                              // exact result as the nines may infinitely repeat.
                              if ( !rep ) {
                                  round( t, t.e + DECIMAL_PLACES + 2, 0 );

                                  if ( t.times(t).eq(x) ) {
                                      r = t;
                                      break;
                                  }
                              }

                              dp += 4;
                              s += 4;
                              rep = 1;
                          } else {

                              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                              // result. If not, then there are further digits and m will be truthy.
                              if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                                  // Truncate to the first rounding digit.
                                  round( r, r.e + DECIMAL_PLACES + 2, 1 );
                                  m = !r.times(r).eq(x);
                              }

                              break;
                          }
                      }
                  }
              }

              return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
          };


          /*
           * Return a string representing the value of this BigNumber in exponential notation and
           * rounded using ROUNDING_MODE to dp fixed decimal places.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toExponential = function ( dp, rm ) {
              if ( dp != null ) {
                  intCheck( dp, 0, MAX );
                  dp++;
              }
              return format( this, dp, rm, 1 );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounding
           * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
           * but e.g. (-0.00001).toFixed(0) is '-0'.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toFixed = function ( dp, rm ) {
              if ( dp != null ) {
                  intCheck( dp, 0, MAX );
                  dp = dp + this.e + 1;
              }
              return format( this, dp, rm );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounded
           * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
           * of the FORMAT object (see BigNumber.set).
           *
           * FORMAT = {
           *      decimalSeparator : '.',
           *      groupSeparator : ',',
           *      groupSize : 3,
           *      secondaryGroupSize : 0,
           *      fractionGroupSeparator : '\xA0',    // non-breaking space
           *      fractionGroupSize : 0
           * };
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
           */
          P.toFormat = function ( dp, rm ) {
              var str = this.toFixed( dp, rm );

              if ( this.c ) {
                  var i,
                      arr = str.split('.'),
                      g1 = +FORMAT.groupSize,
                      g2 = +FORMAT.secondaryGroupSize,
                      groupSeparator = FORMAT.groupSeparator,
                      intPart = arr[0],
                      fractionPart = arr[1],
                      isNeg = this.s < 0,
                      intDigits = isNeg ? intPart.slice(1) : intPart,
                      len = intDigits.length;

                  if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                  if ( g1 > 0 && len > 0 ) {
                      i = len % g1 || g1;
                      intPart = intDigits.substr( 0, i );

                      for ( ; i < len; i += g1 ) {
                          intPart += groupSeparator + intDigits.substr( i, g1 );
                      }

                      if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
                      if (isNeg) intPart = '-' + intPart;
                  }

                  str = fractionPart
                    ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
                      ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                        '$&' + FORMAT.fractionGroupSeparator )
                      : fractionPart )
                    : intPart;
              }

              return str;
          };


          /*
           * Return a string array representing the value of this BigNumber as a simple fraction with
           * an integer numerator and an integer denominator. The denominator will be a positive
           * non-zero value less than or equal to the specified maximum denominator. If a maximum
           * denominator is not specified, the denominator will be the lowest value necessary to
           * represent the number exactly.
           *
           * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
           *
           * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
           */
          P.toFraction = function (md) {
              var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
                  x = this,
                  xc = x.c;

              if ( md != null ) {
                  n = new BigNumber(md);

                  if ( !n.isInteger() || n.lt(ONE) ) {
                      throw Error
                        ( bignumberError + 'Argument ' +
                          ( n.isInteger() ? 'out of range: ' : 'not an integer: ' ) + md );
                  }
              }

              if ( !xc ) return x.toString();

              d = new BigNumber(ONE);
              n1 = d0 = new BigNumber(ONE);
              d1 = n0 = new BigNumber(ONE);
              s = coeffToString(xc);

              // Determine initial denominator.
              // d is a power of 10 and the minimum max denominator that specifies the value exactly.
              e = d.e = s.length - x.e - 1;
              d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
              md = !md || n.comparedTo(d) > 0 ? ( e > 0 ? d : n1 ) : n;

              exp = MAX_EXP;
              MAX_EXP = 1 / 0;
              n = new BigNumber(s);

              // n0 = d1 = 0
              n0.c[0] = 0;

              for ( ; ; )  {
                  q = div( n, d, 0, 1 );
                  d2 = d0.plus( q.times(d1) );
                  if ( d2.comparedTo(md) == 1 ) break;
                  d0 = d1;
                  d1 = d2;
                  n1 = n0.plus( q.times( d2 = n1 ) );
                  n0 = d2;
                  d = n.minus( q.times( d2 = d ) );
                  n = d2;
              }

              d2 = div( md.minus(d0), d1, 0, 1 );
              n0 = n0.plus( d2.times(n1) );
              d0 = d0.plus( d2.times(d1) );
              n0.s = n1.s = x.s;
              e *= 2;

              // Determine which fraction is closer to x, n0/d0 or n1/d1
              arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().comparedTo(
                    div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
                      ? [ n1.toString(), d1.toString() ]
                      : [ n0.toString(), d0.toString() ];

              MAX_EXP = exp;
              return arr;
          };


          /*
           * Return the value of this BigNumber converted to a number primitive.
           */
          P.toNumber = function () {
              return +this;
          };


          /*
           * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
           *
           * If m is present, return the result modulo m.
           * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
           * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
           *
           * The modular power operation works efficiently when x, n, and m are positive integers,
           * otherwise it is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
           *
           * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           * [m] {number|string|BigNumber} The modulus.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {n}'
           *
           * Performs 54 loop iterations for n of 9007199254740991.
           */
          P.exponentiatedBy = P.pow = function ( n, m ) {
              var i, k, y, z,
                  x = this;

              intCheck( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER );
              if ( m != null ) m = new BigNumber(m);

              if (m) {
                  if ( n > 1 && x.gt(ONE) && x.isInteger() && m.gt(ONE) && m.isInteger() ) {
                      x = x.mod(m);
                  } else {
                      z = m;

                      // Nullify m so only a single mod operation is performed at the end.
                      m = null;
                  }
              } else if (POW_PRECISION) {

                  // Truncating each coefficient array to a length of k after each multiplication
                  // equates to truncating significant digits to POW_PRECISION + [28, 41],
                  // i.e. there will be a minimum of 28 guard digits retained.
                  //k = mathceil( POW_PRECISION / LOG_BASE + 1.5 );   // gives [9, 21] guard digits.
                  k = mathceil( POW_PRECISION / LOG_BASE + 2 );
              }

              y = new BigNumber(ONE);

              for ( i = mathfloor( n < 0 ? -n : n ); ; ) {
                  if ( i % 2 ) {
                      y = y.times(x);
                      if ( !y.c ) break;
                      if (k) {
                          if ( y.c.length > k ) y.c.length = k;
                      } else if (m) {
                          y = y.mod(m);
                      }
                  }

                  i = mathfloor( i / 2 );
                  if ( !i ) break;
                  x = x.times(x);
                  if (k) {
                      if ( x.c && x.c.length > k ) x.c.length = k;
                  } else if (m) {
                      x = x.mod(m);
                  }
              }

              if (m) return y;
              if ( n < 0 ) y = ONE.div(y);

              return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
          };


          /*
           * Return a string representing the value of this BigNumber rounded to sd significant digits
           * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
           * necessary to represent the integer part of the value in fixed-point notation, then use
           * exponential notation.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
           */
          P.toPrecision = function ( sd, rm ) {
              if ( sd != null ) intCheck( sd, 1, MAX );
              return format( this, sd, rm, 2 );
          };


          /*
           * Return a string representing the value of this BigNumber in base b, or base 10 if b is
           * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
           * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
           * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
           * TO_EXP_NEG, return exponential notation.
           *
           * [b] {number} Integer, 2 to ALPHABET.length inclusive.
           *
           * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
           */
          P.toString = function (b) {
              var str,
                  n = this,
                  s = n.s,
                  e = n.e;

              // Infinity or NaN?
              if ( e === null ) {

                  if (s) {
                      str = 'Infinity';
                      if ( s < 0 ) str = '-' + str;
                  } else {
                      str = 'NaN';
                  }
              } else {
                  str = coeffToString( n.c );

                  if ( b == null ) {
                      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                        ? toExponential( str, e )
                        : toFixedPoint( str, e, '0' );
                  } else {
                      intCheck( b, 2, ALPHABET.length, 'Base' );
                      str = convertBase( toFixedPoint( str, e, '0' ), 10, b, s, true );
                  }

                  if ( s < 0 && n.c[0] ) str = '-' + str;
              }

              return str;
          };


          /*
           * Return as toString, but do not accept a base argument, and include the minus sign for
           * negative zero.
           */
          P.valueOf = P.toJSON = function () {
              var str,
                  n = this,
                  e = n.e;

              if ( e === null ) return n.toString();

              str = coeffToString( n.c );

              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                  ? toExponential( str, e )
                  : toFixedPoint( str, e, '0' );

              return n.s < 0 ? '-' + str : str;
          };


          P._isBigNumber = true;

          if ( configObject != null ) BigNumber.set(configObject);

          return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS


      function bitFloor(n) {
          var i = n | 0;
          return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
          var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

          for ( ; i < j; ) {
              s = a[i++] + '';
              z = LOG_BASE - s.length;
              for ( ; z--; s = '0' + s );
              r += s;
          }

          // Determine trailing zeros.
          for ( j = r.length; r.charCodeAt(--j) === 48; );
          return r.slice( 0, j + 1 || 1 );
      }


      // Compare the value of BigNumbers x and y.
      function compare( x, y ) {
          var a, b,
              xc = x.c,
              yc = y.c,
              i = x.s,
              j = y.s,
              k = x.e,
              l = y.e;

          // Either NaN?
          if ( !i || !j ) return null;

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if ( a || b ) return a ? b ? 0 : -j : i;

          // Signs differ?
          if ( i != j ) return i;

          a = i < 0;
          b = k == l;

          // Either Infinity?
          if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

          // Compare exponents.
          if ( !b ) return k > l ^ a ? 1 : -1;

          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

          // Compare digit by digit.
          for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Check that n is a primitive number, an integer, and in range, otherwise throw.
       */
      function intCheck( n, min, max, name ) {
          if ( n < min || n > max || n !== ( n < 0 ? mathceil(n) : mathfloor(n) ) ) {
              throw Error
                ( bignumberError + ( name || 'Argument' ) + ( typeof n == 'number'
                    ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                    : ' not a primitive number: ' ) + n );
          }
      }


      function isArray(obj) {
          return Object.prototype.toString.call(obj) == '[object Array]';
      }


      function toExponential( str, e ) {
          return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
            ( e < 0 ? 'e' : 'e+' ) + e;
      }


      function toFixedPoint( str, e, z ) {
          var len, zs;

          // Negative exponent?
          if ( e < 0 ) {

              // Prepend zeros.
              for ( zs = z + '.'; ++e; zs += z );
              str = zs + str;

          // Positive exponent
          } else {
              len = str.length;

              // Append zeros.
              if ( ++e > len ) {
                  for ( zs = z, e -= len; --e; zs += z );
                  str += zs;
              } else if ( e < len ) {
                  str = str.slice( 0, e ) + '.' + str.slice(e);
              }
          }

          return str;
      }


      // EXPORT


      BigNumber = clone();
      BigNumber['default'] = BigNumber.BigNumber = BigNumber;


      // AMD.
      if ( typeof define == 'function' && define.amd ) {
          define( function () { return BigNumber; } );

      // Node.js and other environments that support module.exports.
      } else if ( typeof module != 'undefined' && module.exports ) {
          module.exports = BigNumber;

      // Browser.
      } else {
          if ( !globalObject ) {
              globalObject = typeof self != 'undefined' ? self : Function('return this')();
          }

          globalObject.BigNumber = BigNumber;
      }
  })(this);
  >>>>>>> 166c87ca4b742a787b341ec105aac1ca70bf776b

  },{}],158:[function(require,module,exports){
  // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
  // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  // NOTE: SIGHASH byte ignored AND restricted, truncate before use

  var Buffer = require('safe-buffer').Buffer

  function check (buffer) {
    if (buffer.length < 8) return false
    if (buffer.length > 72) return false
    if (buffer[0] !== 0x30) return false
    if (buffer[1] !== buffer.length - 2) return false
    if (buffer[2] !== 0x02) return false

    var lenR = buffer[3]
    if (lenR === 0) return false
    if (5 + lenR >= buffer.length) return false
    if (buffer[4 + lenR] !== 0x02) return false

    var lenS = buffer[5 + lenR]
    if (lenS === 0) return false
    if ((6 + lenR + lenS) !== buffer.length) return false

    if (buffer[4] & 0x80) return false
    if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false

    if (buffer[lenR + 6] & 0x80) return false
    if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
    return true
  }

  function decode (buffer) {
    if (buffer.length < 8) throw new Error('DER sequence length is too short')
    if (buffer.length > 72) throw new Error('DER sequence length is too long')
    if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
    if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
    if (buffer[2] !== 0x02) throw new Error('Expected DER integer')

    var lenR = buffer[3]
    if (lenR === 0) throw new Error('R length is zero')
    if (5 + lenR >= buffer.length) throw new Error('R length is too long')
    if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

    var lenS = buffer[5 + lenR]
    if (lenS === 0) throw new Error('S length is zero')
    if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')

    if (buffer[4] & 0x80) throw new Error('R value is negative')
    if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')

    if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
    if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

    // non-BIP66 - extract R, S values
    return {
      r: buffer.slice(4, 4 + lenR),
      s: buffer.slice(6 + lenR)
    }
  }

  /*
   * Expects r and s to be positive DER integers.
   *
   * The DER format uses the most significant bit as a sign bit (& 0x80).
   * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
   *
   * Examples:
   *
   *      0 =>     0x00
   *      1 =>     0x01
   *     -1 =>     0xff
   *    127 =>     0x7f
   *   -127 =>     0x81
   *    128 =>   0x0080
   *   -128 =>     0x80
   *    255 =>   0x00ff
   *   -255 =>   0xff01
   *  16300 =>   0x3fac
   * -16300 =>   0xc054
   *  62300 => 0x00f35c
   * -62300 => 0xff0ca4
  */
  function encode (r, s) {
    var lenR = r.length
    var lenS = s.length
    if (lenR === 0) throw new Error('R length is zero')
    if (lenS === 0) throw new Error('S length is zero')
    if (lenR > 33) throw new Error('R length is too long')
    if (lenS > 33) throw new Error('S length is too long')
    if (r[0] & 0x80) throw new Error('R value is negative')
    if (s[0] & 0x80) throw new Error('S value is negative')
    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

    var signature = Buffer.allocUnsafe(6 + lenR + lenS)

    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    signature[0] = 0x30
    signature[1] = signature.length - 2
    signature[2] = 0x02
    signature[3] = r.length
    r.copy(signature, 4)
    signature[4 + lenR] = 0x02
    signature[5 + lenR] = s.length
    s.copy(signature, 6 + lenR)

    return signature
  }

  module.exports = {
    check: check,
    decode: decode,
    encode: encode
  }

  },{"safe-buffer":454}],159:[function(require,module,exports){
  (function (module, exports) {
    'use strict';

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = require('buffer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(typeof module === 'undefined' || module, this);

  },{"buffer":162}],160:[function(require,module,exports){
  var r;

  module.exports = function rand(len) {
    if (!r)
      r = new Rand(null);

    return r.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }
  module.exports.Rand = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  // Emulate crypto API using randy
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);

    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };

  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };

    // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === 'object') {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker with no crypto support
    try {
      var crypto = require('crypto');
      if (typeof crypto.randomBytes !== 'function')
        throw new Error('Not supported');

      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {
    }
  }

  },{"crypto":162}],161:[function(require,module,exports){
  // Browser Request
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  // UMD HEADER START
  (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
          // AMD. Register as an anonymous module.
          define([], factory);
      } else if (typeof exports === 'object') {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like enviroments that support module.exports,
          // like Node.
          module.exports = factory();
      } else {
          // Browser globals (root is window)
          root.returnExports = factory();
    }
  }(this, function () {
  // UMD HEADER END

  var XHR = XMLHttpRequest
  if (!XHR) throw new Error('missing XMLHttpRequest')
  request.log = {
    'trace': noop, 'debug': noop, 'info': noop, 'warn': noop, 'error': noop
  }

  var DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes

  //
  // request
  //

  function request(options, callback) {
    // The entry-point to the API: prep the options object and pass the real work to run_xhr.
    if(typeof callback !== 'function')
      throw new Error('Bad callback given: ' + callback)

    if(!options)
      throw new Error('No options given')

    var options_onResponse = options.onResponse; // Save this for later.

    if(typeof options === 'string')
      options = {'uri':options};
    else
      options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.

    options.onResponse = options_onResponse // And put it back.

    if (options.verbose) request.log = getLogger();

    if(options.url) {
      options.uri = options.url;
      delete options.url;
    }

    if(!options.uri && options.uri !== "")
      throw new Error("options.uri is a required argument");

    if(typeof options.uri != "string")
      throw new Error("options.uri must be a string");

    var unsupported_options = ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect']
    for (var i = 0; i < unsupported_options.length; i++)
      if(options[ unsupported_options[i] ])
        throw new Error("options." + unsupported_options[i] + " is not supported")

    options.callback = callback
    options.method = options.method || 'GET';
    options.headers = options.headers || {};
    options.body    = options.body || null
    options.timeout = options.timeout || request.DEFAULT_TIMEOUT

    if(options.headers.host)
      throw new Error("Options.headers.host is not supported");

    if(options.json) {
      options.headers.accept = options.headers.accept || 'application/json'
      if(options.method !== 'GET')
        options.headers['content-type'] = 'application/json'

      if(typeof options.json !== 'boolean')
        options.body = JSON.stringify(options.json)
      else if(typeof options.body !== 'string')
        options.body = JSON.stringify(options.body)
    }

    //BEGIN QS Hack
    var serialize = function(obj) {
      var str = [];
      for(var p in obj)
        if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
        }
      return str.join("&");
    }

    if(options.qs){
      var qs = (typeof options.qs == 'string')? options.qs : serialize(options.qs);
      if(options.uri.indexOf('?') !== -1){ //no get params
          options.uri = options.uri+'&'+qs;
      }else{ //existing get params
          options.uri = options.uri+'?'+qs;
      }
    }
    //END QS Hack

    //BEGIN FORM Hack
    var multipart = function(obj) {
      //todo: support file type (useful?)
      var result = {};
      result.boundry = '-------------------------------'+Math.floor(Math.random()*1000000000);
      var lines = [];
      for(var p in obj){
          if (obj.hasOwnProperty(p)) {
              lines.push(
                  '--'+result.boundry+"\n"+
                  'Content-Disposition: form-data; name="'+p+'"'+"\n"+
                  "\n"+
                  obj[p]+"\n"
              );
          }
      }
      lines.push( '--'+result.boundry+'--' );
      result.body = lines.join('');
      result.length = result.body.length;
      result.type = 'multipart/form-data; boundary='+result.boundry;
      return result;
    }

    if(options.form){
      if(typeof options.form == 'string') throw('form name unsupported');
      if(options.method === 'POST'){
          var encoding = (options.encoding || 'application/x-www-form-urlencoded').toLowerCase();
          options.headers['content-type'] = encoding;
          switch(encoding){
              case 'application/x-www-form-urlencoded':
                  options.body = serialize(options.form).replace(/%20/g, "+");
                  break;
              case 'multipart/form-data':
                  var multi = multipart(options.form);
                  //options.headers['content-length'] = multi.length;
                  options.body = multi.body;
                  options.headers['content-type'] = multi.type;
                  break;
              default : throw new Error('unsupported encoding:'+encoding);
          }
      }
    }
    //END FORM Hack

    // If onResponse is boolean true, call back immediately when the response is known,
    // not when the full request is complete.
    options.onResponse = options.onResponse || noop
    if(options.onResponse === true) {
      options.onResponse = callback
      options.callback = noop
    }

    // XXX Browsers do not like this.
    //if(options.body)
    //  options.headers['content-length'] = options.body.length;

    // HTTP basic authentication
    if(!options.headers.authorization && options.auth)
      options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);

    return run_xhr(options)
  }

  var req_seq = 0
  function run_xhr(options) {
    var xhr = new XHR
      , timed_out = false
      , is_cors = is_crossDomain(options.uri)
      , supports_cors = ('withCredentials' in xhr)

    req_seq += 1
    xhr.seq_id = req_seq
    xhr.id = req_seq + ': ' + options.method + ' ' + options.uri
    xhr._id = xhr.id // I know I will type "_id" from habit all the time.

    if(is_cors && !supports_cors) {
      var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri)
      cors_err.cors = 'unsupported'
      return options.callback(cors_err, xhr)
    }

    xhr.timeoutTimer = setTimeout(too_late, options.timeout)
    function too_late() {
      timed_out = true
      var er = new Error('ETIMEDOUT')
      er.code = 'ETIMEDOUT'
      er.duration = options.timeout

      request.log.error('Timeout', { 'id':xhr._id, 'milliseconds':options.timeout })
      return options.callback(er, xhr)
    }

    // Some states can be skipped over, so remember what is still incomplete.
    var did = {'response':false, 'loading':false, 'end':false}

    xhr.onreadystatechange = on_state_change
    xhr.open(options.method, options.uri, true) // asynchronous
    if(is_cors)
      xhr.withCredentials = !! options.withCredentials
    xhr.send(options.body)
    return xhr

    function on_state_change(event) {
      if(timed_out)
        return request.log.debug('Ignoring timed out state change', {'state':xhr.readyState, 'id':xhr.id})

      request.log.debug('State change', {'state':xhr.readyState, 'id':xhr.id, 'timed_out':timed_out})

      if(xhr.readyState === XHR.OPENED) {
        request.log.debug('Request started', {'id':xhr.id})
        for (var key in options.headers)
          xhr.setRequestHeader(key, options.headers[key])
      }

      else if(xhr.readyState === XHR.HEADERS_RECEIVED)
        on_response()

      else if(xhr.readyState === XHR.LOADING) {
        on_response()
        on_loading()
      }

      else if(xhr.readyState === XHR.DONE) {
        on_response()
        on_loading()
        on_end()
      }
    }

    function on_response() {
      if(did.response)
        return

      did.response = true
      request.log.debug('Got response', {'id':xhr.id, 'status':xhr.status})
      clearTimeout(xhr.timeoutTimer)
      xhr.statusCode = xhr.status // Node request compatibility

      // Detect failed CORS requests.
      if(is_cors && xhr.statusCode == 0) {
        var cors_err = new Error('CORS request rejected: ' + options.uri)
        cors_err.cors = 'rejected'

        // Do not process this request further.
        did.loading = true
        did.end = true

        return options.callback(cors_err, xhr)
      }

      options.onResponse(null, xhr)
    }

    function on_loading() {
      if(did.loading)
        return

      did.loading = true
      request.log.debug('Response body loading', {'id':xhr.id})
      // TODO: Maybe simulate "data" events by watching xhr.responseText
    }

    function on_end() {
      if(did.end)
        return

      did.end = true
      request.log.debug('Request done', {'id':xhr.id})

      xhr.body = xhr.responseText
      if(options.json) {
        try        { xhr.body = JSON.parse(xhr.responseText) }
        catch (er) { return options.callback(er, xhr)        }
      }

      options.callback(null, xhr, xhr.body)
    }

  } // request

  request.withCredentials = false;
  request.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;

  //
  // defaults
  //

  request.defaults = function(options, requester) {
    var def = function (method) {
      var d = function (params, callback) {
        if(typeof params === 'string')
          params = {'uri': params};
        else {
          params = JSON.parse(JSON.stringify(params));
        }
        for (var i in options) {
          if (params[i] === undefined) params[i] = options[i]
        }
        return method(params, callback)
      }
      return d
    }
    var de = def(request)
    de.get = def(request.get)
    de.post = def(request.post)
    de.put = def(request.put)
    de.head = def(request.head)
    return de
  }

  //
  // HTTP method shortcuts
  //

  var shortcuts = [ 'get', 'put', 'post', 'head' ];
  shortcuts.forEach(function(shortcut) {
    var method = shortcut.toUpperCase();
    var func   = shortcut.toLowerCase();

    request[func] = function(opts) {
      if(typeof opts === 'string')
        opts = {'method':method, 'uri':opts};
      else {
        opts = JSON.parse(JSON.stringify(opts));
        opts.method = method;
      }

      var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));
      return request.apply(this, args);
    }
  })

  //
  // CouchDB shortcut
  //

  request.couch = function(options, callback) {
    if(typeof options === 'string')
      options = {'uri':options}

    // Just use the request API to do JSON.
    options.json = true
    if(options.body)
      options.json = options.body
    delete options.body

    callback = callback || noop

    var xhr = request(options, couch_handler)
    return xhr

    function couch_handler(er, resp, body) {
      if(er)
        return callback(er, resp, body)

      if((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {
        // The body is a Couch JSON object indicating the error.
        er = new Error('CouchDB error: ' + (body.error.reason || body.error.error))
        for (var key in body)
          er[key] = body[key]
        return callback(er, resp, body);
      }

      return callback(er, resp, body);
    }
  }

  //
  // Utility
  //

  function noop() {}

  function getLogger() {
    var logger = {}
      , levels = ['trace', 'debug', 'info', 'warn', 'error']
      , level, i

    for(i = 0; i < levels.length; i++) {
      level = levels[i]

      logger[level] = noop
      if(typeof console !== 'undefined' && console && console[level])
        logger[level] = formatted(console, level)
    }

    return logger
  }

  function formatted(obj, method) {
    return formatted_logger

    function formatted_logger(str, context) {
      if(typeof context === 'object')
        str += ' ' + JSON.stringify(context)

      return obj[method].call(obj, str)
    }
  }

  // Return whether a URL is a cross-domain request.
  function is_crossDomain(url) {
    var rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/

    // jQuery #8138, IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    var ajaxLocation
    try { ajaxLocation = location.href }
    catch (e) {
      // Use the href attribute of an A element since IE will modify it given document.location
      ajaxLocation = document.createElement( "a" );
      ajaxLocation.href = "";
      ajaxLocation = ajaxLocation.href;
    }

    var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
      , parts = rurl.exec(url.toLowerCase() )

    var result = !!(
      parts &&
      (  parts[1] != ajaxLocParts[1]
      || parts[2] != ajaxLocParts[2]
      || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))
      )
    )

    //console.debug('is_crossDomain('+url+') -> ' + result)
    return result
  }

  // MIT License from http://phpjs.org/functions/base64_encode:358
  function b64_enc (data) {
      // Encodes string using MIME base64 algorithm
      var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc="", tmp_arr = [];

      if (!data) {
          return data;
      }

      // assume utf8 data
      // data = this.utf8_encode(data+'');

      do { // pack three octets into four hexets
          o1 = data.charCodeAt(i++);
          o2 = data.charCodeAt(i++);
          o3 = data.charCodeAt(i++);

          bits = o1<<16 | o2<<8 | o3;

          h1 = bits>>18 & 0x3f;
          h2 = bits>>12 & 0x3f;
          h3 = bits>>6 & 0x3f;
          h4 = bits & 0x3f;

          // use hexets to index into b64, and append result to encoded string
          tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
      } while (i < data.length);

      enc = tmp_arr.join('');

      switch (data.length % 3) {
          case 1:
              enc = enc.slice(0, -2) + '==';
          break;
          case 2:
              enc = enc.slice(0, -1) + '=';
          break;
      }

      return enc;
  }
      return request;
  //UMD FOOTER START
  }));
  //UMD FOOTER END

  },{}],162:[function(require,module,exports){

  },{}],163:[function(require,module,exports){
  (function (Buffer){
  const Sha3 = require('js-sha3')

  const hashLengths = [ 224, 256, 384, 512 ]

  var hash = function (bitcount) {
    if (bitcount !== undefined && hashLengths.indexOf(bitcount) == -1)
      throw new Error('Unsupported hash length')
    this.content = []
    this.bitcount = bitcount ? 'keccak_' + bitcount : 'keccak_512'
  }

  hash.prototype.update = function (i) {
    if (Buffer.isBuffer(i))
      this.content.push(i)
    else if (typeof i === 'string')
      this.content.push(new Buffer(i))
    else
      throw new Error('Unsupported argument to update')
    return this
  }

  hash.prototype.digest = function (encoding) {
    var result = Sha3[this.bitcount](Buffer.concat(this.content))
    if (encoding === 'hex')
      return result
    else if (encoding === 'binary' || encoding === undefined)
      return new Buffer(result, 'hex').toString('binary')
    else
      throw new Error('Unsupported encoding for digest: ' + encoding)
  }

  module.exports = {
    SHA3Hash: hash
  }

  }).call(this,require("buffer").Buffer)
  },{"buffer":166,"js-sha3":164}],164:[function(require,module,exports){
  (function (global){
  /*
   * js-sha3 v0.3.1
   * https://github.com/emn178/js-sha3
   *
   * Copyright 2015, emn178@gmail.com
   *
   * Licensed under the MIT license:
   * http://www.opensource.org/licenses/MIT
   */
  ;(function(root, undefined) {
    'use strict';

    var NODE_JS = typeof(module) != 'undefined';
    if(NODE_JS) {
      root = global;
      if(root.JS_SHA3_TEST) {
        root.navigator = { userAgent: 'Chrome'};
      }
    }
    var CHROME = (root.JS_SHA3_TEST || !NODE_JS) && navigator.userAgent.indexOf('Chrome') != -1;
    var HEX_CHARS = '0123456789abcdef'.split('');
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
              0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
              2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
              2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
              2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

    var blocks = [], s = [];

    var keccak_224 = function(message) {
      return keccak(message, 224, KECCAK_PADDING);
    };

    var keccak_256 = function(message) {
      return keccak(message, 256, KECCAK_PADDING);
    };

    var keccak_384 = function(message) {
      return keccak(message, 384, KECCAK_PADDING);
    };

    var sha3_224 = function(message) {
      return keccak(message, 224, PADDING);
    };

    var sha3_256 = function(message) {
      return keccak(message, 256, PADDING);
    };

    var sha3_384 = function(message) {
      return keccak(message, 384, PADDING);
    };

    var sha3_512 = function(message) {
      return keccak(message, 512, PADDING);
    };

    var keccak = function(message, bits, padding) {
      var notString = typeof(message) != 'string';
      if(notString && message.constructor == root.ArrayBuffer) {
        message = new Uint8Array(message);
      }

      if(bits === undefined) {
        bits = 512;
        padding = KECCAK_PADDING;
      }

      var block, code, end = false, index = 0, start = 0, length = message.length,
          n, i, h, l, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      var blockCount = (1600 - bits * 2) / 32;
      var byteCount = blockCount * 4;

      for(i = 0;i < 50;++i) {
        s[i] = 0;
      }

      block = 0;
      do {
        blocks[0] = block;
        for(i = 1;i < blockCount + 1;++i) {
          blocks[i] = 0;
        }
        if(notString) {
          for (i = start;index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = start;index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        start = i - byteCount;
        if(index == length) {
          blocks[i >> 2] |= padding[i & 3];
          ++index;
        }
        block = blocks[blockCount];
        if(index > length && i < byteCount) {
          blocks[blockCount - 1] |= 0x80000000;
          end = true;
        }

        for(i = 0;i < blockCount;++i) {
          s[i] ^= blocks[i];
        }

        for(n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      } while(!end);

      var hex = '';
      if(CHROME) {
        b0 = s[0];
        b1 = s[1];
        b2 = s[2];
        b3 = s[3];
        b4 = s[4];
        b5 = s[5];
        b6 = s[6];
        b7 = s[7];
        b8 = s[8];
        b9 = s[9];
        b10 = s[10];
        b11 = s[11];
        b12 = s[12];
        b13 = s[13];
        b14 = s[14];
        b15 = s[15];
        hex += HEX_CHARS[(b0 >> 4) & 0x0F] + HEX_CHARS[b0 & 0x0F] +
               HEX_CHARS[(b0 >> 12) & 0x0F] + HEX_CHARS[(b0 >> 8) & 0x0F] +
               HEX_CHARS[(b0 >> 20) & 0x0F] + HEX_CHARS[(b0 >> 16) & 0x0F] +
               HEX_CHARS[(b0 >> 28) & 0x0F] + HEX_CHARS[(b0 >> 24) & 0x0F] +
               HEX_CHARS[(b1 >> 4) & 0x0F] + HEX_CHARS[b1 & 0x0F] +
               HEX_CHARS[(b1 >> 12) & 0x0F] + HEX_CHARS[(b1 >> 8) & 0x0F] +
               HEX_CHARS[(b1 >> 20) & 0x0F] + HEX_CHARS[(b1 >> 16) & 0x0F] +
               HEX_CHARS[(b1 >> 28) & 0x0F] + HEX_CHARS[(b1 >> 24) & 0x0F] +
               HEX_CHARS[(b2 >> 4) & 0x0F] + HEX_CHARS[b2 & 0x0F] +
               HEX_CHARS[(b2 >> 12) & 0x0F] + HEX_CHARS[(b2 >> 8) & 0x0F] +
               HEX_CHARS[(b2 >> 20) & 0x0F] + HEX_CHARS[(b2 >> 16) & 0x0F] +
               HEX_CHARS[(b2 >> 28) & 0x0F] + HEX_CHARS[(b2 >> 24) & 0x0F] +
               HEX_CHARS[(b3 >> 4) & 0x0F] + HEX_CHARS[b3 & 0x0F] +
               HEX_CHARS[(b3 >> 12) & 0x0F] + HEX_CHARS[(b3 >> 8) & 0x0F] +
               HEX_CHARS[(b3 >> 20) & 0x0F] + HEX_CHARS[(b3 >> 16) & 0x0F] +
               HEX_CHARS[(b3 >> 28) & 0x0F] + HEX_CHARS[(b3 >> 24) & 0x0F] +
               HEX_CHARS[(b4 >> 4) & 0x0F] + HEX_CHARS[b4 & 0x0F] +
               HEX_CHARS[(b4 >> 12) & 0x0F] + HEX_CHARS[(b4 >> 8) & 0x0F] +
               HEX_CHARS[(b4 >> 20) & 0x0F] + HEX_CHARS[(b4 >> 16) & 0x0F] +
               HEX_CHARS[(b4 >> 28) & 0x0F] + HEX_CHARS[(b4 >> 24) & 0x0F] +
               HEX_CHARS[(b5 >> 4) & 0x0F] + HEX_CHARS[b5 & 0x0F] +
               HEX_CHARS[(b5 >> 12) & 0x0F] + HEX_CHARS[(b5 >> 8) & 0x0F] +
               HEX_CHARS[(b5 >> 20) & 0x0F] + HEX_CHARS[(b5 >> 16) & 0x0F] +
               HEX_CHARS[(b5 >> 28) & 0x0F] + HEX_CHARS[(b5 >> 24) & 0x0F] +
               HEX_CHARS[(b6 >> 4) & 0x0F] + HEX_CHARS[b6 & 0x0F] +
               HEX_CHARS[(b6 >> 12) & 0x0F] + HEX_CHARS[(b6 >> 8) & 0x0F] +
               HEX_CHARS[(b6 >> 20) & 0x0F] + HEX_CHARS[(b6 >> 16) & 0x0F] +
               HEX_CHARS[(b6 >> 28) & 0x0F] + HEX_CHARS[(b6 >> 24) & 0x0F];

        if(bits >= 256) {
          hex += HEX_CHARS[(b7 >> 4) & 0x0F] + HEX_CHARS[b7 & 0x0F] +
                 HEX_CHARS[(b7 >> 12) & 0x0F] + HEX_CHARS[(b7 >> 8) & 0x0F] +
                 HEX_CHARS[(b7 >> 20) & 0x0F] + HEX_CHARS[(b7 >> 16) & 0x0F] +
                 HEX_CHARS[(b7 >> 28) & 0x0F] + HEX_CHARS[(b7 >> 24) & 0x0F];
        }
        if(bits >= 384) {
          hex += HEX_CHARS[(b8 >> 4) & 0x0F] + HEX_CHARS[b8 & 0x0F] +
                 HEX_CHARS[(b8 >> 12) & 0x0F] + HEX_CHARS[(b8 >> 8) & 0x0F] +
                 HEX_CHARS[(b8 >> 20) & 0x0F] + HEX_CHARS[(b8 >> 16) & 0x0F] +
                 HEX_CHARS[(b8 >> 28) & 0x0F] + HEX_CHARS[(b8 >> 24) & 0x0F] +
                 HEX_CHARS[(b9 >> 4) & 0x0F] + HEX_CHARS[b9 & 0x0F] +
                 HEX_CHARS[(b9 >> 12) & 0x0F] + HEX_CHARS[(b9 >> 8) & 0x0F] +
                 HEX_CHARS[(b9 >> 20) & 0x0F] + HEX_CHARS[(b9 >> 16) & 0x0F] +
                 HEX_CHARS[(b9 >> 28) & 0x0F] + HEX_CHARS[(b9 >> 24) & 0x0F] +
                 HEX_CHARS[(b10 >> 4) & 0x0F] + HEX_CHARS[b10 & 0x0F] +
                 HEX_CHARS[(b10 >> 12) & 0x0F] + HEX_CHARS[(b10 >> 8) & 0x0F] +
                 HEX_CHARS[(b10 >> 20) & 0x0F] + HEX_CHARS[(b10 >> 16) & 0x0F] +
                 HEX_CHARS[(b10 >> 28) & 0x0F] + HEX_CHARS[(b10 >> 24) & 0x0F] +
                 HEX_CHARS[(b11 >> 4) & 0x0F] + HEX_CHARS[b11 & 0x0F] +
                 HEX_CHARS[(b11 >> 12) & 0x0F] + HEX_CHARS[(b11 >> 8) & 0x0F] +
                 HEX_CHARS[(b11 >> 20) & 0x0F] + HEX_CHARS[(b11 >> 16) & 0x0F] +
                 HEX_CHARS[(b11 >> 28) & 0x0F] + HEX_CHARS[(b11 >> 24) & 0x0F];
        }
        if(bits == 512) {
          hex += HEX_CHARS[(b12 >> 4) & 0x0F] + HEX_CHARS[b12 & 0x0F] +
                 HEX_CHARS[(b12 >> 12) & 0x0F] + HEX_CHARS[(b12 >> 8) & 0x0F] +
                 HEX_CHARS[(b12 >> 20) & 0x0F] + HEX_CHARS[(b12 >> 16) & 0x0F] +
                 HEX_CHARS[(b12 >> 28) & 0x0F] + HEX_CHARS[(b12 >> 24) & 0x0F] +
                 HEX_CHARS[(b13 >> 4) & 0x0F] + HEX_CHARS[b13 & 0x0F] +
                 HEX_CHARS[(b13 >> 12) & 0x0F] + HEX_CHARS[(b13 >> 8) & 0x0F] +
                 HEX_CHARS[(b13 >> 20) & 0x0F] + HEX_CHARS[(b13 >> 16) & 0x0F] +
                 HEX_CHARS[(b13 >> 28) & 0x0F] + HEX_CHARS[(b13 >> 24) & 0x0F] +
                 HEX_CHARS[(b14 >> 4) & 0x0F] + HEX_CHARS[b14 & 0x0F] +
                 HEX_CHARS[(b14 >> 12) & 0x0F] + HEX_CHARS[(b14 >> 8) & 0x0F] +
                 HEX_CHARS[(b14 >> 20) & 0x0F] + HEX_CHARS[(b14 >> 16) & 0x0F] +
                 HEX_CHARS[(b14 >> 28) & 0x0F] + HEX_CHARS[(b14 >> 24) & 0x0F] +
                 HEX_CHARS[(b15 >> 4) & 0x0F] + HEX_CHARS[b15 & 0x0F] +
                 HEX_CHARS[(b15 >> 12) & 0x0F] + HEX_CHARS[(b15 >> 8) & 0x0F] +
                 HEX_CHARS[(b15 >> 20) & 0x0F] + HEX_CHARS[(b15 >> 16) & 0x0F] +
                 HEX_CHARS[(b15 >> 28) & 0x0F] + HEX_CHARS[(b15 >> 24) & 0x0F];
        }
      } else {
        for(i = 0, n = bits / 32;i < n;++i) {
          h = s[i];
          hex += HEX_CHARS[(h >> 4) & 0x0F] + HEX_CHARS[h & 0x0F] +
                 HEX_CHARS[(h >> 12) & 0x0F] + HEX_CHARS[(h >> 8) & 0x0F] +
                 HEX_CHARS[(h >> 20) & 0x0F] + HEX_CHARS[(h >> 16) & 0x0F] +
                 HEX_CHARS[(h >> 28) & 0x0F] + HEX_CHARS[(h >> 24) & 0x0F];
        }
      }
      return hex;
    };

    if(!root.JS_SHA3_TEST && NODE_JS) {
      module.exports = {
        sha3_512: sha3_512,
        sha3_384: sha3_384,
        sha3_256: sha3_256,
        sha3_224: sha3_224,
        keccak_512: keccak,
        keccak_384: keccak_384,
        keccak_256: keccak_256,
        keccak_224: keccak_224
      };
    } else if(root) {
      root.sha3_512 = sha3_512;
      root.sha3_384 = sha3_384;
      root.sha3_256 = sha3_256;
      root.sha3_224 = sha3_224;
      root.keccak_512 = keccak;
      root.keccak_384 = keccak_384;
      root.keccak_256 = keccak_256;
      root.keccak_224 = keccak_224;
    }
  }(this));

  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],165:[function(require,module,exports){
  arguments[4][162][0].apply(exports,arguments)
  },{"dup":162}],166:[function(require,module,exports){
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict'

  var base64 = require('base64-js')
  var ieee754 = require('ieee754')

  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50

  var K_MAX_LENGTH = 0x7fffffff
  exports.kMaxLength = K_MAX_LENGTH

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
      typeof console.error === 'function') {
    console.error(
      'This browser lacks typed array (Uint8Array) support which is required by ' +
      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
    )
  }

  function typedArraySupport () {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1)
      arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
      return arr.foo() === 42
    } catch (e) {
      return false
    }
  }

  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.buffer
    }
  })

  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.byteOffset
    }
  })

  function createBuffer (length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"')
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length)
    buf.__proto__ = Buffer.prototype
    return buf
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        )
      }
      return allocUnsafe(arg)
    }
    return from(arg, encodingOrOffset, length)
  }

  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
  if (typeof Symbol !== 'undefined' && Symbol.species != null &&
      Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    })
  }

  Buffer.poolSize = 8192 // not used by this implementation

  function from (value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset)
    }

    if (ArrayBuffer.isView(value)) {
      return fromArrayLike(value)
    }

    if (value == null) {
      throw TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    if (isInstance(value, ArrayBuffer) ||
        (value && isInstance(value.buffer, ArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }

    if (typeof value === 'number') {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      )
    }

    var valueOf = value.valueOf && value.valueOf()
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length)
    }

    var b = fromObject(value)
    if (b) return b

    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
        typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(
        value[Symbol.toPrimitive]('string'), encodingOrOffset, length
      )
    }

    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length)
  }

  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number')
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
  }

  function alloc (size, fill, encoding) {
    assertSize(size)
    if (size <= 0) {
      return createBuffer(size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(size).fill(fill, encoding)
        : createBuffer(size).fill(fill)
    }
    return createBuffer(size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding)
  }

  function allocUnsafe (size) {
    assertSize(size)
    return createBuffer(size < 0 ? 0 : checked(size) | 0)
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size)
  }
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size)
  }

  function fromString (string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8'
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }

    var length = byteLength(string, encoding) | 0
    var buf = createBuffer(length)

    var actual = buf.write(string, encoding)

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual)
    }

    return buf
  }

  function fromArrayLike (array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0
    var buf = createBuffer(length)
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255
    }
    return buf
  }

  function fromArrayBuffer (array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds')
    }

    var buf
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array)
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset)
    } else {
      buf = new Uint8Array(array, byteOffset, length)
    }

    // Return an augmented `Uint8Array` instance
    buf.__proto__ = Buffer.prototype
    return buf
  }

  function fromObject (obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0
      var buf = createBuffer(len)

      if (buf.length === 0) {
        return buf
      }

      obj.copy(buf, 0, 0, len)
      return buf
    }

    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  function checked (length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0
    }
    return Buffer.alloc(+length)
  }

  Buffer.isBuffer = function isBuffer (b) {
    return b != null && b._isBuffer === true &&
      b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
  }

  Buffer.compare = function compare (a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      )
    }

    if (a === b) return 0

    var x = a.length
    var y = b.length

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i]
        y = b[i]
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }

  Buffer.concat = function concat (list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; ++i) {
        length += list[i].length
      }
    }

    var buffer = Buffer.allocUnsafe(length)
    var pos = 0
    for (i = 0; i < list.length; ++i) {
      var buf = list[i]
      if (isInstance(buf, Uint8Array)) {
        buf = Buffer.from(buf)
      }
      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos)
      pos += buf.length
    }
    return buffer
  }

  function byteLength (string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
        'Received type ' + typeof string
      )
    }

    var len = string.length
    var mustMatch = (arguments.length > 2 && arguments[2] === true)
    if (!mustMatch && len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
          }
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength

  function slowToString (encoding, start, end) {
    var loweredCase = false

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0
    start >>>= 0

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8'

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }

  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true

  function swap (b, n, m) {
    var i = b[n]
    b[n] = b[m]
    b[m] = i
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1)
    }
    return this
  }

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3)
      swap(this, i + 1, i + 2)
    }
    return this
  }

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7)
      swap(this, i + 1, i + 6)
      swap(this, i + 2, i + 5)
      swap(this, i + 3, i + 4)
    }
    return this
  }

  Buffer.prototype.toString = function toString () {
    var length = this.length
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }

  Buffer.prototype.toLocaleString = Buffer.prototype.toString

  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }

  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
    if (this.length > max) str += ' ... '
    return '<Buffer ' + str + '>'
  }

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength)
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. ' +
        'Received type ' + (typeof target)
      )
    }

    if (start === undefined) {
      start = 0
    }
    if (end === undefined) {
      end = target ? target.length : 0
    }
    if (thisStart === undefined) {
      thisStart = 0
    }
    if (thisEnd === undefined) {
      thisEnd = this.length
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0
    end >>>= 0
    thisStart >>>= 0
    thisEnd >>>= 0

    if (this === target) return 0

    var x = thisEnd - thisStart
    var y = end - start
    var len = Math.min(x, y)

    var thisCopy = this.slice(thisStart, thisEnd)
    var targetCopy = target.slice(start, end)

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i]
        y = targetCopy[i]
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset
      byteOffset = 0
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000
    }
    byteOffset = +byteOffset // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1)
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding)
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1
    var arrLength = arr.length
    var valLength = val.length

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase()
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2
        arrLength /= 2
        valLength /= 2
        byteOffset /= 2
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i
    if (dir) {
      var foundIndex = -1
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex
          foundIndex = -1
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
      for (i = byteOffset; i >= 0; i--) {
        var found = true
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  }

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  }

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  }

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }

    var strLen = string.length

    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (numberIsNaN(parsed)) return i
      buf[offset + i] = parsed
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0
      if (isFinite(length)) {
        length = length >>> 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8'

    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []

    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
            : 1

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }

      res.push(codePoint)
      i += bytesPerSequence
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length

    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len

    var out = ''
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i])
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end

    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }

    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }

    if (end < start) end = start

    var newBuf = this.subarray(start, end)
    // Return an augmented `Uint8Array` instance
    newBuf.__proto__ = Buffer.prototype
    return newBuf
  }

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }

    return val
  }

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }

    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }

    return val
  }

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }

  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }

    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }

    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    this[offset] = (value & 0xff)
    return offset + 1
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
    return offset + 4
  }

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = 0
    var mul = 1
    var sub = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = byteLength - 1
    var mul = 1
    var sub = 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
    return offset + 4
  }

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }

    var len = end - start

    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end)
    } else if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (var i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      )
    }

    return len
  }

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start
        start = 0
        end = this.length
      } else if (typeof end === 'string') {
        encoding = end
        end = this.length
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0)
        if ((encoding === 'utf8' && code < 128) ||
            encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0
    end = end === undefined ? this.length : end >>> 0

    if (!val) val = 0

    var i
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val
      }
    } else {
      var bytes = Buffer.isBuffer(val)
        ? val
        : Buffer.from(val, encoding)
      var len = bytes.length
      if (len === 0) {
        throw new TypeError('The value "' + val +
          '" is invalid for argument "value"')
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len]
      }
    }

    return this
  }

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

  function base64clean (str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0]
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i)

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }

          // valid lead
          leadSurrogate = codePoint

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }

      leadSurrogate = null

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }

    return byteArray
  }

  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }

  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance (obj, type) {
    return obj instanceof type ||
      (obj != null && obj.constructor != null && obj.constructor.name != null &&
        obj.constructor.name === type.name)
  }
  function numberIsNaN (obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
  }

  },{"base64-js":156,"ieee754":376}],167:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var objectCreate = Object.create || objectCreatePolyfill
  var objectKeys = Object.keys || objectKeysPolyfill
  var bind = Function.prototype.bind || functionBindPolyfill

  function EventEmitter() {
    if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
      this._events = objectCreate(null);
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;

  var hasDefineProperty;
  try {
    var o = {};
    if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
    hasDefineProperty = o.x === 0;
  } catch (err) { hasDefineProperty = false }
  if (hasDefineProperty) {
    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        // check whether the input is a positive number (whose value is zero or
        // greater and not a NaN).
        if (typeof arg !== 'number' || arg < 0 || arg !== arg)
          throw new TypeError('"defaultMaxListeners" must be a positive number');
        defaultMaxListeners = arg;
      }
    });
  } else {
    EventEmitter.defaultMaxListeners = defaultMaxListeners;
  }

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      if (arguments.length > 1)
        er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Unhandled "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
        // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
        // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = objectCreate(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
            listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
              existing.length + ' "' + String(type) + '" listeners ' +
              'added. Use emitter.setMaxListeners() to ' +
              'increase limit.');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          if (typeof console === 'object' && console.warn) {
            console.warn('%s: %s', w.name, w.message);
          }
        }
      }
    }

    return target;
  }

  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      switch (arguments.length) {
        case 0:
          return this.listener.call(this.target);
        case 1:
          return this.listener.call(this.target, arguments[0]);
        case 2:
          return this.listener.call(this.target, arguments[0], arguments[1]);
        case 3:
          return this.listener.call(this.target, arguments[0], arguments[1],
              arguments[2]);
        default:
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; ++i)
            args[i] = arguments[i];
          this.listener.apply(this.target, args);
      }
    }
  }

  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = bind.call(onceWrapper, state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else
            spliceOne(list, position);

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = objectCreate(null);
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = objectCreate(null);
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = objectKeys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = objectCreate(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

  function _listeners(target, type, unwrap) {
    var events = target._events;

    if (!events)
      return [];

    var evlistener = events[type];
    if (!evlistener)
      return [];

    if (typeof evlistener === 'function')
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];

    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }

  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };

  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  function objectCreatePolyfill(proto) {
    var F = function() {};
    F.prototype = proto;
    return new F;
  }
  function objectKeysPolyfill(obj) {
    var keys = [];
    for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
      keys.push(k);
    }
    return k;
  }
  function functionBindPolyfill(context) {
    var fn = this;
    return function () {
      return fn.apply(context, arguments);
    };
  }

  },{}],168:[function(require,module,exports){
  (function (setImmediate,clearImmediate){
  var nextTick = require('process/browser.js').nextTick;
  var apply = Function.prototype.apply;
  var slice = Array.prototype.slice;
  var immediateIds = {};
  var nextImmediateId = 0;

  // DOM APIs, for completeness

  exports.setTimeout = function() {
    return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
  };
  exports.setInterval = function() {
    return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
  };
  exports.clearTimeout =
  exports.clearInterval = function(timeout) { timeout.close(); };

  function Timeout(id, clearFn) {
    this._id = id;
    this._clearFn = clearFn;
  }
  Timeout.prototype.unref = Timeout.prototype.ref = function() {};
  Timeout.prototype.close = function() {
    this._clearFn.call(window, this._id);
  };

  // Does not start the time, just sets up the members needed.
  exports.enroll = function(item, msecs) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = msecs;
  };

  exports.unenroll = function(item) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = -1;
  };

  exports._unrefActive = exports.active = function(item) {
    clearTimeout(item._idleTimeoutId);

    var msecs = item._idleTimeout;
    if (msecs >= 0) {
      item._idleTimeoutId = setTimeout(function onTimeout() {
        if (item._onTimeout)
          item._onTimeout();
      }, msecs);
    }
  };

  // That's not how node.js implements it but the exposed api is the same.
  exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
    var id = nextImmediateId++;
    var args = arguments.length < 2 ? false : slice.call(arguments, 1);

    immediateIds[id] = true;

    nextTick(function onNextTick() {
      if (immediateIds[id]) {
        // fn.call() is faster so we optimize for the common use-case
        // @see http://jsperf.com/call-apply-segu
        if (args) {
          fn.apply(null, args);
        } else {
          fn.call(null);
        }
        // Prevent ids from leaking
        exports.clearImmediate(id);
      }
    });

    return id;
  };

  exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
    delete immediateIds[id];
  };
  }).call(this,require("timers").setImmediate,require("timers").clearImmediate)
  },{"process/browser.js":428,"timers":168}],169:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('stream').Transform
  var StringDecoder = require('string_decoder').StringDecoder
  var inherits = require('inherits')

  function CipherBase (hashMode) {
    Transform.call(this)
    this.hashMode = typeof hashMode === 'string'
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest
    } else {
      this.final = this._finalOrDigest
    }
    if (this._final) {
      this.__final = this._final
      this._final = null
    }
    this._decoder = null
    this._encoding = null
  }
  inherits(CipherBase, Transform)

  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer.from(data, inputEnc)
    }

    var outData = this._update(data)
    if (this.hashMode) return this

    if (outputEnc) {
      outData = this._toString(outData, outputEnc)
    }

    return outData
  }

  CipherBase.prototype.setAutoPadding = function () {}
  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  }

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  }

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  }

  CipherBase.prototype._transform = function (data, _, next) {
    var err
    try {
      if (this.hashMode) {
        this._update(data)
      } else {
        this.push(this._update(data))
      }
    } catch (e) {
      err = e
    } finally {
      next(err)
    }
  }
  CipherBase.prototype._flush = function (done) {
    var err
    try {
      this.push(this.__final())
    } catch (e) {
      err = e
    }

    done(err)
  }
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer.alloc(0)
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true)
    }
    return outData
  }

  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc)
      this._encoding = enc
    }

    if (this._encoding !== enc) throw new Error('can\'t switch encodings')

    var out = this._decoder.write(value)
    if (fin) {
      out += this._decoder.end()
    }

    return out
  }

  module.exports = CipherBase

  },{"inherits":379,"safe-buffer":454,"stream":505,"string_decoder":506}],170:[function(require,module,exports){
  (function (Buffer){
  var clone = (function() {
  'use strict';

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;
  try {
    nativeMap = Map;
  } catch(_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function() {};
  }

  var nativeSet;
  try {
    nativeSet = Set;
  } catch(_) {
    nativeSet = function() {};
  }

  var nativePromise;
  try {
    nativePromise = Promise;
  } catch(_) {
    nativePromise = function() {};
  }

  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */
  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    }
    // maintain two arrays for circular references, where corresponding parents
    // and children have the same index
    var allParents = [];
    var allChildren = [];

    var useBuffer = typeof Buffer != 'undefined';

    if (typeof circular == 'undefined')
      circular = true;

    if (typeof depth == 'undefined')
      depth = Infinity;

    // recurse this function so we don't reset allParents and allChildren
    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null)
        return null;

      if (depth === 0)
        return parent;

      var child;
      var proto;
      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function(value) {
            resolve(_clone(value, depth - 1));
          }, function(err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        child = new Buffer(parent.length);
        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        }
        else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }
        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function(value, key) {
          var keyChild = _clone(key, depth - 1);
          var valueChild = _clone(value, depth - 1);
          child.set(keyChild, valueChild);
        });
      }
      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function(value) {
          var entryChild = _clone(value, depth - 1);
          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;
        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }
        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);
        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }
          child[symbol] = _clone(parent[symbol], depth - 1);
          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);
        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
          if (descriptor && descriptor.enumerable) {
            continue;
          }
          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }

  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */
  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null)
      return null;

    var c = function () {};
    c.prototype = parent;
    return new c();
  };

  // private utility functions

  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }
  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }
  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }
  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }
  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }
  clone.__getRegExpFlags = __getRegExpFlags;

  return clone;
  })();

  if (typeof module === 'object' && module.exports) {
    module.exports = clone;
  }

  }).call(this,require("buffer").Buffer)
  },{"buffer":166}],171:[function(require,module,exports){
  (function (Buffer){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.

  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === '[object Array]';
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = Buffer.isBuffer;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
  },{"../../is-buffer/index.js":380}],172:[function(require,module,exports){
  'use strict'
  var inherits = require('inherits')
  var MD5 = require('md5.js')
  var RIPEMD160 = require('ripemd160')
  var sha = require('sha.js')
  var Base = require('cipher-base')

  function Hash (hash) {
    Base.call(this, 'digest')

    this._hash = hash
  }

  inherits(Hash, Base)

  Hash.prototype._update = function (data) {
    this._hash.update(data)
  }

  Hash.prototype._final = function () {
    return this._hash.digest()
  }

  module.exports = function createHash (alg) {
    alg = alg.toLowerCase()
    if (alg === 'md5') return new MD5()
    if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

    return new Hash(sha(alg))
  }

  },{"cipher-base":169,"inherits":379,"md5.js":423,"ripemd160":452,"sha.js":463}],173:[function(require,module,exports){
  'use strict';

  var assign        = require('es5-ext/object/assign')
    , normalizeOpts = require('es5-ext/object/normalize-options')
    , isCallable    = require('es5-ext/object/is-callable')
    , contains      = require('es5-ext/string/#/contains')

    , d;

  d = module.exports = function (dscr, value/*, options*/) {
    var c, e, w, options, desc;
    if ((arguments.length < 2) || (typeof dscr !== 'string')) {
      options = value;
      value = dscr;
      dscr = null;
    } else {
      options = arguments[2];
    }
    if (dscr == null) {
      c = w = true;
      e = false;
    } else {
      c = contains.call(dscr, 'c');
      e = contains.call(dscr, 'e');
      w = contains.call(dscr, 'w');
    }

    desc = { value: value, configurable: c, enumerable: e, writable: w };
    return !options ? desc : assign(normalizeOpts(options), desc);
  };

  d.gs = function (dscr, get, set/*, options*/) {
    var c, e, options, desc;
    if (typeof dscr !== 'string') {
      options = set;
      set = get;
      get = dscr;
      dscr = null;
    } else {
      options = arguments[3];
    }
    if (get == null) {
      get = undefined;
    } else if (!isCallable(get)) {
      options = get;
      get = set = undefined;
    } else if (set == null) {
      set = undefined;
    } else if (!isCallable(set)) {
      options = set;
      set = undefined;
    }
    if (dscr == null) {
      c = true;
      e = false;
    } else {
      c = contains.call(dscr, 'c');
      e = contains.call(dscr, 'e');
    }

    desc = { get: get, set: set, configurable: c, enumerable: e };
    return !options ? desc : assign(normalizeOpts(options), desc);
  };

  },{"es5-ext/object/assign":191,"es5-ext/object/is-callable":194,"es5-ext/object/normalize-options":199,"es5-ext/string/#/contains":202}],174:[function(require,module,exports){
  'use strict';

  var elliptic = exports;

  elliptic.version = require('../package.json').version;
  elliptic.utils = require('./elliptic/utils');
  elliptic.rand = require('brorand');
  elliptic.curve = require('./elliptic/curve');
  elliptic.curves = require('./elliptic/curves');

  // Protocols
  elliptic.ec = require('./elliptic/ec');
  elliptic.eddsa = require('./elliptic/eddsa');

  },{"../package.json":189,"./elliptic/curve":177,"./elliptic/curves":180,"./elliptic/ec":181,"./elliptic/eddsa":184,"./elliptic/utils":188,"brorand":160}],175:[function(require,module,exports){
  'use strict';

  var BN = require('bn.js');
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var getNAF = utils.getNAF;
  var getJSF = utils.getJSF;
  var assert = utils.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  module.exports = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;
      for (var k = j + doubles.step - 1; k >= j; k--)
        nafW = (nafW << 1) + naf[k];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var k = 0; i >= 0 && naf[i] === 0; i--)
        k++;
      if (i >= 0)
        k++;
      acc = acc.dblp(k);

      if (i < 0)
        break;
      var z = naf[i];
      assert(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                         points,
                                                         coeffs,
                                                         len,
                                                         jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
      var p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a]);
        naf[b] = getNAF(coeffs[b], wndWidth[b]);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b] /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
      wnd[i] = null;

    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert(bytes[bytes.length - 1] % 2 === 1);

      var res =  this.point(bytes.slice(1, 1 + len),
                            bytes.slice(1 + len, 1 + 2 * len));

      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  },{"../../elliptic":174,"bn.js":159}],176:[function(require,module,exports){
  'use strict';

  var curve = require('../curve');
  var elliptic = require('../../elliptic');
  var BN = require('bn.js');
  var inherits = require('inherits');
  var Base = curve.base;

  var assert = elliptic.utils.assert;

  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    Base.call(this, 'edwards', conf);

    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  module.exports = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };

  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red)
      y = y.toRed(this.red);

    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    if (x.isOdd() !== odd)
      x = x.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
  };

  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = z ? new BN(z, 16) : this.curve.one;
      this.t = t && new BN(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
           this.y.cmp(this.z) === 0;
  };

  Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
      // E = a * C
      var e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        var h = this.z.redSqr();
        // J = F - 2 * H
        var j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      var e = c.redAdd(d);
      // H = (c * Z1)^2
      var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
      // J = E - 2 * H
      var j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };

  Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
