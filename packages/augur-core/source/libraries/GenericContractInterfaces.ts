// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

export type Primitive = 'uint8' | 'uint64' | 'uint256' | 'bool' | 'string' | 'address' | 'bytes4' | 'bytes20' | 'bytes32' | 'bytes' | 'bytes[]' | 'int256' | 'tuple' | 'address[]' | 'uint8[]' | 'uint256[]' | 'int256[]' | 'bytes32[]' | 'tuple[]'

export interface AbiParameter {
	name: string
	type: Primitive
	components?: Array<AbiParameter>
}

export interface AbiEventParameter extends AbiParameter {
	indexed: boolean
}

export interface AbiFunction {
	name: string
	type: 'function' | 'constructor' | 'fallback'
	stateMutability: 'pure' | 'view' | 'payable' | 'nonpayable'
	constant: boolean
	payable: boolean
	inputs: Array<AbiParameter>
	outputs: Array<AbiParameter>
}

export interface Transaction<TBigNumber> {
	to: string
	from?: string
	data: string
	value?: TBigNumber
}

export interface RawEvent {
	data: string
	topics: Array<string>
}

export interface TransactionReceipt {
	status: number
	logs: Array<RawEvent>
}

export interface Event {
	name: string
	parameters: unknown
}

export interface EventDescription {
	name: string
	signature: string
	signatureHash: string
	parameters: Array<AbiEventParameter>
}

export const eventDescriptions: { [signatureHash: string]: EventDescription } = {
	'0xea17ae24b0d40ea7962a6d832db46d1f81eaec1562946d0830d1c21d4c000ec1': {"name":"MarketCreated","signature":"MarketCreated(address,uint256,string,address,address,address,uint256,int256[],uint8,uint256,bytes32[],uint256,uint256)","signatureHash":"0xea17ae24b0d40ea7962a6d832db46d1f81eaec1562946d0830d1c21d4c000ec1","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"endTime","type":"uint256"},{"indexed":false,"name":"extraInfo","type":"string"},{"indexed":false,"name":"market","type":"address"},{"indexed":true,"name":"marketCreator","type":"address"},{"indexed":false,"name":"designatedReporter","type":"address"},{"indexed":false,"name":"feePerCashInAttoCash","type":"uint256"},{"indexed":false,"name":"prices","type":"int256[]"},{"indexed":false,"name":"marketType","type":"uint8"},{"indexed":false,"name":"numTicks","type":"uint256"},{"indexed":false,"name":"outcomes","type":"bytes32[]"},{"indexed":false,"name":"noShowBond","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0xc3ebb227c22e7644e9bef8822009f746a72c86f239760124d67fdc2c302b3115': {"name":"InitialReportSubmitted","signature":"InitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256,uint256)","signatureHash":"0xc3ebb227c22e7644e9bef8822009f746a72c86f239760124d67fdc2c302b3115","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"reporter","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"initialReporter","type":"address"},{"indexed":false,"name":"amountStaked","type":"uint256"},{"indexed":false,"name":"isDesignatedReporter","type":"bool"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"description","type":"string"},{"indexed":false,"name":"nextWindowStartTime","type":"uint256"},{"indexed":false,"name":"nextWindowEndTime","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0xf9a0b30bcf861874bf36630742f0d56b22648898d7cdd0cd785d74acd17e0d44': {"name":"DisputeCrowdsourcerCreated","signature":"DisputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)","signatureHash":"0xf9a0b30bcf861874bf36630742f0d56b22648898d7cdd0cd785d74acd17e0d44","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"size","type":"uint256"},{"indexed":false,"name":"disputeRound","type":"uint256"}]},
	'0xe7f47639cdf56ec6c5451df334b73c9ca5cccd20da2c0f4e390e9bb71a6f672a': {"name":"DisputeCrowdsourcerContribution","signature":"DisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256,uint256)","signatureHash":"0xe7f47639cdf56ec6c5451df334b73c9ca5cccd20da2c0f4e390e9bb71a6f672a","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"reporter","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"name":"amountStaked","type":"uint256"},{"indexed":false,"name":"description","type":"string"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"currentStake","type":"uint256"},{"indexed":false,"name":"stakeRemaining","type":"uint256"},{"indexed":false,"name":"disputeRound","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0xbbd17f11324f5c3548eaf137b3e63d51ea06adb345d7bffd6dde64f264915153': {"name":"DisputeCrowdsourcerCompleted","signature":"DisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)","signatureHash":"0xbbd17f11324f5c3548eaf137b3e63d51ea06adb345d7bffd6dde64f264915153","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"nextWindowStartTime","type":"uint256"},{"indexed":false,"name":"nextWindowEndTime","type":"uint256"},{"indexed":false,"name":"pacingOn","type":"bool"},{"indexed":false,"name":"totalRepStakedInPayout","type":"uint256"},{"indexed":false,"name":"totalRepStakedInMarket","type":"uint256"},{"indexed":false,"name":"disputeRound","type":"uint256"}]},
	'0x3ffffb51f92f91faf4ba8c906f5a0180d1033be93b1e227cd92c872dc234fdf0': {"name":"InitialReporterRedeemed","signature":"InitialReporterRedeemed(address,address,address,address,uint256,uint256,uint256[],uint256)","signatureHash":"0x3ffffb51f92f91faf4ba8c906f5a0180d1033be93b1e227cd92c872dc234fdf0","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"reporter","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"initialReporter","type":"address"},{"indexed":false,"name":"amountRedeemed","type":"uint256"},{"indexed":false,"name":"repReceived","type":"uint256"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0x6afb0328cf957750be87a6f34b1cd21457ddf1382af65f9592ff2d333945633f': {"name":"DisputeCrowdsourcerRedeemed","signature":"DisputeCrowdsourcerRedeemed(address,address,address,address,uint256,uint256,uint256[],uint256)","signatureHash":"0x6afb0328cf957750be87a6f34b1cd21457ddf1382af65f9592ff2d333945633f","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"reporter","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"name":"amountRedeemed","type":"uint256"},{"indexed":false,"name":"repReceived","type":"uint256"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0xb20adf682c8f82b94a135452f54ac4483c9ee8c9b2324e946120696ab1d034b4': {"name":"ReportingParticipantDisavowed","signature":"ReportingParticipantDisavowed(address,address,address)","signatureHash":"0xb20adf682c8f82b94a135452f54ac4483c9ee8c9b2324e946120696ab1d034b4","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"reportingParticipant","type":"address"}]},
	'0x3b4f3db017516414df2695e5b0052661779d7163a6cd4368fd74313be73fa0b8': {"name":"MarketParticipantsDisavowed","signature":"MarketParticipantsDisavowed(address,address)","signatureHash":"0x3b4f3db017516414df2695e5b0052661779d7163a6cd4368fd74313be73fa0b8","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"}]},
	'0x6d39632c2dc10305bf5771cfff4af1851f07c03ea27b821cad382466bdf7a21f': {"name":"MarketFinalized","signature":"MarketFinalized(address,address,uint256,uint256[])","signatureHash":"0x6d39632c2dc10305bf5771cfff4af1851f07c03ea27b821cad382466bdf7a21f","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"winningPayoutNumerators","type":"uint256[]"}]},
	'0xc3cf07f8fa0fafc25a9dd0bad2cd6b961c55dad41b42c8ef8f931bc40e41e08c': {"name":"MarketMigrated","signature":"MarketMigrated(address,address,address)","signatureHash":"0xc3cf07f8fa0fafc25a9dd0bad2cd6b961c55dad41b42c8ef8f931bc40e41e08c","parameters":[{"indexed":true,"name":"market","type":"address"},{"indexed":true,"name":"originalUniverse","type":"address"},{"indexed":true,"name":"newUniverse","type":"address"}]},
	'0xce5b6de2a0053ebc6c04e68bcbb9f0a1f2deeb7049c72881e198f95b5752db82': {"name":"UniverseForked","signature":"UniverseForked(address,address)","signatureHash":"0xce5b6de2a0053ebc6c04e68bcbb9f0a1f2deeb7049c72881e198f95b5752db82","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"forkingMarket","type":"address"}]},
	'0xe36b09d83f9cfa88c37f071fc2cfb5ff30b764cbd98088e70d965573c9ce5bbd': {"name":"UniverseCreated","signature":"UniverseCreated(address,address,uint256[],uint256)","signatureHash":"0xe36b09d83f9cfa88c37f071fc2cfb5ff30b764cbd98088e70d965573c9ce5bbd","parameters":[{"indexed":true,"name":"parentUniverse","type":"address"},{"indexed":true,"name":"childUniverse","type":"address"},{"indexed":false,"name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"name":"creationTimestamp","type":"uint256"}]},
	'0xfe06587917de7df83a446bcbb889cee699d7fc35b7b53e263282c2acb5a16499': {"name":"CompleteSetsPurchased","signature":"CompleteSetsPurchased(address,address,address,uint256,uint256)","signatureHash":"0xfe06587917de7df83a446bcbb889cee699d7fc35b7b53e263282c2acb5a16499","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":true,"name":"account","type":"address"},{"indexed":false,"name":"numCompleteSets","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0xdd7dcfa6708112395eb94e9b1889295fb19af21ef290e918256838c979b2dfbd': {"name":"CompleteSetsSold","signature":"CompleteSetsSold(address,address,address,uint256,uint256,uint256)","signatureHash":"0xdd7dcfa6708112395eb94e9b1889295fb19af21ef290e918256838c979b2dfbd","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":true,"name":"account","type":"address"},{"indexed":false,"name":"numCompleteSets","type":"uint256"},{"indexed":false,"name":"fees","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0x95366b7f64c6bb45149f9f7c522403fceebe5170ff76b8ffde2b0ab943ac11ce': {"name":"TradingProceedsClaimed","signature":"TradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256,uint256)","signatureHash":"0x95366b7f64c6bb45149f9f7c522403fceebe5170ff76b8ffde2b0ab943ac11ce","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"sender","type":"address"},{"indexed":false,"name":"market","type":"address"},{"indexed":false,"name":"outcome","type":"uint256"},{"indexed":false,"name":"numShares","type":"uint256"},{"indexed":false,"name":"numPayoutTokens","type":"uint256"},{"indexed":false,"name":"fees","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0x3c67396e9c55d2fc8ad68875fc5beca1d96ad2a2f23b210ccc1d986551ab6fdf': {"name":"TokensTransferred","signature":"TokensTransferred(address,address,address,address,uint256,uint8,address)","signatureHash":"0x3c67396e9c55d2fc8ad68875fc5beca1d96ad2a2f23b210ccc1d986551ab6fdf","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"token","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"tokenType","type":"uint8"},{"indexed":false,"name":"market","type":"address"}]},
	'0x07f766729171db8cc73d96b25cc56784077e26c7ff48b0187877ace391c181a6': {"name":"TokensMinted","signature":"TokensMinted(address,address,address,uint256,uint8,address,uint256)","signatureHash":"0x07f766729171db8cc73d96b25cc56784077e26c7ff48b0187877ace391c181a6","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"token","type":"address"},{"indexed":true,"name":"target","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"tokenType","type":"uint8"},{"indexed":false,"name":"market","type":"address"},{"indexed":false,"name":"totalSupply","type":"uint256"}]},
	'0x145a4839b3d82d1e28f6ed93f52622b351892e835530386bb1fe4effba99aeea': {"name":"TokensBurned","signature":"TokensBurned(address,address,address,uint256,uint8,address,uint256)","signatureHash":"0x145a4839b3d82d1e28f6ed93f52622b351892e835530386bb1fe4effba99aeea","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"token","type":"address"},{"indexed":true,"name":"target","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"tokenType","type":"uint8"},{"indexed":false,"name":"market","type":"address"},{"indexed":false,"name":"totalSupply","type":"uint256"}]},
	'0x63fd58f559b73fc4da5511c341ec8a7b31c5c48538ef83c6077712b6edf5f7cb': {"name":"TokenBalanceChanged","signature":"TokenBalanceChanged(address,address,address,uint8,address,uint256,uint256)","signatureHash":"0x63fd58f559b73fc4da5511c341ec8a7b31c5c48538ef83c6077712b6edf5f7cb","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"owner","type":"address"},{"indexed":false,"name":"token","type":"address"},{"indexed":false,"name":"tokenType","type":"uint8"},{"indexed":false,"name":"market","type":"address"},{"indexed":false,"name":"balance","type":"uint256"},{"indexed":false,"name":"outcome","type":"uint256"}]},
	'0x97f8b399e255f30d56b759b645c86652624ee258937579ff4a747abaeae857c4': {"name":"DisputeWindowCreated","signature":"DisputeWindowCreated(address,address,uint256,uint256,uint256,bool)","signatureHash":"0x97f8b399e255f30d56b759b645c86652624ee258937579ff4a747abaeae857c4","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"disputeWindow","type":"address"},{"indexed":false,"name":"startTime","type":"uint256"},{"indexed":false,"name":"endTime","type":"uint256"},{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"initial","type":"bool"}]},
	'0xee62c58e2603b92f96a002e012f4f3bd5748102cfa3b711f6d778c6237fcaa96': {"name":"InitialReporterTransferred","signature":"InitialReporterTransferred(address,address,address,address)","signatureHash":"0xee62c58e2603b92f96a002e012f4f3bd5748102cfa3b711f6d778c6237fcaa96","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"}]},
	'0x55f2a7bfa32e835c3f3c3cff653a3d11c077ce1b00c5a41c6aaf09eedc1ac3b2': {"name":"MarketTransferred","signature":"MarketTransferred(address,address,address,address)","signatureHash":"0x55f2a7bfa32e835c3f3c3cff653a3d11c077ce1b00c5a41c6aaf09eedc1ac3b2","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"}]},
	'0x213a05b9ad8567c2f8fa868e7375e5bf30e69add0dbb5913ca8a3e58c815c268': {"name":"MarketOIChanged","signature":"MarketOIChanged(address,address,uint256)","signatureHash":"0x213a05b9ad8567c2f8fa868e7375e5bf30e69add0dbb5913ca8a3e58c815c268","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"marketOI","type":"uint256"}]},
	'0x18052b5e29020458e154999fa71891a5db3404a5b0b9c5ec60c90adca7d38d63': {"name":"ParticipationTokensRedeemed","signature":"ParticipationTokensRedeemed(address,address,address,uint256,uint256,uint256)","signatureHash":"0x18052b5e29020458e154999fa71891a5db3404a5b0b9c5ec60c90adca7d38d63","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"disputeWindow","type":"address"},{"indexed":true,"name":"account","type":"address"},{"indexed":false,"name":"attoParticipationTokens","type":"uint256"},{"indexed":false,"name":"feePayoutShare","type":"uint256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0x11dda748f0bd3af85a073da0088a0acb827d9584a4fdb825c81f1232a5309538': {"name":"TimestampSet","signature":"TimestampSet(uint256)","signatureHash":"0x11dda748f0bd3af85a073da0088a0acb827d9584a4fdb825c81f1232a5309538","parameters":[{"indexed":false,"name":"newTimestamp","type":"uint256"}]},
	'0x69af68e366a0570364e3a086f3b5ac79f08ecc3f93eaccbfcf3864809b12b5d8': {"name":"ValidityBondChanged","signature":"ValidityBondChanged(address,uint256)","signatureHash":"0x69af68e366a0570364e3a086f3b5ac79f08ecc3f93eaccbfcf3864809b12b5d8","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"validityBond","type":"uint256"}]},
	'0x9c75a088fcb0527d67a80a7d0a5006bbabe02f4b23984234ae68b2b146f001bc': {"name":"DesignatedReportStakeChanged","signature":"DesignatedReportStakeChanged(address,uint256)","signatureHash":"0x9c75a088fcb0527d67a80a7d0a5006bbabe02f4b23984234ae68b2b146f001bc","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"designatedReportStake","type":"uint256"}]},
	'0xd1fc3f2cb1387e602db0e6f8f22649df65df5246eeff281cf6d1ef62feda4ece': {"name":"NoShowBondChanged","signature":"NoShowBondChanged(address,uint256)","signatureHash":"0xd1fc3f2cb1387e602db0e6f8f22649df65df5246eeff281cf6d1ef62feda4ece","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"noShowBond","type":"uint256"}]},
	'0xadddfaec4505d90a6a211907536944e6e1af7ff5cf6d1873de43e36020f36009': {"name":"ReportingFeeChanged","signature":"ReportingFeeChanged(address,uint256)","signatureHash":"0xadddfaec4505d90a6a211907536944e6e1af7ff5cf6d1873de43e36020f36009","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":false,"name":"reportingFee","type":"uint256"}]},
	'0x350ea32dc29530b9557420816d743c436f8397086f98c96292138edd69e01cb3': {"name":"ShareTokenBalanceChanged","signature":"ShareTokenBalanceChanged(address,address,address,uint256,uint256)","signatureHash":"0x350ea32dc29530b9557420816d743c436f8397086f98c96292138edd69e01cb3","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"account","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"outcome","type":"uint256"},{"indexed":false,"name":"balance","type":"uint256"}]},
	'0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885': {"name":"Mint","signature":"Mint(address,uint256)","signatureHash":"0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885","parameters":[{"indexed":true,"name":"target","type":"address"},{"indexed":false,"name":"value","type":"uint256"}]},
	'0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5': {"name":"Burn","signature":"Burn(address,uint256)","signatureHash":"0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5","parameters":[{"indexed":true,"name":"target","type":"address"},{"indexed":false,"name":"value","type":"uint256"}]},
	'0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': {"name":"Transfer","signature":"Transfer(address,address,uint256)","signatureHash":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","parameters":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}]},
	'0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': {"name":"Approval","signature":"Approval(address,address,uint256)","signatureHash":"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","parameters":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}]},
	'0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153': {"name":"InterfaceImplementerSet","signature":"InterfaceImplementerSet(address,bytes32,address)","signatureHash":"0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153","parameters":[{"indexed":true,"name":"addr","type":"address"},{"indexed":true,"name":"interfaceHash","type":"bytes32"},{"indexed":true,"name":"implementer","type":"address"}]},
	'0x605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350': {"name":"ManagerChanged","signature":"ManagerChanged(address,address)","signatureHash":"0x605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350","parameters":[{"indexed":true,"name":"addr","type":"address"},{"indexed":true,"name":"newManager","type":"address"}]},
	'0xabfd711ecdd15ae3a6b3ad16ff2e9d81aec026a39d16725ee164be4fbf857a7c': {"name":"ExecutionFailed","signature":"ExecutionFailed(bytes32)","signatureHash":"0xabfd711ecdd15ae3a6b3ad16ff2e9d81aec026a39d16725ee164be4fbf857a7c","parameters":[{"indexed":false,"name":"txHash","type":"bytes32"}]},
	'0x9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26': {"name":"AddedOwner","signature":"AddedOwner(address)","signatureHash":"0x9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26","parameters":[{"indexed":false,"name":"owner","type":"address"}]},
	'0xf8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf': {"name":"RemovedOwner","signature":"RemovedOwner(address)","signatureHash":"0xf8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf","parameters":[{"indexed":false,"name":"owner","type":"address"}]},
	'0x610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93': {"name":"ChangedThreshold","signature":"ChangedThreshold(uint256)","signatureHash":"0x610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93","parameters":[{"indexed":false,"name":"threshold","type":"uint256"}]},
	'0xecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440': {"name":"EnabledModule","signature":"EnabledModule(address)","signatureHash":"0xecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440","parameters":[{"indexed":false,"name":"module","type":"address"}]},
	'0xaab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276': {"name":"DisabledModule","signature":"DisabledModule(address)","signatureHash":"0xaab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276","parameters":[{"indexed":false,"name":"module","type":"address"}]},
	'0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511': {"name":"ContractCreation","signature":"ContractCreation(address)","signatureHash":"0x4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511","parameters":[{"indexed":false,"name":"newContract","type":"address"}]},
	'0xbf88b5a3158512dc8ad44dadf221f46eb1df762a2e7fd1de86aab34b0af455cf': {"name":"FundedAccount","signature":"FundedAccount(address,address,uint256,uint256)","signatureHash":"0xbf88b5a3158512dc8ad44dadf221f46eb1df762a2e7fd1de86aab34b0af455cf","parameters":[{"indexed":true,"name":"_universe","type":"address"},{"indexed":true,"name":"_sender","type":"address"},{"indexed":false,"name":"_repBalance","type":"uint256"},{"indexed":false,"name":"_timestamp","type":"uint256"}]},
	'0x06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987': {"name":"Sent","signature":"Sent(address,address,address,uint256,bytes,bytes)","signatureHash":"0x06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}]},
	'0x2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d': {"name":"Minted","signature":"Minted(address,address,uint256,bytes,bytes)","signatureHash":"0x2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}]},
	'0xa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098': {"name":"Burned","signature":"Burned(address,address,uint256,bytes,bytes)","signatureHash":"0xa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"operatorData","type":"bytes"}]},
	'0xf4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f9': {"name":"AuthorizedOperator","signature":"AuthorizedOperator(address,address)","signatureHash":"0xf4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f9","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"tokenHolder","type":"address"}]},
	'0x50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa1': {"name":"RevokedOperator","signature":"RevokedOperator(address,address)","signatureHash":"0x50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa1","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"tokenHolder","type":"address"}]},
	'0xa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f80': {"name":"ProxyCreation","signature":"ProxyCreation(address)","signatureHash":"0xa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f80","parameters":[{"indexed":false,"name":"proxy","type":"address"}]},
	'0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62': {"name":"TransferSingle","signature":"TransferSingle(address,address,address,uint256,uint256)","signatureHash":"0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"value","type":"uint256"}]},
	'0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb': {"name":"TransferBatch","signature":"TransferBatch(address,address,address,uint256[],uint256[])","signatureHash":"0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","parameters":[{"indexed":true,"name":"operator","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"ids","type":"uint256[]"},{"indexed":false,"name":"values","type":"uint256[]"}]},
	'0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31': {"name":"ApprovalForAll","signature":"ApprovalForAll(address,address,bool)","signatureHash":"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","parameters":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"operator","type":"address"},{"indexed":false,"name":"approved","type":"bool"}]},
	'0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b': {"name":"URI","signature":"URI(string,uint256)","signatureHash":"0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","parameters":[{"indexed":false,"name":"value","type":"string"},{"indexed":true,"name":"id","type":"uint256"}]},
	'0x9bab1368a1ed530afaad9c630ba75e6a5c1efa9f6af0139d6cda2b6af6aa801e': {"name":"OrderEvent","signature":"OrderEvent(address,address,uint8,uint8,bytes32,bytes32,address[],uint256[])","signatureHash":"0x9bab1368a1ed530afaad9c630ba75e6a5c1efa9f6af0139d6cda2b6af6aa801e","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":true,"name":"eventType","type":"uint8"},{"indexed":false,"name":"orderType","type":"uint8"},{"indexed":false,"name":"orderId","type":"bytes32"},{"indexed":false,"name":"tradeGroupId","type":"bytes32"},{"indexed":false,"name":"addressData","type":"address[]"},{"indexed":false,"name":"uint256Data","type":"uint256[]"}]},
	'0x59543b7f82735782aa5bdb97dff40ff288d4548a5865da513b40e4088e2ee77e': {"name":"ProfitLossChanged","signature":"ProfitLossChanged(address,address,address,uint256,int256,uint256,int256,int256,int256,uint256)","signatureHash":"0x59543b7f82735782aa5bdb97dff40ff288d4548a5865da513b40e4088e2ee77e","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":true,"name":"account","type":"address"},{"indexed":false,"name":"outcome","type":"uint256"},{"indexed":false,"name":"netPosition","type":"int256"},{"indexed":false,"name":"avgPrice","type":"uint256"},{"indexed":false,"name":"realizedProfit","type":"int256"},{"indexed":false,"name":"frozenFunds","type":"int256"},{"indexed":false,"name":"realizedCost","type":"int256"},{"indexed":false,"name":"timestamp","type":"uint256"}]},
	'0x3f3d25947a2285190ef155970a61019c447a6e1b16c5c4bc893888171cd184bd': {"name":"MarketVolumeChanged","signature":"MarketVolumeChanged(address,address,uint256,uint256[])","signatureHash":"0x3f3d25947a2285190ef155970a61019c447a6e1b16c5c4bc893888171cd184bd","parameters":[{"indexed":true,"name":"universe","type":"address"},{"indexed":true,"name":"market","type":"address"},{"indexed":false,"name":"volume","type":"uint256"},{"indexed":false,"name":"outcomeVolumes","type":"uint256[]"}]}
}

class ContractError extends Error {
  abi:string;
  parameters: string;

  constructor(abi:AbiFunction, parameters:Array<any>,  ...args:Array<any>) {
    super(...args);

    this.setAbi(abi);
    this.setParameters(parameters);

    Error.captureStackTrace(this, ContractError);
  }

  setAbi = (abi: AbiFunction) => {
    this.abi = JSON.stringify(abi);
  }

  setParameters = (parameters: Array<any>) => {
    this.parameters = JSON.stringify(parameters);
  }
}

export interface Dependencies<TBigNumber> {
	// TODO: get rid of some of these dependencies in favor of baked in solutions
	keccak256(utf8String: string): string
	encodeParams(abi: AbiFunction, parameters: Array<any>): string
	decodeParams(abi: Array<AbiParameter>, encoded: string): Array<any>
	getDefaultAddress(): Promise<string | undefined>
	call(transaction: Transaction<TBigNumber>): Promise<string>
	estimateGas(transaction: Transaction<TBigNumber>): Promise<TBigNumber>
	submitTransaction(transaction: Transaction<TBigNumber>): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a local version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract<TBigNumber> {
	protected readonly dependencies: Dependencies<TBigNumber>
	public readonly address: string

	protected constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		this.dependencies = dependencies
		this.address = address
	}

	protected async localCall(abi: AbiFunction, parameters: Array<any>, sender?: string, attachedEth?: TBigNumber): Promise<any> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ to: this.address, data: data }, attachedEth ? { value: attachedEth } : {}, from ? { from: from } : {})
		const result = await this.dependencies.call(transaction)
		if (result === '0x') throw new ContractError(abi, parameters, `Call returned '0x' indicating failure.`)
		return this.dependencies.decodeParams(abi.outputs, result)
	}

	protected async remoteCall(abi: AbiFunction, parameters: Array<any>, txName: string, sender?: string, attachedEth?: TBigNumber): Promise<Array<Event>> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ to: this.address, data: data }, attachedEth ? { value: attachedEth } : {}, from ? { from: from } : {})
		const transactionReceipt = await this.dependencies.submitTransaction(transaction)
		if (transactionReceipt.status != 1) {
			throw new ContractError(abi, parameters, `Tx ${txName} failed: ${transactionReceipt}`)
		}
		return this.decodeEvents(transactionReceipt.logs)
	}

	protected async estimateGas(abi: AbiFunction, parameters: Array<any>, txName: string, sender?: string, attachedEth?: TBigNumber): Promise<TBigNumber> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ to: this.address, data: data }, attachedEth ? { value: attachedEth } : {}, from ? { from: from } : {})
	
		return this.dependencies.estimateGas(transaction);	
	}

	private encodeMethod(abi: AbiFunction, parameters: Array<any>): string {
		return `${this.hashSignature(abi)}${this.dependencies.encodeParams(abi, parameters)}`
	}

	private decodeEvents(rawEvents: Array<RawEvent>): Array<Event> {
		const decodedEvents: Array<Event> = []
		rawEvents.forEach(rawEvent => {
			const decodedEvent = this.tryDecodeEvent(rawEvent)
			if (decodedEvent) decodedEvents.push(decodedEvent)
		})
		return decodedEvents
	}

	private tryDecodeEvent(rawEvent: RawEvent): Event | null {
		const signatureHash = rawEvent.topics[0]
		const eventDescription = eventDescriptions[signatureHash]
		if (!eventDescription) return null
		const parameters = this.decodeEventParameters(eventDescription.parameters, rawEvent.topics, rawEvent.data, { eventSignature: eventDescription.signature })
		return { name: eventDescription.name, parameters: parameters }
	}

	private hashSignature(abiFunction: AbiFunction): string {
		const parameters = this.stringifyParams(abiFunction.inputs).join(',')
		const signature = `${abiFunction.name}(${parameters})`
		return this.dependencies.keccak256(signature).substring(0, 10)
	}

	private stringifyParams(params: Array<AbiParameter>): Array<string> {
		return params.map(param => {
			if (param.type === 'tuple') {
				if (!param.components) throw new Error(`Expected components when type is ${param.type}`)
				return `(${this.stringifyParams(param.components).join(',')})`
			} else if (param.type === 'tuple[]') {
				if (!param.components) throw new Error(`Expected components when type is ${param.type}`)
				return `(${this.stringifyParams(param.components).join(',')})[]`
			} else {
				return param.type
			}
		})
	}

	private decodeEventParameters(parameters: Array<AbiEventParameter>, topics: Array<string>, data: string, errorContext: { eventSignature: string }): any {
		const indexedTypesForDecoding = parameters.filter(parameter => parameter.indexed).map(this.getTypeForEventDecoding)
		const nonIndexedTypesForDecoding = parameters.filter(parameter => !parameter.indexed)
		const indexedData = `0x${topics.slice(1).map(topic => topic.substring(2)).join('')}`
		const nonIndexedData = data
		// TODO: roll own parameter decoder instead of using dependency
		const decodedIndexedParameters = this.dependencies.decodeParams(indexedTypesForDecoding, indexedData)
		if (!decodedIndexedParameters) throw new Error(`Failed to decode topics for event ${errorContext.eventSignature}.\n${indexedData}`)
		const decodedNonIndexedParameters = this.dependencies.decodeParams(nonIndexedTypesForDecoding, nonIndexedData)
		if (!decodedNonIndexedParameters) throw new Error(`Failed to decode data for event ${errorContext.eventSignature}.\n${nonIndexedData}`)
		const result: { [name: string]: any } = {}
		indexedTypesForDecoding.forEach((parameter, i) => result[parameter.name] = decodedIndexedParameters[i])
		nonIndexedTypesForDecoding.forEach((parameter, i) => result[parameter.name] = decodedNonIndexedParameters[i])
		return result
	}

	private getTypeForEventDecoding(parameter: AbiEventParameter): AbiEventParameter {
		if (!parameter.indexed) return parameter
		if (parameter.type !== 'string'
			&& parameter.type !== 'bytes'
			&& !parameter.type.startsWith('tuple')
			&& !parameter.type.endsWith('[]'))
			return parameter
		return Object.assign({}, parameter, { type: 'bytes32' })
	}
}


export class Augur<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public genesisUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"genesisUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public logDisputeCrowdsourcerTokensBurned = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensBurned', options.sender)
	}
	
	public logDisputeCrowdsourcerTokensBurned_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensBurned', options.sender)
	}

	public logDisputeCrowdsourcerTokensBurned_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public time_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"time","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public logReportingParticipantDisavowed = async (universe: string, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logReportingParticipantDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market], 'logReportingParticipantDisavowed', options.sender)
	}
	
	public logReportingParticipantDisavowed_estimateGas = async (universe: string, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logReportingParticipantDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market], 'logReportingParticipantDisavowed', options.sender)
	}

	public logReportingParticipantDisavowed_ = async (universe: string, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logReportingParticipantDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market], options.sender)
		return <boolean>result[0]
	}

	public logMarketMigrated = async (market: string, originalUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_originalUniverse","type":"address"}],"name":"logMarketMigrated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, originalUniverse], 'logMarketMigrated', options.sender)
	}
	
	public logMarketMigrated_estimateGas = async (market: string, originalUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_originalUniverse","type":"address"}],"name":"logMarketMigrated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, originalUniverse], 'logMarketMigrated', options.sender)
	}

	public logMarketMigrated_ = async (market: string, originalUniverse: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_originalUniverse","type":"address"}],"name":"logMarketMigrated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, originalUniverse], options.sender)
		return <boolean>result[0]
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public logDisputeCrowdsourcerTokensTransferred = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to, value, fromBalance, toBalance], 'logDisputeCrowdsourcerTokensTransferred', options.sender)
	}
	
	public logDisputeCrowdsourcerTokensTransferred_estimateGas = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to, value, fromBalance, toBalance], 'logDisputeCrowdsourcerTokensTransferred', options.sender)
	}

	public logDisputeCrowdsourcerTokensTransferred_ = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to, value, fromBalance, toBalance], options.sender)
		return <boolean>result[0]
	}

	public isTrustedSender = async (address: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"isTrustedSender","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [address], 'isTrustedSender', options.sender)
	}
	
	public isTrustedSender_estimateGas = async (address: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"isTrustedSender","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [address], 'isTrustedSender', options.sender)
	}

	public isTrustedSender_ = async (address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"isTrustedSender","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [address], options.sender)
		return <boolean>result[0]
	}

	public logMarketTransferred = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to], 'logMarketTransferred', options.sender)
	}
	
	public logMarketTransferred_estimateGas = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to], 'logMarketTransferred', options.sender)
	}

	public logMarketTransferred_ = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensTransferred = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to, value, fromBalance, toBalance], 'logParticipationTokensTransferred', options.sender)
	}
	
	public logParticipationTokensTransferred_estimateGas = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to, value, fromBalance, toBalance], 'logParticipationTokensTransferred', options.sender)
	}

	public logParticipationTokensTransferred_ = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to, value, fromBalance, toBalance], options.sender)
		return <boolean>result[0]
	}

	public logMarketFinalized = async (universe: string, winningPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_winningPayoutNumerators","type":"uint256[]"}],"name":"logMarketFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, winningPayoutNumerators], 'logMarketFinalized', options.sender)
	}
	
	public logMarketFinalized_estimateGas = async (universe: string, winningPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_winningPayoutNumerators","type":"uint256[]"}],"name":"logMarketFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, winningPayoutNumerators], 'logMarketFinalized', options.sender)
	}

	public logMarketFinalized_ = async (universe: string, winningPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_winningPayoutNumerators","type":"uint256[]"}],"name":"logMarketFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, winningPayoutNumerators], options.sender)
		return <boolean>result[0]
	}

	public logReputationTokensBurned = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logReputationTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensBurned', options.sender)
	}
	
	public logReputationTokensBurned_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logReputationTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensBurned', options.sender)
	}

	public logReputationTokensBurned_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logReputationTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public getMaximumMarketEndDate = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getMaximumMarketEndDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getMaximumMarketEndDate', options.sender)
	}
	
	public getMaximumMarketEndDate_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getMaximumMarketEndDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getMaximumMarketEndDate', options.sender)
	}

	public getMaximumMarketEndDate_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getMaximumMarketEndDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public createChildUniverse = async (parentPayoutDistributionHash: string, parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"},{"name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentPayoutDistributionHash, parentPayoutNumerators], 'createChildUniverse', options.sender)
	}
	
	public createChildUniverse_estimateGas = async (parentPayoutDistributionHash: string, parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"},{"name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentPayoutDistributionHash, parentPayoutNumerators], 'createChildUniverse', options.sender)
	}

	public createChildUniverse_ = async (parentPayoutDistributionHash: string, parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"},{"name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentPayoutDistributionHash, parentPayoutNumerators], options.sender)
		return <string>result[0]
	}

	public isKnownFeeSender_ = async (feeSender: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_feeSender","type":"address"}],"name":"isKnownFeeSender","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [feeSender], options.sender)
		return <boolean>result[0]
	}

	public logNoShowBondChanged = async (noShowBond: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_noShowBond","type":"uint256"}],"name":"logNoShowBondChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [noShowBond], 'logNoShowBondChanged', options.sender)
	}
	
	public logNoShowBondChanged_estimateGas = async (noShowBond: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_noShowBond","type":"uint256"}],"name":"logNoShowBondChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [noShowBond], 'logNoShowBondChanged', options.sender)
	}

	public logNoShowBondChanged_ = async (noShowBond: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_noShowBond","type":"uint256"}],"name":"logNoShowBondChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [noShowBond], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensBurned = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logParticipationTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensBurned', options.sender)
	}
	
	public logParticipationTokensBurned_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logParticipationTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensBurned', options.sender)
	}

	public logParticipationTokensBurned_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logParticipationTokensBurned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public disputeCrowdsourcerCreated = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, size: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_size","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"disputeCrowdsourcerCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, size, disputeRound], 'disputeCrowdsourcerCreated', options.sender)
	}
	
	public disputeCrowdsourcerCreated_estimateGas = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, size: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_size","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"disputeCrowdsourcerCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, size, disputeRound], 'disputeCrowdsourcerCreated', options.sender)
	}

	public disputeCrowdsourcerCreated_ = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, size: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_size","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"disputeCrowdsourcerCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, size, disputeRound], options.sender)
		return <boolean>result[0]
	}

	public logDisputeWindowCreated = async (disputeWindow: string, id: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_disputeWindow","type":"address"},{"name":"_id","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"logDisputeWindowCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [disputeWindow, id, initial], 'logDisputeWindowCreated', options.sender)
	}
	
	public logDisputeWindowCreated_estimateGas = async (disputeWindow: string, id: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_disputeWindow","type":"address"},{"name":"_id","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"logDisputeWindowCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [disputeWindow, id, initial], 'logDisputeWindowCreated', options.sender)
	}

	public logDisputeWindowCreated_ = async (disputeWindow: string, id: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_disputeWindow","type":"address"},{"name":"_id","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"logDisputeWindowCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [disputeWindow, id, initial], options.sender)
		return <boolean>result[0]
	}

	public registerContract = async (key: string, address: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [key, address], 'registerContract', options.sender)
	}
	
	public registerContract_estimateGas = async (key: string, address: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [key, address], 'registerContract', options.sender)
	}

	public registerContract_ = async (key: string, address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [key, address], options.sender)
		return <boolean>result[0]
	}

	public uploader_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"uploader","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public logDisputeCrowdsourcerCompleted = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, pacingOn: boolean, totalRepStakedInPayout: TBigNumber, totalRepStakedInMarket: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_nextWindowStartTime","type":"uint256"},{"name":"_nextWindowEndTime","type":"uint256"},{"name":"_pacingOn","type":"bool"},{"name":"_totalRepStakedInPayout","type":"uint256"},{"name":"_totalRepStakedInMarket","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerCompleted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, nextWindowStartTime, nextWindowEndTime, pacingOn, totalRepStakedInPayout, totalRepStakedInMarket, disputeRound], 'logDisputeCrowdsourcerCompleted', options.sender)
	}
	
	public logDisputeCrowdsourcerCompleted_estimateGas = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, pacingOn: boolean, totalRepStakedInPayout: TBigNumber, totalRepStakedInMarket: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_nextWindowStartTime","type":"uint256"},{"name":"_nextWindowEndTime","type":"uint256"},{"name":"_pacingOn","type":"bool"},{"name":"_totalRepStakedInPayout","type":"uint256"},{"name":"_totalRepStakedInMarket","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerCompleted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, nextWindowStartTime, nextWindowEndTime, pacingOn, totalRepStakedInPayout, totalRepStakedInMarket, disputeRound], 'logDisputeCrowdsourcerCompleted', options.sender)
	}

	public logDisputeCrowdsourcerCompleted_ = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, pacingOn: boolean, totalRepStakedInPayout: TBigNumber, totalRepStakedInMarket: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_nextWindowStartTime","type":"uint256"},{"name":"_nextWindowEndTime","type":"uint256"},{"name":"_pacingOn","type":"bool"},{"name":"_totalRepStakedInPayout","type":"uint256"},{"name":"_totalRepStakedInMarket","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerCompleted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, nextWindowStartTime, nextWindowEndTime, pacingOn, totalRepStakedInPayout, totalRepStakedInMarket, disputeRound], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerContribution = async (universe: string, reporter: string, market: string, disputeCrowdsourcer: string, amountStaked: TBigNumber, description: string, payoutNumerators: Array<TBigNumber>, currentStake: TBigNumber, stakeRemaining: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_description","type":"string"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_currentStake","type":"uint256"},{"name":"_stakeRemaining","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerContribution","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, disputeCrowdsourcer, amountStaked, description, payoutNumerators, currentStake, stakeRemaining, disputeRound], 'logDisputeCrowdsourcerContribution', options.sender)
	}
	
	public logDisputeCrowdsourcerContribution_estimateGas = async (universe: string, reporter: string, market: string, disputeCrowdsourcer: string, amountStaked: TBigNumber, description: string, payoutNumerators: Array<TBigNumber>, currentStake: TBigNumber, stakeRemaining: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_description","type":"string"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_currentStake","type":"uint256"},{"name":"_stakeRemaining","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerContribution","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, disputeCrowdsourcer, amountStaked, description, payoutNumerators, currentStake, stakeRemaining, disputeRound], 'logDisputeCrowdsourcerContribution', options.sender)
	}

	public logDisputeCrowdsourcerContribution_ = async (universe: string, reporter: string, market: string, disputeCrowdsourcer: string, amountStaked: TBigNumber, description: string, payoutNumerators: Array<TBigNumber>, currentStake: TBigNumber, stakeRemaining: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_disputeCrowdsourcer","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_description","type":"string"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_currentStake","type":"uint256"},{"name":"_stakeRemaining","type":"uint256"},{"name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerContribution","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, disputeCrowdsourcer, amountStaked, description, payoutNumerators, currentStake, stakeRemaining, disputeRound], options.sender)
		return <boolean>result[0]
	}

	public logMarketOIChanged = async (universe: string, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logMarketOIChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market], 'logMarketOIChanged', options.sender)
	}
	
	public logMarketOIChanged_estimateGas = async (universe: string, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logMarketOIChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market], 'logMarketOIChanged', options.sender)
	}

	public logMarketOIChanged_ = async (universe: string, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"}],"name":"logMarketOIChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market], options.sender)
		return <boolean>result[0]
	}

	public logScalarMarketCreated = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, prices: Array<TBigNumber>, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_prices","type":"int256[]"},{"name":"_numTicks","type":"uint256"}],"name":"logScalarMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, prices, numTicks], 'logScalarMarketCreated', options.sender)
	}
	
	public logScalarMarketCreated_estimateGas = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, prices: Array<TBigNumber>, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_prices","type":"int256[]"},{"name":"_numTicks","type":"uint256"}],"name":"logScalarMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, prices, numTicks], 'logScalarMarketCreated', options.sender)
	}

	public logScalarMarketCreated_ = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, prices: Array<TBigNumber>, numTicks: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_prices","type":"int256[]"},{"name":"_numTicks","type":"uint256"}],"name":"logScalarMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, prices, numTicks], options.sender)
		return <boolean>result[0]
	}

	public derivePayoutDistributionHash_ = async (payoutNumerators: Array<TBigNumber>, numTicks: TBigNumber, numOutcomes: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_numTicks","type":"uint256"},{"name":"_numOutcomes","type":"uint256"}],"name":"derivePayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, numTicks, numOutcomes], options.sender)
		return <string>result[0]
	}

	public logCompleteSetsSold = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_numCompleteSets","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, numCompleteSets, fees], 'logCompleteSetsSold', options.sender)
	}
	
	public logCompleteSetsSold_estimateGas = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_numCompleteSets","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, numCompleteSets, fees], 'logCompleteSetsSold', options.sender)
	}

	public logCompleteSetsSold_ = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_numCompleteSets","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, account, numCompleteSets, fees], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerRedeemed = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_repReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logDisputeCrowdsourcerRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logDisputeCrowdsourcerRedeemed', options.sender)
	}
	
	public logDisputeCrowdsourcerRedeemed_estimateGas = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_repReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logDisputeCrowdsourcerRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logDisputeCrowdsourcerRedeemed', options.sender)
	}

	public logDisputeCrowdsourcerRedeemed_ = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_repReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logDisputeCrowdsourcerRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], options.sender)
		return <boolean>result[0]
	}

	public isKnownUniverse_ = async (universe: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_universe","type":"address"}],"name":"isKnownUniverse","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <boolean>result[0]
	}

	public logUniverseForked = async (forkingMarket: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_forkingMarket","type":"address"}],"name":"logUniverseForked","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [forkingMarket], 'logUniverseForked', options.sender)
	}
	
	public logUniverseForked_estimateGas = async (forkingMarket: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_forkingMarket","type":"address"}],"name":"logUniverseForked","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [forkingMarket], 'logUniverseForked', options.sender)
	}

	public logUniverseForked_ = async (forkingMarket: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_forkingMarket","type":"address"}],"name":"logUniverseForked","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [forkingMarket], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerTokensMinted = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensMinted', options.sender)
	}
	
	public logDisputeCrowdsourcerTokensMinted_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensMinted', options.sender)
	}

	public logDisputeCrowdsourcerTokensMinted_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public upgradeTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"upgradeTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public createGenesisUniverse = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createGenesisUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'createGenesisUniverse', options.sender)
	}
	
	public createGenesisUniverse_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createGenesisUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'createGenesisUniverse', options.sender)
	}

	public createGenesisUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createGenesisUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public logDesignatedReportStakeChanged = async (designatedReportStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_designatedReportStake","type":"uint256"}],"name":"logDesignatedReportStakeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [designatedReportStake], 'logDesignatedReportStakeChanged', options.sender)
	}
	
	public logDesignatedReportStakeChanged_estimateGas = async (designatedReportStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_designatedReportStake","type":"uint256"}],"name":"logDesignatedReportStakeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [designatedReportStake], 'logDesignatedReportStakeChanged', options.sender)
	}

	public logDesignatedReportStakeChanged_ = async (designatedReportStake: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_designatedReportStake","type":"uint256"}],"name":"logDesignatedReportStakeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [designatedReportStake], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensRedeemed = async (universe: string, account: string, attoParticipationTokens: TBigNumber, feePayoutShare: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_account","type":"address"},{"name":"_attoParticipationTokens","type":"uint256"},{"name":"_feePayoutShare","type":"uint256"}],"name":"logParticipationTokensRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, account, attoParticipationTokens, feePayoutShare], 'logParticipationTokensRedeemed', options.sender)
	}
	
	public logParticipationTokensRedeemed_estimateGas = async (universe: string, account: string, attoParticipationTokens: TBigNumber, feePayoutShare: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_account","type":"address"},{"name":"_attoParticipationTokens","type":"uint256"},{"name":"_feePayoutShare","type":"uint256"}],"name":"logParticipationTokensRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, account, attoParticipationTokens, feePayoutShare], 'logParticipationTokensRedeemed', options.sender)
	}

	public logParticipationTokensRedeemed_ = async (universe: string, account: string, attoParticipationTokens: TBigNumber, feePayoutShare: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_account","type":"address"},{"name":"_attoParticipationTokens","type":"uint256"},{"name":"_feePayoutShare","type":"uint256"}],"name":"logParticipationTokensRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, account, attoParticipationTokens, feePayoutShare], options.sender)
		return <boolean>result[0]
	}

	public logInitialReporterRedeemed = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_repReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logInitialReporterRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logInitialReporterRedeemed', options.sender)
	}
	
	public logInitialReporterRedeemed_estimateGas = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_repReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logInitialReporterRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logInitialReporterRedeemed', options.sender)
	}

	public logInitialReporterRedeemed_ = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_amountRedeemed","type":"uint256"},{"name":"_repReceived","type":"uint256"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"logInitialReporterRedeemed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], options.sender)
		return <boolean>result[0]
	}

	public logReportingFeeChanged = async (reportingFee: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingFee","type":"uint256"}],"name":"logReportingFeeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reportingFee], 'logReportingFeeChanged', options.sender)
	}
	
	public logReportingFeeChanged_estimateGas = async (reportingFee: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingFee","type":"uint256"}],"name":"logReportingFeeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reportingFee], 'logReportingFeeChanged', options.sender)
	}

	public logReportingFeeChanged_ = async (reportingFee: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingFee","type":"uint256"}],"name":"logReportingFeeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reportingFee], options.sender)
		return <boolean>result[0]
	}

	public logValidityBondChanged = async (validityBond: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_validityBond","type":"uint256"}],"name":"logValidityBondChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [validityBond], 'logValidityBondChanged', options.sender)
	}
	
	public logValidityBondChanged_estimateGas = async (validityBond: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_validityBond","type":"uint256"}],"name":"logValidityBondChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [validityBond], 'logValidityBondChanged', options.sender)
	}

	public logValidityBondChanged_ = async (validityBond: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_validityBond","type":"uint256"}],"name":"logValidityBondChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [validityBond], options.sender)
		return <boolean>result[0]
	}

	public isKnownCrowdsourcer_ = async (crowdsourcer: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_crowdsourcer","type":"address"}],"name":"isKnownCrowdsourcer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [crowdsourcer], options.sender)
		return <boolean>result[0]
	}

	public logCompleteSetsPurchased = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, numCompleteSets], 'logCompleteSetsPurchased', options.sender)
	}
	
	public logCompleteSetsPurchased_estimateGas = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, numCompleteSets], 'logCompleteSetsPurchased', options.sender)
	}

	public logCompleteSetsPurchased_ = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, account, numCompleteSets], options.sender)
		return <boolean>result[0]
	}

	public logMarketParticipantsDisavowed = async (universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"logMarketParticipantsDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe], 'logMarketParticipantsDisavowed', options.sender)
	}
	
	public logMarketParticipantsDisavowed_estimateGas = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"logMarketParticipantsDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe], 'logMarketParticipantsDisavowed', options.sender)
	}

	public logMarketParticipantsDisavowed_ = async (universe: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"logMarketParticipantsDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <boolean>result[0]
	}

	public logTimestampSet = async (newTimestamp: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newTimestamp], 'logTimestampSet', options.sender)
	}
	
	public logTimestampSet_estimateGas = async (newTimestamp: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newTimestamp], 'logTimestampSet', options.sender)
	}

	public logTimestampSet_ = async (newTimestamp: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newTimestamp], options.sender)
		return <boolean>result[0]
	}

	public logTradingProceedsClaimed = async (universe: string, sender: string, market: string, outcome: TBigNumber, numShares: TBigNumber, numPayoutTokens: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numShares","type":"uint256"},{"name":"_numPayoutTokens","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, sender, market, outcome, numShares, numPayoutTokens, fees], 'logTradingProceedsClaimed', options.sender)
	}
	
	public logTradingProceedsClaimed_estimateGas = async (universe: string, sender: string, market: string, outcome: TBigNumber, numShares: TBigNumber, numPayoutTokens: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numShares","type":"uint256"},{"name":"_numPayoutTokens","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, sender, market, outcome, numShares, numPayoutTokens, fees], 'logTradingProceedsClaimed', options.sender)
	}

	public logTradingProceedsClaimed_ = async (universe: string, sender: string, market: string, outcome: TBigNumber, numShares: TBigNumber, numPayoutTokens: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_sender","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numShares","type":"uint256"},{"name":"_numPayoutTokens","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, sender, market, outcome, numShares, numPayoutTokens, fees], options.sender)
		return <boolean>result[0]
	}

	public logShareTokensBalanceChanged = async (account: string, market: string, outcome: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_account","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logShareTokensBalanceChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [account, market, outcome, balance], 'logShareTokensBalanceChanged', options.sender)
	}
	
	public logShareTokensBalanceChanged_estimateGas = async (account: string, market: string, outcome: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_account","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logShareTokensBalanceChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [account, market, outcome, balance], 'logShareTokensBalanceChanged', options.sender)
	}

	public logShareTokensBalanceChanged_ = async (account: string, market: string, outcome: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_account","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logShareTokensBalanceChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [account, market, outcome, balance], options.sender)
		return <boolean>result[0]
	}

	public logYesNoMarketCreated = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"}],"name":"logYesNoMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash], 'logYesNoMarketCreated', options.sender)
	}
	
	public logYesNoMarketCreated_estimateGas = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"}],"name":"logYesNoMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash], 'logYesNoMarketCreated', options.sender)
	}

	public logYesNoMarketCreated_ = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"}],"name":"logYesNoMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash], options.sender)
		return <boolean>result[0]
	}

	public logReputationTokensMinted = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logReputationTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensMinted', options.sender)
	}
	
	public logReputationTokensMinted_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logReputationTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensMinted', options.sender)
	}

	public logReputationTokensMinted_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logReputationTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logInitialReportSubmitted = async (universe: string, reporter: string, market: string, initialReporter: string, amountStaked: TBigNumber, isDesignatedReporter: boolean, payoutNumerators: Array<TBigNumber>, description: string, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_initialReporter","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_isDesignatedReporter","type":"bool"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_nextWindowStartTime","type":"uint256"},{"name":"_nextWindowEndTime","type":"uint256"}],"name":"logInitialReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, initialReporter, amountStaked, isDesignatedReporter, payoutNumerators, description, nextWindowStartTime, nextWindowEndTime], 'logInitialReportSubmitted', options.sender)
	}
	
	public logInitialReportSubmitted_estimateGas = async (universe: string, reporter: string, market: string, initialReporter: string, amountStaked: TBigNumber, isDesignatedReporter: boolean, payoutNumerators: Array<TBigNumber>, description: string, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_initialReporter","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_isDesignatedReporter","type":"bool"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_nextWindowStartTime","type":"uint256"},{"name":"_nextWindowEndTime","type":"uint256"}],"name":"logInitialReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, initialReporter, amountStaked, isDesignatedReporter, payoutNumerators, description, nextWindowStartTime, nextWindowEndTime], 'logInitialReportSubmitted', options.sender)
	}

	public logInitialReportSubmitted_ = async (universe: string, reporter: string, market: string, initialReporter: string, amountStaked: TBigNumber, isDesignatedReporter: boolean, payoutNumerators: Array<TBigNumber>, description: string, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_reporter","type":"address"},{"name":"_market","type":"address"},{"name":"_initialReporter","type":"address"},{"name":"_amountStaked","type":"uint256"},{"name":"_isDesignatedReporter","type":"bool"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_nextWindowStartTime","type":"uint256"},{"name":"_nextWindowEndTime","type":"uint256"}],"name":"logInitialReportSubmitted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, initialReporter, amountStaked, isDesignatedReporter, payoutNumerators, description, nextWindowStartTime, nextWindowEndTime], options.sender)
		return <boolean>result[0]
	}

	public logReputationTokensTransferred = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to, value, fromBalance, toBalance], 'logReputationTokensTransferred', options.sender)
	}
	
	public logReputationTokensTransferred_estimateGas = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to, value, fromBalance, toBalance], 'logReputationTokensTransferred', options.sender)
	}

	public logReputationTokensTransferred_ = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_fromBalance","type":"uint256"},{"name":"_toBalance","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to, value, fromBalance, toBalance], options.sender)
		return <boolean>result[0]
	}

	public logInitialReporterTransferred = async (universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"logInitialReporterTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, from, to], 'logInitialReporterTransferred', options.sender)
	}
	
	public logInitialReporterTransferred_estimateGas = async (universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"logInitialReporterTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, from, to], 'logInitialReporterTransferred', options.sender)
	}

	public logInitialReporterTransferred_ = async (universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"logInitialReporterTransferred","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, from, to], options.sender)
		return <boolean>result[0]
	}

	public isKnownMarket_ = async (market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"}],"name":"isKnownMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <boolean>result[0]
	}

	public finishDeployment = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'finishDeployment', options.sender)
	}
	
	public finishDeployment_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'finishDeployment', options.sender)
	}

	public finishDeployment_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public trustedTransfer = async (token: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token, from, to, amount], 'trustedTransfer', options.sender)
	}
	
	public trustedTransfer_estimateGas = async (token: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token, from, to, amount], 'trustedTransfer', options.sender)
	}

	public trustedTransfer_ = async (token: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"trustedTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token, from, to, amount], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensMinted = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logParticipationTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensMinted', options.sender)
	}
	
	public logParticipationTokensMinted_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logParticipationTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensMinted', options.sender)
	}

	public logParticipationTokensMinted_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_totalSupply","type":"uint256"},{"name":"_balance","type":"uint256"}],"name":"logParticipationTokensMinted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logCategoricalMarketCreated = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, outcomes: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_outcomes","type":"bytes32[]"}],"name":"logCategoricalMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, outcomes], 'logCategoricalMarketCreated', options.sender)
	}
	
	public logCategoricalMarketCreated_estimateGas = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, outcomes: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_outcomes","type":"bytes32[]"}],"name":"logCategoricalMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, outcomes], 'logCategoricalMarketCreated', options.sender)
	}

	public logCategoricalMarketCreated_ = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, outcomes: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_extraInfo","type":"string"},{"name":"_market","type":"address"},{"name":"_marketCreator","type":"address"},{"name":"_designatedReporter","type":"address"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_outcomes","type":"bytes32[]"}],"name":"logCategoricalMarketCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, outcomes], options.sender)
		return <boolean>result[0]
	}

	public lookup_ = async (key: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_key","type":"bytes32"}],"name":"lookup","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [key], options.sender)
		return <string>result[0]
	}
}


export class Cash<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public supply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"supply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async (from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, amount], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public DAI_ONE_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DAI_ONE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public daiVat_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"daiVat","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public ETERNAL_APPROVAL_VALUE_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ETERNAL_APPROVAL_VALUE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (owner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner], options.sender)
		return <TBigNumber>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public transfer = async (to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, amount], 'transfer', options.sender)
	}

	public transfer_ = async (to: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, amount], options.sender)
		return <boolean>result[0]
	}

	public wards_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"wards","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public daiJoin_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"daiJoin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public joinMint = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"joinMint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [usr, wad], 'joinMint', options.sender)
	}
	
	public joinMint_estimateGas = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"joinMint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [usr, wad], 'joinMint', options.sender)
	}

	public joinMint_ = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"joinMint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [usr, wad], options.sender)
		return <boolean>result[0]
	}

	public joinBurn = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"joinBurn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [usr, wad], 'joinBurn', options.sender)
	}
	
	public joinBurn_estimateGas = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"joinBurn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [usr, wad], 'joinBurn', options.sender)
	}

	public joinBurn_ = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"joinBurn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [usr, wad], options.sender)
		return <boolean>result[0]
	}
}


export class CashFaucet<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public vat_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"vat","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public faucet = async (arg0: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [arg0], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (arg0: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [arg0], 'faucet', options.sender)
	}

	public faucet_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public mcdFaucet_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"mcdFaucet","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public colJoin_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"colJoin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public col_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"col","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public daiJoin_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"daiJoin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public colIlk_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"colIlk","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public dai_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"dai","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class CashFaucetProxy<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}


}


export class ERC1820Registry<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public setInterfaceImplementer = async (addr: string, interfaceHash: string, implementer: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_interfaceHash","type":"bytes32"},{"name":"_implementer","type":"address"}],"name":"setInterfaceImplementer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [addr, interfaceHash, implementer], 'setInterfaceImplementer', options.sender)
	}
	
	public setInterfaceImplementer_estimateGas = async (addr: string, interfaceHash: string, implementer: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_interfaceHash","type":"bytes32"},{"name":"_implementer","type":"address"}],"name":"setInterfaceImplementer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [addr, interfaceHash, implementer], 'setInterfaceImplementer', options.sender)
	}

	public setInterfaceImplementer_ = async (addr: string, interfaceHash: string, implementer: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_interfaceHash","type":"bytes32"},{"name":"_implementer","type":"address"}],"name":"setInterfaceImplementer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [addr, interfaceHash, implementer], options.sender)
	}

	public getManager_ = async (addr: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"getManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [addr], options.sender)
		return <string>result[0]
	}

	public setManager = async (addr: string, newManager: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_newManager","type":"address"}],"name":"setManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [addr, newManager], 'setManager', options.sender)
	}
	
	public setManager_estimateGas = async (addr: string, newManager: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_newManager","type":"address"}],"name":"setManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [addr, newManager], 'setManager', options.sender)
	}

	public setManager_ = async (addr: string, newManager: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_newManager","type":"address"}],"name":"setManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [addr, newManager], options.sender)
	}

	public interfaceHash_ = async (interfaceName: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_interfaceName","type":"string"}],"name":"interfaceHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [interfaceName], options.sender)
		return <string>result[0]
	}

	public isERC165Interface_ = async (interfaceHash: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_interfaceHash","type":"bytes32"}],"name":"isERC165Interface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [interfaceHash], options.sender)
		return <boolean>result[0]
	}

	public updateERC165Cache = async (contract: string, interfaceId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_contract","type":"address"},{"name":"_interfaceId","type":"bytes4"}],"name":"updateERC165Cache","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [contract, interfaceId], 'updateERC165Cache', options.sender)
	}
	
	public updateERC165Cache_estimateGas = async (contract: string, interfaceId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_contract","type":"address"},{"name":"_interfaceId","type":"bytes4"}],"name":"updateERC165Cache","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [contract, interfaceId], 'updateERC165Cache', options.sender)
	}

	public updateERC165Cache_ = async (contract: string, interfaceId: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_contract","type":"address"},{"name":"_interfaceId","type":"bytes4"}],"name":"updateERC165Cache","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [contract, interfaceId], options.sender)
	}

	public getInterfaceImplementer_ = async (addr: string, interfaceHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_addr","type":"address"},{"name":"_interfaceHash","type":"bytes32"}],"name":"getInterfaceImplementer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [addr, interfaceHash], options.sender)
		return <string>result[0]
	}

	public implementsERC165InterfaceNoCache_ = async (contract: string, interfaceId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_contract","type":"address"},{"name":"_interfaceId","type":"bytes4"}],"name":"implementsERC165InterfaceNoCache","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [contract, interfaceId], options.sender)
		return <boolean>result[0]
	}

	public implementsERC165Interface_ = async (contract: string, interfaceId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_contract","type":"address"},{"name":"_interfaceId","type":"bytes4"}],"name":"implementsERC165Interface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [contract, interfaceId], options.sender)
		return <boolean>result[0]
	}
}


export class GnosisSafe<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getMessageHash_ = async (message: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [message], options.sender)
		return <string>result[0]
	}

	public addOwnerWithThreshold = async (owner: string, threshold: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owner, threshold], 'addOwnerWithThreshold', options.sender)
	}
	
	public addOwnerWithThreshold_estimateGas = async (owner: string, threshold: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owner, threshold], 'addOwnerWithThreshold', options.sender)
	}

	public addOwnerWithThreshold_ = async (owner: string, threshold: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [owner, threshold], options.sender)
	}

	public DOMAIN_SEPARATOR_TYPEHASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DOMAIN_SEPARATOR_TYPEHASH","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isValidSignature = async (data: string, signature: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"name":"","type":"bytes4"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [data, signature], 'isValidSignature', options.sender)
	}
	
	public isValidSignature_estimateGas = async (data: string, signature: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"name":"","type":"bytes4"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [data, signature], 'isValidSignature', options.sender)
	}

	public isValidSignature_ = async (data: string, signature: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"name":"","type":"bytes4"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [data, signature], options.sender)
		return <string>result[0]
	}

	public isOwner_ = async (owner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner], options.sender)
		return <boolean>result[0]
	}

	public execTransactionFromModule = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value, data, operation], 'execTransactionFromModule', options.sender)
	}
	
	public execTransactionFromModule_estimateGas = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value, data, operation], 'execTransactionFromModule', options.sender)
	}

	public execTransactionFromModule_ = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value, data, operation], options.sender)
		return <boolean>result[0]
	}

	public signedMessages_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"signedMessages","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public enableModule = async (module: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"module","type":"address"}],"name":"enableModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [module], 'enableModule', options.sender)
	}
	
	public enableModule_estimateGas = async (module: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"module","type":"address"}],"name":"enableModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [module], 'enableModule', options.sender)
	}

	public enableModule_ = async (module: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"module","type":"address"}],"name":"enableModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [module], options.sender)
	}

	public changeThreshold = async (threshold: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [threshold], 'changeThreshold', options.sender)
	}
	
	public changeThreshold_estimateGas = async (threshold: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [threshold], 'changeThreshold', options.sender)
	}

	public changeThreshold_ = async (threshold: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [threshold], options.sender)
	}

	public execTransaction = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, safeTxGas: TBigNumber, baseGas: TBigNumber, gasPrice: TBigNumber, gasToken: string, refundReceiver: string, signatures: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"},{"name":"safeTxGas","type":"uint256"},{"name":"baseGas","type":"uint256"},{"name":"gasPrice","type":"uint256"},{"name":"gasToken","type":"address"},{"name":"refundReceiver","type":"address"},{"name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures], 'execTransaction', options.sender)
	}
	
	public execTransaction_estimateGas = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, safeTxGas: TBigNumber, baseGas: TBigNumber, gasPrice: TBigNumber, gasToken: string, refundReceiver: string, signatures: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"},{"name":"safeTxGas","type":"uint256"},{"name":"baseGas","type":"uint256"},{"name":"gasPrice","type":"uint256"},{"name":"gasToken","type":"address"},{"name":"refundReceiver","type":"address"},{"name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures], 'execTransaction', options.sender)
	}

	public execTransaction_ = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, safeTxGas: TBigNumber, baseGas: TBigNumber, gasPrice: TBigNumber, gasToken: string, refundReceiver: string, signatures: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"},{"name":"safeTxGas","type":"uint256"},{"name":"baseGas","type":"uint256"},{"name":"gasPrice","type":"uint256"},{"name":"gasToken","type":"address"},{"name":"refundReceiver","type":"address"},{"name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures], options.sender)
		return <boolean>result[0]
	}

	public approvedHashes_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"}],"name":"approvedHashes","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public changeMasterCopy = async (masterCopy: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_masterCopy","type":"address"}],"name":"changeMasterCopy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [masterCopy], 'changeMasterCopy', options.sender)
	}
	
	public changeMasterCopy_estimateGas = async (masterCopy: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_masterCopy","type":"address"}],"name":"changeMasterCopy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [masterCopy], 'changeMasterCopy', options.sender)
	}

	public changeMasterCopy_ = async (masterCopy: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_masterCopy","type":"address"}],"name":"changeMasterCopy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [masterCopy], options.sender)
	}

	public signMessage = async (data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_data","type":"bytes"}],"name":"signMessage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [data], 'signMessage', options.sender)
	}
	
	public signMessage_estimateGas = async (data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_data","type":"bytes"}],"name":"signMessage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [data], 'signMessage', options.sender)
	}

	public signMessage_ = async (data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_data","type":"bytes"}],"name":"signMessage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [data], options.sender)
	}

	public SENTINEL_MODULES_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"SENTINEL_MODULES","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public SENTINEL_OWNERS_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"SENTINEL_OWNERS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOwners_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwners","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public NAME_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"NAME","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public masterCopy_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"masterCopy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public setup = async (owners: Array<string>, threshold: TBigNumber, to: string, data: string, paymentToken: string, payment: TBigNumber, paymentReceiver: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_threshold","type":"uint256"},{"name":"to","type":"address"},{"name":"data","type":"bytes"},{"name":"paymentToken","type":"address"},{"name":"payment","type":"uint256"},{"name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owners, threshold, to, data, paymentToken, payment, paymentReceiver], 'setup', options.sender)
	}
	
	public setup_estimateGas = async (owners: Array<string>, threshold: TBigNumber, to: string, data: string, paymentToken: string, payment: TBigNumber, paymentReceiver: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_threshold","type":"uint256"},{"name":"to","type":"address"},{"name":"data","type":"bytes"},{"name":"paymentToken","type":"address"},{"name":"payment","type":"uint256"},{"name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owners, threshold, to, data, paymentToken, payment, paymentReceiver], 'setup', options.sender)
	}

	public setup_ = async (owners: Array<string>, threshold: TBigNumber, to: string, data: string, paymentToken: string, payment: TBigNumber, paymentReceiver: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_threshold","type":"uint256"},{"name":"to","type":"address"},{"name":"data","type":"bytes"},{"name":"paymentToken","type":"address"},{"name":"payment","type":"uint256"},{"name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [owners, threshold, to, data, paymentToken, payment, paymentReceiver], options.sender)
	}

	public nonce_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"nonce","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getModules_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getModules","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public SAFE_MSG_TYPEHASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"SAFE_MSG_TYPEHASH","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public requiredTxGas = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"}],"name":"requiredTxGas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value, data, operation], 'requiredTxGas', options.sender)
	}
	
	public requiredTxGas_estimateGas = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"}],"name":"requiredTxGas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value, data, operation], 'requiredTxGas', options.sender)
	}

	public requiredTxGas_ = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"}],"name":"requiredTxGas","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value, data, operation], options.sender)
		return <TBigNumber>result[0]
	}

	public SAFE_TX_TYPEHASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"SAFE_TX_TYPEHASH","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public approveHash = async (hashToApprove: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [hashToApprove], 'approveHash', options.sender)
	}
	
	public approveHash_estimateGas = async (hashToApprove: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [hashToApprove], 'approveHash', options.sender)
	}

	public approveHash_ = async (hashToApprove: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [hashToApprove], options.sender)
	}

	public getTransactionHash_ = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, safeTxGas: TBigNumber, baseGas: TBigNumber, gasPrice: TBigNumber, gasToken: string, refundReceiver: string, nonce: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"},{"name":"safeTxGas","type":"uint256"},{"name":"baseGas","type":"uint256"},{"name":"gasPrice","type":"uint256"},{"name":"gasToken","type":"address"},{"name":"refundReceiver","type":"address"},{"name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, nonce], options.sender)
		return <string>result[0]
	}

	public disableModule = async (prevModule: string, module: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevModule","type":"address"},{"name":"module","type":"address"}],"name":"disableModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [prevModule, module], 'disableModule', options.sender)
	}
	
	public disableModule_estimateGas = async (prevModule: string, module: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevModule","type":"address"},{"name":"module","type":"address"}],"name":"disableModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [prevModule, module], 'disableModule', options.sender)
	}

	public disableModule_ = async (prevModule: string, module: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevModule","type":"address"},{"name":"module","type":"address"}],"name":"disableModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [prevModule, module], options.sender)
	}

	public swapOwner = async (prevOwner: string, oldOwner: string, newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevOwner","type":"address"},{"name":"oldOwner","type":"address"},{"name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [prevOwner, oldOwner, newOwner], 'swapOwner', options.sender)
	}
	
	public swapOwner_estimateGas = async (prevOwner: string, oldOwner: string, newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevOwner","type":"address"},{"name":"oldOwner","type":"address"},{"name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [prevOwner, oldOwner, newOwner], 'swapOwner', options.sender)
	}

	public swapOwner_ = async (prevOwner: string, oldOwner: string, newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevOwner","type":"address"},{"name":"oldOwner","type":"address"},{"name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [prevOwner, oldOwner, newOwner], options.sender)
	}

	public getThreshold_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getThreshold","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public encodeTransactionData_ = async (to: string, value: TBigNumber, data: string, operation: TBigNumber, safeTxGas: TBigNumber, baseGas: TBigNumber, gasPrice: TBigNumber, gasToken: string, refundReceiver: string, nonce: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operation","type":"uint8"},{"name":"safeTxGas","type":"uint256"},{"name":"baseGas","type":"uint256"},{"name":"gasPrice","type":"uint256"},{"name":"gasToken","type":"address"},{"name":"refundReceiver","type":"address"},{"name":"_nonce","type":"uint256"}],"name":"encodeTransactionData","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, nonce], options.sender)
		return <string>result[0]
	}

	public domainSeparator_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"domainSeparator","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public removeOwner = async (prevOwner: string, owner: string, threshold: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevOwner","type":"address"},{"name":"owner","type":"address"},{"name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [prevOwner, owner, threshold], 'removeOwner', options.sender)
	}
	
	public removeOwner_estimateGas = async (prevOwner: string, owner: string, threshold: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevOwner","type":"address"},{"name":"owner","type":"address"},{"name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [prevOwner, owner, threshold], 'removeOwner', options.sender)
	}

	public removeOwner_ = async (prevOwner: string, owner: string, threshold: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"prevOwner","type":"address"},{"name":"owner","type":"address"},{"name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [prevOwner, owner, threshold], options.sender)
	}

	public VERSION_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class GnosisSafeRegistry<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public register = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'register', options.sender)
	}
	
	public register_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'register', options.sender)
	}

	public register_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public accountSafes_ = async (arg0: string, arg1: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"accountSafes","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getSafe_ = async (account: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_account","type":"address"}],"name":"getSafe","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <string>result[0]
	}

	public accountSafeIndexes_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"accountSafeIndexes","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public deRegister = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'deRegister', options.sender)
	}
	
	public deRegister_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'deRegister', options.sender)
	}

	public deRegister_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public callRegister = async (gnosisSafeRegistry: string, augur: string, createOrder: string, fillOrder: string, cash: string, shareToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_gnosisSafeRegistry","type":"address"},{"name":"_augur","type":"address"},{"name":"_createOrder","type":"address"},{"name":"_fillOrder","type":"address"},{"name":"_cash","type":"address"},{"name":"_shareToken","type":"address"}],"name":"callRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [gnosisSafeRegistry, augur, createOrder, fillOrder, cash, shareToken], 'callRegister', options.sender)
	}
	
	public callRegister_estimateGas = async (gnosisSafeRegistry: string, augur: string, createOrder: string, fillOrder: string, cash: string, shareToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_gnosisSafeRegistry","type":"address"},{"name":"_augur","type":"address"},{"name":"_createOrder","type":"address"},{"name":"_fillOrder","type":"address"},{"name":"_cash","type":"address"},{"name":"_shareToken","type":"address"}],"name":"callRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [gnosisSafeRegistry, augur, createOrder, fillOrder, cash, shareToken], 'callRegister', options.sender)
	}

	public callRegister_ = async (gnosisSafeRegistry: string, augur: string, createOrder: string, fillOrder: string, cash: string, shareToken: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_gnosisSafeRegistry","type":"address"},{"name":"_augur","type":"address"},{"name":"_createOrder","type":"address"},{"name":"_fillOrder","type":"address"},{"name":"_cash","type":"address"},{"name":"_shareToken","type":"address"}],"name":"callRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [gnosisSafeRegistry, augur, createOrder, fillOrder, cash, shareToken], options.sender)
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public gnosisSafeMasterCopy_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"gnosisSafeMasterCopy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public proxyCodeHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"proxyCodeHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class LegacyReputationToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public defaultOperators_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalTheoreticalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, value], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public granularity_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public migrateOutByPayout = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}
	
	public migrateOutByPayout_estimateGas = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}

	public migrateOutByPayout_ = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, attotokens], options.sender)
		return <boolean>result[0]
	}

	public erc1820Registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"erc1820Registry","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public operatorSend = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}
	
	public operatorSend_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}

	public operatorSend_ = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [sender, recipient, amount, data, operatorData], options.sender)
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public migrateOut = async (destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [destination, attotokens], 'migrateOut', options.sender)
	}
	
	public migrateOut_estimateGas = async (destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [destination, attotokens], 'migrateOut', options.sender)
	}

	public migrateOut_ = async (destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (tokenHolder: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenHolder], options.sender)
		return <TBigNumber>result[0]
	}

	public trustedDisputeWindowTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}
	
	public trustedDisputeWindowTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}

	public trustedDisputeWindowTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public getLegacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLegacyRepToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getIsMigratingFromLegacy_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getIsMigratingFromLegacy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public migrateBalancesFromLegacyRep = async (holders: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_holders","type":"address[]"}],"name":"migrateBalancesFromLegacyRep","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holders], 'migrateBalancesFromLegacyRep', options.sender)
	}
	
	public migrateBalancesFromLegacyRep_estimateGas = async (holders: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_holders","type":"address[]"}],"name":"migrateBalancesFromLegacyRep","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holders], 'migrateBalancesFromLegacyRep', options.sender)
	}

	public migrateBalancesFromLegacyRep_ = async (holders: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_holders","type":"address[]"}],"name":"migrateBalancesFromLegacyRep","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holders], options.sender)
		return <boolean>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTotalMigrated_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalMigrated","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public authorizeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'authorizeOperator', options.sender)
	}
	
	public authorizeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'authorizeOperator', options.sender)
	}

	public authorizeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public noHooksTransfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}
	
	public noHooksTransfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}

	public noHooksTransfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public send = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, data], 'send', options.sender)
	}
	
	public send_estimateGas = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, data], 'send', options.sender)
	}

	public send_ = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [recipient, amount, data], options.sender)
	}

	public migrateIn = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}
	
	public migrateIn_estimateGas = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}

	public migrateIn_ = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reporter, attotokens], options.sender)
		return <boolean>result[0]
	}

	public updateParentTotalTheoreticalSupply = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateParentTotalTheoreticalSupply","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'updateParentTotalTheoreticalSupply', options.sender)
	}
	
	public updateParentTotalTheoreticalSupply_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateParentTotalTheoreticalSupply","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'updateParentTotalTheoreticalSupply', options.sender)
	}

	public updateParentTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateParentTotalTheoreticalSupply","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public transfer = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value], 'transfer', options.sender)
	}

	public transfer_ = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public initializeERC1820 = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initializeERC1820","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initializeERC1820', options.sender)
	}
	
	public initializeERC1820_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initializeERC1820","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initializeERC1820', options.sender)
	}

	public initializeERC1820_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initializeERC1820","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public trustedReportingParticipantTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}
	
	public trustedReportingParticipantTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}

	public trustedReportingParticipantTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public controllerLookupName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe], 'initialize', options.sender)
	}

	public initialize_ = async (universe: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [universe], options.sender)
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public isOperatorFor_ = async (operator: string, tokenHolder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [operator, tokenHolder], options.sender)
		return <boolean>result[0]
	}

	public updateSiblingMigrationTotal = async (token: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"}],"name":"updateSiblingMigrationTotal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token], 'updateSiblingMigrationTotal', options.sender)
	}
	
	public updateSiblingMigrationTotal_estimateGas = async (token: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"}],"name":"updateSiblingMigrationTotal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token], 'updateSiblingMigrationTotal', options.sender)
	}

	public updateSiblingMigrationTotal_ = async (token: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_token","type":"address"}],"name":"updateSiblingMigrationTotal","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token], options.sender)
		return <boolean>result[0]
	}

	public mintForReportingParticipant = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}
	
	public mintForReportingParticipant_estimateGas = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}

	public mintForReportingParticipant_ = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountMigrated], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public allowance_ = async (holder: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"holder","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [holder, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public migrateAllowancesFromLegacyRep = async (owners: Array<string>, spenders: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_spenders","type":"address[]"}],"name":"migrateAllowancesFromLegacyRep","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owners, spenders], 'migrateAllowancesFromLegacyRep', options.sender)
	}
	
	public migrateAllowancesFromLegacyRep_estimateGas = async (owners: Array<string>, spenders: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_spenders","type":"address[]"}],"name":"migrateAllowancesFromLegacyRep","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owners, spenders], 'migrateAllowancesFromLegacyRep', options.sender)
	}

	public migrateAllowancesFromLegacyRep_ = async (owners: Array<string>, spenders: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_spenders","type":"address[]"}],"name":"migrateAllowancesFromLegacyRep","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [owners, spenders], options.sender)
		return <boolean>result[0]
	}

	public getTargetSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTargetSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public trustedMarketTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}
	
	public trustedMarketTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}

	public trustedMarketTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public revokeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'revokeOperator', options.sender)
	}
	
	public revokeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'revokeOperator', options.sender)
	}

	public revokeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public trustedUniverseTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}
	
	public trustedUniverseTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}

	public trustedUniverseTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}
}


export class ProxyFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createProxyWithNonce = async (mastercopy: string, initializer: string, saltNonce: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_mastercopy","type":"address"},{"name":"initializer","type":"bytes"},{"name":"saltNonce","type":"uint256"}],"name":"createProxyWithNonce","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [mastercopy, initializer, saltNonce], 'createProxyWithNonce', options.sender)
	}
	
	public createProxyWithNonce_estimateGas = async (mastercopy: string, initializer: string, saltNonce: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_mastercopy","type":"address"},{"name":"initializer","type":"bytes"},{"name":"saltNonce","type":"uint256"}],"name":"createProxyWithNonce","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [mastercopy, initializer, saltNonce], 'createProxyWithNonce', options.sender)
	}

	public createProxyWithNonce_ = async (mastercopy: string, initializer: string, saltNonce: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_mastercopy","type":"address"},{"name":"initializer","type":"bytes"},{"name":"saltNonce","type":"uint256"}],"name":"createProxyWithNonce","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [mastercopy, initializer, saltNonce], options.sender)
		return <string>result[0]
	}

	public calculateCreateProxyWithNonceAddress = async (mastercopy: string, initializer: string, saltNonce: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_mastercopy","type":"address"},{"name":"initializer","type":"bytes"},{"name":"saltNonce","type":"uint256"}],"name":"calculateCreateProxyWithNonceAddress","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [mastercopy, initializer, saltNonce], 'calculateCreateProxyWithNonceAddress', options.sender)
	}
	
	public calculateCreateProxyWithNonceAddress_estimateGas = async (mastercopy: string, initializer: string, saltNonce: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_mastercopy","type":"address"},{"name":"initializer","type":"bytes"},{"name":"saltNonce","type":"uint256"}],"name":"calculateCreateProxyWithNonceAddress","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [mastercopy, initializer, saltNonce], 'calculateCreateProxyWithNonceAddress', options.sender)
	}

	public calculateCreateProxyWithNonceAddress_ = async (mastercopy: string, initializer: string, saltNonce: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_mastercopy","type":"address"},{"name":"initializer","type":"bytes"},{"name":"saltNonce","type":"uint256"}],"name":"calculateCreateProxyWithNonceAddress","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [mastercopy, initializer, saltNonce], options.sender)
		return <string>result[0]
	}

	public proxyCreationCode_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"proxyCreationCode","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createProxy = async (masterCopy: string, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"masterCopy","type":"address"},{"name":"data","type":"bytes"}],"name":"createProxy","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [masterCopy, data], 'createProxy', options.sender)
	}
	
	public createProxy_estimateGas = async (masterCopy: string, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"masterCopy","type":"address"},{"name":"data","type":"bytes"}],"name":"createProxy","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [masterCopy, data], 'createProxy', options.sender)
	}

	public createProxy_ = async (masterCopy: string, data: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"masterCopy","type":"address"},{"name":"data","type":"bytes"}],"name":"createProxy","outputs":[{"name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [masterCopy, data], options.sender)
		return <string>result[0]
	}

	public proxyRuntimeCode_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"proxyRuntimeCode","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class RepPriceOracle<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public repPriceinAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"repPriceinAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getRepPriceInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRepPriceInAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public setRepPriceInAttoCash = async (repPriceinAttoCash: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_repPriceinAttoCash","type":"uint256"}],"name":"setRepPriceInAttoCash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [repPriceinAttoCash], 'setRepPriceInAttoCash', options.sender)
	}
	
	public setRepPriceInAttoCash_estimateGas = async (repPriceinAttoCash: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_repPriceinAttoCash","type":"uint256"}],"name":"setRepPriceInAttoCash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [repPriceinAttoCash], 'setRepPriceInAttoCash', options.sender)
	}

	public setRepPriceInAttoCash_ = async (repPriceinAttoCash: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_repPriceinAttoCash","type":"uint256"}],"name":"setRepPriceInAttoCash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [repPriceinAttoCash], options.sender)
		return <boolean>result[0]
	}
}


export class TestNetDaiJoin<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public vat_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"vat","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public join = async (urn: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"urn","type":"address"},{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [urn, wad], 'join', options.sender)
	}
	
	public join_estimateGas = async (urn: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"urn","type":"address"},{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [urn, wad], 'join', options.sender)
	}

	public join_ = async (urn: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"urn","type":"address"},{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [urn, wad], options.sender)
	}

	public exit = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [usr, wad], 'exit', options.sender)
	}
	
	public exit_estimateGas = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [usr, wad], 'exit', options.sender)
	}

	public exit_ = async (usr: string, wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"},{"name":"wad","type":"uint256"}],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [usr, wad], options.sender)
	}

	public dai_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"dai","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class TestNetDaiPot<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public join = async (wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [wad], 'join', options.sender)
	}
	
	public join_estimateGas = async (wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [wad], 'join', options.sender)
	}

	public join_ = async (wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"join","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [wad], options.sender)
	}

	public pie_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"pie","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public time_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"time","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public rho_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"rho","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public Pie_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"Pie","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public vat_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"vat","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public dsr_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"dsr","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public setDSR = async (dsr: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_dsr","type":"uint256"}],"name":"setDSR","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [dsr], 'setDSR', options.sender)
	}
	
	public setDSR_estimateGas = async (dsr: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_dsr","type":"uint256"}],"name":"setDSR","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [dsr], 'setDSR', options.sender)
	}

	public setDSR_ = async (dsr: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_dsr","type":"uint256"}],"name":"setDSR","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [dsr], options.sender)
		return <boolean>result[0]
	}

	public exit = async (wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [wad], 'exit', options.sender)
	}
	
	public exit_estimateGas = async (wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [wad], 'exit', options.sender)
	}

	public exit_ = async (wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"exit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [wad], options.sender)
	}

	public drip = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"drip","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'drip', options.sender)
	}
	
	public drip_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"drip","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'drip', options.sender)
	}

	public drip_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"drip","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public chi_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"chi","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class TestNetDaiVat<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public can_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"can","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public dai_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"dai","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public frob = async (i: string, u: string, v: string, w: string, dink: TBigNumber, dart: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"i","type":"bytes32"},{"name":"u","type":"address"},{"name":"v","type":"address"},{"name":"w","type":"address"},{"name":"dink","type":"int256"},{"name":"dart","type":"int256"}],"name":"frob","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [i, u, v, w, dink, dart], 'frob', options.sender)
	}
	
	public frob_estimateGas = async (i: string, u: string, v: string, w: string, dink: TBigNumber, dart: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"i","type":"bytes32"},{"name":"u","type":"address"},{"name":"v","type":"address"},{"name":"w","type":"address"},{"name":"dink","type":"int256"},{"name":"dart","type":"int256"}],"name":"frob","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [i, u, v, w, dink, dart], 'frob', options.sender)
	}

	public frob_ = async (i: string, u: string, v: string, w: string, dink: TBigNumber, dart: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"i","type":"bytes32"},{"name":"u","type":"address"},{"name":"v","type":"address"},{"name":"w","type":"address"},{"name":"dink","type":"int256"},{"name":"dart","type":"int256"}],"name":"frob","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [i, u, v, w, dink, dart], options.sender)
	}

	public faucet = async (target: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target, amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (target: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target, amount], 'faucet', options.sender)
	}

	public faucet_ = async (target: string, amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_target","type":"address"},{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target, amount], options.sender)
	}

	public hope = async (usr: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"}],"name":"hope","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [usr], 'hope', options.sender)
	}
	
	public hope_estimateGas = async (usr: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"}],"name":"hope","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [usr], 'hope', options.sender)
	}

	public hope_ = async (usr: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"}],"name":"hope","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [usr], options.sender)
	}

	public move = async (src: string, dst: string, rad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"rad","type":"uint256"}],"name":"move","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [src, dst, rad], 'move', options.sender)
	}
	
	public move_estimateGas = async (src: string, dst: string, rad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"rad","type":"uint256"}],"name":"move","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [src, dst, rad], 'move', options.sender)
	}

	public move_ = async (src: string, dst: string, rad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"rad","type":"uint256"}],"name":"move","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [src, dst, rad], options.sender)
	}

	public ilks_ = async (arg0: string, options?: { sender?: string }): Promise<{Art: TBigNumber, rate: TBigNumber, spot: TBigNumber, line: TBigNumber, dust: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"ilks","outputs":[{"name":"Art","type":"uint256"},{"name":"rate","type":"uint256"},{"name":"spot","type":"uint256"},{"name":"line","type":"uint256"},{"name":"dust","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <{Art: TBigNumber, rate: TBigNumber, spot: TBigNumber, line: TBigNumber, dust: TBigNumber}>result
	}

	public nope = async (usr: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"}],"name":"nope","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [usr], 'nope', options.sender)
	}
	
	public nope_estimateGas = async (usr: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"}],"name":"nope","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [usr], 'nope', options.sender)
	}

	public nope_ = async (usr: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"usr","type":"address"}],"name":"nope","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [usr], options.sender)
	}

	public suck = async (arg0: string, v: string, rad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"address"},{"name":"v","type":"address"},{"name":"rad","type":"uint256"}],"name":"suck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [arg0, v, rad], 'suck', options.sender)
	}
	
	public suck_estimateGas = async (arg0: string, v: string, rad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"address"},{"name":"v","type":"address"},{"name":"rad","type":"uint256"}],"name":"suck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [arg0, v, rad], 'suck', options.sender)
	}

	public suck_ = async (arg0: string, v: string, rad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"address"},{"name":"v","type":"address"},{"name":"rad","type":"uint256"}],"name":"suck","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [arg0, v, rad], options.sender)
	}
}


export class TestNetReputationToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public defaultOperators_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalTheoreticalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holder, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public granularity_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public migrateOutByPayout = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}
	
	public migrateOutByPayout_estimateGas = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}

	public migrateOutByPayout_ = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, attotokens], options.sender)
		return <boolean>result[0]
	}

	public warpSync_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"warpSync","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public erc1820Registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"erc1820Registry","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public operatorSend = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}
	
	public operatorSend_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}

	public operatorSend_ = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [sender, recipient, amount, data, operatorData], options.sender)
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (tokenHolder: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenHolder], options.sender)
		return <TBigNumber>result[0]
	}

	public trustedDisputeWindowTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}
	
	public trustedDisputeWindowTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}

	public trustedDisputeWindowTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public migrateFromLegacyReputationToken = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}
	
	public migrateFromLegacyReputationToken_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}

	public migrateFromLegacyReputationToken_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getLegacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLegacyRepToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTotalMigrated_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalMigrated","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public authorizeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'authorizeOperator', options.sender)
	}
	
	public authorizeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'authorizeOperator', options.sender)
	}

	public authorizeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public noHooksTransfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}
	
	public noHooksTransfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}

	public noHooksTransfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public send = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, data], 'send', options.sender)
	}
	
	public send_estimateGas = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, data], 'send', options.sender)
	}

	public send_ = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [recipient, amount, data], options.sender)
	}

	public migrateIn = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}
	
	public migrateIn_estimateGas = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}

	public migrateIn_ = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reporter, attotokens], options.sender)
		return <boolean>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public burnForMarket = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToBurn], 'burnForMarket', options.sender)
	}
	
	public burnForMarket_estimateGas = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToBurn], 'burnForMarket', options.sender)
	}

	public burnForMarket_ = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToBurn], options.sender)
		return <boolean>result[0]
	}

	public trustedReportingParticipantTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}
	
	public trustedReportingParticipantTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}

	public trustedReportingParticipantTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public legacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"legacyRepToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public isOperatorFor_ = async (operator: string, tokenHolder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [operator, tokenHolder], options.sender)
		return <boolean>result[0]
	}

	public mintForReportingParticipant = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}
	
	public mintForReportingParticipant_estimateGas = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}

	public mintForReportingParticipant_ = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountMigrated], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async (holder: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"holder","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [holder, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public mintForWarpSync = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToMint","type":"uint256"},{"name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}
	
	public mintForWarpSync_estimateGas = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToMint","type":"uint256"},{"name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}

	public mintForWarpSync_ = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToMint","type":"uint256"},{"name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToMint, target], options.sender)
		return <boolean>result[0]
	}

	public trustedMarketTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}
	
	public trustedMarketTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}

	public trustedMarketTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public revokeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'revokeOperator', options.sender)
	}
	
	public revokeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'revokeOperator', options.sender)
	}

	public revokeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public trustedUniverseTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}
	
	public trustedUniverseTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}

	public trustedUniverseTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}
}


export class TestOrders<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getAmount_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public descendOrderList_ = async (type: TBigNumber, price: TBigNumber, highestOrderId: string, options?: { sender?: string }): Promise<{_betterOrderId: string, _worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_highestOrderId","type":"bytes32"}],"name":"descendOrderList","outputs":[{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, highestOrderId], options.sender)
		return <{_betterOrderId: string, _worseOrderId: string}>result
	}

	public testRecordFillOrder = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"testRecordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId, sharesFilled, tokensFilled, fill], 'testRecordFillOrder', options.sender)
	}
	
	public testRecordFillOrder_estimateGas = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"testRecordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId, sharesFilled, tokensFilled, fill], 'testRecordFillOrder', options.sender)
	}

	public testRecordFillOrder_ = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"testRecordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId, sharesFilled, tokensFilled, fill], options.sender)
		return <boolean>result[0]
	}

	public assertIsNotBetterPrice_ = async (type: TBigNumber, price: TBigNumber, betterOrderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"}],"name":"assertIsNotBetterPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, betterOrderId], options.sender)
		return <boolean>result[0]
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public setPrice = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, price], 'setPrice', options.sender)
	}
	
	public setPrice_estimateGas = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, price], 'setPrice', options.sender)
	}

	public setPrice_ = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, price], options.sender)
		return <boolean>result[0]
	}

	public getPrice_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalEscrowed_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"}],"name":"getTotalEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public findBoundingOrders = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"betterOrderId","type":"bytes32"},{"name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], 'findBoundingOrders', options.sender)
	}
	
	public findBoundingOrders_estimateGas = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"betterOrderId","type":"bytes32"},{"name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], 'findBoundingOrders', options.sender)
	}

	public findBoundingOrders_ = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<{betterOrderId: string, worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"betterOrderId","type":"bytes32"},{"name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], options.sender)
		return <{betterOrderId: string, worseOrderId: string}>result
	}

	public testSaveOrder = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"testSaveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [uints, bytes32s, type, market, sender, kycToken], 'testSaveOrder', options.sender)
	}
	
	public testSaveOrder_estimateGas = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"testSaveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [uints, bytes32s, type, market, sender, kycToken], 'testSaveOrder', options.sender)
	}

	public testSaveOrder_ = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"testSaveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [uints, bytes32s, type, market, sender, kycToken], options.sender)
		return <string>result[0]
	}

	public assertIsNotWorsePrice = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, price, worseOrderId], 'assertIsNotWorsePrice', options.sender)
	}
	
	public assertIsNotWorsePrice_estimateGas = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, price, worseOrderId], 'assertIsNotWorsePrice', options.sender)
	}

	public assertIsNotWorsePrice_ = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, price, worseOrderId], options.sender)
		return <boolean>result[0]
	}

	public getWorstOrderId_ = async (type: TBigNumber, market: string, outcome: TBigNumber, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"}],"name":"getWorstOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, market, outcome, kycToken], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public recordFillOrder = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId, sharesFilled, tokensFilled, fill], 'recordFillOrder', options.sender)
	}
	
	public recordFillOrder_estimateGas = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId, sharesFilled, tokensFilled, fill], 'recordFillOrder', options.sender)
	}

	public recordFillOrder_ = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId, sharesFilled, tokensFilled, fill], options.sender)
		return <boolean>result[0]
	}

	public getOrderMoneyEscrowed_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderMoneyEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isBetterPrice_ = async (type: TBigNumber, price: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"isBetterPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, orderId], options.sender)
		return <boolean>result[0]
	}

	public getOutcome_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOutcome","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrderDataForLogs_ = async (orderId: string, options?: { sender?: string }): Promise<{_type: TBigNumber, _addressData: Array<string>, _uint256Data: Array<TBigNumber>}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderDataForLogs","outputs":[{"name":"_type","type":"uint8"},{"name":"_addressData","type":"address[]"},{"name":"_uint256Data","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <{_type: TBigNumber, _addressData: Array<string>, _uint256Data: Array<TBigNumber>}>result
	}

	public getBestOrderId_ = async (type: TBigNumber, market: string, outcome: TBigNumber, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"}],"name":"getBestOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, market, outcome, kycToken], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cancelOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public testRemoveOrder = async (orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"testRemoveOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId], 'testRemoveOrder', options.sender)
	}
	
	public testRemoveOrder_estimateGas = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"testRemoveOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId], 'testRemoveOrder', options.sender)
	}

	public testRemoveOrder_ = async (orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"testRemoveOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <boolean>result[0]
	}

	public getKYCToken_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getKYCToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getLastOutcomePrice_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getLastOutcomePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getWorseOrderId_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getWorseOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOrderId_ = async (type: TBigNumber, market: string, amount: TBigNumber, price: TBigNumber, sender: string, blockNumber: TBigNumber, outcome: TBigNumber, moneyEscrowed: TBigNumber, sharesEscrowed: TBigNumber, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_sender","type":"address"},{"name":"_blockNumber","type":"uint256"},{"name":"_outcome","type":"uint256"},{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"},{"name":"_kycToken","type":"address"}],"name":"getOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [type, market, amount, price, sender, blockNumber, outcome, moneyEscrowed, sharesEscrowed, kycToken], options.sender)
		return <string>result[0]
	}

	public getBetterOrderId_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getBetterOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOrderDataForCancel_ = async (orderId: string, options?: { sender?: string }): Promise<{_moneyEscrowed: TBigNumber, _sharesEscrowed: TBigNumber, _type: TBigNumber, _market: string, _outcome: TBigNumber, _creator: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderDataForCancel","outputs":[{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_creator","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <{_moneyEscrowed: TBigNumber, _sharesEscrowed: TBigNumber, _type: TBigNumber, _market: string, _outcome: TBigNumber, _creator: string}>result
	}

	public getMarket_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public saveOrder = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [uints, bytes32s, type, market, sender, kycToken], 'saveOrder', options.sender)
	}
	
	public saveOrder_estimateGas = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [uints, bytes32s, type, market, sender, kycToken], 'saveOrder', options.sender)
	}

	public saveOrder_ = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [uints, bytes32s, type, market, sender, kycToken], options.sender)
		return <string>result[0]
	}

	public getOrderType_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public isWorsePrice_ = async (type: TBigNumber, price: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"isWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, orderId], options.sender)
		return <boolean>result[0]
	}

	public getOrderCreator_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderCreator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getOrderSharesEscrowed_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderSharesEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public ascendOrderList_ = async (type: TBigNumber, price: TBigNumber, lowestOrderId: string, options?: { sender?: string }): Promise<{_betterOrderId: string, _worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_lowestOrderId","type":"bytes32"}],"name":"ascendOrderList","outputs":[{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, lowestOrderId], options.sender)
		return <{_betterOrderId: string, _worseOrderId: string}>result
	}

	public removeOrder = async (orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId], 'removeOrder', options.sender)
	}
	
	public removeOrder_estimateGas = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId], 'removeOrder', options.sender)
	}

	public removeOrder_ = async (orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <boolean>result[0]
	}
}


export class Time<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class TimeControlled<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public setTimestamp = async (timestamp: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [timestamp], 'setTimestamp', options.sender)
	}
	
	public setTimestamp_estimateGas = async (timestamp: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [timestamp], 'setTimestamp', options.sender)
	}

	public setTimestamp_ = async (timestamp: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [timestamp], options.sender)
		return <boolean>result[0]
	}

	public incrementTimestamp = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'incrementTimestamp', options.sender)
	}
	
	public incrementTimestamp_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'incrementTimestamp', options.sender)
	}

	public incrementTimestamp_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class WarpSync<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getCreationReward_ = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_universe","type":"address"}],"name":"getCreationReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <TBigNumber>result[0]
	}

	public doInitialReport = async (universe: string, payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, payoutNumerators, description, additionalStake], 'doInitialReport', options.sender)
	}
	
	public doInitialReport_estimateGas = async (universe: string, payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, payoutNumerators, description, additionalStake], 'doInitialReport', options.sender)
	}

	public doInitialReport_ = async (universe: string, payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, payoutNumerators, description, additionalStake], options.sender)
		return <boolean>result[0]
	}

	public getFinalizationReward_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"}],"name":"getFinalizationReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public initializeUniverse = async (universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initializeUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe], 'initializeUniverse', options.sender)
	}
	
	public initializeUniverse_estimateGas = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initializeUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe], 'initializeUniverse', options.sender)
	}

	public initializeUniverse_ = async (universe: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"}],"name":"initializeUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [universe], options.sender)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public markets_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"markets","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public data_ = async (arg0: string, options?: { sender?: string }): Promise<{warpSyncHash: TBigNumber, timestamp: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"data","outputs":[{"name":"warpSyncHash","type":"uint256"},{"name":"timestamp","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <{warpSyncHash: TBigNumber, timestamp: TBigNumber}>result
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public notifyMarketFinalized = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"notifyMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'notifyMarketFinalized', options.sender)
	}
	
	public notifyMarketFinalized_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"notifyMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'notifyMarketFinalized', options.sender)
	}

	public notifyMarketFinalized_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"notifyMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class ZeroXExchange<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public ERC1155_PROXY_ID_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ERC1155_PROXY_ID","outputs":[{"name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public filled_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"filled","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public cancelled_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"cancelled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public fillOrderNoThrow = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrderNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [order, takerAssetFillAmount, signature], 'fillOrderNoThrow', options.sender, options.attachedEth)
	}
	
	public fillOrderNoThrow_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrderNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [order, takerAssetFillAmount, signature], 'fillOrderNoThrow', options.sender, options.attachedEth)
	}

	public fillOrderNoThrow_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrderNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [order, takerAssetFillAmount, signature], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber }>result[0]
	}

	public batchCancelOrders = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orders], 'batchCancelOrders', options.sender)
	}
	
	public batchCancelOrders_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orders], 'batchCancelOrders', options.sender)
	}

	public batchCancelOrders_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [orders], options.sender)
	}

	public transactions_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"transactions","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public preSigned_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"address"}],"name":"preSigned","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <boolean>result[0]
	}

	public sliceDestructive_ = async (b: string, from: TBigNumber, to: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"b","type":"bytes"},{"name":"from","type":"uint256"},{"name":"to","type":"uint256"}],"name":"sliceDestructive","outputs":[{"name":"result","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [b, from, to], options.sender)
		return <string>result[0]
	}

	public isValidSignature_ = async (hash: string, signerAddress: string, signature: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"hash","type":"bytes32"},{"name":"signerAddress","type":"address"},{"name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"name":"isValid","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [hash, signerAddress, signature], options.sender)
		return <boolean>result[0]
	}

	public decodeERC1155AssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, tokenAddress: string, tokenIds: Array<TBigNumber>, tokenValues: Array<TBigNumber>, callbackData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"assetData","type":"bytes"}],"name":"decodeERC1155AssetData","outputs":[{"name":"assetProxyId","type":"bytes4"},{"name":"tokenAddress","type":"address"},{"name":"tokenIds","type":"uint256[]"},{"name":"tokenValues","type":"uint256[]"},{"name":"callbackData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, tokenAddress: string, tokenIds: Array<TBigNumber>, tokenValues: Array<TBigNumber>, callbackData: string}>result
	}

	public transferFrom = async (assetData: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"assetData","type":"bytes"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [assetData, from, to, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (assetData: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"assetData","type":"bytes"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [assetData, from, to, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (assetData: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"assetData","type":"bytes"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [assetData, from, to, amount], options.sender)
	}

	public fillOrder = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [order, takerAssetFillAmount, signature], 'fillOrder', options.sender, options.attachedEth)
	}
	
	public fillOrder_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [order, takerAssetFillAmount, signature], 'fillOrder', options.sender, options.attachedEth)
	}

	public fillOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [order, takerAssetFillAmount, signature], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber }>result[0]
	}

	public getOrderInfo_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, options?: { sender?: string }): Promise<{ orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"}],"name":"getOrderInfo","outputs":[{"components":[{"name":"orderStatus","type":"uint8"},{"name":"orderHash","type":"bytes32"},{"name":"orderTakerAssetFilledAmount","type":"uint256"}],"name":"orderInfo","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order], options.sender)
		return <{ orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }>result[0]
	}

	public cancelOrder = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [order], 'cancelOrder', options.sender)
	}
	
	public cancelOrder_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [order], 'cancelOrder', options.sender)
	}

	public cancelOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [order], options.sender)
	}

	public orderEpoch_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"orderEpoch","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public EIP712_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_DOMAIN_HASH","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public currentContextAddress_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"currentContextAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class DisputeCrowdsourcerFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createDisputeCrowdsourcer = async (augur: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_size","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_crowdsourcerGeneration","type":"uint256"}],"name":"createDisputeCrowdsourcer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], 'createDisputeCrowdsourcer', options.sender)
	}
	
	public createDisputeCrowdsourcer_estimateGas = async (augur: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_size","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_crowdsourcerGeneration","type":"uint256"}],"name":"createDisputeCrowdsourcer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], 'createDisputeCrowdsourcer', options.sender)
	}

	public createDisputeCrowdsourcer_ = async (augur: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_size","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_crowdsourcerGeneration","type":"uint256"}],"name":"createDisputeCrowdsourcer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], options.sender)
		return <string>result[0]
	}
}


export class DisputeWindowFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createDisputeWindow = async (augur: string, disputeWindowId: TBigNumber, windowDuration: TBigNumber, startTime: TBigNumber, participationTokensEnabled: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_disputeWindowId","type":"uint256"},{"name":"_windowDuration","type":"uint256"},{"name":"_startTime","type":"uint256"},{"name":"_participationTokensEnabled","type":"bool"}],"name":"createDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, disputeWindowId, windowDuration, startTime, participationTokensEnabled], 'createDisputeWindow', options.sender)
	}
	
	public createDisputeWindow_estimateGas = async (augur: string, disputeWindowId: TBigNumber, windowDuration: TBigNumber, startTime: TBigNumber, participationTokensEnabled: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_disputeWindowId","type":"uint256"},{"name":"_windowDuration","type":"uint256"},{"name":"_startTime","type":"uint256"},{"name":"_participationTokensEnabled","type":"bool"}],"name":"createDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, disputeWindowId, windowDuration, startTime, participationTokensEnabled], 'createDisputeWindow', options.sender)
	}

	public createDisputeWindow_ = async (augur: string, disputeWindowId: TBigNumber, windowDuration: TBigNumber, startTime: TBigNumber, participationTokensEnabled: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_disputeWindowId","type":"uint256"},{"name":"_windowDuration","type":"uint256"},{"name":"_startTime","type":"uint256"},{"name":"_participationTokensEnabled","type":"bool"}],"name":"createDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, disputeWindowId, windowDuration, startTime, participationTokensEnabled], options.sender)
		return <string>result[0]
	}
}


export class InitialReporterFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createInitialReporter = async (augur: string, designatedReporter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_designatedReporter","type":"address"}],"name":"createInitialReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, designatedReporter], 'createInitialReporter', options.sender)
	}
	
	public createInitialReporter_estimateGas = async (augur: string, designatedReporter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_designatedReporter","type":"address"}],"name":"createInitialReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, designatedReporter], 'createInitialReporter', options.sender)
	}

	public createInitialReporter_ = async (augur: string, designatedReporter: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_designatedReporter","type":"address"}],"name":"createInitialReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, designatedReporter], options.sender)
		return <string>result[0]
	}
}


export class MarketFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createMarket = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, sender: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_sender","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, sender, numOutcomes, numTicks], 'createMarket', options.sender)
	}
	
	public createMarket_estimateGas = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, sender: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_sender","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, sender, numOutcomes, numTicks], 'createMarket', options.sender)
	}

	public createMarket_ = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, sender: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_sender","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, sender, numOutcomes, numTicks], options.sender)
		return <string>result[0]
	}
}


export class OICashFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createOICash = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"createOICash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'createOICash', options.sender)
	}
	
	public createOICash_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"createOICash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'createOICash', options.sender)
	}

	public createOICash_ = async (augur: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"createOICash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <string>result[0]
	}
}


export class ReputationTokenFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createReputationToken = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}
	
	public createReputationToken_estimateGas = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}

	public createReputationToken_ = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, parentUniverse], options.sender)
		return <string>result[0]
	}
}


export class TestNetReputationTokenFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createReputationToken = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}
	
	public createReputationToken_estimateGas = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}

	public createReputationToken_ = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, parentUniverse], options.sender)
		return <string>result[0]
	}
}


export class UniverseFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createUniverse = async (parentUniverse: string, parentPayoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"createUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentUniverse, parentPayoutDistributionHash, payoutNumerators], 'createUniverse', options.sender)
	}
	
	public createUniverse_estimateGas = async (parentUniverse: string, parentPayoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"createUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentUniverse, parentPayoutDistributionHash, payoutNumerators], 'createUniverse', options.sender)
	}

	public createUniverse_ = async (parentUniverse: string, parentPayoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentUniverse","type":"address"},{"name":"_parentPayoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"}],"name":"createUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentUniverse, parentPayoutDistributionHash, payoutNumerators], options.sender)
		return <string>result[0]
	}
}


export class DelegationTarget<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public controllerLookupName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class DisputeCrowdsourcer<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public defaultOperators_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public setSize = async (size: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_size","type":"uint256"}],"name":"setSize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [size], 'setSize', options.sender)
	}
	
	public setSize_estimateGas = async (size: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_size","type":"uint256"}],"name":"setSize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [size], 'setSize', options.sender)
	}

	public setSize_ = async (size: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_size","type":"uint256"}],"name":"setSize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [size], options.sender)
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getCrowdsourcerGeneration_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getCrowdsourcerGeneration","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public forkAndRedeem = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'forkAndRedeem', options.sender)
	}
	
	public forkAndRedeem_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'forkAndRedeem', options.sender)
	}

	public forkAndRedeem_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public liquidateLosing = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'liquidateLosing', options.sender)
	}
	
	public liquidateLosing_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'liquidateLosing', options.sender)
	}

	public liquidateLosing_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public transferFrom = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holder, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, market: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, erc1820RegistryAddress: string, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_market","type":"address"},{"name":"_size","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_erc1820RegistryAddress","type":"address"},{"name":"_crowdsourcerGeneration","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, market, size, payoutDistributionHash, payoutNumerators, erc1820RegistryAddress, crowdsourcerGeneration], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, market: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, erc1820RegistryAddress: string, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_market","type":"address"},{"name":"_size","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_erc1820RegistryAddress","type":"address"},{"name":"_crowdsourcerGeneration","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, market, size, payoutDistributionHash, payoutNumerators, erc1820RegistryAddress, crowdsourcerGeneration], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, market: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, erc1820RegistryAddress: string, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_market","type":"address"},{"name":"_size","type":"uint256"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_erc1820RegistryAddress","type":"address"},{"name":"_crowdsourcerGeneration","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, market, size, payoutDistributionHash, payoutNumerators, erc1820RegistryAddress, crowdsourcerGeneration], options.sender)
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public fork = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'fork', options.sender)
	}
	
	public fork_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'fork', options.sender)
	}

	public fork_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public granularity_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public erc1820Registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"erc1820Registry","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public operatorSend = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}
	
	public operatorSend_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}

	public operatorSend_ = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [sender, recipient, amount, data, operatorData], options.sender)
	}

	public isDisavowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public getPayoutNumerators_ = async (options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutNumerators","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public balanceOf_ = async (tokenHolder: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenHolder], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getRemainingToFill_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRemainingToFill","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public contribute = async (participant: string, amount: TBigNumber, overload: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_participant","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_overload","type":"bool"}],"name":"contribute","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [participant, amount, overload], 'contribute', options.sender)
	}
	
	public contribute_estimateGas = async (participant: string, amount: TBigNumber, overload: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_participant","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_overload","type":"bool"}],"name":"contribute","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [participant, amount, overload], 'contribute', options.sender)
	}

	public contribute_ = async (participant: string, amount: TBigNumber, overload: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_participant","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_overload","type":"bool"}],"name":"contribute","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [participant, amount, overload], options.sender)
		return <TBigNumber>result[0]
	}

	public authorizeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'authorizeOperator', options.sender)
	}
	
	public authorizeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'authorizeOperator', options.sender)
	}

	public authorizeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public redeem = async (redeemer: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_redeemer","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [redeemer], 'redeem', options.sender)
	}
	
	public redeem_estimateGas = async (redeemer: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_redeemer","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [redeemer], 'redeem', options.sender)
	}

	public redeem_ = async (redeemer: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_redeemer","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [redeemer], options.sender)
		return <boolean>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public noHooksTransfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}
	
	public noHooksTransfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}

	public noHooksTransfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public send = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, data], 'send', options.sender)
	}
	
	public send_estimateGas = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, data], 'send', options.sender)
	}

	public send_ = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [recipient, amount, data], options.sender)
	}

	public correctSize = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"correctSize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'correctSize', options.sender)
	}
	
	public correctSize_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"correctSize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'correctSize', options.sender)
	}

	public correctSize_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"correctSize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public isOperatorFor_ = async (operator: string, tokenHolder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [operator, tokenHolder], options.sender)
		return <boolean>result[0]
	}

	public getPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public allowance_ = async (holder: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"holder","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [holder, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getSize_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public revokeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'revokeOperator', options.sender)
	}
	
	public revokeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'revokeOperator', options.sender)
	}

	public revokeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public getStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class DisputeWindow<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public defaultOperators_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public duration_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"duration","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public isActive_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holder, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public designatedReporterNoShowBondTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterNoShowBondTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public participationTokensEnabled_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"participationTokensEnabled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public validityBondTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"validityBondTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public buyParticipationTokens_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"buyParticipationTokens","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public granularity_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public erc1820Registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"erc1820Registry","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getWindowId_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWindowId","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public operatorSend = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}
	
	public operatorSend_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}

	public operatorSend_ = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [sender, recipient, amount, data, operatorData], options.sender)
	}

	public incorrectDesignatedReportTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"incorrectDesignatedReportTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (tokenHolder: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenHolder], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public invalidMarketsTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"invalidMarketsTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialReportBondTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"initialReportBondTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public onMarketFinalized = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"onMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'onMarketFinalized', options.sender)
	}
	
	public onMarketFinalized_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"onMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'onMarketFinalized', options.sender)
	}

	public onMarketFinalized_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"onMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public authorizeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'authorizeOperator', options.sender)
	}
	
	public authorizeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'authorizeOperator', options.sender)
	}

	public authorizeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public redeem = async (account: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_account","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [account], 'redeem', options.sender)
	}
	
	public redeem_estimateGas = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_account","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [account], 'redeem', options.sender)
	}

	public redeem_ = async (account: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_account","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <boolean>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public trustedBuy = async (buyer: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_buyer","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [buyer, attotokens], 'trustedBuy', options.sender)
	}
	
	public trustedBuy_estimateGas = async (buyer: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_buyer","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [buyer, attotokens], 'trustedBuy', options.sender)
	}

	public trustedBuy_ = async (buyer: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_buyer","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [buyer, attotokens], options.sender)
		return <boolean>result[0]
	}

	public noHooksTransfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}
	
	public noHooksTransfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}

	public noHooksTransfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public windowId_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"windowId","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public send = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, data], 'send', options.sender)
	}
	
	public send_estimateGas = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, data], 'send', options.sender)
	}

	public send_ = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [recipient, amount, data], options.sender)
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, universe: string, disputeWindowId: TBigNumber, participationTokensEnabled: boolean, duration: TBigNumber, startTime: TBigNumber, erc1820RegistryAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_disputeWindowId","type":"uint256"},{"name":"_participationTokensEnabled","type":"bool"},{"name":"_duration","type":"uint256"},{"name":"_startTime","type":"uint256"},{"name":"_erc1820RegistryAddress","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe, disputeWindowId, participationTokensEnabled, duration, startTime, erc1820RegistryAddress], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, universe: string, disputeWindowId: TBigNumber, participationTokensEnabled: boolean, duration: TBigNumber, startTime: TBigNumber, erc1820RegistryAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_disputeWindowId","type":"uint256"},{"name":"_participationTokensEnabled","type":"bool"},{"name":"_duration","type":"uint256"},{"name":"_startTime","type":"uint256"},{"name":"_erc1820RegistryAddress","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe, disputeWindowId, participationTokensEnabled, duration, startTime, erc1820RegistryAddress], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, universe: string, disputeWindowId: TBigNumber, participationTokensEnabled: boolean, duration: TBigNumber, startTime: TBigNumber, erc1820RegistryAddress: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_disputeWindowId","type":"uint256"},{"name":"_participationTokensEnabled","type":"bool"},{"name":"_duration","type":"uint256"},{"name":"_startTime","type":"uint256"},{"name":"_erc1820RegistryAddress","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, universe, disputeWindowId, participationTokensEnabled, duration, startTime, erc1820RegistryAddress], options.sender)
	}

	public isOver_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isOver","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getStartTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStartTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public isOperatorFor_ = async (operator: string, tokenHolder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [operator, tokenHolder], options.sender)
		return <boolean>result[0]
	}

	public buy = async (attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [attotokens], 'buy', options.sender)
	}
	
	public buy_estimateGas = async (attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [attotokens], 'buy', options.sender)
	}

	public buy_ = async (attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [attotokens], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public allowance_ = async (holder: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"holder","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [holder, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public designatedReportNoShowsTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReportNoShowsTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public revokeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'revokeOperator', options.sender)
	}
	
	public revokeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'revokeOperator', options.sender)
	}

	public revokeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}
}


export class InitialReporter<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public forkAndRedeem = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'forkAndRedeem', options.sender)
	}
	
	public forkAndRedeem_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'forkAndRedeem', options.sender)
	}

	public forkAndRedeem_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public liquidateLosing = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'liquidateLosing', options.sender)
	}
	
	public liquidateLosing_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'liquidateLosing', options.sender)
	}

	public liquidateLosing_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public designatedReporterShowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterShowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public fork = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'fork', options.sender)
	}
	
	public fork_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'fork', options.sender)
	}

	public fork_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public getDesignatedReporter_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isDisavowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isDisavowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getPayoutNumerators_ = async (options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutNumerators","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public returnRepFromDisavow = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"returnRepFromDisavow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'returnRepFromDisavow', options.sender)
	}
	
	public returnRepFromDisavow_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"returnRepFromDisavow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'returnRepFromDisavow', options.sender)
	}

	public returnRepFromDisavow_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"returnRepFromDisavow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public getOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public designatedReporterWasCorrect_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterWasCorrect","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getReportTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public redeem = async (arg0: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [arg0], 'redeem', options.sender)
	}
	
	public redeem_estimateGas = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [arg0], 'redeem', options.sender)
	}

	public redeem_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"","type":"address"}],"name":"redeem","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, market: string, designatedReporter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_market","type":"address"},{"name":"_designatedReporter","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, market, designatedReporter], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, market: string, designatedReporter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_market","type":"address"},{"name":"_designatedReporter","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, market, designatedReporter], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, market: string, designatedReporter: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_market","type":"address"},{"name":"_designatedReporter","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, market, designatedReporter], options.sender)
	}

	public getPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getSize_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getSize","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public report = async (reporter: string, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, initialReportStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_initialReportStake","type":"uint256"}],"name":"report","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, payoutDistributionHash, payoutNumerators, initialReportStake], 'report', options.sender)
	}
	
	public report_estimateGas = async (reporter: string, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, initialReportStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_initialReportStake","type":"uint256"}],"name":"report","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, payoutDistributionHash, payoutNumerators, initialReportStake], 'report', options.sender)
	}

	public report_ = async (reporter: string, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, initialReportStake: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_payoutDistributionHash","type":"bytes32"},{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_initialReportStake","type":"uint256"}],"name":"report","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [reporter, payoutDistributionHash, payoutNumerators, initialReportStake], options.sender)
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public migrateToNewUniverse = async (designatedReporter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_designatedReporter","type":"address"}],"name":"migrateToNewUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [designatedReporter], 'migrateToNewUniverse', options.sender)
	}
	
	public migrateToNewUniverse_estimateGas = async (designatedReporter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_designatedReporter","type":"address"}],"name":"migrateToNewUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [designatedReporter], 'migrateToNewUniverse', options.sender)
	}

	public migrateToNewUniverse_ = async (designatedReporter: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_designatedReporter","type":"address"}],"name":"migrateToNewUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [designatedReporter], options.sender)
	}

	public getMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}

	public getStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class Market<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public contributeToTentative = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_amount","type":"uint256"},{"name":"_description","type":"string"}],"name":"contributeToTentative","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, amount, description], 'contributeToTentative', options.sender)
	}
	
	public contributeToTentative_estimateGas = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_amount","type":"uint256"},{"name":"_description","type":"string"}],"name":"contributeToTentative","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, amount, description], 'contributeToTentative', options.sender)
	}

	public contributeToTentative_ = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_amount","type":"uint256"},{"name":"_description","type":"string"}],"name":"contributeToTentative","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, amount, description], options.sender)
		return <boolean>result[0]
	}

	public isInvalid_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isInvalid","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getValidityBondAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getValidityBondAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public derivePayoutDistributionHash_ = async (payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"}],"name":"derivePayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators], options.sender)
		return <string>result[0]
	}

	public getInitialReporter_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getMarketCreatorSettlementFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreatorSettlementFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public withdrawAffiliateFees = async (affiliate: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_affiliate","type":"address"}],"name":"withdrawAffiliateFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [affiliate], 'withdrawAffiliateFees', options.sender)
	}
	
	public withdrawAffiliateFees_estimateGas = async (affiliate: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_affiliate","type":"address"}],"name":"withdrawAffiliateFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [affiliate], 'withdrawAffiliateFees', options.sender)
	}

	public withdrawAffiliateFees_ = async (affiliate: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_affiliate","type":"address"}],"name":"withdrawAffiliateFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [affiliate], options.sender)
		return <boolean>result[0]
	}

	public getDisputeWindow_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getNumberOfOutcomes_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumberOfOutcomes","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getParticipantStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParticipantStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public validityBondAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"validityBondAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getHighestNonTentativeParticipantStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getHighestNonTentativeParticipantStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public participants_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"participants","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public affiliateFeesAttoCash_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"affiliateFeesAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public designatedReporterShowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterShowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getWinningPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getWinningPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputePacingOn_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputePacingOn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public disavowCrowdsourcers = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowCrowdsourcers","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'disavowCrowdsourcers', options.sender)
	}
	
	public disavowCrowdsourcers_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowCrowdsourcers","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'disavowCrowdsourcers', options.sender)
	}

	public disavowCrowdsourcers_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowCrowdsourcers","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public finalize = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finalize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'finalize', options.sender)
	}
	
	public finalize_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finalize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'finalize', options.sender)
	}

	public finalize_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finalize","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public preemptiveDisputeCrowdsourcer_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"preemptiveDisputeCrowdsourcer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalAffiliateFeesAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalAffiliateFeesAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getDesignatedReporter_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReporter","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public warpSync_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"warpSync","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseValidityBond = async (attoCash: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attoCash","type":"uint256"}],"name":"increaseValidityBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [attoCash], 'increaseValidityBond', options.sender)
	}
	
	public increaseValidityBond_estimateGas = async (attoCash: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attoCash","type":"uint256"}],"name":"increaseValidityBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [attoCash], 'increaseValidityBond', options.sender)
	}

	public increaseValidityBond_ = async (attoCash: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_attoCash","type":"uint256"}],"name":"increaseValidityBond","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [attoCash], options.sender)
		return <boolean>result[0]
	}

	public getStakeInOutcome_ = async (payoutDistributionHash: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"getStakeInOutcome","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutDistributionHash], options.sender)
		return <TBigNumber>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getWinningReportingParticipant_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWinningReportingParticipant","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getWinningPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWinningPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public affiliateFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"affiliateFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public doInitialReport = async (payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, description, additionalStake], 'doInitialReport', options.sender)
	}
	
	public doInitialReport_estimateGas = async (payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, description, additionalStake], 'doInitialReport', options.sender)
	}

	public doInitialReport_ = async (payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"},{"name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, description, additionalStake], options.sender)
		return <boolean>result[0]
	}

	public getOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isFinalized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public designatedReporterWasCorrect_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterWasCorrect","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public transferRepBondOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferRepBondOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferRepBondOwnership', options.sender)
	}
	
	public transferRepBondOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferRepBondOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferRepBondOwnership', options.sender)
	}

	public transferRepBondOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferRepBondOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}

	public getDesignatedReportingEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportingEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public assertBalances_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"assertBalances","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getFinalizationTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFinalizationTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public repBondOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"repBondOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getNumTicks_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumTicks","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOpenInterest_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOpenInterest","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getReportingParticipant_ = async (index: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"getReportingParticipant","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [index], options.sender)
		return <string>result[0]
	}

	public getCrowdsourcer_ = async (payoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_payoutDistributionHash","type":"bytes32"}],"name":"getCrowdsourcer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutDistributionHash], options.sender)
		return <string>result[0]
	}

	public getForkingMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkingMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public repBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"repBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public recordMarketCreatorFees = async (marketCreatorFees: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_marketCreatorFees","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"recordMarketCreatorFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [marketCreatorFees, affiliateAddress], 'recordMarketCreatorFees', options.sender)
	}
	
	public recordMarketCreatorFees_estimateGas = async (marketCreatorFees: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_marketCreatorFees","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"recordMarketCreatorFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [marketCreatorFees, affiliateAddress], 'recordMarketCreatorFees', options.sender)
	}

	public recordMarketCreatorFees_ = async (marketCreatorFees: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_marketCreatorFees","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"recordMarketCreatorFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [marketCreatorFees, affiliateAddress], options.sender)
		return <boolean>result[0]
	}

	public marketCreatorFeesAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"marketCreatorFeesAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public isForkingMarket_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForkingMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public migrateThroughOneFork = async (payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"}],"name":"migrateThroughOneFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, description], 'migrateThroughOneFork', options.sender)
	}
	
	public migrateThroughOneFork_estimateGas = async (payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"}],"name":"migrateThroughOneFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, description], 'migrateThroughOneFork', options.sender)
	}

	public migrateThroughOneFork_ = async (payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_description","type":"string"}],"name":"migrateThroughOneFork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, description], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, creator: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_creator","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, creator: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_creator","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, creator: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_creator","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks], options.sender)
	}

	public getWinningChildPayout_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getWinningChildPayout","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}

	public isContainerForReportingParticipant_ = async (shadyReportingParticipant: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyReportingParticipant","type":"address"}],"name":"isContainerForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyReportingParticipant], options.sender)
		return <boolean>result[0]
	}

	public contribute = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_amount","type":"uint256"},{"name":"_description","type":"string"}],"name":"contribute","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, amount, description], 'contribute', options.sender)
	}
	
	public contribute_estimateGas = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_amount","type":"uint256"},{"name":"_description","type":"string"}],"name":"contribute","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, amount, description], 'contribute', options.sender)
	}

	public contribute_ = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_amount","type":"uint256"},{"name":"_description","type":"string"}],"name":"contribute","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, amount, description], options.sender)
		return <boolean>result[0]
	}

	public deriveMarketCreatorFeeAmount_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_amount","type":"uint256"}],"name":"deriveMarketCreatorFeeAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <TBigNumber>result[0]
	}

	public getNumParticipants_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumParticipants","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class OICash<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public defaultOperators_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holder, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public withdraw = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'withdraw', options.sender)
	}

	public withdraw_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public payFees = async (feeAmount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_feeAmount","type":"uint256"}],"name":"payFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [feeAmount], 'payFees', options.sender)
	}
	
	public payFees_estimateGas = async (feeAmount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_feeAmount","type":"uint256"}],"name":"payFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [feeAmount], 'payFees', options.sender)
	}

	public payFees_ = async (feeAmount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_feeAmount","type":"uint256"}],"name":"payFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [feeAmount], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public buyCompleteSets = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'buyCompleteSets', options.sender)
	}
	
	public buyCompleteSets_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'buyCompleteSets', options.sender)
	}

	public buyCompleteSets_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <boolean>result[0]
	}

	public universe_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"universe","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public granularity_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public erc1820Registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"erc1820Registry","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public operatorSend = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}
	
	public operatorSend_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}

	public operatorSend_ = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [sender, recipient, amount, data, operatorData], options.sender)
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (tokenHolder: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenHolder], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public authorizeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'authorizeOperator', options.sender)
	}
	
	public authorizeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'authorizeOperator', options.sender)
	}

	public authorizeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public noHooksTransfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}
	
	public noHooksTransfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}

	public noHooksTransfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public send = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, data], 'send', options.sender)
	}
	
	public send_estimateGas = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, data], 'send', options.sender)
	}

	public send_ = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [recipient, amount, data], options.sender)
	}

	public feesPaid_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"feesPaid","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public deposit = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'deposit', options.sender)
	}
	
	public deposit_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'deposit', options.sender)
	}

	public deposit_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, universe: string, erc1820RegistryAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_erc1820RegistryAddress","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe, erc1820RegistryAddress], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, universe: string, erc1820RegistryAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_erc1820RegistryAddress","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe, erc1820RegistryAddress], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, universe: string, erc1820RegistryAddress: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_universe","type":"address"},{"name":"_erc1820RegistryAddress","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, universe, erc1820RegistryAddress], options.sender)
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public isOperatorFor_ = async (operator: string, tokenHolder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [operator, tokenHolder], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async (holder: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"holder","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [holder, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public revokeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'revokeOperator', options.sender)
	}
	
	public revokeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'revokeOperator', options.sender)
	}

	public revokeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}
}


export class ReputationToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public defaultOperators_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"defaultOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalTheoreticalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transferFrom = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holder, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (holder: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"holder","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holder, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public granularity_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"granularity","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public migrateOutByPayout = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}
	
	public migrateOutByPayout_estimateGas = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}

	public migrateOutByPayout_ = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_payoutNumerators","type":"uint256[]"},{"name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, attotokens], options.sender)
		return <boolean>result[0]
	}

	public warpSync_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"warpSync","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public erc1820Registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"erc1820Registry","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public operatorSend = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}
	
	public operatorSend_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount, data, operatorData], 'operatorSend', options.sender)
	}

	public operatorSend_ = async (sender: string, recipient: string, amount: TBigNumber, data: string, operatorData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"sender","type":"address"},{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [sender, recipient, amount, data, operatorData], options.sender)
	}

	public decreaseApproval = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}
	
	public decreaseApproval_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseApproval', options.sender)
	}

	public decreaseApproval_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (tokenHolder: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenHolder], options.sender)
		return <TBigNumber>result[0]
	}

	public trustedDisputeWindowTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}
	
	public trustedDisputeWindowTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}

	public trustedDisputeWindowTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public migrateFromLegacyReputationToken = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}
	
	public migrateFromLegacyReputationToken_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}

	public migrateFromLegacyReputationToken_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getLegacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLegacyRepToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTotalMigrated_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalMigrated","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public authorizeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'authorizeOperator', options.sender)
	}
	
	public authorizeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'authorizeOperator', options.sender)
	}

	public authorizeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public noHooksTransfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}
	
	public noHooksTransfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'noHooksTransfer', options.sender)
	}

	public noHooksTransfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"noHooksTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public send = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, data], 'send', options.sender)
	}
	
	public send_estimateGas = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, data], 'send', options.sender)
	}

	public send_ = async (recipient: string, amount: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"},{"name":"data","type":"bytes"}],"name":"send","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [recipient, amount, data], options.sender)
	}

	public migrateIn = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}
	
	public migrateIn_estimateGas = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}

	public migrateIn_ = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reporter","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reporter, attotokens], options.sender)
		return <boolean>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public burnForMarket = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToBurn], 'burnForMarket', options.sender)
	}
	
	public burnForMarket_estimateGas = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToBurn], 'burnForMarket', options.sender)
	}

	public burnForMarket_ = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToBurn], options.sender)
		return <boolean>result[0]
	}

	public trustedReportingParticipantTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}
	
	public trustedReportingParticipantTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}

	public trustedReportingParticipantTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public legacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"legacyRepToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseApproval = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}
	
	public increaseApproval_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseApproval', options.sender)
	}

	public increaseApproval_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public isOperatorFor_ = async (operator: string, tokenHolder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [operator, tokenHolder], options.sender)
		return <boolean>result[0]
	}

	public mintForReportingParticipant = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}
	
	public mintForReportingParticipant_estimateGas = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}

	public mintForReportingParticipant_ = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountMigrated], options.sender)
		return <boolean>result[0]
	}

	public allowance_ = async (holder: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"holder","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [holder, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public mintForWarpSync = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToMint","type":"uint256"},{"name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}
	
	public mintForWarpSync_estimateGas = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToMint","type":"uint256"},{"name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}

	public mintForWarpSync_ = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amountToMint","type":"uint256"},{"name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToMint, target], options.sender)
		return <boolean>result[0]
	}

	public trustedMarketTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}
	
	public trustedMarketTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}

	public trustedMarketTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public revokeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'revokeOperator', options.sender)
	}
	
	public revokeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'revokeOperator', options.sender)
	}

	public revokeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public trustedUniverseTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}
	
	public trustedUniverseTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}

	public trustedUniverseTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_source","type":"address"},{"name":"_destination","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}
}


export class ShareToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public balanceOf_ = async (account: string, id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"account","type":"address"},{"name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, id], options.sender)
		return <TBigNumber>result[0]
	}

	public supportsInterface_ = async (interfaceId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [interfaceId], options.sender)
		return <boolean>result[0]
	}

	public calculateCreatorFee_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateCreatorFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <TBigNumber>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public unpackTokenId_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<{_market: string, _outcome: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"unpackTokenId","outputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <{_market: string, _outcome: TBigNumber}>result
	}

	public getTokenId_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getTokenId","outputs":[{"name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public safeBatchTransferFrom = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"ids","type":"uint256[]"},{"name":"values","type":"uint256[]"},{"name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}
	
	public safeBatchTransferFrom_estimateGas = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"ids","type":"uint256[]"},{"name":"values","type":"uint256[]"},{"name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}

	public safeBatchTransferFrom_ = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"ids","type":"uint256[]"},{"name":"values","type":"uint256[]"},{"name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, ids, values, data], options.sender)
	}

	public initializeMarket = async (market: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"initializeMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, numOutcomes, numTicks], 'initializeMarket', options.sender)
	}
	
	public initializeMarket_estimateGas = async (market: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"initializeMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, numOutcomes, numTicks], 'initializeMarket', options.sender)
	}

	public initializeMarket_ = async (market: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_numOutcomes","type":"uint256"},{"name":"_numTicks","type":"uint256"}],"name":"initializeMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [market, numOutcomes, numTicks], options.sender)
	}

	public unsafeBatchTransferFrom = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_ids","type":"uint256[]"},{"name":"_values","type":"uint256[]"}],"name":"unsafeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, ids, values], 'unsafeBatchTransferFrom', options.sender)
	}
	
	public unsafeBatchTransferFrom_estimateGas = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_ids","type":"uint256[]"},{"name":"_values","type":"uint256[]"}],"name":"unsafeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, ids, values], 'unsafeBatchTransferFrom', options.sender)
	}

	public unsafeBatchTransferFrom_ = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_ids","type":"uint256[]"},{"name":"_values","type":"uint256[]"}],"name":"unsafeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, ids, values], options.sender)
	}

	public buyCompleteSetsForTrade = async (market: string, amount: TBigNumber, longOutcome: TBigNumber, longRecipient: string, shortRecipient: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_longOutcome","type":"uint256"},{"name":"_longRecipient","type":"address"},{"name":"_shortRecipient","type":"address"}],"name":"buyCompleteSetsForTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount, longOutcome, longRecipient, shortRecipient], 'buyCompleteSetsForTrade', options.sender)
	}
	
	public buyCompleteSetsForTrade_estimateGas = async (market: string, amount: TBigNumber, longOutcome: TBigNumber, longRecipient: string, shortRecipient: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_longOutcome","type":"uint256"},{"name":"_longRecipient","type":"address"},{"name":"_shortRecipient","type":"address"}],"name":"buyCompleteSetsForTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount, longOutcome, longRecipient, shortRecipient], 'buyCompleteSetsForTrade', options.sender)
	}

	public buyCompleteSetsForTrade_ = async (market: string, amount: TBigNumber, longOutcome: TBigNumber, longRecipient: string, shortRecipient: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_longOutcome","type":"uint256"},{"name":"_longRecipient","type":"address"},{"name":"_shortRecipient","type":"address"}],"name":"buyCompleteSetsForTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount, longOutcome, longRecipient, shortRecipient], options.sender)
		return <boolean>result[0]
	}

	public balanceOfBatch_ = async (accounts: Array<string>, ids: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"accounts","type":"address[]"},{"name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [accounts, ids], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cancelOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public calculateReportingFee = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'calculateReportingFee', options.sender)
	}
	
	public calculateReportingFee_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'calculateReportingFee', options.sender)
	}

	public calculateReportingFee_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <TBigNumber>result[0]
	}

	public claimTradingProceeds = async (market: string, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"_outcomeFees","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, shareHolder, affiliateAddress], 'claimTradingProceeds', options.sender)
	}
	
	public claimTradingProceeds_estimateGas = async (market: string, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"_outcomeFees","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, shareHolder, affiliateAddress], 'claimTradingProceeds', options.sender)
	}

	public claimTradingProceeds_ = async (market: string, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"_outcomeFees","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, shareHolder, affiliateAddress], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupplyForMarketOutcome_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"totalSupplyForMarketOutcome","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public sellCompleteSetsForTrade = async (market: string, outcome: TBigNumber, amount: TBigNumber, shortParticipant: string, longParticipant: string, shortRecipient: string, longRecipient: string, price: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_shortParticipant","type":"address"},{"name":"_longParticipant","type":"address"},{"name":"_shortRecipient","type":"address"},{"name":"_longRecipient","type":"address"},{"name":"_price","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"sellCompleteSetsForTrade","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, amount, shortParticipant, longParticipant, shortRecipient, longRecipient, price, affiliateAddress], 'sellCompleteSetsForTrade', options.sender)
	}
	
	public sellCompleteSetsForTrade_estimateGas = async (market: string, outcome: TBigNumber, amount: TBigNumber, shortParticipant: string, longParticipant: string, shortRecipient: string, longRecipient: string, price: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_shortParticipant","type":"address"},{"name":"_longParticipant","type":"address"},{"name":"_shortRecipient","type":"address"},{"name":"_longRecipient","type":"address"},{"name":"_price","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"sellCompleteSetsForTrade","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, amount, shortParticipant, longParticipant, shortRecipient, longRecipient, price, affiliateAddress], 'sellCompleteSetsForTrade', options.sender)
	}

	public sellCompleteSetsForTrade_ = async (market: string, outcome: TBigNumber, amount: TBigNumber, shortParticipant: string, longParticipant: string, shortRecipient: string, longRecipient: string, price: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<{_creatorFee: TBigNumber, _reportingFee: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_shortParticipant","type":"address"},{"name":"_longParticipant","type":"address"},{"name":"_shortRecipient","type":"address"},{"name":"_longRecipient","type":"address"},{"name":"_price","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"sellCompleteSetsForTrade","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, amount, shortParticipant, longParticipant, shortRecipient, longRecipient, price, affiliateAddress], options.sender)
		return <{_creatorFee: TBigNumber, _reportingFee: TBigNumber}>result
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public divideUpWinnings = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"name":"_proceeds","type":"uint256"},{"name":"_shareHolderShare","type":"uint256"},{"name":"_creatorShare","type":"uint256"},{"name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, numberOfShares], 'divideUpWinnings', options.sender)
	}
	
	public divideUpWinnings_estimateGas = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"name":"_proceeds","type":"uint256"},{"name":"_shareHolderShare","type":"uint256"},{"name":"_creatorShare","type":"uint256"},{"name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, numberOfShares], 'divideUpWinnings', options.sender)
	}

	public divideUpWinnings_ = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<{_proceeds: TBigNumber, _shareHolderShare: TBigNumber, _creatorShare: TBigNumber, _reporterShare: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"name":"_proceeds","type":"uint256"},{"name":"_shareHolderShare","type":"uint256"},{"name":"_creatorShare","type":"uint256"},{"name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, numberOfShares], options.sender)
		return <{_proceeds: TBigNumber, _shareHolderShare: TBigNumber, _creatorShare: TBigNumber, _reporterShare: TBigNumber}>result
	}

	public setApprovalForAll = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}
	
	public setApprovalForAll_estimateGas = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}

	public setApprovalForAll_ = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator, approved], options.sender)
	}

	public buyCompleteSets = async (market: string, account: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, account, amount], 'buyCompleteSets', options.sender)
	}
	
	public buyCompleteSets_estimateGas = async (market: string, account: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, account, amount], 'buyCompleteSets', options.sender)
	}

	public buyCompleteSets_ = async (market: string, account: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, account, amount], options.sender)
		return <boolean>result[0]
	}

	public publicBuyCompleteSets = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'publicBuyCompleteSets', options.sender)
	}
	
	public publicBuyCompleteSets_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'publicBuyCompleteSets', options.sender)
	}

	public publicBuyCompleteSets_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <boolean>result[0]
	}

	public publicSellCompleteSets = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'publicSellCompleteSets', options.sender)
	}
	
	public publicSellCompleteSets_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'publicSellCompleteSets', options.sender)
	}

	public publicSellCompleteSets_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<{_creatorFee: TBigNumber, _reportingFee: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <{_creatorFee: TBigNumber, _reportingFee: TBigNumber}>result
	}

	public totalSupply_ = async (id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [id], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur], options.sender)
	}

	public getTokenIds_ = async (market: string, outcomes: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcomes","type":"uint256[]"}],"name":"getTokenIds","outputs":[{"name":"_tokenIds","type":"uint256[]"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [market, outcomes], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getOutcome_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"getOutcome","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <TBigNumber>result[0]
	}

	public balanceOfMarketOutcome_ = async (market: string, outcome: TBigNumber, account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_account","type":"address"}],"name":"balanceOfMarketOutcome","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome, account], options.sender)
		return <TBigNumber>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isApprovedForAll_ = async (account: string, operator: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"account","type":"address"},{"name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, operator], options.sender)
		return <boolean>result[0]
	}

	public getMarket_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public safeTransferFrom = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"id","type":"uint256"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}
	
	public safeTransferFrom_estimateGas = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"id","type":"uint256"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}

	public safeTransferFrom_ = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"id","type":"uint256"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, id, value, data], options.sender)
	}

	public calculateProceeds_ = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_numberOfShares","type":"uint256"}],"name":"calculateProceeds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome, numberOfShares], options.sender)
		return <TBigNumber>result[0]
	}

	public sellCompleteSets = async (market: string, holder: string, recipient: string, amount: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_holder","type":"address"},{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"sellCompleteSets","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, holder, recipient, amount, affiliateAddress], 'sellCompleteSets', options.sender)
	}
	
	public sellCompleteSets_estimateGas = async (market: string, holder: string, recipient: string, amount: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_holder","type":"address"},{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"sellCompleteSets","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, holder, recipient, amount, affiliateAddress], 'sellCompleteSets', options.sender)
	}

	public sellCompleteSets_ = async (market: string, holder: string, recipient: string, amount: TBigNumber, affiliateAddress: string, options?: { sender?: string }): Promise<{_creatorFee: TBigNumber, _reportingFee: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_holder","type":"address"},{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_affiliateAddress","type":"address"}],"name":"sellCompleteSets","outputs":[{"name":"_creatorFee","type":"uint256"},{"name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, holder, recipient, amount, affiliateAddress], options.sender)
		return <{_creatorFee: TBigNumber, _reportingFee: TBigNumber}>result
	}

	public lowestBalanceOfMarketOutcomes_ = async (market: string, outcomes: Array<TBigNumber>, account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcomes","type":"uint256[]"},{"name":"_account","type":"address"}],"name":"lowestBalanceOfMarketOutcomes","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcomes, account], options.sender)
		return <TBigNumber>result[0]
	}

	public unsafeTransferFrom = async (from: string, to: string, id: TBigNumber, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_id","type":"uint256"},{"name":"_value","type":"uint256"}],"name":"unsafeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, id, value], 'unsafeTransferFrom', options.sender)
	}
	
	public unsafeTransferFrom_estimateGas = async (from: string, to: string, id: TBigNumber, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_id","type":"uint256"},{"name":"_value","type":"uint256"}],"name":"unsafeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, id, value], 'unsafeTransferFrom', options.sender)
	}

	public unsafeTransferFrom_ = async (from: string, to: string, id: TBigNumber, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_id","type":"uint256"},{"name":"_value","type":"uint256"}],"name":"unsafeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, id, value], options.sender)
	}
}


export class Universe<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public isContainerForDisputeWindow_ = async (shadyDisputeWindow: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyDisputeWindow","type":"address"}],"name":"isContainerForDisputeWindow","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyDisputeWindow], options.sender)
		return <boolean>result[0]
	}

	public getDisputeThresholdForDisputePacing_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeThresholdForDisputePacing","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public marketFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"marketFactory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public previousDesignatedReportNoShowBondInAttoRep_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousDesignatedReportNoShowBondInAttoRep","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public migrateMarketOut = async (destinationUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destinationUniverse","type":"address"}],"name":"migrateMarketOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [destinationUniverse], 'migrateMarketOut', options.sender)
	}
	
	public migrateMarketOut_estimateGas = async (destinationUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destinationUniverse","type":"address"}],"name":"migrateMarketOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [destinationUniverse], 'migrateMarketOut', options.sender)
	}

	public migrateMarketOut_ = async (destinationUniverse: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_destinationUniverse","type":"address"}],"name":"migrateMarketOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [destinationUniverse], options.sender)
		return <boolean>result[0]
	}

	public decrementOpenInterestFromMarket = async (market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"decrementOpenInterestFromMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market], 'decrementOpenInterestFromMarket', options.sender)
	}
	
	public decrementOpenInterestFromMarket_estimateGas = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"decrementOpenInterestFromMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market], 'decrementOpenInterestFromMarket', options.sender)
	}

	public decrementOpenInterestFromMarket_ = async (market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"}],"name":"decrementOpenInterestFromMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <boolean>result[0]
	}

	public getDisputeWindowId_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"getDisputeWindowId","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <TBigNumber>result[0]
	}

	public daiPot_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"daiPot","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public sweepInterest = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"sweepInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'sweepInterest', options.sender)
	}
	
	public sweepInterest_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"sweepInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'sweepInterest', options.sender)
	}

	public sweepInterest_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"sweepInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public createYesNoMarket = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, extraInfo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, extraInfo], 'createYesNoMarket', options.sender)
	}
	
	public createYesNoMarket_estimateGas = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, extraInfo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, extraInfo], 'createYesNoMarket', options.sender)
	}

	public createYesNoMarket_ = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, extraInfo: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, extraInfo], options.sender)
		return <string>result[0]
	}

	public openInterestCash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"openInterestCash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createChildUniverse = async (parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentPayoutNumerators], 'createChildUniverse', options.sender)
	}
	
	public createChildUniverse_estimateGas = async (parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentPayoutNumerators], 'createChildUniverse', options.sender)
	}

	public createChildUniverse_ = async (parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentPayoutNumerators], options.sender)
		return <string>result[0]
	}

	public DAI_ONE_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DAI_ONE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public daiVat_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"daiVat","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fork = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'fork', options.sender)
	}
	
	public fork_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'fork', options.sender)
	}

	public fork_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isOpenInterestCash_ = async (address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_address","type":"address"}],"name":"isOpenInterestCash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [address], options.sender)
		return <boolean>result[0]
	}

	public createScalarMarket = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, prices: Array<TBigNumber>, numTicks: TBigNumber, extraInfo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_prices","type":"int256[]"},{"name":"_numTicks","type":"uint256"},{"name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, prices, numTicks, extraInfo], 'createScalarMarket', options.sender)
	}
	
	public createScalarMarket_estimateGas = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, prices: Array<TBigNumber>, numTicks: TBigNumber, extraInfo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_prices","type":"int256[]"},{"name":"_numTicks","type":"uint256"},{"name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, prices, numTicks, extraInfo], 'createScalarMarket', options.sender)
	}

	public createScalarMarket_ = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, prices: Array<TBigNumber>, numTicks: TBigNumber, extraInfo: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_prices","type":"int256[]"},{"name":"_numTicks","type":"uint256"},{"name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, prices, numTicks, extraInfo], options.sender)
		return <string>result[0]
	}

	public getInitialReportMinValue_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialReportMinValue","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public payoutNumerators_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"payoutNumerators","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputeWindowByTimestamp_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"getDisputeWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <string>result[0]
	}

	public withdraw = async (recipient: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_market","type":"address"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, market], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (recipient: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_market","type":"address"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, market], 'withdraw', options.sender)
	}

	public withdraw_ = async (recipient: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_market","type":"address"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount, market], options.sender)
		return <boolean>result[0]
	}

	public getRepMarketCapInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRepMarketCapInAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputeWindow_ = async (disputeWindowId: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_disputeWindowId","type":"uint256"}],"name":"getDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [disputeWindowId], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public calculateReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"calculateReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public previousReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningChildUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWinningChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPayoutNumerators_ = async (options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutNumerators","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public DEFAULT_NUM_TICKS_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DEFAULT_NUM_TICKS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningChildPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getWinningChildPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getForkEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkEndTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getForkReputationGoal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkReputationGoal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public formulas_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"formulas","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOrCreateDisputeWindowByTimestamp = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"getOrCreateDisputeWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [timestamp, initial], 'getOrCreateDisputeWindowByTimestamp', options.sender)
	}
	
	public getOrCreateDisputeWindowByTimestamp_estimateGas = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"getOrCreateDisputeWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [timestamp, initial], 'getOrCreateDisputeWindowByTimestamp', options.sender)
	}

	public getOrCreateDisputeWindowByTimestamp_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_initial","type":"bool"}],"name":"getOrCreateDisputeWindowByTimestamp","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <string>result[0]
	}

	public getCurrentDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_initial","type":"bool"}],"name":"getCurrentDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getDisputeRoundDurationInSeconds_ = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_initial","type":"bool"}],"name":"getDisputeRoundDurationInSeconds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <TBigNumber>result[0]
	}

	public migrateMarketIn = async (market: string, cashBalance: TBigNumber, marketOI: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_cashBalance","type":"uint256"},{"name":"_marketOI","type":"uint256"}],"name":"migrateMarketIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, cashBalance, marketOI], 'migrateMarketIn', options.sender)
	}
	
	public migrateMarketIn_estimateGas = async (market: string, cashBalance: TBigNumber, marketOI: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_cashBalance","type":"uint256"},{"name":"_marketOI","type":"uint256"}],"name":"migrateMarketIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, cashBalance, marketOI], 'migrateMarketIn', options.sender)
	}

	public migrateMarketIn_ = async (market: string, cashBalance: TBigNumber, marketOI: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_cashBalance","type":"uint256"},{"name":"_marketOI","type":"uint256"}],"name":"migrateMarketIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, cashBalance, marketOI], options.sender)
		return <boolean>result[0]
	}

	public getOrCacheReportingFeeDivisor = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheReportingFeeDivisor', options.sender)
	}
	
	public getOrCacheReportingFeeDivisor_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheReportingFeeDivisor', options.sender)
	}

	public getOrCacheReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCreateNextDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreateNextDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreateNextDisputeWindow', options.sender)
	}
	
	public getOrCreateNextDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreateNextDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreateNextDisputeWindow', options.sender)
	}

	public getOrCreateNextDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreateNextDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public isParentOf_ = async (shadyChild: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyChild","type":"address"}],"name":"isParentOf","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyChild], options.sender)
		return <boolean>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public marketBalance_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"marketBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public updateForkValues = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateForkValues","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'updateForkValues', options.sender)
	}
	
	public updateForkValues_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateForkValues","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'updateForkValues', options.sender)
	}

	public updateForkValues_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateForkValues","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isContainerForMarket_ = async (shadyMarket: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyMarket","type":"address"}],"name":"isContainerForMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyMarket], options.sender)
		return <boolean>result[0]
	}

	public getParentUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParentUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOrCacheMarketRepBond = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketRepBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheMarketRepBond', options.sender)
	}
	
	public getOrCacheMarketRepBond_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketRepBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheMarketRepBond', options.sender)
	}

	public getOrCacheMarketRepBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketRepBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public disputeWindowFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"disputeWindowFactory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalBalance_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheValidityBond = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheValidityBond', options.sender)
	}
	
	public getOrCacheValidityBond_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheValidityBond', options.sender)
	}

	public getOrCacheValidityBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public createCategoricalMarket = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, outcomes: Array<string>, extraInfo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_outcomes","type":"bytes32[]"},{"name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, outcomes, extraInfo], 'createCategoricalMarket', options.sender)
	}
	
	public createCategoricalMarket_estimateGas = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, outcomes: Array<string>, extraInfo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_outcomes","type":"bytes32[]"},{"name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, outcomes, extraInfo], 'createCategoricalMarket', options.sender)
	}

	public createCategoricalMarket_ = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, outcomes: Array<string>, extraInfo: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_endTime","type":"uint256"},{"name":"_feePerCashInAttoCash","type":"uint256"},{"name":"_affiliateFeeDivisor","type":"uint256"},{"name":"_designatedReporterAddress","type":"address"},{"name":"_outcomes","type":"bytes32[]"},{"name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, feePerCashInAttoCash, affiliateFeeDivisor, designatedReporterAddress, outcomes, extraInfo], options.sender)
		return <string>result[0]
	}

	public previousDesignatedReportStakeInAttoRep_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousDesignatedReportStakeInAttoRep","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decrementOpenInterest = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'decrementOpenInterest', options.sender)
	}
	
	public decrementOpenInterest_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'decrementOpenInterest', options.sender)
	}

	public decrementOpenInterest_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isForking_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForking","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public daiJoin_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"daiJoin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getParentPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParentPayoutDistributionHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOpenInterestInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOpenInterestInAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getForkingMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkingMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public incrementOpenInterest = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'incrementOpenInterest', options.sender)
	}
	
	public incrementOpenInterest_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'incrementOpenInterest', options.sender)
	}

	public incrementOpenInterest_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public isForkingMarket_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForkingMarket","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public creationTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"creationTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getTargetRepMarketCapInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTargetRepMarketCapInAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCreatePreviousDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreatePreviousDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreatePreviousDisputeWindow', options.sender)
	}
	
	public getOrCreatePreviousDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreatePreviousDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreatePreviousDisputeWindow', options.sender)
	}

	public getOrCreatePreviousDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreatePreviousDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getOrCreateCurrentDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreateCurrentDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreateCurrentDisputeWindow', options.sender)
	}
	
	public getOrCreateCurrentDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreateCurrentDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreateCurrentDisputeWindow', options.sender)
	}

	public getOrCreateCurrentDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreateCurrentDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public DEFAULT_NUM_OUTCOMES_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DEFAULT_NUM_OUTCOMES","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheDesignatedReportStake = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheDesignatedReportStake', options.sender)
	}
	
	public getOrCacheDesignatedReportStake_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheDesignatedReportStake', options.sender)
	}

	public getOrCacheDesignatedReportStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getChildUniverse_ = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"getChildUniverse","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [parentPayoutDistributionHash], options.sender)
		return <string>result[0]
	}

	public previousValidityBondInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousValidityBondInAttoCash","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCreatePreviousPreviousDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreatePreviousPreviousDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreatePreviousPreviousDisputeWindow', options.sender)
	}
	
	public getOrCreatePreviousPreviousDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreatePreviousPreviousDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreatePreviousPreviousDisputeWindow', options.sender)
	}

	public getOrCreatePreviousPreviousDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_initial","type":"bool"}],"name":"getOrCreatePreviousPreviousDisputeWindow","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public INITIAL_WINDOW_ID_BUFFER_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"INITIAL_WINDOW_ID_BUFFER","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public deposit = async (sender: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_market","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, amount, market], 'deposit', options.sender)
	}
	
	public deposit_estimateGas = async (sender: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_market","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, amount, market], 'deposit', options.sender)
	}

	public deposit_ = async (sender: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_market","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, amount, market], options.sender)
		return <boolean>result[0]
	}

	public updateTentativeWinningChildUniverse = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningChildUniverse","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentPayoutDistributionHash], 'updateTentativeWinningChildUniverse', options.sender)
	}
	
	public updateTentativeWinningChildUniverse_estimateGas = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningChildUniverse","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentPayoutDistributionHash], 'updateTentativeWinningChildUniverse', options.sender)
	}

	public updateTentativeWinningChildUniverse_ = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningChildUniverse","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentPayoutDistributionHash], options.sender)
		return <boolean>result[0]
	}

	public isContainerForReportingParticipant_ = async (shadyReportingParticipant: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_shadyReportingParticipant","type":"address"}],"name":"isContainerForReportingParticipant","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyReportingParticipant], options.sender)
		return <boolean>result[0]
	}

	public getDisputeThresholdForFork_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeThresholdForFork","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheDesignatedReportNoShowBond = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheDesignatedReportNoShowBond', options.sender)
	}
	
	public getOrCacheDesignatedReportNoShowBond_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheDesignatedReportNoShowBond', options.sender)
	}

	public getOrCacheDesignatedReportNoShowBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class AugurTrading<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public logProfitLossChanged = async (market: string, account: string, outcome: TBigNumber, netPosition: TBigNumber, avgPrice: TBigNumber, realizedProfit: TBigNumber, frozenFunds: TBigNumber, realizedCost: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_netPosition","type":"int256"},{"name":"_avgPrice","type":"uint256"},{"name":"_realizedProfit","type":"int256"},{"name":"_frozenFunds","type":"int256"},{"name":"_realizedCost","type":"int256"}],"name":"logProfitLossChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, account, outcome, netPosition, avgPrice, realizedProfit, frozenFunds, realizedCost], 'logProfitLossChanged', options.sender)
	}
	
	public logProfitLossChanged_estimateGas = async (market: string, account: string, outcome: TBigNumber, netPosition: TBigNumber, avgPrice: TBigNumber, realizedProfit: TBigNumber, frozenFunds: TBigNumber, realizedCost: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_netPosition","type":"int256"},{"name":"_avgPrice","type":"uint256"},{"name":"_realizedProfit","type":"int256"},{"name":"_frozenFunds","type":"int256"},{"name":"_realizedCost","type":"int256"}],"name":"logProfitLossChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, account, outcome, netPosition, avgPrice, realizedProfit, frozenFunds, realizedCost], 'logProfitLossChanged', options.sender)
	}

	public logProfitLossChanged_ = async (market: string, account: string, outcome: TBigNumber, netPosition: TBigNumber, avgPrice: TBigNumber, realizedProfit: TBigNumber, frozenFunds: TBigNumber, realizedCost: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_netPosition","type":"int256"},{"name":"_avgPrice","type":"uint256"},{"name":"_realizedProfit","type":"int256"},{"name":"_frozenFunds","type":"int256"},{"name":"_realizedCost","type":"int256"}],"name":"logProfitLossChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome, netPosition, avgPrice, realizedProfit, frozenFunds, realizedCost], options.sender)
		return <boolean>result[0]
	}

	public claimMarketsProceeds = async (markets: Array<string>, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_markets","type":"address[]"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimMarketsProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [markets, shareHolder, affiliateAddress], 'claimMarketsProceeds', options.sender)
	}
	
	public claimMarketsProceeds_estimateGas = async (markets: Array<string>, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_markets","type":"address[]"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimMarketsProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [markets, shareHolder, affiliateAddress], 'claimMarketsProceeds', options.sender)
	}

	public claimMarketsProceeds_ = async (markets: Array<string>, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_markets","type":"address[]"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimMarketsProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [markets, shareHolder, affiliateAddress], options.sender)
		return <boolean>result[0]
	}

	public logZeroXOrderFilled = async (universe: string, market: string, tradeGroupId: string, orderType: TBigNumber, addressData: Array<string>, uint256Data: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_orderType","type":"uint8"},{"name":"_addressData","type":"address[]"},{"name":"_uint256Data","type":"uint256[]"}],"name":"logZeroXOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, tradeGroupId, orderType, addressData, uint256Data], 'logZeroXOrderFilled', options.sender)
	}
	
	public logZeroXOrderFilled_estimateGas = async (universe: string, market: string, tradeGroupId: string, orderType: TBigNumber, addressData: Array<string>, uint256Data: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_orderType","type":"uint8"},{"name":"_addressData","type":"address[]"},{"name":"_uint256Data","type":"uint256[]"}],"name":"logZeroXOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, tradeGroupId, orderType, addressData, uint256Data], 'logZeroXOrderFilled', options.sender)
	}

	public logZeroXOrderFilled_ = async (universe: string, market: string, tradeGroupId: string, orderType: TBigNumber, addressData: Array<string>, uint256Data: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_orderType","type":"uint8"},{"name":"_addressData","type":"address[]"},{"name":"_uint256Data","type":"uint256[]"}],"name":"logZeroXOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, tradeGroupId, orderType, addressData, uint256Data], options.sender)
		return <boolean>result[0]
	}

	public logOrderFilled = async (universe: string, creator: string, filler: string, price: TBigNumber, fees: TBigNumber, amountFilled: TBigNumber, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_creator","type":"address"},{"name":"_filler","type":"address"},{"name":"_price","type":"uint256"},{"name":"_fees","type":"uint256"},{"name":"_amountFilled","type":"uint256"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, creator, filler, price, fees, amountFilled, orderId, tradeGroupId], 'logOrderFilled', options.sender)
	}
	
	public logOrderFilled_estimateGas = async (universe: string, creator: string, filler: string, price: TBigNumber, fees: TBigNumber, amountFilled: TBigNumber, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_creator","type":"address"},{"name":"_filler","type":"address"},{"name":"_price","type":"uint256"},{"name":"_fees","type":"uint256"},{"name":"_amountFilled","type":"uint256"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, creator, filler, price, fees, amountFilled, orderId, tradeGroupId], 'logOrderFilled', options.sender)
	}

	public logOrderFilled_ = async (universe: string, creator: string, filler: string, price: TBigNumber, fees: TBigNumber, amountFilled: TBigNumber, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_creator","type":"address"},{"name":"_filler","type":"address"},{"name":"_price","type":"uint256"},{"name":"_fees","type":"uint256"},{"name":"_amountFilled","type":"uint256"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderFilled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, creator, filler, price, fees, amountFilled, orderId, tradeGroupId], options.sender)
		return <boolean>result[0]
	}

	public doApprovals = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"doApprovals","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'doApprovals', options.sender)
	}
	
	public doApprovals_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"doApprovals","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'doApprovals', options.sender)
	}

	public doApprovals_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"doApprovals","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public registerContract = async (key: string, address: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [key, address], 'registerContract', options.sender)
	}
	
	public registerContract_estimateGas = async (key: string, address: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [key, address], 'registerContract', options.sender)
	}

	public registerContract_ = async (key: string, address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_key","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerContract","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [key, address], options.sender)
		return <boolean>result[0]
	}

	public uploader_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"uploader","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public logMarketVolumeChanged = async (universe: string, market: string, volume: TBigNumber, outcomeVolumes: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_volume","type":"uint256"},{"name":"_outcomeVolumes","type":"uint256[]"}],"name":"logMarketVolumeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, volume, outcomeVolumes], 'logMarketVolumeChanged', options.sender)
	}
	
	public logMarketVolumeChanged_estimateGas = async (universe: string, market: string, volume: TBigNumber, outcomeVolumes: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_volume","type":"uint256"},{"name":"_outcomeVolumes","type":"uint256[]"}],"name":"logMarketVolumeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, volume, outcomeVolumes], 'logMarketVolumeChanged', options.sender)
	}

	public logMarketVolumeChanged_ = async (universe: string, market: string, volume: TBigNumber, outcomeVolumes: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_volume","type":"uint256"},{"name":"_outcomeVolumes","type":"uint256[]"}],"name":"logMarketVolumeChanged","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, volume, outcomeVolumes], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public claimTradingProceeds = async (market: string, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, shareHolder, affiliateAddress], 'claimTradingProceeds', options.sender)
	}
	
	public claimTradingProceeds_estimateGas = async (market: string, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, shareHolder, affiliateAddress], 'claimTradingProceeds', options.sender)
	}

	public claimTradingProceeds_ = async (market: string, shareHolder: string, affiliateAddress: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_shareHolder","type":"address"},{"name":"_affiliateAddress","type":"address"}],"name":"claimTradingProceeds","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, shareHolder, affiliateAddress], options.sender)
		return <boolean>result[0]
	}

	public logOrderCreated = async (universe: string, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, orderId, tradeGroupId], 'logOrderCreated', options.sender)
	}
	
	public logOrderCreated_estimateGas = async (universe: string, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, orderId, tradeGroupId], 'logOrderCreated', options.sender)
	}

	public logOrderCreated_ = async (universe: string, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderCreated","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, orderId, tradeGroupId], options.sender)
		return <boolean>result[0]
	}

	public logOrderCanceled = async (universe: string, market: string, creator: string, tokenRefund: TBigNumber, sharesRefund: TBigNumber, orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_creator","type":"address"},{"name":"_tokenRefund","type":"uint256"},{"name":"_sharesRefund","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"logOrderCanceled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, creator, tokenRefund, sharesRefund, orderId], 'logOrderCanceled', options.sender)
	}
	
	public logOrderCanceled_estimateGas = async (universe: string, market: string, creator: string, tokenRefund: TBigNumber, sharesRefund: TBigNumber, orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_creator","type":"address"},{"name":"_tokenRefund","type":"uint256"},{"name":"_sharesRefund","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"logOrderCanceled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, creator, tokenRefund, sharesRefund, orderId], 'logOrderCanceled', options.sender)
	}

	public logOrderCanceled_ = async (universe: string, market: string, creator: string, tokenRefund: TBigNumber, sharesRefund: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_creator","type":"address"},{"name":"_tokenRefund","type":"uint256"},{"name":"_sharesRefund","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"logOrderCanceled","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, creator, tokenRefund, sharesRefund, orderId], options.sender)
		return <boolean>result[0]
	}

	public finishDeployment = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'finishDeployment', options.sender)
	}
	
	public finishDeployment_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'finishDeployment', options.sender)
	}

	public finishDeployment_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public lookup_ = async (key: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_key","type":"bytes32"}],"name":"lookup","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [key], options.sender)
		return <string>result[0]
	}
}


export class CancelOrder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public cancelOrders = async (orderIds: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderIds","type":"bytes32[]"}],"name":"cancelOrders","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderIds], 'cancelOrders', options.sender)
	}
	
	public cancelOrders_estimateGas = async (orderIds: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderIds","type":"bytes32[]"}],"name":"cancelOrders","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderIds], 'cancelOrders', options.sender)
	}

	public cancelOrders_ = async (orderIds: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderIds","type":"bytes32[]"}],"name":"cancelOrders","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderIds], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder = async (orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"cancelOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId], 'cancelOrder', options.sender)
	}
	
	public cancelOrder_estimateGas = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"cancelOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId], 'cancelOrder', options.sender)
	}

	public cancelOrder_ = async (orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"cancelOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <boolean>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class CreateOrder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder = async (creator: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_creator","type":"address"},{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"createOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [creator, type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId, kycToken], 'createOrder', options.sender)
	}
	
	public createOrder_estimateGas = async (creator: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_creator","type":"address"},{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"createOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [creator, type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId, kycToken], 'createOrder', options.sender)
	}

	public createOrder_ = async (creator: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_creator","type":"address"},{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"createOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [creator, type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId, kycToken], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public publicCreateOrders = async (outcomes: Array<TBigNumber>, types: Array<TBigNumber>, attoshareAmounts: Array<TBigNumber>, prices: Array<TBigNumber>, market: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_outcomes","type":"uint256[]"},{"name":"_types","type":"uint8[]"},{"name":"_attoshareAmounts","type":"uint256[]"},{"name":"_prices","type":"uint256[]"},{"name":"_market","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"publicCreateOrders","outputs":[{"name":"_orders","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [outcomes, types, attoshareAmounts, prices, market, tradeGroupId, kycToken], 'publicCreateOrders', options.sender)
	}
	
	public publicCreateOrders_estimateGas = async (outcomes: Array<TBigNumber>, types: Array<TBigNumber>, attoshareAmounts: Array<TBigNumber>, prices: Array<TBigNumber>, market: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_outcomes","type":"uint256[]"},{"name":"_types","type":"uint8[]"},{"name":"_attoshareAmounts","type":"uint256[]"},{"name":"_prices","type":"uint256[]"},{"name":"_market","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"publicCreateOrders","outputs":[{"name":"_orders","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [outcomes, types, attoshareAmounts, prices, market, tradeGroupId, kycToken], 'publicCreateOrders', options.sender)
	}

	public publicCreateOrders_ = async (outcomes: Array<TBigNumber>, types: Array<TBigNumber>, attoshareAmounts: Array<TBigNumber>, prices: Array<TBigNumber>, market: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_outcomes","type":"uint256[]"},{"name":"_types","type":"uint8[]"},{"name":"_attoshareAmounts","type":"uint256[]"},{"name":"_prices","type":"uint256[]"},{"name":"_market","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"publicCreateOrders","outputs":[{"name":"_orders","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [outcomes, types, attoshareAmounts, prices, market, tradeGroupId, kycToken], options.sender)
		return <Array<string>>result[0]
	}

	public publicCreateOrder = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"publicCreateOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId, kycToken], 'publicCreateOrder', options.sender)
	}
	
	public publicCreateOrder_estimateGas = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"publicCreateOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId, kycToken], 'publicCreateOrder', options.sender)
	}

	public publicCreateOrder_ = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_kycToken","type":"address"}],"name":"publicCreateOrder","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId, kycToken], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class FillOrder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public zeroXTrade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"zeroXTrade","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder = async (filler: string, orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"}],"name":"fillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [filler, orderId, amountFillerWants, tradeGroupId, affiliateAddress], 'fillOrder', options.sender)
	}
	
	public fillOrder_estimateGas = async (filler: string, orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"}],"name":"fillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [filler, orderId, amountFillerWants, tradeGroupId, affiliateAddress], 'fillOrder', options.sender)
	}

	public fillOrder_ = async (filler: string, orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_filler","type":"address"},{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"}],"name":"fillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [filler, orderId, amountFillerWants, tradeGroupId, affiliateAddress], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public fillZeroXOrder = async (market: string, outcome: TBigNumber, kycToken: string, price: TBigNumber, orderType: TBigNumber, amount: TBigNumber, creator: string, tradeGroupId: string, affiliateAddress: string, filler: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"},{"name":"_price","type":"uint256"},{"name":"_orderType","type":"uint8"},{"name":"_amount","type":"uint256"},{"name":"_creator","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"},{"name":"_filler","type":"address"}],"name":"fillZeroXOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, kycToken, price, orderType, amount, creator, tradeGroupId, affiliateAddress, filler], 'fillZeroXOrder', options.sender)
	}
	
	public fillZeroXOrder_estimateGas = async (market: string, outcome: TBigNumber, kycToken: string, price: TBigNumber, orderType: TBigNumber, amount: TBigNumber, creator: string, tradeGroupId: string, affiliateAddress: string, filler: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"},{"name":"_price","type":"uint256"},{"name":"_orderType","type":"uint8"},{"name":"_amount","type":"uint256"},{"name":"_creator","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"},{"name":"_filler","type":"address"}],"name":"fillZeroXOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, kycToken, price, orderType, amount, creator, tradeGroupId, affiliateAddress, filler], 'fillZeroXOrder', options.sender)
	}

	public fillZeroXOrder_ = async (market: string, outcome: TBigNumber, kycToken: string, price: TBigNumber, orderType: TBigNumber, amount: TBigNumber, creator: string, tradeGroupId: string, affiliateAddress: string, filler: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"},{"name":"_price","type":"uint256"},{"name":"_orderType","type":"uint8"},{"name":"_amount","type":"uint256"},{"name":"_creator","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"},{"name":"_filler","type":"address"}],"name":"fillZeroXOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, kycToken, price, orderType, amount, creator, tradeGroupId, affiliateAddress, filler], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public publicFillOrder = async (orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, affiliateAddress: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"}],"name":"publicFillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId, amountFillerWants, tradeGroupId, affiliateAddress], 'publicFillOrder', options.sender)
	}
	
	public publicFillOrder_estimateGas = async (orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"}],"name":"publicFillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId, amountFillerWants, tradeGroupId, affiliateAddress], 'publicFillOrder', options.sender)
	}

	public publicFillOrder_ = async (orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, affiliateAddress: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_amountFillerWants","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_affiliateAddress","type":"address"}],"name":"publicFillOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId, amountFillerWants, tradeGroupId, affiliateAddress], options.sender)
		return <TBigNumber>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public marketOutcomeVolumes_ = async (arg0: string, arg1: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"marketOutcomeVolumes","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class Orders<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getAmount_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public descendOrderList_ = async (type: TBigNumber, price: TBigNumber, highestOrderId: string, options?: { sender?: string }): Promise<{_betterOrderId: string, _worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_highestOrderId","type":"bytes32"}],"name":"descendOrderList","outputs":[{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, highestOrderId], options.sender)
		return <{_betterOrderId: string, _worseOrderId: string}>result
	}

	public assertIsNotBetterPrice_ = async (type: TBigNumber, price: TBigNumber, betterOrderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"}],"name":"assertIsNotBetterPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, betterOrderId], options.sender)
		return <boolean>result[0]
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public setPrice = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, price], 'setPrice', options.sender)
	}
	
	public setPrice_estimateGas = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, price], 'setPrice', options.sender)
	}

	public setPrice_ = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, price], options.sender)
		return <boolean>result[0]
	}

	public getPrice_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalEscrowed_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"}],"name":"getTotalEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public findBoundingOrders = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"betterOrderId","type":"bytes32"},{"name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], 'findBoundingOrders', options.sender)
	}
	
	public findBoundingOrders_estimateGas = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"betterOrderId","type":"bytes32"},{"name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], 'findBoundingOrders', options.sender)
	}

	public findBoundingOrders_ = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<{betterOrderId: string, worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_bestOrderId","type":"bytes32"},{"name":"_worstOrderId","type":"bytes32"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"name":"betterOrderId","type":"bytes32"},{"name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], options.sender)
		return <{betterOrderId: string, worseOrderId: string}>result
	}

	public assertIsNotWorsePrice = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, price, worseOrderId], 'assertIsNotWorsePrice', options.sender)
	}
	
	public assertIsNotWorsePrice_estimateGas = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, price, worseOrderId], 'assertIsNotWorsePrice', options.sender)
	}

	public assertIsNotWorsePrice_ = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, price, worseOrderId], options.sender)
		return <boolean>result[0]
	}

	public getWorstOrderId_ = async (type: TBigNumber, market: string, outcome: TBigNumber, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"}],"name":"getWorstOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, market, outcome, kycToken], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public recordFillOrder = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId, sharesFilled, tokensFilled, fill], 'recordFillOrder', options.sender)
	}
	
	public recordFillOrder_estimateGas = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId, sharesFilled, tokensFilled, fill], 'recordFillOrder', options.sender)
	}

	public recordFillOrder_ = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"},{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensFilled","type":"uint256"},{"name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId, sharesFilled, tokensFilled, fill], options.sender)
		return <boolean>result[0]
	}

	public getOrderMoneyEscrowed_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderMoneyEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isBetterPrice_ = async (type: TBigNumber, price: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"isBetterPrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, orderId], options.sender)
		return <boolean>result[0]
	}

	public getOutcome_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOutcome","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrderDataForLogs_ = async (orderId: string, options?: { sender?: string }): Promise<{_type: TBigNumber, _addressData: Array<string>, _uint256Data: Array<TBigNumber>}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderDataForLogs","outputs":[{"name":"_type","type":"uint8"},{"name":"_addressData","type":"address[]"},{"name":"_uint256Data","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <{_type: TBigNumber, _addressData: Array<string>, _uint256Data: Array<TBigNumber>}>result
	}

	public getBestOrderId_ = async (type: TBigNumber, market: string, outcome: TBigNumber, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_kycToken","type":"address"}],"name":"getBestOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, market, outcome, kycToken], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cancelOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getKYCToken_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getKYCToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getLastOutcomePrice_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getLastOutcomePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getWorseOrderId_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getWorseOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOrderId_ = async (type: TBigNumber, market: string, amount: TBigNumber, price: TBigNumber, sender: string, blockNumber: TBigNumber, outcome: TBigNumber, moneyEscrowed: TBigNumber, sharesEscrowed: TBigNumber, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_sender","type":"address"},{"name":"_blockNumber","type":"uint256"},{"name":"_outcome","type":"uint256"},{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"},{"name":"_kycToken","type":"address"}],"name":"getOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [type, market, amount, price, sender, blockNumber, outcome, moneyEscrowed, sharesEscrowed, kycToken], options.sender)
		return <string>result[0]
	}

	public getBetterOrderId_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getBetterOrderId","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOrderDataForCancel_ = async (orderId: string, options?: { sender?: string }): Promise<{_moneyEscrowed: TBigNumber, _sharesEscrowed: TBigNumber, _type: TBigNumber, _market: string, _outcome: TBigNumber, _creator: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderDataForCancel","outputs":[{"name":"_moneyEscrowed","type":"uint256"},{"name":"_sharesEscrowed","type":"uint256"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_creator","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <{_moneyEscrowed: TBigNumber, _sharesEscrowed: TBigNumber, _type: TBigNumber, _market: string, _outcome: TBigNumber, _creator: string}>result
	}

	public getMarket_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getMarket","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public saveOrder = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [uints, bytes32s, type, market, sender, kycToken], 'saveOrder', options.sender)
	}
	
	public saveOrder_estimateGas = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [uints, bytes32s, type, market, sender, kycToken], 'saveOrder', options.sender)
	}

	public saveOrder_ = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_uints","type":"uint256[]"},{"name":"_bytes32s","type":"bytes32[]"},{"name":"_type","type":"uint8"},{"name":"_market","type":"address"},{"name":"_sender","type":"address"},{"name":"_kycToken","type":"address"}],"name":"saveOrder","outputs":[{"name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [uints, bytes32s, type, market, sender, kycToken], options.sender)
		return <string>result[0]
	}

	public getOrderType_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderType","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public isWorsePrice_ = async (type: TBigNumber, price: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_orderId","type":"bytes32"}],"name":"isWorsePrice","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, orderId], options.sender)
		return <boolean>result[0]
	}

	public getOrderCreator_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderCreator","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getOrderSharesEscrowed_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"getOrderSharesEscrowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public ascendOrderList_ = async (type: TBigNumber, price: TBigNumber, lowestOrderId: string, options?: { sender?: string }): Promise<{_betterOrderId: string, _worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_price","type":"uint256"},{"name":"_lowestOrderId","type":"bytes32"}],"name":"ascendOrderList","outputs":[{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, lowestOrderId], options.sender)
		return <{_betterOrderId: string, _worseOrderId: string}>result
	}

	public removeOrder = async (orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId], 'removeOrder', options.sender)
	}
	
	public removeOrder_estimateGas = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId], 'removeOrder', options.sender)
	}

	public removeOrder_ = async (orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <boolean>result[0]
	}
}


export class ProfitLoss<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public recordTrade = async (universe: string, market: string, longAddress: string, shortAddress: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, numLongTokens: TBigNumber, numShortTokens: TBigNumber, numLongShares: TBigNumber, numShortShares: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_longAddress","type":"address"},{"name":"_shortAddress","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"int256"},{"name":"_price","type":"int256"},{"name":"_numLongTokens","type":"uint256"},{"name":"_numShortTokens","type":"uint256"},{"name":"_numLongShares","type":"uint256"},{"name":"_numShortShares","type":"uint256"}],"name":"recordTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, longAddress, shortAddress, outcome, amount, price, numLongTokens, numShortTokens, numLongShares, numShortShares], 'recordTrade', options.sender)
	}
	
	public recordTrade_estimateGas = async (universe: string, market: string, longAddress: string, shortAddress: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, numLongTokens: TBigNumber, numShortTokens: TBigNumber, numLongShares: TBigNumber, numShortShares: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_longAddress","type":"address"},{"name":"_shortAddress","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"int256"},{"name":"_price","type":"int256"},{"name":"_numLongTokens","type":"uint256"},{"name":"_numShortTokens","type":"uint256"},{"name":"_numLongShares","type":"uint256"},{"name":"_numShortShares","type":"uint256"}],"name":"recordTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, longAddress, shortAddress, outcome, amount, price, numLongTokens, numShortTokens, numLongShares, numShortShares], 'recordTrade', options.sender)
	}

	public recordTrade_ = async (universe: string, market: string, longAddress: string, shortAddress: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, numLongTokens: TBigNumber, numShortTokens: TBigNumber, numLongShares: TBigNumber, numShortShares: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_longAddress","type":"address"},{"name":"_shortAddress","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"int256"},{"name":"_price","type":"int256"},{"name":"_numLongTokens","type":"uint256"},{"name":"_numShortTokens","type":"uint256"},{"name":"_numLongShares","type":"uint256"},{"name":"_numShortShares","type":"uint256"}],"name":"recordTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, longAddress, shortAddress, outcome, amount, price, numLongTokens, numShortTokens, numLongShares, numShortShares], options.sender)
		return <boolean>result[0]
	}

	public recordFrozenFundChange = async (universe: string, market: string, account: string, outcome: TBigNumber, frozenFundDelta: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_frozenFundDelta","type":"int256"}],"name":"recordFrozenFundChange","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, outcome, frozenFundDelta], 'recordFrozenFundChange', options.sender)
	}
	
	public recordFrozenFundChange_estimateGas = async (universe: string, market: string, account: string, outcome: TBigNumber, frozenFundDelta: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_frozenFundDelta","type":"int256"}],"name":"recordFrozenFundChange","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, outcome, frozenFundDelta], 'recordFrozenFundChange', options.sender)
	}

	public recordFrozenFundChange_ = async (universe: string, market: string, account: string, outcome: TBigNumber, frozenFundDelta: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_frozenFundDelta","type":"int256"}],"name":"recordFrozenFundChange","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, account, outcome, frozenFundDelta], options.sender)
		return <boolean>result[0]
	}

	public recordClaim = async (market: string, account: string, outcomeFees: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcomeFees","type":"uint256[]"}],"name":"recordClaim","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, account, outcomeFees], 'recordClaim', options.sender)
	}
	
	public recordClaim_estimateGas = async (market: string, account: string, outcomeFees: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcomeFees","type":"uint256[]"}],"name":"recordClaim","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, account, outcomeFees], 'recordClaim', options.sender)
	}

	public recordClaim_ = async (market: string, account: string, outcomeFees: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcomeFees","type":"uint256[]"}],"name":"recordClaim","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, account, outcomeFees], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public adjustTraderProfitForFees = async (market: string, trader: string, outcome: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_trader","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"adjustTraderProfitForFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, trader, outcome, fees], 'adjustTraderProfitForFees', options.sender)
	}
	
	public adjustTraderProfitForFees_estimateGas = async (market: string, trader: string, outcome: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_trader","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"adjustTraderProfitForFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, trader, outcome, fees], 'adjustTraderProfitForFees', options.sender)
	}

	public adjustTraderProfitForFees_ = async (market: string, trader: string, outcome: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_market","type":"address"},{"name":"_trader","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_fees","type":"uint256"}],"name":"adjustTraderProfitForFees","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, trader, outcome, fees], options.sender)
		return <boolean>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getAvgPrice_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getAvgPrice","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cancelOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getRealizedCost_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getRealizedCost","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getFrozenFunds_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getFrozenFunds","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getRealizedProfit_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getRealizedProfit","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getNetPosition_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_account","type":"address"},{"name":"_outcome","type":"uint256"}],"name":"getNetPosition","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class SimulateTrade<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public simulateZeroXTrade_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, amount: TBigNumber, fillOnly: boolean, options?: { sender?: string }): Promise<{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_orders","type":"tuple[]"},{"name":"_amount","type":"uint256"},{"name":"_fillOnly","type":"bool"}],"name":"simulateZeroXTrade","outputs":[{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensDepleted","type":"uint256"},{"name":"_sharesDepleted","type":"uint256"},{"name":"_settlementFees","type":"uint256"},{"name":"_numFills","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orders, amount, fillOnly], options.sender)
		return <{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}>result
	}

	public zeroXTrade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"zeroXTrade","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getNumberOfAvaialableShares_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, sender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_sender","type":"address"}],"name":"getNumberOfAvaialableShares","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, sender], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public simulateTrade_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, kycToken: string, fillOnly: boolean, options?: { sender?: string }): Promise<{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_kycToken","type":"address"},{"name":"_fillOnly","type":"bool"}],"name":"simulateTrade","outputs":[{"name":"_sharesFilled","type":"uint256"},{"name":"_tokensDepleted","type":"uint256"},{"name":"_sharesDepleted","type":"uint256"},{"name":"_settlementFees","type":"uint256"},{"name":"_numFills","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, amount, price, kycToken, fillOnly], options.sender)
		return <{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}>result
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class Trade<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public publicFillBestOrder = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, tradeGroupId: string, loopLimit: TBigNumber, affiliateAddress: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_loopLimit","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_kycToken","type":"address"}],"name":"publicFillBestOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [direction, market, outcome, amount, price, tradeGroupId, loopLimit, affiliateAddress, kycToken], 'publicFillBestOrder', options.sender)
	}
	
	public publicFillBestOrder_estimateGas = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, tradeGroupId: string, loopLimit: TBigNumber, affiliateAddress: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_loopLimit","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_kycToken","type":"address"}],"name":"publicFillBestOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [direction, market, outcome, amount, price, tradeGroupId, loopLimit, affiliateAddress, kycToken], 'publicFillBestOrder', options.sender)
	}

	public publicFillBestOrder_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, tradeGroupId: string, loopLimit: TBigNumber, affiliateAddress: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_loopLimit","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_kycToken","type":"address"}],"name":"publicFillBestOrder","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, amount, price, tradeGroupId, loopLimit, affiliateAddress, kycToken], options.sender)
		return <TBigNumber>result[0]
	}

	public publicTrade = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, loopLimit: TBigNumber, affiliateAddress: string, kycToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_loopLimit","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_kycToken","type":"address"}],"name":"publicTrade","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [direction, market, outcome, amount, price, betterOrderId, worseOrderId, tradeGroupId, loopLimit, affiliateAddress, kycToken], 'publicTrade', options.sender)
	}
	
	public publicTrade_estimateGas = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, loopLimit: TBigNumber, affiliateAddress: string, kycToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_loopLimit","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_kycToken","type":"address"}],"name":"publicTrade","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [direction, market, outcome, amount, price, betterOrderId, worseOrderId, tradeGroupId, loopLimit, affiliateAddress, kycToken], 'publicTrade', options.sender)
	}

	public publicTrade_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, loopLimit: TBigNumber, affiliateAddress: string, kycToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_direction","type":"uint8"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint256"},{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_betterOrderId","type":"bytes32"},{"name":"_worseOrderId","type":"bytes32"},{"name":"_tradeGroupId","type":"bytes32"},{"name":"_loopLimit","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_kycToken","type":"address"}],"name":"publicTrade","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, amount, price, betterOrderId, worseOrderId, tradeGroupId, loopLimit, affiliateAddress, kycToken], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class ZeroXTrade<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getZeroXTradeTokenData_ = async (assetData: string, options?: { sender?: string }): Promise<{_token: string, _tokenId: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_assetData","type":"bytes"}],"name":"getZeroXTradeTokenData","outputs":[{"name":"_token","type":"address"},{"name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{_token: string, _tokenId: TBigNumber}>result
	}

	public balanceOf_ = async (owner: string, id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, id], options.sender)
		return <TBigNumber>result[0]
	}

	public trade = async (requestedFillAmount: TBigNumber, affiliateAddress: string, tradeGroupId: string, orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_requestedFillAmount","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_orders","type":"tuple[]"},{"name":"_signatures","type":"bytes[]"}],"name":"trade","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [requestedFillAmount, affiliateAddress, tradeGroupId, orders, signatures], 'trade', options.sender, options.attachedEth)
	}
	
	public trade_estimateGas = async (requestedFillAmount: TBigNumber, affiliateAddress: string, tradeGroupId: string, orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_requestedFillAmount","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_orders","type":"tuple[]"},{"name":"_signatures","type":"bytes[]"}],"name":"trade","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [requestedFillAmount, affiliateAddress, tradeGroupId, orders, signatures], 'trade', options.sender, options.attachedEth)
	}

	public trade_ = async (requestedFillAmount: TBigNumber, affiliateAddress: string, tradeGroupId: string, orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_requestedFillAmount","type":"uint256"},{"name":"_affiliateAddress","type":"address"},{"name":"_tradeGroupId","type":"bytes32"},{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_orders","type":"tuple[]"},{"name":"_signatures","type":"bytes[]"}],"name":"trade","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [requestedFillAmount, affiliateAddress, tradeGroupId, orders, signatures], options.sender, options.attachedEth)
		return <TBigNumber>result[0]
	}

	public getTransferFromAllowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTransferFromAllowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public ERC1155_PROXY_ID_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ERC1155_PROXY_ID","outputs":[{"name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTokenId_ = async (market: string, price: TBigNumber, outcome: TBigNumber, type: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_price","type":"uint256"},{"name":"_outcome","type":"uint8"},{"name":"_type","type":"uint8"}],"name":"getTokenId","outputs":[{"name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [market, price, outcome, type], options.sender)
		return <TBigNumber>result[0]
	}

	public unpackTokenId_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<{_market: string, _price: TBigNumber, _outcome: TBigNumber, _type: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"unpackTokenId","outputs":[{"name":"_market","type":"address"},{"name":"_price","type":"uint256"},{"name":"_outcome","type":"uint8"},{"name":"_type","type":"uint8"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <{_market: string, _price: TBigNumber, _outcome: TBigNumber, _type: TBigNumber}>result
	}

	public bidBalance_ = async (owner: string, market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_price","type":"uint256"}],"name":"bidBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, market, outcome, price], options.sender)
		return <TBigNumber>result[0]
	}

	public safeBatchTransferFrom = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"ids","type":"uint256[]"},{"name":"values","type":"uint256[]"},{"name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}
	
	public safeBatchTransferFrom_estimateGas = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"ids","type":"uint256[]"},{"name":"values","type":"uint256[]"},{"name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}

	public safeBatchTransferFrom_ = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"ids","type":"uint256[]"},{"name":"values","type":"uint256[]"},{"name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, ids, values, data], options.sender)
	}

	public createZeroXOrder_ = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, kycToken: string, expirationTimeSeconds: TBigNumber, exchange: string, salt: TBigNumber, options?: { sender?: string }): Promise<{_zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, _orderHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_type","type":"uint8"},{"name":"_attoshares","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_kycToken","type":"address"},{"name":"_expirationTimeSeconds","type":"uint256"},{"name":"_exchange","type":"address"},{"name":"_salt","type":"uint256"}],"name":"createZeroXOrder","outputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_zeroXOrder","type":"tuple"},{"name":"_orderHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, attoshares, price, market, outcome, kycToken, expirationTimeSeconds, exchange, salt], options.sender)
		return <{_zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, _orderHash: string}>result
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_augur","type":"address"},{"name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public balanceOfBatch_ = async (owners: Array<string>, ids: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owners","type":"address[]"},{"name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"name":"balances_","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owners, ids], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public askBalance_ = async (owner: string, market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_market","type":"address"},{"name":"_outcome","type":"uint8"},{"name":"_price","type":"uint256"}],"name":"askBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, market, outcome, price], options.sender)
		return <TBigNumber>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getExchangeFromAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_assetData","type":"bytes"}],"name":"getExchangeFromAssetData","outputs":[{"name":"_exchange","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <string>result[0]
	}

	public decodeAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{_assetProxyId: string, _tokenAddress: string, _tokenIds: Array<TBigNumber>, _tokenValues: Array<TBigNumber>, _callbackData: string, _kycToken: string, _exchange: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_assetData","type":"bytes"}],"name":"decodeAssetData","outputs":[{"name":"_assetProxyId","type":"bytes4"},{"name":"_tokenAddress","type":"address"},{"name":"_tokenIds","type":"uint256[]"},{"name":"_tokenValues","type":"uint256[]"},{"name":"_callbackData","type":"bytes"},{"name":"_kycToken","type":"address"},{"name":"_exchange","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{_assetProxyId: string, _tokenAddress: string, _tokenIds: Array<TBigNumber>, _tokenValues: Array<TBigNumber>, _callbackData: string, _kycToken: string, _exchange: string}>result
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTokenIdFromOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_order","type":"tuple"}],"name":"getTokenIdFromOrder","outputs":[{"name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [order], options.sender)
		return <TBigNumber>result[0]
	}

	public setApprovalForAll = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}
	
	public setApprovalForAll_estimateGas = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}

	public setApprovalForAll_ = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"operator","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator, approved], options.sender)
	}

	public creatorHasFundsForTrade_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_order","type":"tuple"},{"name":"_amount","type":"uint256"}],"name":"creatorHasFundsForTrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order, amount], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [id], options.sender)
		return <TBigNumber>result[0]
	}

	public encodeAssetData_ = async (market: string, price: TBigNumber, outcome: TBigNumber, type: TBigNumber, kycToken: string, exchange: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_market","type":"address"},{"name":"_price","type":"uint256"},{"name":"_outcome","type":"uint8"},{"name":"_type","type":"uint8"},{"name":"_kycToken","type":"address"},{"name":"_exchange","type":"address"}],"name":"encodeAssetData","outputs":[{"name":"_assetData","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, price, outcome, type, kycToken, exchange], options.sender)
		return <string>result[0]
	}

	public EIP712_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_DOMAIN_HASH","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public parseOrderData_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string }, options?: { sender?: string }): Promise<{ marketAddress: string, price: TBigNumber, outcome: TBigNumber, orderType: TBigNumber, kycToken: string }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"_order","type":"tuple"}],"name":"parseOrderData","outputs":[{"components":[{"name":"marketAddress","type":"address"},{"name":"price","type":"uint256"},{"name":"outcome","type":"uint8"},{"name":"orderType","type":"uint8"},{"name":"kycToken","type":"address"}],"name":"_data","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order], options.sender)
		return <{ marketAddress: string, price: TBigNumber, outcome: TBigNumber, orderType: TBigNumber, kycToken: string }>result[0]
	}

	public isApprovedForAll_ = async (owner: string, operator: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, operator], options.sender)
		return <boolean>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public safeTransferFrom = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"id","type":"uint256"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}
	
	public safeTransferFrom_estimateGas = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"id","type":"uint256"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}

	public safeTransferFrom_ = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"id","type":"uint256"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, id, value, data], options.sender)
	}
}


export class BuyParticipationTokens<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public buyParticipationTokens = async (universe: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"buyParticipationTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, attotokens], 'buyParticipationTokens', options.sender)
	}
	
	public buyParticipationTokens_estimateGas = async (universe: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"buyParticipationTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, attotokens], 'buyParticipationTokens', options.sender)
	}

	public buyParticipationTokens_ = async (universe: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_universe","type":"address"},{"name":"_attotokens","type":"uint256"}],"name":"buyParticipationTokens","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, attotokens], options.sender)
		return <boolean>result[0]
	}
}


export class Formulas<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public calculateFloatingValue_ = async (totalBad: TBigNumber, total: TBigNumber, targetDivisor: TBigNumber, previousValue: TBigNumber, floor: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_totalBad","type":"uint256"},{"name":"_total","type":"uint256"},{"name":"_targetDivisor","type":"uint256"},{"name":"_previousValue","type":"uint256"},{"name":"_floor","type":"uint256"}],"name":"calculateFloatingValue","outputs":[{"name":"_newValue","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [totalBad, total, targetDivisor, previousValue, floor], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateValidityBond_ = async (previousDisputeWindow: string, previousValidityBondInAttoCash: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_previousDisputeWindow","type":"address"},{"name":"_previousValidityBondInAttoCash","type":"uint256"}],"name":"calculateValidityBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [previousDisputeWindow, previousValidityBondInAttoCash], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateDesignatedReportStake_ = async (previousDisputeWindow: string, previousDesignatedReportStakeInAttoRep: TBigNumber, initialReportMinValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_previousDisputeWindow","type":"address"},{"name":"_previousDesignatedReportStakeInAttoRep","type":"uint256"},{"name":"_initialReportMinValue","type":"uint256"}],"name":"calculateDesignatedReportStake","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [previousDisputeWindow, previousDesignatedReportStakeInAttoRep, initialReportMinValue], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateDesignatedReportNoShowBond_ = async (previousDisputeWindow: string, previousDesignatedReportNoShowBondInAttoRep: TBigNumber, initialReportMinValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"name":"_previousDisputeWindow","type":"address"},{"name":"_previousDesignatedReportNoShowBondInAttoRep","type":"uint256"},{"name":"_initialReportMinValue","type":"uint256"}],"name":"calculateDesignatedReportNoShowBond","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [previousDisputeWindow, previousDesignatedReportNoShowBondInAttoRep, initialReportMinValue], options.sender)
		return <TBigNumber>result[0]
	}
}


export class RedeemStake<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public redeemStake = async (reportingParticipants: Array<string>, disputeWindows: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingParticipants","type":"address[]"},{"name":"_disputeWindows","type":"address[]"}],"name":"redeemStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reportingParticipants, disputeWindows], 'redeemStake', options.sender)
	}
	
	public redeemStake_estimateGas = async (reportingParticipants: Array<string>, disputeWindows: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingParticipants","type":"address[]"},{"name":"_disputeWindows","type":"address[]"}],"name":"redeemStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reportingParticipants, disputeWindows], 'redeemStake', options.sender)
	}

	public redeemStake_ = async (reportingParticipants: Array<string>, disputeWindows: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"name":"_reportingParticipants","type":"address[]"},{"name":"_disputeWindows","type":"address[]"}],"name":"redeemStake","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reportingParticipants, disputeWindows], options.sender)
		return <boolean>result[0]
	}
}

