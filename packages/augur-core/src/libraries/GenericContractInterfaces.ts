// THIS FILE IS AUTOMATICALLY GENERATED BY `generateContractInterfaces.ts`. DO NOT EDIT BY HAND'

export type Primitive = 'uint8' | 'uint32' | 'uint64' | 'uint112' | 'uint224' | 'uint256' | 'bool' | 'string' | 'address' | 'bytes4' | 'bytes20' | 'bytes32' | 'bytes' | 'bytes[]' | 'int256' | 'tuple' | 'address[]' | 'uint8[]' | 'uint256[]' | 'int256[]' | 'bytes32[]' | 'tuple[]' | 'bool[]'

export interface AbiParameter {
	name: string
	type: Primitive
	internalType: any
	components?: Array<AbiParameter>
}

export interface AbiEventParameter extends AbiParameter {
	indexed: boolean
}

export interface AbiFunction {
	name: string
	type: 'function' | 'constructor' | 'fallback'
	stateMutability: 'pure' | 'view' | 'payable' | 'nonpayable'
	constant: boolean
	payable: boolean
	inputs: Array<AbiParameter>
	outputs: Array<AbiParameter>
}

export interface Transaction<TBigNumber> {
	to: string
	from?: string
	data: string
	value?: TBigNumber
}

export interface RawEvent {
	data: string
	topics: Array<string>
}

export interface TransactionReceipt {
	status: number
	logs: Array<RawEvent>
}

export interface Event {
	name: string
	parameters: unknown
}

export interface EventDescription {
	name: string
	signature: string
	signatureHash: string
	parameters: Array<AbiEventParameter>
}

export const eventDescriptions: { [signatureHash: string]: EventDescription } = {
	'0x3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c': {"name":"AuthorizedAddressAdded","signature":"AuthorizedAddressAdded(address,address)","signatureHash":"0x3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c","parameters":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":true,"internalType":"address","name":"caller","type":"address"}]},
	'0x1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b0': {"name":"AuthorizedAddressRemoved","signature":"AuthorizedAddressRemoved(address,address)","signatureHash":"0x1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b0","parameters":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":true,"internalType":"address","name":"caller","type":"address"}]},
	'0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0': {"name":"OwnershipTransferred","signature":"OwnershipTransferred(address,address)","signatureHash":"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","parameters":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}]},
	'0xd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c03194': {"name":"AssetProxyRegistered","signature":"AssetProxyRegistered(bytes4,address)","signatureHash":"0xd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c03194","parameters":[{"indexed":false,"internalType":"bytes4","name":"id","type":"bytes4"},{"indexed":false,"internalType":"address","name":"assetProxy","type":"address"}]},
	'0xd060052768902f3eecb84b8eae9d3a2608a1a9e60811a33968b46b8d552f266e': {"name":"CoordinatorEndpointSet","signature":"CoordinatorEndpointSet(address,string)","signatureHash":"0xd060052768902f3eecb84b8eae9d3a2608a1a9e60811a33968b46b8d552f266e","parameters":[{"indexed":false,"internalType":"address","name":"coordinatorOperator","type":"address"},{"indexed":false,"internalType":"string","name":"coordinatorEndpoint","type":"string"}]},
	'0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925': {"name":"Approval","signature":"Approval(address,address,uint256)","signatureHash":"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","parameters":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}]},
	'0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c': {"name":"Deposit","signature":"Deposit(address,uint256)","signatureHash":"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c","parameters":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}]},
	'0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': {"name":"Transfer","signature":"Transfer(address,address,uint256)","signatureHash":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","parameters":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}]},
	'0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65': {"name":"Withdrawal","signature":"Withdrawal(address,uint256)","signatureHash":"0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65","parameters":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}]},
	'0x02c310a9a43963ff31a754a4099cc435ed498049687539d72d7818d9b093415c': {"name":"Cancel","signature":"Cancel(address,address,bytes,bytes,address,bytes32)","signatureHash":"0x02c310a9a43963ff31a754a4099cc435ed498049687539d72d7818d9b093415c","parameters":[{"indexed":true,"internalType":"address","name":"makerAddress","type":"address"},{"indexed":true,"internalType":"address","name":"feeRecipientAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"indexed":false,"internalType":"address","name":"senderAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},
	'0x82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f0': {"name":"CancelUpTo","signature":"CancelUpTo(address,address,uint256)","signatureHash":"0x82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f0","parameters":[{"indexed":true,"internalType":"address","name":"makerAddress","type":"address"},{"indexed":true,"internalType":"address","name":"orderSenderAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"orderEpoch","type":"uint256"}]},
	'0x6869791f0a34781b29882982cc39e882768cf2c96995c2a110c577c53bc932d5': {"name":"Fill","signature":"Fill(address,address,bytes,bytes,bytes,bytes,bytes32,address,address,uint256,uint256,uint256,uint256,uint256)","signatureHash":"0x6869791f0a34781b29882982cc39e882768cf2c96995c2a110c577c53bc932d5","parameters":[{"indexed":true,"internalType":"address","name":"makerAddress","type":"address"},{"indexed":true,"internalType":"address","name":"feeRecipientAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"},{"indexed":true,"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"indexed":false,"internalType":"address","name":"takerAddress","type":"address"},{"indexed":false,"internalType":"address","name":"senderAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}]},
	'0xe1a5430ebec577336427f40f15822f1f36c5e3509ff209d6db9e6c9e6941cb0b': {"name":"ProtocolFeeCollectorAddress","signature":"ProtocolFeeCollectorAddress(address,address)","signatureHash":"0xe1a5430ebec577336427f40f15822f1f36c5e3509ff209d6db9e6c9e6941cb0b","parameters":[{"indexed":false,"internalType":"address","name":"oldProtocolFeeCollector","type":"address"},{"indexed":false,"internalType":"address","name":"updatedProtocolFeeCollector","type":"address"}]},
	'0x3a3e76d7a75e198aef1f53137e4f2a8a2ec74e2e9526db8404d08ccc9f1e621d': {"name":"ProtocolFeeMultiplier","signature":"ProtocolFeeMultiplier(uint256,uint256)","signatureHash":"0x3a3e76d7a75e198aef1f53137e4f2a8a2ec74e2e9526db8404d08ccc9f1e621d","parameters":[{"indexed":false,"internalType":"uint256","name":"oldProtocolFeeMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedProtocolFeeMultiplier","type":"uint256"}]},
	'0xa8656e308026eeabce8f0bc18048433252318ab80ac79da0b3d3d8697dfba891': {"name":"SignatureValidatorApproval","signature":"SignatureValidatorApproval(address,address,bool)","signatureHash":"0xa8656e308026eeabce8f0bc18048433252318ab80ac79da0b3d3d8697dfba891","parameters":[{"indexed":true,"internalType":"address","name":"signerAddress","type":"address"},{"indexed":true,"internalType":"address","name":"validatorAddress","type":"address"},{"indexed":false,"internalType":"bool","name":"isApproved","type":"bool"}]},
	'0xa4a7329f1dd821363067e07d359e347b4af9b1efe4b6cccf13240228af3c800d': {"name":"TransactionExecution","signature":"TransactionExecution(bytes32)","signatureHash":"0xa4a7329f1dd821363067e07d359e347b4af9b1efe4b6cccf13240228af3c800d","parameters":[{"indexed":true,"internalType":"bytes32","name":"transactionHash","type":"bytes32"}]},
	'0xfe06587917de7df83a446bcbb889cee699d7fc35b7b53e263282c2acb5a16499': {"name":"CompleteSetsPurchased","signature":"CompleteSetsPurchased(address,address,address,uint256,uint256)","signatureHash":"0xfe06587917de7df83a446bcbb889cee699d7fc35b7b53e263282c2acb5a16499","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"numCompleteSets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0xdd7dcfa6708112395eb94e9b1889295fb19af21ef290e918256838c979b2dfbd': {"name":"CompleteSetsSold","signature":"CompleteSetsSold(address,address,address,uint256,uint256,uint256)","signatureHash":"0xdd7dcfa6708112395eb94e9b1889295fb19af21ef290e918256838c979b2dfbd","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"numCompleteSets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fees","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0x9c75a088fcb0527d67a80a7d0a5006bbabe02f4b23984234ae68b2b146f001bc': {"name":"DesignatedReportStakeChanged","signature":"DesignatedReportStakeChanged(address,uint256)","signatureHash":"0x9c75a088fcb0527d67a80a7d0a5006bbabe02f4b23984234ae68b2b146f001bc","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"uint256","name":"designatedReportStake","type":"uint256"}]},
	'0x81afc41f9f2f0d22a52a2ddb3a0b6db83baf39c05544fd25f2751b72b1943bb5': {"name":"DisputeCrowdsourcerCompleted","signature":"DisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256,uint256)","signatureHash":"0x81afc41f9f2f0d22a52a2ddb3a0b6db83baf39c05544fd25f2751b72b1943bb5","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"nextWindowStartTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nextWindowEndTime","type":"uint256"},{"indexed":false,"internalType":"bool","name":"pacingOn","type":"bool"},{"indexed":false,"internalType":"uint256","name":"totalRepStakedInPayout","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalRepStakedInMarket","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"disputeRound","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0xe7f47639cdf56ec6c5451df334b73c9ca5cccd20da2c0f4e390e9bb71a6f672a': {"name":"DisputeCrowdsourcerContribution","signature":"DisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256,uint256)","signatureHash":"0xe7f47639cdf56ec6c5451df334b73c9ca5cccd20da2c0f4e390e9bb71a6f672a","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"reporter","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountStaked","type":"uint256"},{"indexed":false,"internalType":"string","name":"description","type":"string"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"currentStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakeRemaining","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"disputeRound","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0xf9a0b30bcf861874bf36630742f0d56b22648898d7cdd0cd785d74acd17e0d44': {"name":"DisputeCrowdsourcerCreated","signature":"DisputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)","signatureHash":"0xf9a0b30bcf861874bf36630742f0d56b22648898d7cdd0cd785d74acd17e0d44","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"size","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"disputeRound","type":"uint256"}]},
	'0x6afb0328cf957750be87a6f34b1cd21457ddf1382af65f9592ff2d333945633f': {"name":"DisputeCrowdsourcerRedeemed","signature":"DisputeCrowdsourcerRedeemed(address,address,address,address,uint256,uint256,uint256[],uint256)","signatureHash":"0x6afb0328cf957750be87a6f34b1cd21457ddf1382af65f9592ff2d333945633f","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"reporter","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"disputeCrowdsourcer","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountRedeemed","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"repReceived","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0x97f8b399e255f30d56b759b645c86652624ee258937579ff4a747abaeae857c4': {"name":"DisputeWindowCreated","signature":"DisputeWindowCreated(address,address,uint256,uint256,uint256,bool)","signatureHash":"0x97f8b399e255f30d56b759b645c86652624ee258937579ff4a747abaeae857c4","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"address","name":"disputeWindow","type":"address"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"bool","name":"initial","type":"bool"}]},
	'0xf06c142f93fdd00fbcd1e8f3d82e6f22667d52df764b39570061a7dbeea09be0': {"name":"FinishDeployment","signature":"FinishDeployment()","signatureHash":"0xf06c142f93fdd00fbcd1e8f3d82e6f22667d52df764b39570061a7dbeea09be0","parameters":[]},
	'0xc3ebb227c22e7644e9bef8822009f746a72c86f239760124d67fdc2c302b3115': {"name":"InitialReportSubmitted","signature":"InitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256,uint256)","signatureHash":"0xc3ebb227c22e7644e9bef8822009f746a72c86f239760124d67fdc2c302b3115","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"reporter","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"initialReporter","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountStaked","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isDesignatedReporter","type":"bool"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"string","name":"description","type":"string"},{"indexed":false,"internalType":"uint256","name":"nextWindowStartTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nextWindowEndTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0x3ffffb51f92f91faf4ba8c906f5a0180d1033be93b1e227cd92c872dc234fdf0': {"name":"InitialReporterRedeemed","signature":"InitialReporterRedeemed(address,address,address,address,uint256,uint256,uint256[],uint256)","signatureHash":"0x3ffffb51f92f91faf4ba8c906f5a0180d1033be93b1e227cd92c872dc234fdf0","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"reporter","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"initialReporter","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountRedeemed","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"repReceived","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0xee62c58e2603b92f96a002e012f4f3bd5748102cfa3b711f6d778c6237fcaa96': {"name":"InitialReporterTransferred","signature":"InitialReporterTransferred(address,address,address,address)","signatureHash":"0xee62c58e2603b92f96a002e012f4f3bd5748102cfa3b711f6d778c6237fcaa96","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}]},
	'0xea17ae24b0d40ea7962a6d832db46d1f81eaec1562946d0830d1c21d4c000ec1': {"name":"MarketCreated","signature":"MarketCreated(address,uint256,string,address,address,address,uint256,int256[],uint8,uint256,bytes32[],uint256,uint256)","signatureHash":"0xea17ae24b0d40ea7962a6d832db46d1f81eaec1562946d0830d1c21d4c000ec1","parameters":[{"indexed":true,"internalType":"contract IUniverse","name":"universe","type":"address"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"string","name":"extraInfo","type":"string"},{"indexed":false,"internalType":"contract IMarket","name":"market","type":"address"},{"indexed":true,"internalType":"address","name":"marketCreator","type":"address"},{"indexed":false,"internalType":"address","name":"designatedReporter","type":"address"},{"indexed":false,"internalType":"uint256","name":"feePerCashInAttoCash","type":"uint256"},{"indexed":false,"internalType":"int256[]","name":"prices","type":"int256[]"},{"indexed":false,"internalType":"enum IMarket.MarketType","name":"marketType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"numTicks","type":"uint256"},{"indexed":false,"internalType":"bytes32[]","name":"outcomes","type":"bytes32[]"},{"indexed":false,"internalType":"uint256","name":"noShowBond","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0x6d39632c2dc10305bf5771cfff4af1851f07c03ea27b821cad382466bdf7a21f': {"name":"MarketFinalized","signature":"MarketFinalized(address,address,uint256,uint256[])","signatureHash":"0x6d39632c2dc10305bf5771cfff4af1851f07c03ea27b821cad382466bdf7a21f","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"winningPayoutNumerators","type":"uint256[]"}]},
	'0xc3cf07f8fa0fafc25a9dd0bad2cd6b961c55dad41b42c8ef8f931bc40e41e08c': {"name":"MarketMigrated","signature":"MarketMigrated(address,address,address)","signatureHash":"0xc3cf07f8fa0fafc25a9dd0bad2cd6b961c55dad41b42c8ef8f931bc40e41e08c","parameters":[{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":true,"internalType":"address","name":"originalUniverse","type":"address"},{"indexed":true,"internalType":"address","name":"newUniverse","type":"address"}]},
	'0x213a05b9ad8567c2f8fa868e7375e5bf30e69add0dbb5913ca8a3e58c815c268': {"name":"MarketOIChanged","signature":"MarketOIChanged(address,address,uint256)","signatureHash":"0x213a05b9ad8567c2f8fa868e7375e5bf30e69add0dbb5913ca8a3e58c815c268","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"marketOI","type":"uint256"}]},
	'0x3b4f3db017516414df2695e5b0052661779d7163a6cd4368fd74313be73fa0b8': {"name":"MarketParticipantsDisavowed","signature":"MarketParticipantsDisavowed(address,address)","signatureHash":"0x3b4f3db017516414df2695e5b0052661779d7163a6cd4368fd74313be73fa0b8","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"}]},
	'0x0519ee50d0e6120223e58d0b52824ca4985c524f045a3d6a529936e511d2ba8d': {"name":"MarketRepBondTransferred","signature":"MarketRepBondTransferred(address,address,address,address)","signatureHash":"0x0519ee50d0e6120223e58d0b52824ca4985c524f045a3d6a529936e511d2ba8d","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}]},
	'0x55f2a7bfa32e835c3f3c3cff653a3d11c077ce1b00c5a41c6aaf09eedc1ac3b2': {"name":"MarketTransferred","signature":"MarketTransferred(address,address,address,address)","signatureHash":"0x55f2a7bfa32e835c3f3c3cff653a3d11c077ce1b00c5a41c6aaf09eedc1ac3b2","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}]},
	'0xd1fc3f2cb1387e602db0e6f8f22649df65df5246eeff281cf6d1ef62feda4ece': {"name":"NoShowBondChanged","signature":"NoShowBondChanged(address,uint256)","signatureHash":"0xd1fc3f2cb1387e602db0e6f8f22649df65df5246eeff281cf6d1ef62feda4ece","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"uint256","name":"noShowBond","type":"uint256"}]},
	'0x18052b5e29020458e154999fa71891a5db3404a5b0b9c5ec60c90adca7d38d63': {"name":"ParticipationTokensRedeemed","signature":"ParticipationTokensRedeemed(address,address,address,uint256,uint256,uint256)","signatureHash":"0x18052b5e29020458e154999fa71891a5db3404a5b0b9c5ec60c90adca7d38d63","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"disputeWindow","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"attoParticipationTokens","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feePayoutShare","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0xa037dd0e01f0488a530cb17065a6d2f284fae016004fc744ee2a41d5cacf85d5': {"name":"RegisterContract","signature":"RegisterContract(address,bytes32)","signatureHash":"0xa037dd0e01f0488a530cb17065a6d2f284fae016004fc744ee2a41d5cacf85d5","parameters":[{"indexed":false,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":false,"internalType":"bytes32","name":"key","type":"bytes32"}]},
	'0xadddfaec4505d90a6a211907536944e6e1af7ff5cf6d1873de43e36020f36009': {"name":"ReportingFeeChanged","signature":"ReportingFeeChanged(address,uint256)","signatureHash":"0xadddfaec4505d90a6a211907536944e6e1af7ff5cf6d1873de43e36020f36009","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"uint256","name":"reportingFee","type":"uint256"}]},
	'0xb20adf682c8f82b94a135452f54ac4483c9ee8c9b2324e946120696ab1d034b4': {"name":"ReportingParticipantDisavowed","signature":"ReportingParticipantDisavowed(address,address,address)","signatureHash":"0xb20adf682c8f82b94a135452f54ac4483c9ee8c9b2324e946120696ab1d034b4","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"address","name":"reportingParticipant","type":"address"}]},
	'0x350ea32dc29530b9557420816d743c436f8397086f98c96292138edd69e01cb3': {"name":"ShareTokenBalanceChanged","signature":"ShareTokenBalanceChanged(address,address,address,uint256,uint256)","signatureHash":"0x350ea32dc29530b9557420816d743c436f8397086f98c96292138edd69e01cb3","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"outcome","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"}]},
	'0x11dda748f0bd3af85a073da0088a0acb827d9584a4fdb825c81f1232a5309538': {"name":"TimestampSet","signature":"TimestampSet(uint256)","signatureHash":"0x11dda748f0bd3af85a073da0088a0acb827d9584a4fdb825c81f1232a5309538","parameters":[{"indexed":false,"internalType":"uint256","name":"newTimestamp","type":"uint256"}]},
	'0x63fd58f559b73fc4da5511c341ec8a7b31c5c48538ef83c6077712b6edf5f7cb': {"name":"TokenBalanceChanged","signature":"TokenBalanceChanged(address,address,address,uint8,address,uint256,uint256)","signatureHash":"0x63fd58f559b73fc4da5511c341ec8a7b31c5c48538ef83c6077712b6edf5f7cb","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"enum Augur.TokenType","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outcome","type":"uint256"}]},
	'0x145a4839b3d82d1e28f6ed93f52622b351892e835530386bb1fe4effba99aeea': {"name":"TokensBurned","signature":"TokensBurned(address,address,address,uint256,uint8,address,uint256)","signatureHash":"0x145a4839b3d82d1e28f6ed93f52622b351892e835530386bb1fe4effba99aeea","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Augur.TokenType","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"}]},
	'0x07f766729171db8cc73d96b25cc56784077e26c7ff48b0187877ace391c181a6': {"name":"TokensMinted","signature":"TokensMinted(address,address,address,uint256,uint8,address,uint256)","signatureHash":"0x07f766729171db8cc73d96b25cc56784077e26c7ff48b0187877ace391c181a6","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Augur.TokenType","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalSupply","type":"uint256"}]},
	'0x3c67396e9c55d2fc8ad68875fc5beca1d96ad2a2f23b210ccc1d986551ab6fdf': {"name":"TokensTransferred","signature":"TokensTransferred(address,address,address,address,uint256,uint8,address)","signatureHash":"0x3c67396e9c55d2fc8ad68875fc5beca1d96ad2a2f23b210ccc1d986551ab6fdf","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"enum Augur.TokenType","name":"tokenType","type":"uint8"},{"indexed":false,"internalType":"address","name":"market","type":"address"}]},
	'0x95366b7f64c6bb45149f9f7c522403fceebe5170ff76b8ffde2b0ab943ac11ce': {"name":"TradingProceedsClaimed","signature":"TradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256,uint256)","signatureHash":"0x95366b7f64c6bb45149f9f7c522403fceebe5170ff76b8ffde2b0ab943ac11ce","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"outcome","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numShares","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"numPayoutTokens","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fees","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0xe36b09d83f9cfa88c37f071fc2cfb5ff30b764cbd98088e70d965573c9ce5bbd': {"name":"UniverseCreated","signature":"UniverseCreated(address,address,uint256[],uint256)","signatureHash":"0xe36b09d83f9cfa88c37f071fc2cfb5ff30b764cbd98088e70d965573c9ce5bbd","parameters":[{"indexed":true,"internalType":"address","name":"parentUniverse","type":"address"},{"indexed":true,"internalType":"address","name":"childUniverse","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"payoutNumerators","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"creationTimestamp","type":"uint256"}]},
	'0xce5b6de2a0053ebc6c04e68bcbb9f0a1f2deeb7049c72881e198f95b5752db82': {"name":"UniverseForked","signature":"UniverseForked(address,address)","signatureHash":"0xce5b6de2a0053ebc6c04e68bcbb9f0a1f2deeb7049c72881e198f95b5752db82","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"contract IMarket","name":"forkingMarket","type":"address"}]},
	'0x69af68e366a0570364e3a086f3b5ac79f08ecc3f93eaccbfcf3864809b12b5d8': {"name":"ValidityBondChanged","signature":"ValidityBondChanged(address,uint256)","signatureHash":"0x69af68e366a0570364e3a086f3b5ac79f08ecc3f93eaccbfcf3864809b12b5d8","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"uint256","name":"validityBond","type":"uint256"}]},
	'0x7589653fe5a2ab3ccc12538316852339868efdd9d3bd0b84d055cf224cf96873': {"name":"WarpSyncDataUpdated","signature":"WarpSyncDataUpdated(address,uint256,uint256)","signatureHash":"0x7589653fe5a2ab3ccc12538316852339868efdd9d3bd0b84d055cf224cf96873","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":false,"internalType":"uint256","name":"warpSyncHash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"marketEndTime","type":"uint256"}]},
	'0xee9c28a7fe7177d351e891cb4ca5b7a4e4aba4974be67fb7665ba1ad0e703439': {"name":"ExecuteTransactionStatus","signature":"ExecuteTransactionStatus(bool,bool)","signatureHash":"0xee9c28a7fe7177d351e891cb4ca5b7a4e4aba4974be67fb7665ba1ad0e703439","parameters":[{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"bool","name":"fundingSuccess","type":"bool"}]},
	'0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8': {"name":"RelayHubChanged","signature":"RelayHubChanged(address,address)","signatureHash":"0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8","parameters":[{"indexed":true,"internalType":"address","name":"oldRelayHub","type":"address"},{"indexed":true,"internalType":"address","name":"newRelayHub","type":"address"}]},
	'0x64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202': {"name":"RequestTypeRegistered","signature":"RequestTypeRegistered(bytes32,string)","signatureHash":"0x64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202","parameters":[{"indexed":true,"internalType":"bytes32","name":"typeHash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"typeStr","type":"string"}]},
	'0xbf88b5a3158512dc8ad44dadf221f46eb1df762a2e7fd1de86aab34b0af455cf': {"name":"FundedAccount","signature":"FundedAccount(address,address,uint256,uint256)","signatureHash":"0xbf88b5a3158512dc8ad44dadf221f46eb1df762a2e7fd1de86aab34b0af455cf","parameters":[{"indexed":true,"internalType":"address","name":"_universe","type":"address"},{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"_repBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_timestamp","type":"uint256"}]},
	'0xafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22': {"name":"CanRelayFailed","signature":"CanRelayFailed(address,address,address,bytes4,uint256)","signatureHash":"0xafb5afd6d1c2e8ffbfb480e674a169f493ece0b22658d4f4484e7334f0241e22","parameters":[{"indexed":true,"internalType":"address","name":"relay","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":false,"internalType":"uint256","name":"reason","type":"uint256"}]},
	'0x8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7': {"name":"Deposited","signature":"Deposited(address,address,uint256)","signatureHash":"0x8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7","parameters":[{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}]},
	'0xb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff8': {"name":"Penalized","signature":"Penalized(address,address,uint256)","signatureHash":"0xb0595266ccec357806b2691f348b128209f1060a0bda4f5c95f7090730351ff8","parameters":[{"indexed":true,"internalType":"address","name":"relayWorker","type":"address"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}]},
	'0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa': {"name":"RelayAdded","signature":"RelayAdded(address,address,uint256,uint256,uint256,string)","signatureHash":"0x85b3ae3aae9d3fcb31142fbd8c3b4722d57825b8edd6e1366e69204afa5a0dfa","parameters":[{"indexed":true,"internalType":"address","name":"relay","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"transactionFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelay","type":"uint256"},{"indexed":false,"internalType":"string","name":"url","type":"string"}]},
	'0x5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11': {"name":"RelayRemoved","signature":"RelayRemoved(address,uint256)","signatureHash":"0x5490afc1d818789c8b3d5d63bce3d2a3327d0bba4efb5a7751f783dc977d7d11","parameters":[{"indexed":true,"internalType":"address","name":"relay","type":"address"},{"indexed":false,"internalType":"uint256","name":"unstakeTime","type":"uint256"}]},
	'0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90': {"name":"Staked","signature":"Staked(address,uint256,uint256)","signatureHash":"0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90","parameters":[{"indexed":true,"internalType":"address","name":"relay","type":"address"},{"indexed":false,"internalType":"uint256","name":"stake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelay","type":"uint256"}]},
	'0xab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22': {"name":"TransactionRelayed","signature":"TransactionRelayed(address,address,address,bytes4,uint8,uint256)","signatureHash":"0xab74390d395916d9e0006298d47938a5def5d367054dcca78fa6ec84381f3f22","parameters":[{"indexed":true,"internalType":"address","name":"relay","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":false,"internalType":"enum IRelayHub.RelayCallStatus","name":"status","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"charge","type":"uint256"}]},
	'0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75': {"name":"Unstaked","signature":"Unstaked(address,uint256)","signatureHash":"0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75","parameters":[{"indexed":true,"internalType":"address","name":"relay","type":"address"},{"indexed":false,"internalType":"uint256","name":"stake","type":"uint256"}]},
	'0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb': {"name":"Withdrawn","signature":"Withdrawn(address,address,uint256)","signatureHash":"0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb","parameters":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"dest","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}]},
	'0x77f2d8afec4b9d82ffa0dea525320620292bd1067f575964994d5c4501479aed': {"name":"RelayServerRegistered","signature":"RelayServerRegistered(address,uint256,uint256,string)","signatureHash":"0x77f2d8afec4b9d82ffa0dea525320620292bd1067f575964994d5c4501479aed","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":false,"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"indexed":false,"internalType":"string","name":"relayUrl","type":"string"}]},
	'0xebf4a9bffb39f7c5dbf3f65540183b9381ae226ac3d0a45b4cad484713bd4a28': {"name":"RelayWorkersAdded","signature":"RelayWorkersAdded(address,address[],uint256)","signatureHash":"0xebf4a9bffb39f7c5dbf3f65540183b9381ae226ac3d0a45b4cad484713bd4a28","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":false,"internalType":"address[]","name":"newRelayWorkers","type":"address[]"},{"indexed":false,"internalType":"uint256","name":"workersCount","type":"uint256"}]},
	'0xe9d1ac88a261e4e2083100c35586e8fd4999357ea18741846147b31defddd9ef': {"name":"TransactionRejectedByPaymaster","signature":"TransactionRejectedByPaymaster(address,address,address,address,address,bytes4,string)","signatureHash":"0xe9d1ac88a261e4e2083100c35586e8fd4999357ea18741846147b31defddd9ef","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"relayWorker","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}]},
	'0xc9aa709786a3d5fe2cc947abc1ba8cbb0f6decb57aa74b84eb7f558125fee454': {"name":"TransactionRelayed","signature":"TransactionRelayed(address,address,address,address,address,bytes4,uint8,uint256)","signatureHash":"0xc9aa709786a3d5fe2cc947abc1ba8cbb0f6decb57aa74b84eb7f558125fee454","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"relayWorker","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"paymaster","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":false,"internalType":"enum IRelayHub.RelayCallStatus","name":"status","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"charge","type":"uint256"}]},
	'0xe292c4f6e9f34c975f4958cd5650a8111352feae914a67b06407957105421021': {"name":"HubAuthorized","signature":"HubAuthorized(address,address)","signatureHash":"0xe292c4f6e9f34c975f4958cd5650a8111352feae914a67b06407957105421021","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"relayHub","type":"address"}]},
	'0x8d941c9b73ba7e59671a59eed85054004624684182b0e4bdb56c35937bac65a6': {"name":"HubUnauthorized","signature":"HubUnauthorized(address,address,uint256)","signatureHash":"0x8d941c9b73ba7e59671a59eed85054004624684182b0e4bdb56c35937bac65a6","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"relayHub","type":"address"},{"indexed":false,"internalType":"uint256","name":"removalBlock","type":"uint256"}]},
	'0xef7c8dfef14cbefdf829b8f066b068b677992411137321d64b3ed4538c2b3637': {"name":"StakeAdded","signature":"StakeAdded(address,address,uint256,uint256)","signatureHash":"0xef7c8dfef14cbefdf829b8f066b068b677992411137321d64b3ed4538c2b3637","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"stake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelay","type":"uint256"}]},
	'0x2f2ba0bf4c9bedc2210a4da5b5811c2a4fd28e62c51bb90c3ea6fdce00808eb0': {"name":"StakePenalized","signature":"StakePenalized(address,address,uint256)","signatureHash":"0x2f2ba0bf4c9bedc2210a4da5b5811c2a4fd28e62c51bb90c3ea6fdce00808eb0","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}]},
	'0x9ffc6168de1eb7f1d16200f614753cd7edce5a2186aab1c612199dd7316cd7c4': {"name":"StakeUnlocked","signature":"StakeUnlocked(address,address,uint256)","signatureHash":"0x9ffc6168de1eb7f1d16200f614753cd7edce5a2186aab1c612199dd7316cd7c4","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawBlock","type":"uint256"}]},
	'0xb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3': {"name":"StakeWithdrawn","signature":"StakeWithdrawn(address,address,uint256)","signatureHash":"0xb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3","parameters":[{"indexed":true,"internalType":"address","name":"relayManager","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}]},
	'0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31': {"name":"ApprovalForAll","signature":"ApprovalForAll(address,address,bool)","signatureHash":"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","parameters":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}]},
	'0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb': {"name":"TransferBatch","signature":"TransferBatch(address,address,address,uint256[],uint256[])","signatureHash":"0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","parameters":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}]},
	'0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62': {"name":"TransferSingle","signature":"TransferSingle(address,address,address,uint256,uint256)","signatureHash":"0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","parameters":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}]},
	'0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b': {"name":"URI","signature":"URI(string,uint256)","signatureHash":"0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","parameters":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}]},
	'0xbe80e5687d7095071b7c4e7a56e0e67bfb9e8a39352f1690fdf74c1ee935c75e': {"name":"CancelZeroXOrder","signature":"CancelZeroXOrder(address,address,address,uint256,uint256,uint256,uint8,bytes32)","signatureHash":"0xbe80e5687d7095071b7c4e7a56e0e67bfb9e8a39352f1690fdf74c1ee935c75e","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"outcome","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint8","name":"orderType","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},
	'0xcc7cd5af4aead9d3a4a968c74d9063653dccf7110c5ced93fa86b8b03ef5ca24': {"name":"MarketVolumeChanged","signature":"MarketVolumeChanged(address,address,uint256,uint256[],uint256,uint256)","signatureHash":"0xcc7cd5af4aead9d3a4a968c74d9063653dccf7110c5ced93fa86b8b03ef5ca24","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"volume","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"outcomeVolumes","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"totalTrades","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0x9bab1368a1ed530afaad9c630ba75e6a5c1efa9f6af0139d6cda2b6af6aa801e': {"name":"OrderEvent","signature":"OrderEvent(address,address,uint8,uint8,bytes32,bytes32,address[],uint256[])","signatureHash":"0x9bab1368a1ed530afaad9c630ba75e6a5c1efa9f6af0139d6cda2b6af6aa801e","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":true,"internalType":"enum AugurTrading.OrderEventType","name":"eventType","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"orderType","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"tradeGroupId","type":"bytes32"},{"indexed":false,"internalType":"address[]","name":"addressData","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"uint256Data","type":"uint256[]"}]},
	'0x59543b7f82735782aa5bdb97dff40ff288d4548a5865da513b40e4088e2ee77e': {"name":"ProfitLossChanged","signature":"ProfitLossChanged(address,address,address,uint256,int256,uint256,int256,int256,int256,uint256)","signatureHash":"0x59543b7f82735782aa5bdb97dff40ff288d4548a5865da513b40e4088e2ee77e","parameters":[{"indexed":true,"internalType":"address","name":"universe","type":"address"},{"indexed":true,"internalType":"address","name":"market","type":"address"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"outcome","type":"uint256"},{"indexed":false,"internalType":"int256","name":"netPosition","type":"int256"},{"indexed":false,"internalType":"uint256","name":"avgPrice","type":"uint256"},{"indexed":false,"internalType":"int256","name":"realizedProfit","type":"int256"},{"indexed":false,"internalType":"int256","name":"frozenFunds","type":"int256"},{"indexed":false,"internalType":"int256","name":"realizedCost","type":"int256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}]},
	'0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9': {"name":"PairCreated","signature":"PairCreated(address,address,address,uint256)","signatureHash":"0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9","parameters":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":false,"internalType":"address","name":"pair","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}]},
	'0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496': {"name":"Burn","signature":"Burn(address,uint256,uint256,address)","signatureHash":"0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496","parameters":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}]},
	'0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f': {"name":"Mint","signature":"Mint(address,uint256,uint256)","signatureHash":"0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f","parameters":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}]},
	'0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822': {"name":"Swap","signature":"Swap(address,uint256,uint256,uint256,uint256,address)","signatureHash":"0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822","parameters":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}]},
	'0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1': {"name":"Sync","signature":"Sync(uint112,uint112)","signatureHash":"0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1","parameters":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}]}
}

class ContractError extends Error {
  abi:string;
  parameters: string;

  constructor(abi:AbiFunction, parameters:Array<any>,  ...args:Array<any>) {
    super(...args);

    this.setAbi(abi);
    this.setParameters(parameters);

    Error.captureStackTrace(this, ContractError);
  }

  setAbi = (abi: AbiFunction) => {
    this.abi = JSON.stringify(abi);
  }

  setParameters = (parameters: Array<any>) => {
    this.parameters = JSON.stringify(parameters);
  }
}

export interface Dependencies<TBigNumber> {
	// TODO: get rid of some of these dependencies in favor of baked in solutions
	keccak256(utf8String: string): string
	encodeParams(abi: AbiFunction, parameters: Array<any>): string
	decodeParams(abi: Array<AbiParameter>, encoded: string): Array<any>
	getDefaultAddress(): Promise<string | undefined>
	call(transaction: Transaction<TBigNumber>): Promise<string>
	estimateGas(transaction: Transaction<TBigNumber>): Promise<TBigNumber>
	submitTransaction(transaction: Transaction<TBigNumber>): Promise<TransactionReceipt>
}


/**
 * By convention, pure/view methods have a `_` suffix on them indicating to the caller that the function will be executed locally and return the function's result.  payable/nonpayable functions have both a local version and a remote version (distinguished by the trailing `_`).  If the remote method is called, you will only get back a transaction hash which can be used to lookup the transaction receipt for success/failure (due to EVM limitations you will not get the function results back).
 */
export class Contract<TBigNumber> {
	protected readonly dependencies: Dependencies<TBigNumber>
	public readonly address: string

	protected constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		this.dependencies = dependencies
		this.address = address
	}

	protected async localCall(abi: AbiFunction, parameters: Array<any>, sender?: string, attachedEth?: TBigNumber): Promise<any> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ to: this.address, data: data }, attachedEth ? { value: attachedEth } : {}, from ? { from: from } : {})
		const result = await this.dependencies.call(transaction)
		if (result === '0x') throw new ContractError(abi, parameters, `Call returned '0x' indicating failure.`)
		return this.dependencies.decodeParams(abi.outputs, result)
	}

	protected async remoteCall(abi: AbiFunction, parameters: Array<any>, txName: string, sender?: string, attachedEth?: TBigNumber): Promise<Array<Event>> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ to: this.address, data: data }, attachedEth ? { value: attachedEth } : {}, from ? { from: from } : {})
		const transactionReceipt = await this.dependencies.submitTransaction(transaction)
		if (transactionReceipt.status != 1) {
			throw new ContractError(abi, parameters, `Tx ${txName} failed: ${transactionReceipt}`)
		}
		return this.decodeEvents(transactionReceipt.logs)
	}

	protected async estimateGas(abi: AbiFunction, parameters: Array<any>, txName: string, sender?: string, attachedEth?: TBigNumber): Promise<TBigNumber> {
		const from = sender || await this.dependencies.getDefaultAddress()
		const data = this.encodeMethod(abi, parameters)
		const transaction = Object.assign({ to: this.address, data: data }, attachedEth ? { value: attachedEth } : {}, from ? { from: from } : {})
	
		return this.dependencies.estimateGas(transaction);	
	}

	private encodeMethod(abi: AbiFunction, parameters: Array<any>): string {
		return `${this.hashSignature(abi)}${this.dependencies.encodeParams(abi, parameters)}`
	}

	private decodeEvents(rawEvents: Array<RawEvent>): Array<Event> {
		const decodedEvents: Array<Event> = []
		rawEvents.forEach(rawEvent => {
			const decodedEvent = this.tryDecodeEvent(rawEvent)
			if (decodedEvent) decodedEvents.push(decodedEvent)
		})
		return decodedEvents
	}

	private tryDecodeEvent(rawEvent: RawEvent): Event | null {
		const signatureHash = rawEvent.topics[0]
		const eventDescription = eventDescriptions[signatureHash]
		if (!eventDescription) return null
		const parameters = this.decodeEventParameters(eventDescription.parameters, rawEvent.topics, rawEvent.data, { eventSignature: eventDescription.signature })
		return { name: eventDescription.name, parameters: parameters }
	}

	private hashSignature(abiFunction: AbiFunction): string {
		const parameters = this.stringifyParams(abiFunction.inputs).join(',')
		const signature = `${abiFunction.name}(${parameters})`
		return this.dependencies.keccak256(signature).substring(0, 10)
	}

	private stringifyParams(params: Array<AbiParameter>): Array<string> {
		return params.map(param => {
			if (param.type === 'tuple') {
				if (!param.components) throw new Error(`Expected components when type is ${param.type}`)
				return `(${this.stringifyParams(param.components).join(',')})`
			} else if (param.type === 'tuple[]') {
				if (!param.components) throw new Error(`Expected components when type is ${param.type}`)
				return `(${this.stringifyParams(param.components).join(',')})[]`
			} else {
				return param.type
			}
		})
	}

	private decodeEventParameters(parameters: Array<AbiEventParameter>, topics: Array<string>, data: string, errorContext: { eventSignature: string }): any {
		const indexedTypesForDecoding = parameters.filter(parameter => parameter.indexed).map(this.getTypeForEventDecoding)
		const nonIndexedTypesForDecoding = parameters.filter(parameter => !parameter.indexed)
		const indexedData = `0x${topics.slice(1).map(topic => topic.substring(2)).join('')}`
		const nonIndexedData = data
		// TODO: roll own parameter decoder instead of using dependency
		const decodedIndexedParameters = this.dependencies.decodeParams(indexedTypesForDecoding, indexedData)
		if (!decodedIndexedParameters) throw new Error(`Failed to decode topics for event ${errorContext.eventSignature}.\n${indexedData}`)
		const decodedNonIndexedParameters = this.dependencies.decodeParams(nonIndexedTypesForDecoding, nonIndexedData)
		if (!decodedNonIndexedParameters) throw new Error(`Failed to decode data for event ${errorContext.eventSignature}.\n${nonIndexedData}`)
		const result: { [name: string]: any } = {}
		indexedTypesForDecoding.forEach((parameter, i) => result[parameter.name] = decodedIndexedParameters[i])
		nonIndexedTypesForDecoding.forEach((parameter, i) => result[parameter.name] = decodedNonIndexedParameters[i])
		return result
	}

	private getTypeForEventDecoding(parameter: AbiEventParameter): AbiEventParameter {
		if (!parameter.indexed) return parameter
		if (parameter.type !== 'string'
			&& parameter.type !== 'bytes'
			&& !parameter.type.startsWith('tuple')
			&& !parameter.type.endsWith('[]'))
			return parameter
		return Object.assign({}, parameter, { type: 'bytes32' })
	}
}


export class ERC1155Proxy<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public addAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'addAuthorizedAddress', options.sender)
	}
	
	public addAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'addAuthorizedAddress', options.sender)
	}

	public addAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public authorities_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"authorities","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public authorized_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public getAuthorizedAddresses_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAuthorizedAddresses","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public getProxyId_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getProxyId","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public owner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public removeAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'removeAuthorizedAddress', options.sender)
	}
	
	public removeAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'removeAuthorizedAddress', options.sender)
	}

	public removeAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public removeAuthorizedAddressAtIndex = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}
	
	public removeAuthorizedAddressAtIndex_estimateGas = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}

	public removeAuthorizedAddressAtIndex_ = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target, index], options.sender)
	}

	public transferFrom = async (assetData: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [assetData, from, to, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (assetData: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [assetData, from, to, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (assetData: string, from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [assetData, from, to, amount], options.sender)
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class ERC20Proxy<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public addAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'addAuthorizedAddress', options.sender)
	}
	
	public addAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'addAuthorizedAddress', options.sender)
	}

	public addAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public authorities_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"authorities","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public authorized_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public getAuthorizedAddresses_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAuthorizedAddresses","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public getProxyId_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getProxyId","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public owner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public removeAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'removeAuthorizedAddress', options.sender)
	}
	
	public removeAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'removeAuthorizedAddress', options.sender)
	}

	public removeAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public removeAuthorizedAddressAtIndex = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}
	
	public removeAuthorizedAddressAtIndex_estimateGas = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}

	public removeAuthorizedAddressAtIndex_ = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target, index], options.sender)
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class ERC721Proxy<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public addAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'addAuthorizedAddress', options.sender)
	}
	
	public addAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'addAuthorizedAddress', options.sender)
	}

	public addAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public authorities_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"authorities","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public authorized_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public getAuthorizedAddresses_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAuthorizedAddresses","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public getProxyId_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getProxyId","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public owner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public removeAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'removeAuthorizedAddress', options.sender)
	}
	
	public removeAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'removeAuthorizedAddress', options.sender)
	}

	public removeAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public removeAuthorizedAddressAtIndex = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}
	
	public removeAuthorizedAddressAtIndex_estimateGas = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}

	public removeAuthorizedAddressAtIndex_ = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target, index], options.sender)
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class MultiAssetProxy<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public addAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'addAuthorizedAddress', options.sender)
	}
	
	public addAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'addAuthorizedAddress', options.sender)
	}

	public addAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"addAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public assetProxies_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"name":"assetProxies","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public authorities_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"authorities","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public authorized_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public getAssetProxy_ = async (assetProxyId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"}],"name":"getAssetProxy","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [assetProxyId], options.sender)
		return <string>result[0]
	}

	public getAuthorizedAddresses_ = async (options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getAuthorizedAddresses","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<string>>result[0]
	}

	public getProxyId_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getProxyId","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public owner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public registerAssetProxy = async (assetProxy: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [assetProxy], 'registerAssetProxy', options.sender)
	}
	
	public registerAssetProxy_estimateGas = async (assetProxy: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [assetProxy], 'registerAssetProxy', options.sender)
	}

	public registerAssetProxy_ = async (assetProxy: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [assetProxy], options.sender)
	}

	public removeAuthorizedAddress = async (target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target], 'removeAuthorizedAddress', options.sender)
	}
	
	public removeAuthorizedAddress_estimateGas = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target], 'removeAuthorizedAddress', options.sender)
	}

	public removeAuthorizedAddress_ = async (target: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"removeAuthorizedAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target], options.sender)
	}

	public removeAuthorizedAddressAtIndex = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}
	
	public removeAuthorizedAddressAtIndex_estimateGas = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [target, index], 'removeAuthorizedAddressAtIndex', options.sender)
	}

	public removeAuthorizedAddressAtIndex_ = async (target: string, index: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeAuthorizedAddressAtIndex","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [target, index], options.sender)
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class ChaiBridge<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public bridgeTransferFrom = async (arg0: string, from: string, to: string, amount: TBigNumber, arg4: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"bridgeTransferFrom","outputs":[{"internalType":"bytes4","name":"success","type":"bytes4"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [arg0, from, to, amount, arg4], 'bridgeTransferFrom', options.sender)
	}
	
	public bridgeTransferFrom_estimateGas = async (arg0: string, from: string, to: string, amount: TBigNumber, arg4: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"bridgeTransferFrom","outputs":[{"internalType":"bytes4","name":"success","type":"bytes4"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [arg0, from, to, amount, arg4], 'bridgeTransferFrom', options.sender)
	}

	public bridgeTransferFrom_ = async (arg0: string, from: string, to: string, amount: TBigNumber, arg4: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"bridgeTransferFrom","outputs":[{"internalType":"bytes4","name":"success","type":"bytes4"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [arg0, from, to, amount, arg4], options.sender)
		return <string>result[0]
	}
}


export class Coordinator<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public EIP712_COORDINATOR_APPROVAL_SCHEMA_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_COORDINATOR_APPROVAL_SCHEMA_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public EIP712_COORDINATOR_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_COORDINATOR_DOMAIN_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public EIP712_COORDINATOR_DOMAIN_NAME_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_COORDINATOR_DOMAIN_NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public EIP712_COORDINATOR_DOMAIN_VERSION_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_COORDINATOR_DOMAIN_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public EIP712_EXCHANGE_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_EXCHANGE_DOMAIN_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public assertValidCoordinatorApprovals_ = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, txOrigin: string, transactionSignature: string, approvalSignatures: Array<string>, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"address","name":"txOrigin","type":"address"},{"internalType":"bytes","name":"transactionSignature","type":"bytes"},{"internalType":"bytes[]","name":"approvalSignatures","type":"bytes[]"}],"name":"assertValidCoordinatorApprovals","outputs":[],"payable":false,"stateMutability":"view","type":"function"}
		await this.localCall(abi, [transaction, txOrigin, transactionSignature, approvalSignatures], options.sender)
	}

	public decodeOrdersFromFillData_ = async (data: string, options?: { sender?: string }): Promise<Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeOrdersFromFillData","outputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [data], options.sender)
		return <Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>>result[0]
	}

	public executeTransaction = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, txOrigin: string, transactionSignature: string, approvalSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"address","name":"txOrigin","type":"address"},{"internalType":"bytes","name":"transactionSignature","type":"bytes"},{"internalType":"bytes[]","name":"approvalSignatures","type":"bytes[]"}],"name":"executeTransaction","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [transaction, txOrigin, transactionSignature, approvalSignatures], 'executeTransaction', options.sender, options.attachedEth)
	}
	
	public executeTransaction_estimateGas = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, txOrigin: string, transactionSignature: string, approvalSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"address","name":"txOrigin","type":"address"},{"internalType":"bytes","name":"transactionSignature","type":"bytes"},{"internalType":"bytes[]","name":"approvalSignatures","type":"bytes[]"}],"name":"executeTransaction","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [transaction, txOrigin, transactionSignature, approvalSignatures], 'executeTransaction', options.sender, options.attachedEth)
	}

	public executeTransaction_ = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, txOrigin: string, transactionSignature: string, approvalSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"address","name":"txOrigin","type":"address"},{"internalType":"bytes","name":"transactionSignature","type":"bytes"},{"internalType":"bytes[]","name":"approvalSignatures","type":"bytes[]"}],"name":"executeTransaction","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [transaction, txOrigin, transactionSignature, approvalSignatures], options.sender, options.attachedEth)
	}

	public getCoordinatorApprovalHash_ = async (approval: { txOrigin: string, transactionHash: string, transactionSignature: string }, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"txOrigin","type":"address"},{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"bytes","name":"transactionSignature","type":"bytes"}],"internalType":"struct LibCoordinatorApproval.CoordinatorApproval","name":"approval","type":"tuple"}],"name":"getCoordinatorApprovalHash","outputs":[{"internalType":"bytes32","name":"approvalHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [approval], options.sender)
		return <string>result[0]
	}

	public getSignerAddress_ = async (hash: string, signature: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"getSignerAddress","outputs":[{"internalType":"address","name":"signerAddress","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [hash, signature], options.sender)
		return <string>result[0]
	}
}


export class CoordinatorRegistry<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getCoordinatorEndpoint_ = async (coordinatorOperator: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"coordinatorOperator","type":"address"}],"name":"getCoordinatorEndpoint","outputs":[{"internalType":"string","name":"coordinatorEndpoint","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [coordinatorOperator], options.sender)
		return <string>result[0]
	}

	public setCoordinatorEndpoint = async (coordinatorEndpoint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"string","name":"coordinatorEndpoint","type":"string"}],"name":"setCoordinatorEndpoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [coordinatorEndpoint], 'setCoordinatorEndpoint', options.sender)
	}
	
	public setCoordinatorEndpoint_estimateGas = async (coordinatorEndpoint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"string","name":"coordinatorEndpoint","type":"string"}],"name":"setCoordinatorEndpoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [coordinatorEndpoint], 'setCoordinatorEndpoint', options.sender)
	}

	public setCoordinatorEndpoint_ = async (coordinatorEndpoint: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"string","name":"coordinatorEndpoint","type":"string"}],"name":"setCoordinatorEndpoint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [coordinatorEndpoint], options.sender)
	}
}


export class DevUtils<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public EIP712_EXCHANGE_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_EXCHANGE_DOMAIN_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public decodeAssetProxyDispatchError_ = async (encoded: string, options?: { sender?: string }): Promise<{errorCode: TBigNumber, orderHash: string, assetData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeAssetProxyDispatchError","outputs":[{"internalType":"enum LibExchangeRichErrors.AssetProxyDispatchErrorCodes","name":"errorCode","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{errorCode: TBigNumber, orderHash: string, assetData: string}>result
	}

	public decodeAssetProxyExistsError_ = async (encoded: string, options?: { sender?: string }): Promise<{assetProxyId: string, assetProxyAddress: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeAssetProxyExistsError","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"address","name":"assetProxyAddress","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{assetProxyId: string, assetProxyAddress: string}>result
	}

	public decodeAssetProxyId_ = async (assetData: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeAssetProxyId","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <string>result[0]
	}

	public decodeAssetProxyTransferError_ = async (encoded: string, options?: { sender?: string }): Promise<{orderHash: string, assetData: string, errorData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeAssetProxyTransferError","outputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"bytes","name":"assetData","type":"bytes"},{"internalType":"bytes","name":"errorData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{orderHash: string, assetData: string, errorData: string}>result
	}

	public decodeEIP1271SignatureError_ = async (encoded: string, options?: { sender?: string }): Promise<{verifyingContractAddress: string, data: string, signature: string, errorData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeEIP1271SignatureError","outputs":[{"internalType":"address","name":"verifyingContractAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"errorData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{verifyingContractAddress: string, data: string, signature: string, errorData: string}>result
	}

	public decodeERC1155AssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, tokenAddress: string, tokenIds: Array<TBigNumber>, tokenValues: Array<TBigNumber>, callbackData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeERC1155AssetData","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenValues","type":"uint256[]"},{"internalType":"bytes","name":"callbackData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, tokenAddress: string, tokenIds: Array<TBigNumber>, tokenValues: Array<TBigNumber>, callbackData: string}>result
	}

	public decodeERC20AssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, tokenAddress: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeERC20AssetData","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"address","name":"tokenAddress","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, tokenAddress: string}>result
	}

	public decodeERC20BridgeAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, tokenAddress: string, bridgeAddress: string, bridgeData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeERC20BridgeAssetData","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address","name":"bridgeAddress","type":"address"},{"internalType":"bytes","name":"bridgeData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, tokenAddress: string, bridgeAddress: string, bridgeData: string}>result
	}

	public decodeERC721AssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, tokenAddress: string, tokenId: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeERC721AssetData","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, tokenAddress: string, tokenId: TBigNumber}>result
	}

	public decodeExchangeInvalidContextError_ = async (encoded: string, options?: { sender?: string }): Promise<{errorCode: TBigNumber, orderHash: string, contextAddress: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeExchangeInvalidContextError","outputs":[{"internalType":"enum LibExchangeRichErrors.ExchangeContextErrorCodes","name":"errorCode","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"address","name":"contextAddress","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{errorCode: TBigNumber, orderHash: string, contextAddress: string}>result
	}

	public decodeFillError_ = async (encoded: string, options?: { sender?: string }): Promise<{errorCode: TBigNumber, orderHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeFillError","outputs":[{"internalType":"enum LibExchangeRichErrors.FillErrorCodes","name":"errorCode","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{errorCode: TBigNumber, orderHash: string}>result
	}

	public decodeIncompleteFillError_ = async (encoded: string, options?: { sender?: string }): Promise<{errorCode: TBigNumber, expectedAssetFillAmount: TBigNumber, actualAssetFillAmount: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeIncompleteFillError","outputs":[{"internalType":"enum LibExchangeRichErrors.IncompleteFillErrorCode","name":"errorCode","type":"uint8"},{"internalType":"uint256","name":"expectedAssetFillAmount","type":"uint256"},{"internalType":"uint256","name":"actualAssetFillAmount","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{errorCode: TBigNumber, expectedAssetFillAmount: TBigNumber, actualAssetFillAmount: TBigNumber}>result
	}

	public decodeMultiAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, amounts: Array<TBigNumber>, nestedAssetData: Array<string>}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeMultiAssetData","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes[]","name":"nestedAssetData","type":"bytes[]"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, amounts: Array<TBigNumber>, nestedAssetData: Array<string>}>result
	}

	public decodeNegativeSpreadError_ = async (encoded: string, options?: { sender?: string }): Promise<{leftOrderHash: string, rightOrderHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeNegativeSpreadError","outputs":[{"internalType":"bytes32","name":"leftOrderHash","type":"bytes32"},{"internalType":"bytes32","name":"rightOrderHash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{leftOrderHash: string, rightOrderHash: string}>result
	}

	public decodeOrderEpochError_ = async (encoded: string, options?: { sender?: string }): Promise<{makerAddress: string, orderSenderAddress: string, currentEpoch: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeOrderEpochError","outputs":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"orderSenderAddress","type":"address"},{"internalType":"uint256","name":"currentEpoch","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{makerAddress: string, orderSenderAddress: string, currentEpoch: TBigNumber}>result
	}

	public decodeOrderStatusError_ = async (encoded: string, options?: { sender?: string }): Promise<{orderHash: string, orderStatus: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeOrderStatusError","outputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{orderHash: string, orderStatus: TBigNumber}>result
	}

	public decodeSignatureError_ = async (encoded: string, options?: { sender?: string }): Promise<{errorCode: TBigNumber, hash: string, signerAddress: string, signature: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeSignatureError","outputs":[{"internalType":"enum LibExchangeRichErrors.SignatureErrorCodes","name":"errorCode","type":"uint8"},{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{errorCode: TBigNumber, hash: string, signerAddress: string, signature: string}>result
	}

	public decodeSignatureValidatorNotApprovedError_ = async (encoded: string, options?: { sender?: string }): Promise<{signerAddress: string, validatorAddress: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeSignatureValidatorNotApprovedError","outputs":[{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"address","name":"validatorAddress","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{signerAddress: string, validatorAddress: string}>result
	}

	public decodeSignatureWalletError_ = async (encoded: string, options?: { sender?: string }): Promise<{hash: string, signerAddress: string, signature: string, errorData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeSignatureWalletError","outputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"errorData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{hash: string, signerAddress: string, signature: string, errorData: string}>result
	}

	public decodeStaticCallAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{assetProxyId: string, staticCallTargetAddress: string, staticCallData: string, expectedReturnDataHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"decodeStaticCallAssetData","outputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"},{"internalType":"address","name":"staticCallTargetAddress","type":"address"},{"internalType":"bytes","name":"staticCallData","type":"bytes"},{"internalType":"bytes32","name":"expectedReturnDataHash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{assetProxyId: string, staticCallTargetAddress: string, staticCallData: string, expectedReturnDataHash: string}>result
	}

	public decodeTransactionError_ = async (encoded: string, options?: { sender?: string }): Promise<{errorCode: TBigNumber, transactionHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeTransactionError","outputs":[{"internalType":"enum LibExchangeRichErrors.TransactionErrorCodes","name":"errorCode","type":"uint8"},{"internalType":"bytes32","name":"transactionHash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{errorCode: TBigNumber, transactionHash: string}>result
	}

	public decodeTransactionExecutionError_ = async (encoded: string, options?: { sender?: string }): Promise<{transactionHash: string, errorData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"name":"decodeTransactionExecutionError","outputs":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"bytes","name":"errorData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [encoded], options.sender)
		return <{transactionHash: string, errorData: string}>result
	}

	public encodeERC1155AssetData_ = async (tokenAddress: string, tokenIds: Array<TBigNumber>, tokenValues: Array<TBigNumber>, callbackData: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenValues","type":"uint256[]"},{"internalType":"bytes","name":"callbackData","type":"bytes"}],"name":"encodeERC1155AssetData","outputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenAddress, tokenIds, tokenValues, callbackData], options.sender)
		return <string>result[0]
	}

	public encodeERC20AssetData_ = async (tokenAddress: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"encodeERC20AssetData","outputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenAddress], options.sender)
		return <string>result[0]
	}

	public encodeERC721AssetData_ = async (tokenAddress: string, tokenId: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"encodeERC721AssetData","outputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenAddress, tokenId], options.sender)
		return <string>result[0]
	}

	public encodeMultiAssetData_ = async (amounts: Array<TBigNumber>, nestedAssetData: Array<string>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes[]","name":"nestedAssetData","type":"bytes[]"}],"name":"encodeMultiAssetData","outputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amounts, nestedAssetData], options.sender)
		return <string>result[0]
	}

	public encodeStaticCallAssetData_ = async (staticCallTargetAddress: string, staticCallData: string, expectedReturnDataHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"staticCallTargetAddress","type":"address"},{"internalType":"bytes","name":"staticCallData","type":"bytes"},{"internalType":"bytes32","name":"expectedReturnDataHash","type":"bytes32"}],"name":"encodeStaticCallAssetData","outputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [staticCallTargetAddress, staticCallData, expectedReturnDataHash], options.sender)
		return <string>result[0]
	}

	public getAssetProxyAllowance = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getAssetProxyAllowance","outputs":[{"internalType":"uint256","name":"allowance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getAssetProxyAllowance', options.sender)
	}
	
	public getAssetProxyAllowance_estimateGas = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getAssetProxyAllowance","outputs":[{"internalType":"uint256","name":"allowance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getAssetProxyAllowance', options.sender)
	}

	public getAssetProxyAllowance_ = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getAssetProxyAllowance","outputs":[{"internalType":"uint256","name":"allowance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <TBigNumber>result[0]
	}

	public getBalance = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getBalance', options.sender)
	}
	
	public getBalance_estimateGas = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getBalance', options.sender)
	}

	public getBalance_ = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <TBigNumber>result[0]
	}

	public getBalanceAndAssetProxyAllowance = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getBalanceAndAssetProxyAllowance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"allowance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getBalanceAndAssetProxyAllowance', options.sender)
	}
	
	public getBalanceAndAssetProxyAllowance_estimateGas = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getBalanceAndAssetProxyAllowance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"allowance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getBalanceAndAssetProxyAllowance', options.sender)
	}

	public getBalanceAndAssetProxyAllowance_ = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<{balance: TBigNumber, allowance: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getBalanceAndAssetProxyAllowance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"allowance","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <{balance: TBigNumber, allowance: TBigNumber}>result
	}

	public getBatchAssetProxyAllowances = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchAssetProxyAllowances","outputs":[{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getBatchAssetProxyAllowances', options.sender)
	}
	
	public getBatchAssetProxyAllowances_estimateGas = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchAssetProxyAllowances","outputs":[{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getBatchAssetProxyAllowances', options.sender)
	}

	public getBatchAssetProxyAllowances_ = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchAssetProxyAllowances","outputs":[{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getBatchBalances = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getBatchBalances', options.sender)
	}
	
	public getBatchBalances_estimateGas = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getBatchBalances', options.sender)
	}

	public getBatchBalances_ = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchBalances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getBatchBalancesAndAssetProxyAllowances = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchBalancesAndAssetProxyAllowances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getBatchBalancesAndAssetProxyAllowances', options.sender)
	}
	
	public getBatchBalancesAndAssetProxyAllowances_estimateGas = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchBalancesAndAssetProxyAllowances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getBatchBalancesAndAssetProxyAllowances', options.sender)
	}

	public getBatchBalancesAndAssetProxyAllowances_ = async (ownerAddress: string, assetData: Array<string>, options?: { sender?: string }): Promise<{balances: Array<TBigNumber>, allowances: Array<TBigNumber>}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes[]","name":"assetData","type":"bytes[]"}],"name":"getBatchBalancesAndAssetProxyAllowances","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint256[]","name":"allowances","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <{balances: Array<TBigNumber>, allowances: Array<TBigNumber>}>result
	}

	public getEthBalances_ = async (addresses: Array<string>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address[]","name":"addresses","type":"address[]"}],"name":"getEthBalances","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [addresses], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getOrderHash_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, chainId: TBigNumber, exchange: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"exchange","type":"address"}],"name":"getOrderHash","outputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [order, chainId, exchange], options.sender)
		return <string>result[0]
	}

	public getOrderRelevantState = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, signature: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"getOrderRelevantState","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo","name":"orderInfo","type":"tuple"},{"internalType":"uint256","name":"fillableTakerAssetAmount","type":"uint256"},{"internalType":"bool","name":"isValidSignature","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [order, signature], 'getOrderRelevantState', options.sender)
	}
	
	public getOrderRelevantState_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, signature: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"getOrderRelevantState","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo","name":"orderInfo","type":"tuple"},{"internalType":"uint256","name":"fillableTakerAssetAmount","type":"uint256"},{"internalType":"bool","name":"isValidSignature","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [order, signature], 'getOrderRelevantState', options.sender)
	}

	public getOrderRelevantState_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, signature: string, options?: { sender?: string }): Promise<{orderInfo: { orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }, fillableTakerAssetAmount: TBigNumber, isValidSignature: boolean}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"getOrderRelevantState","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo","name":"orderInfo","type":"tuple"},{"internalType":"uint256","name":"fillableTakerAssetAmount","type":"uint256"},{"internalType":"bool","name":"isValidSignature","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [order, signature], options.sender)
		return <{orderInfo: { orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }, fillableTakerAssetAmount: TBigNumber, isValidSignature: boolean}>result
	}

	public getOrderRelevantStates = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"getOrderRelevantStates","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo[]","name":"ordersInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"fillableTakerAssetAmounts","type":"uint256[]"},{"internalType":"bool[]","name":"isValidSignature","type":"bool[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orders, signatures], 'getOrderRelevantStates', options.sender)
	}
	
	public getOrderRelevantStates_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"getOrderRelevantStates","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo[]","name":"ordersInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"fillableTakerAssetAmounts","type":"uint256[]"},{"internalType":"bool[]","name":"isValidSignature","type":"bool[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orders, signatures], 'getOrderRelevantStates', options.sender)
	}

	public getOrderRelevantStates_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, options?: { sender?: string }): Promise<{ordersInfo: Array<{ orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }>, fillableTakerAssetAmounts: Array<TBigNumber>, isValidSignature: Array<boolean>}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"getOrderRelevantStates","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo[]","name":"ordersInfo","type":"tuple[]"},{"internalType":"uint256[]","name":"fillableTakerAssetAmounts","type":"uint256[]"},{"internalType":"bool[]","name":"isValidSignature","type":"bool[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orders, signatures], options.sender)
		return <{ordersInfo: Array<{ orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }>, fillableTakerAssetAmounts: Array<TBigNumber>, isValidSignature: Array<boolean>}>result
	}

	public getSimulatedOrderMakerTransferResults = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAddress: string, takerAssetFillAmount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"}],"name":"getSimulatedOrderMakerTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults","name":"orderTransferResults","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [order, takerAddress, takerAssetFillAmount], 'getSimulatedOrderMakerTransferResults', options.sender)
	}
	
	public getSimulatedOrderMakerTransferResults_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAddress: string, takerAssetFillAmount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"}],"name":"getSimulatedOrderMakerTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults","name":"orderTransferResults","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [order, takerAddress, takerAssetFillAmount], 'getSimulatedOrderMakerTransferResults', options.sender)
	}

	public getSimulatedOrderMakerTransferResults_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAddress: string, takerAssetFillAmount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"}],"name":"getSimulatedOrderMakerTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults","name":"orderTransferResults","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [order, takerAddress, takerAssetFillAmount], options.sender)
		return <TBigNumber>result[0]
	}

	public getSimulatedOrderTransferResults = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAddress: string, takerAssetFillAmount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"}],"name":"getSimulatedOrderTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults","name":"orderTransferResults","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [order, takerAddress, takerAssetFillAmount], 'getSimulatedOrderTransferResults', options.sender)
	}
	
	public getSimulatedOrderTransferResults_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAddress: string, takerAssetFillAmount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"}],"name":"getSimulatedOrderTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults","name":"orderTransferResults","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [order, takerAddress, takerAssetFillAmount], 'getSimulatedOrderTransferResults', options.sender)
	}

	public getSimulatedOrderTransferResults_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAddress: string, takerAssetFillAmount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"}],"name":"getSimulatedOrderTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults","name":"orderTransferResults","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [order, takerAddress, takerAssetFillAmount], options.sender)
		return <TBigNumber>result[0]
	}

	public getSimulatedOrdersTransferResults = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAddresses: Array<string>, takerAssetFillAmounts: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"address[]","name":"takerAddresses","type":"address[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"}],"name":"getSimulatedOrdersTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults[]","name":"orderTransferResults","type":"uint8[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orders, takerAddresses, takerAssetFillAmounts], 'getSimulatedOrdersTransferResults', options.sender)
	}
	
	public getSimulatedOrdersTransferResults_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAddresses: Array<string>, takerAssetFillAmounts: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"address[]","name":"takerAddresses","type":"address[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"}],"name":"getSimulatedOrdersTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults[]","name":"orderTransferResults","type":"uint8[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orders, takerAddresses, takerAssetFillAmounts], 'getSimulatedOrdersTransferResults', options.sender)
	}

	public getSimulatedOrdersTransferResults_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAddresses: Array<string>, takerAssetFillAmounts: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"address[]","name":"takerAddresses","type":"address[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"}],"name":"getSimulatedOrdersTransferResults","outputs":[{"internalType":"enum OrderTransferSimulationUtils.OrderTransferResults[]","name":"orderTransferResults","type":"uint8[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orders, takerAddresses, takerAssetFillAmounts], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getTransactionHash_ = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, chainId: TBigNumber, exchange: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"exchange","type":"address"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"transactionHash","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [transaction, chainId, exchange], options.sender)
		return <string>result[0]
	}

	public getTransferableAssetAmount = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getTransferableAssetAmount","outputs":[{"internalType":"uint256","name":"transferableAssetAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [ownerAddress, assetData], 'getTransferableAssetAmount', options.sender)
	}
	
	public getTransferableAssetAmount_estimateGas = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getTransferableAssetAmount","outputs":[{"internalType":"uint256","name":"transferableAssetAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [ownerAddress, assetData], 'getTransferableAssetAmount', options.sender)
	}

	public getTransferableAssetAmount_ = async (ownerAddress: string, assetData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"ownerAddress","type":"address"},{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"getTransferableAssetAmount","outputs":[{"internalType":"uint256","name":"transferableAssetAmount","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [ownerAddress, assetData], options.sender)
		return <TBigNumber>result[0]
	}

	public revertIfInvalidAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"assetData","type":"bytes"}],"name":"revertIfInvalidAssetData","outputs":[],"payable":false,"stateMutability":"pure","type":"function"}
		await this.localCall(abi, [assetData], options.sender)
	}
}


export class WETH9<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (guy: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"guy","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [guy, wad], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (guy: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"guy","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [guy, wad], 'approve', options.sender)
	}

	public approve_ = async (guy: string, wad: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"guy","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [guy, wad], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public deposit = async (options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [], 'deposit', options.sender, options.attachedEth)
	}
	
	public deposit_estimateGas = async (options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [], 'deposit', options.sender, options.attachedEth)
	}

	public deposit_ = async (options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [], options.sender, options.attachedEth)
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (dst: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [dst, wad], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (dst: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [dst, wad], 'transfer', options.sender)
	}

	public transfer_ = async (dst: string, wad: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [dst, wad], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (src: string, dst: string, wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [src, dst, wad], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (src: string, dst: string, wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [src, dst, wad], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (src: string, dst: string, wad: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [src, dst, wad], options.sender)
		return <boolean>result[0]
	}

	public withdraw = async (wad: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [wad], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (wad: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [wad], 'withdraw', options.sender)
	}

	public withdraw_ = async (wad: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [wad], options.sender)
	}
}


export class ZRXToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (owner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner], options.sender)
		return <TBigNumber>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value], 'transfer', options.sender)
	}

	public transfer_ = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, value], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}
}


export class Exchange<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public EIP1271_MAGIC_VALUE_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP1271_MAGIC_VALUE","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public EIP712_EXCHANGE_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_EXCHANGE_DOMAIN_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public allowedValidators_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowedValidators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <boolean>result[0]
	}

	public batchCancelOrders = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders], 'batchCancelOrders', options.sender, options.attachedEth)
	}
	
	public batchCancelOrders_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders], 'batchCancelOrders', options.sender, options.attachedEth)
	}

	public batchCancelOrders_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [orders], options.sender, options.attachedEth)
	}

	public batchExecuteTransactions = async (transactions: Array<{ salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction[]","name":"transactions","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchExecuteTransactions","outputs":[{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [transactions, signatures], 'batchExecuteTransactions', options.sender, options.attachedEth)
	}
	
	public batchExecuteTransactions_estimateGas = async (transactions: Array<{ salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction[]","name":"transactions","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchExecuteTransactions","outputs":[{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [transactions, signatures], 'batchExecuteTransactions', options.sender, options.attachedEth)
	}

	public batchExecuteTransactions_ = async (transactions: Array<{ salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction[]","name":"transactions","type":"tuple[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchExecuteTransactions","outputs":[{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [transactions, signatures], options.sender, options.attachedEth)
		return <Array<string>>result[0]
	}

	public batchFillOrKillOrders = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrKillOrders","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, takerAssetFillAmounts, signatures], 'batchFillOrKillOrders', options.sender, options.attachedEth)
	}
	
	public batchFillOrKillOrders_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrKillOrders","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, takerAssetFillAmounts, signatures], 'batchFillOrKillOrders', options.sender, options.attachedEth)
	}

	public batchFillOrKillOrders_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrKillOrders","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, takerAssetFillAmounts, signatures], options.sender, options.attachedEth)
		return <Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>>result[0]
	}

	public batchFillOrders = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrders","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, takerAssetFillAmounts, signatures], 'batchFillOrders', options.sender, options.attachedEth)
	}
	
	public batchFillOrders_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrders","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, takerAssetFillAmounts, signatures], 'batchFillOrders', options.sender, options.attachedEth)
	}

	public batchFillOrders_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrders","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, takerAssetFillAmounts, signatures], options.sender, options.attachedEth)
		return <Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>>result[0]
	}

	public batchFillOrdersNoThrow = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, takerAssetFillAmounts, signatures], 'batchFillOrdersNoThrow', options.sender, options.attachedEth)
	}
	
	public batchFillOrdersNoThrow_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, takerAssetFillAmounts, signatures], 'batchFillOrdersNoThrow', options.sender, options.attachedEth)
	}

	public batchFillOrdersNoThrow_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmounts: Array<TBigNumber>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256[]","name":"takerAssetFillAmounts","type":"uint256[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"batchFillOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"fillResults","type":"tuple[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, takerAssetFillAmounts, signatures], options.sender, options.attachedEth)
		return <Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>>result[0]
	}

	public batchMatchOrders = async (leftOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, rightOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, leftSignatures: Array<string>, rightSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"leftOrders","type":"tuple[]"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"rightOrders","type":"tuple[]"},{"internalType":"bytes[]","name":"leftSignatures","type":"bytes[]"},{"internalType":"bytes[]","name":"rightSignatures","type":"bytes[]"}],"name":"batchMatchOrders","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"left","type":"tuple[]"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"right","type":"tuple[]"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.BatchMatchedFillResults","name":"batchMatchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [leftOrders, rightOrders, leftSignatures, rightSignatures], 'batchMatchOrders', options.sender, options.attachedEth)
	}
	
	public batchMatchOrders_estimateGas = async (leftOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, rightOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, leftSignatures: Array<string>, rightSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"leftOrders","type":"tuple[]"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"rightOrders","type":"tuple[]"},{"internalType":"bytes[]","name":"leftSignatures","type":"bytes[]"},{"internalType":"bytes[]","name":"rightSignatures","type":"bytes[]"}],"name":"batchMatchOrders","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"left","type":"tuple[]"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"right","type":"tuple[]"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.BatchMatchedFillResults","name":"batchMatchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [leftOrders, rightOrders, leftSignatures, rightSignatures], 'batchMatchOrders', options.sender, options.attachedEth)
	}

	public batchMatchOrders_ = async (leftOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, rightOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, leftSignatures: Array<string>, rightSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ left: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, right: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"leftOrders","type":"tuple[]"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"rightOrders","type":"tuple[]"},{"internalType":"bytes[]","name":"leftSignatures","type":"bytes[]"},{"internalType":"bytes[]","name":"rightSignatures","type":"bytes[]"}],"name":"batchMatchOrders","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"left","type":"tuple[]"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"right","type":"tuple[]"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.BatchMatchedFillResults","name":"batchMatchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [leftOrders, rightOrders, leftSignatures, rightSignatures], options.sender, options.attachedEth)
		return <{ left: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, right: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }>result[0]
	}

	public batchMatchOrdersWithMaximalFill = async (leftOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, rightOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, leftSignatures: Array<string>, rightSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"leftOrders","type":"tuple[]"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"rightOrders","type":"tuple[]"},{"internalType":"bytes[]","name":"leftSignatures","type":"bytes[]"},{"internalType":"bytes[]","name":"rightSignatures","type":"bytes[]"}],"name":"batchMatchOrdersWithMaximalFill","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"left","type":"tuple[]"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"right","type":"tuple[]"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.BatchMatchedFillResults","name":"batchMatchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [leftOrders, rightOrders, leftSignatures, rightSignatures], 'batchMatchOrdersWithMaximalFill', options.sender, options.attachedEth)
	}
	
	public batchMatchOrdersWithMaximalFill_estimateGas = async (leftOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, rightOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, leftSignatures: Array<string>, rightSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"leftOrders","type":"tuple[]"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"rightOrders","type":"tuple[]"},{"internalType":"bytes[]","name":"leftSignatures","type":"bytes[]"},{"internalType":"bytes[]","name":"rightSignatures","type":"bytes[]"}],"name":"batchMatchOrdersWithMaximalFill","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"left","type":"tuple[]"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"right","type":"tuple[]"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.BatchMatchedFillResults","name":"batchMatchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [leftOrders, rightOrders, leftSignatures, rightSignatures], 'batchMatchOrdersWithMaximalFill', options.sender, options.attachedEth)
	}

	public batchMatchOrdersWithMaximalFill_ = async (leftOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, rightOrders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, leftSignatures: Array<string>, rightSignatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ left: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, right: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"leftOrders","type":"tuple[]"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"rightOrders","type":"tuple[]"},{"internalType":"bytes[]","name":"leftSignatures","type":"bytes[]"},{"internalType":"bytes[]","name":"rightSignatures","type":"bytes[]"}],"name":"batchMatchOrdersWithMaximalFill","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"left","type":"tuple[]"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults[]","name":"right","type":"tuple[]"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.BatchMatchedFillResults","name":"batchMatchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [leftOrders, rightOrders, leftSignatures, rightSignatures], options.sender, options.attachedEth)
		return <{ left: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, right: Array<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }>result[0]
	}

	public cancelOrder = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [order], 'cancelOrder', options.sender, options.attachedEth)
	}
	
	public cancelOrder_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [order], 'cancelOrder', options.sender, options.attachedEth)
	}

	public cancelOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [order], options.sender, options.attachedEth)
	}

	public cancelOrdersUpTo = async (targetOrderEpoch: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"targetOrderEpoch","type":"uint256"}],"name":"cancelOrdersUpTo","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [targetOrderEpoch], 'cancelOrdersUpTo', options.sender, options.attachedEth)
	}
	
	public cancelOrdersUpTo_estimateGas = async (targetOrderEpoch: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"targetOrderEpoch","type":"uint256"}],"name":"cancelOrdersUpTo","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [targetOrderEpoch], 'cancelOrdersUpTo', options.sender, options.attachedEth)
	}

	public cancelOrdersUpTo_ = async (targetOrderEpoch: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"targetOrderEpoch","type":"uint256"}],"name":"cancelOrdersUpTo","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [targetOrderEpoch], options.sender, options.attachedEth)
	}

	public cancelled_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"cancelled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public currentContextAddress_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"currentContextAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public detachProtocolFeeCollector = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"detachProtocolFeeCollector","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'detachProtocolFeeCollector', options.sender)
	}
	
	public detachProtocolFeeCollector_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"detachProtocolFeeCollector","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'detachProtocolFeeCollector', options.sender)
	}

	public detachProtocolFeeCollector_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"detachProtocolFeeCollector","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public executeTransaction = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [transaction, signature], 'executeTransaction', options.sender, options.attachedEth)
	}
	
	public executeTransaction_estimateGas = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [transaction, signature], 'executeTransaction', options.sender, options.attachedEth)
	}

	public executeTransaction_ = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [transaction, signature], options.sender, options.attachedEth)
		return <string>result[0]
	}

	public fillOrKillOrder = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"fillOrKillOrder","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [order, takerAssetFillAmount, signature], 'fillOrKillOrder', options.sender, options.attachedEth)
	}
	
	public fillOrKillOrder_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"fillOrKillOrder","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [order, takerAssetFillAmount, signature], 'fillOrKillOrder', options.sender, options.attachedEth)
	}

	public fillOrKillOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"fillOrKillOrder","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [order, takerAssetFillAmount, signature], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>result[0]
	}

	public fillOrder = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [order, takerAssetFillAmount, signature], 'fillOrder', options.sender, options.attachedEth)
	}
	
	public fillOrder_estimateGas = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [order, takerAssetFillAmount, signature], 'fillOrder', options.sender, options.attachedEth)
	}

	public fillOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, takerAssetFillAmount: TBigNumber, signature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [order, takerAssetFillAmount, signature], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>result[0]
	}

	public filled_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"filled","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public getAssetProxy_ = async (assetProxyId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes4","name":"assetProxyId","type":"bytes4"}],"name":"getAssetProxy","outputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [assetProxyId], options.sender)
		return <string>result[0]
	}

	public getOrderInfo_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, options?: { sender?: string }): Promise<{ orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"enum LibOrder.OrderStatus","name":"orderStatus","type":"uint8"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"uint256","name":"orderTakerAssetFilledAmount","type":"uint256"}],"internalType":"struct LibOrder.OrderInfo","name":"orderInfo","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order], options.sender)
		return <{ orderStatus: TBigNumber, orderHash: string, orderTakerAssetFilledAmount: TBigNumber }>result[0]
	}

	public isValidHashSignature_ = async (hash: string, signerAddress: string, signature: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidHashSignature","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [hash, signerAddress, signature], options.sender)
		return <boolean>result[0]
	}

	public isValidOrderSignature_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, signature: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidOrderSignature","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order, signature], options.sender)
		return <boolean>result[0]
	}

	public isValidSignature_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, orderHash: string, signature: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"order","type":"tuple"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order, orderHash, signature], options.sender)
		return <boolean>result[0]
	}

	public isValidTransactionSignature_ = async (transaction: { salt: TBigNumber, expirationTimeSeconds: TBigNumber, gasPrice: TBigNumber, signerAddress: string, data: string }, signature: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"signerAddress","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct LibZeroExTransaction.ZeroExTransaction","name":"transaction","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidTransactionSignature","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [transaction, signature], options.sender)
		return <boolean>result[0]
	}

	public marketBuyOrdersFillOrKill = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, makerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"makerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersFillOrKill","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, makerAssetFillAmount, signatures], 'marketBuyOrdersFillOrKill', options.sender, options.attachedEth)
	}
	
	public marketBuyOrdersFillOrKill_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, makerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"makerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersFillOrKill","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, makerAssetFillAmount, signatures], 'marketBuyOrdersFillOrKill', options.sender, options.attachedEth)
	}

	public marketBuyOrdersFillOrKill_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, makerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"makerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersFillOrKill","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, makerAssetFillAmount, signatures], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>result[0]
	}

	public marketBuyOrdersNoThrow = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, makerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"makerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, makerAssetFillAmount, signatures], 'marketBuyOrdersNoThrow', options.sender, options.attachedEth)
	}
	
	public marketBuyOrdersNoThrow_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, makerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"makerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, makerAssetFillAmount, signatures], 'marketBuyOrdersNoThrow', options.sender, options.attachedEth)
	}

	public marketBuyOrdersNoThrow_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, makerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"makerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, makerAssetFillAmount, signatures], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>result[0]
	}

	public marketSellOrdersFillOrKill = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersFillOrKill","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, takerAssetFillAmount, signatures], 'marketSellOrdersFillOrKill', options.sender, options.attachedEth)
	}
	
	public marketSellOrdersFillOrKill_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersFillOrKill","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, takerAssetFillAmount, signatures], 'marketSellOrdersFillOrKill', options.sender, options.attachedEth)
	}

	public marketSellOrdersFillOrKill_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersFillOrKill","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, takerAssetFillAmount, signatures], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>result[0]
	}

	public marketSellOrdersNoThrow = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [orders, takerAssetFillAmount, signatures], 'marketSellOrdersNoThrow', options.sender, options.attachedEth)
	}
	
	public marketSellOrdersNoThrow_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [orders, takerAssetFillAmount, signatures], 'marketSellOrdersNoThrow', options.sender, options.attachedEth)
	}

	public marketSellOrdersNoThrow_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, takerAssetFillAmount: TBigNumber, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order[]","name":"orders","type":"tuple[]"},{"internalType":"uint256","name":"takerAssetFillAmount","type":"uint256"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersNoThrow","outputs":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"fillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [orders, takerAssetFillAmount, signatures], options.sender, options.attachedEth)
		return <{ makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }>result[0]
	}

	public matchOrders = async (leftOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, rightOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, leftSignature: string, rightSignature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"leftOrder","type":"tuple"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"rightOrder","type":"tuple"},{"internalType":"bytes","name":"leftSignature","type":"bytes"},{"internalType":"bytes","name":"rightSignature","type":"bytes"}],"name":"matchOrders","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"left","type":"tuple"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"right","type":"tuple"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.MatchedFillResults","name":"matchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [leftOrder, rightOrder, leftSignature, rightSignature], 'matchOrders', options.sender, options.attachedEth)
	}
	
	public matchOrders_estimateGas = async (leftOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, rightOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, leftSignature: string, rightSignature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"leftOrder","type":"tuple"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"rightOrder","type":"tuple"},{"internalType":"bytes","name":"leftSignature","type":"bytes"},{"internalType":"bytes","name":"rightSignature","type":"bytes"}],"name":"matchOrders","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"left","type":"tuple"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"right","type":"tuple"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.MatchedFillResults","name":"matchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [leftOrder, rightOrder, leftSignature, rightSignature], 'matchOrders', options.sender, options.attachedEth)
	}

	public matchOrders_ = async (leftOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, rightOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, leftSignature: string, rightSignature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ left: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, right: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"leftOrder","type":"tuple"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"rightOrder","type":"tuple"},{"internalType":"bytes","name":"leftSignature","type":"bytes"},{"internalType":"bytes","name":"rightSignature","type":"bytes"}],"name":"matchOrders","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"left","type":"tuple"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"right","type":"tuple"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.MatchedFillResults","name":"matchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [leftOrder, rightOrder, leftSignature, rightSignature], options.sender, options.attachedEth)
		return <{ left: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, right: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }>result[0]
	}

	public matchOrdersWithMaximalFill = async (leftOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, rightOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, leftSignature: string, rightSignature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"leftOrder","type":"tuple"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"rightOrder","type":"tuple"},{"internalType":"bytes","name":"leftSignature","type":"bytes"},{"internalType":"bytes","name":"rightSignature","type":"bytes"}],"name":"matchOrdersWithMaximalFill","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"left","type":"tuple"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"right","type":"tuple"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.MatchedFillResults","name":"matchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [leftOrder, rightOrder, leftSignature, rightSignature], 'matchOrdersWithMaximalFill', options.sender, options.attachedEth)
	}
	
	public matchOrdersWithMaximalFill_estimateGas = async (leftOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, rightOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, leftSignature: string, rightSignature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"leftOrder","type":"tuple"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"rightOrder","type":"tuple"},{"internalType":"bytes","name":"leftSignature","type":"bytes"},{"internalType":"bytes","name":"rightSignature","type":"bytes"}],"name":"matchOrdersWithMaximalFill","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"left","type":"tuple"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"right","type":"tuple"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.MatchedFillResults","name":"matchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [leftOrder, rightOrder, leftSignature, rightSignature], 'matchOrdersWithMaximalFill', options.sender, options.attachedEth)
	}

	public matchOrdersWithMaximalFill_ = async (leftOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, rightOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, leftSignature: string, rightSignature: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{ left: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, right: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"leftOrder","type":"tuple"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct LibOrder.Order","name":"rightOrder","type":"tuple"},{"internalType":"bytes","name":"leftSignature","type":"bytes"},{"internalType":"bytes","name":"rightSignature","type":"bytes"}],"name":"matchOrdersWithMaximalFill","outputs":[{"components":[{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"left","type":"tuple"},{"components":[{"internalType":"uint256","name":"makerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetFilledAmount","type":"uint256"},{"internalType":"uint256","name":"makerFeePaid","type":"uint256"},{"internalType":"uint256","name":"takerFeePaid","type":"uint256"},{"internalType":"uint256","name":"protocolFeePaid","type":"uint256"}],"internalType":"struct LibFillResults.FillResults","name":"right","type":"tuple"},{"internalType":"uint256","name":"profitInLeftMakerAsset","type":"uint256"},{"internalType":"uint256","name":"profitInRightMakerAsset","type":"uint256"}],"internalType":"struct LibFillResults.MatchedFillResults","name":"matchedFillResults","type":"tuple"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [leftOrder, rightOrder, leftSignature, rightSignature], options.sender, options.attachedEth)
		return <{ left: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, right: { makerAssetFilledAmount: TBigNumber, takerAssetFilledAmount: TBigNumber, makerFeePaid: TBigNumber, takerFeePaid: TBigNumber, protocolFeePaid: TBigNumber }, profitInLeftMakerAsset: TBigNumber, profitInRightMakerAsset: TBigNumber }>result[0]
	}

	public orderEpoch_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"orderEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public owner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public preSign = async (hash: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"preSign","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [hash], 'preSign', options.sender, options.attachedEth)
	}
	
	public preSign_estimateGas = async (hash: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"preSign","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [hash], 'preSign', options.sender, options.attachedEth)
	}

	public preSign_ = async (hash: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"name":"preSign","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [hash], options.sender, options.attachedEth)
	}

	public preSigned_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"name":"preSigned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <boolean>result[0]
	}

	public protocolFeeCollector_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"protocolFeeCollector","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public protocolFeeMultiplier_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"protocolFeeMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public registerAssetProxy = async (assetProxy: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [assetProxy], 'registerAssetProxy', options.sender)
	}
	
	public registerAssetProxy_estimateGas = async (assetProxy: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [assetProxy], 'registerAssetProxy', options.sender)
	}

	public registerAssetProxy_ = async (assetProxy: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"assetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [assetProxy], options.sender)
	}

	public setProtocolFeeCollectorAddress = async (updatedProtocolFeeCollector: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"updatedProtocolFeeCollector","type":"address"}],"name":"setProtocolFeeCollectorAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [updatedProtocolFeeCollector], 'setProtocolFeeCollectorAddress', options.sender)
	}
	
	public setProtocolFeeCollectorAddress_estimateGas = async (updatedProtocolFeeCollector: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"updatedProtocolFeeCollector","type":"address"}],"name":"setProtocolFeeCollectorAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [updatedProtocolFeeCollector], 'setProtocolFeeCollectorAddress', options.sender)
	}

	public setProtocolFeeCollectorAddress_ = async (updatedProtocolFeeCollector: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"updatedProtocolFeeCollector","type":"address"}],"name":"setProtocolFeeCollectorAddress","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [updatedProtocolFeeCollector], options.sender)
	}

	public setProtocolFeeMultiplier = async (updatedProtocolFeeMultiplier: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"updatedProtocolFeeMultiplier","type":"uint256"}],"name":"setProtocolFeeMultiplier","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [updatedProtocolFeeMultiplier], 'setProtocolFeeMultiplier', options.sender)
	}
	
	public setProtocolFeeMultiplier_estimateGas = async (updatedProtocolFeeMultiplier: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"updatedProtocolFeeMultiplier","type":"uint256"}],"name":"setProtocolFeeMultiplier","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [updatedProtocolFeeMultiplier], 'setProtocolFeeMultiplier', options.sender)
	}

	public setProtocolFeeMultiplier_ = async (updatedProtocolFeeMultiplier: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"updatedProtocolFeeMultiplier","type":"uint256"}],"name":"setProtocolFeeMultiplier","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [updatedProtocolFeeMultiplier], options.sender)
	}

	public setSignatureValidatorApproval = async (validatorAddress: string, approval: boolean, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"validatorAddress","type":"address"},{"internalType":"bool","name":"approval","type":"bool"}],"name":"setSignatureValidatorApproval","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [validatorAddress, approval], 'setSignatureValidatorApproval', options.sender, options.attachedEth)
	}
	
	public setSignatureValidatorApproval_estimateGas = async (validatorAddress: string, approval: boolean, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"validatorAddress","type":"address"},{"internalType":"bool","name":"approval","type":"bool"}],"name":"setSignatureValidatorApproval","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [validatorAddress, approval], 'setSignatureValidatorApproval', options.sender, options.attachedEth)
	}

	public setSignatureValidatorApproval_ = async (validatorAddress: string, approval: boolean, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"validatorAddress","type":"address"},{"internalType":"bool","name":"approval","type":"bool"}],"name":"setSignatureValidatorApproval","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [validatorAddress, approval], options.sender, options.attachedEth)
	}

	public simulateDispatchTransferFromCalls = async (assetData: Array<string>, fromAddresses: Array<string>, toAddresses: Array<string>, amounts: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes[]","name":"assetData","type":"bytes[]"},{"internalType":"address[]","name":"fromAddresses","type":"address[]"},{"internalType":"address[]","name":"toAddresses","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"simulateDispatchTransferFromCalls","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [assetData, fromAddresses, toAddresses, amounts], 'simulateDispatchTransferFromCalls', options.sender)
	}
	
	public simulateDispatchTransferFromCalls_estimateGas = async (assetData: Array<string>, fromAddresses: Array<string>, toAddresses: Array<string>, amounts: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes[]","name":"assetData","type":"bytes[]"},{"internalType":"address[]","name":"fromAddresses","type":"address[]"},{"internalType":"address[]","name":"toAddresses","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"simulateDispatchTransferFromCalls","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [assetData, fromAddresses, toAddresses, amounts], 'simulateDispatchTransferFromCalls', options.sender)
	}

	public simulateDispatchTransferFromCalls_ = async (assetData: Array<string>, fromAddresses: Array<string>, toAddresses: Array<string>, amounts: Array<TBigNumber>, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes[]","name":"assetData","type":"bytes[]"},{"internalType":"address[]","name":"fromAddresses","type":"address[]"},{"internalType":"address[]","name":"toAddresses","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"simulateDispatchTransferFromCalls","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [assetData, fromAddresses, toAddresses, amounts], options.sender)
	}

	public transactionsExecuted_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"transactionsExecuted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newOwner], options.sender)
	}
}


export class Augur<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public DEFAULT_RECOMMENDED_TRADE_INTERVAL_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DEFAULT_RECOMMENDED_TRADE_INTERVAL","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public MIN_TRADE_INTERVAL_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"MIN_TRADE_INTERVAL","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public TRADE_INTERVAL_VALUE_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"TRADE_INTERVAL_VALUE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createChildUniverse = async (parentPayoutDistributionHash: string, parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentPayoutDistributionHash, parentPayoutNumerators], 'createChildUniverse', options.sender)
	}
	
	public createChildUniverse_estimateGas = async (parentPayoutDistributionHash: string, parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentPayoutDistributionHash, parentPayoutNumerators], 'createChildUniverse', options.sender)
	}

	public createChildUniverse_ = async (parentPayoutDistributionHash: string, parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentPayoutDistributionHash, parentPayoutNumerators], options.sender)
		return <string>result[0]
	}

	public createGenesisUniverse = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createGenesisUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'createGenesisUniverse', options.sender)
	}
	
	public createGenesisUniverse_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createGenesisUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'createGenesisUniverse', options.sender)
	}

	public createGenesisUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createGenesisUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public derivePayoutDistributionHash_ = async (payoutNumerators: Array<TBigNumber>, numTicks: TBigNumber, numOutcomes: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"}],"name":"derivePayoutDistributionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, numTicks, numOutcomes], options.sender)
		return <string>result[0]
	}

	public disputeCrowdsourcerCreated = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, size: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"disputeCrowdsourcerCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, size, disputeRound], 'disputeCrowdsourcerCreated', options.sender)
	}
	
	public disputeCrowdsourcerCreated_estimateGas = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, size: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"disputeCrowdsourcerCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, size, disputeRound], 'disputeCrowdsourcerCreated', options.sender)
	}

	public disputeCrowdsourcerCreated_ = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, size: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"disputeCrowdsourcerCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, size, disputeRound], options.sender)
		return <boolean>result[0]
	}

	public finishDeployment = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'finishDeployment', options.sender)
	}
	
	public finishDeployment_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'finishDeployment', options.sender)
	}

	public finishDeployment_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public forkCounter_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"forkCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public genesisUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"genesisUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getMarketCreationData_ = async (market: string, options?: { sender?: string }): Promise<{ extraInfo: string, marketCreator: string, outcomes: Array<string>, displayPrices: Array<TBigNumber>, marketType: TBigNumber, recommendedTradeInterval: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getMarketCreationData","outputs":[{"components":[{"internalType":"string","name":"extraInfo","type":"string"},{"internalType":"address","name":"marketCreator","type":"address"},{"internalType":"bytes32[]","name":"outcomes","type":"bytes32[]"},{"internalType":"int256[]","name":"displayPrices","type":"int256[]"},{"internalType":"enum IMarket.MarketType","name":"marketType","type":"uint8"},{"internalType":"uint256","name":"recommendedTradeInterval","type":"uint256"}],"internalType":"struct IAugurCreationDataGetter.MarketCreationData","name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <{ extraInfo: string, marketCreator: string, outcomes: Array<string>, displayPrices: Array<TBigNumber>, marketType: TBigNumber, recommendedTradeInterval: TBigNumber }>result[0]
	}

	public getMarketOutcomes_ = async (market: string, options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getMarketOutcomes","outputs":[{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <Array<string>>result[0]
	}

	public getMarketRecommendedTradeInterval_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getMarketRecommendedTradeInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public getMarketType_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getMarketType","outputs":[{"internalType":"enum IMarket.MarketType","name":"_marketType","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public getMaximumMarketEndDate = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getMaximumMarketEndDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getMaximumMarketEndDate', options.sender)
	}
	
	public getMaximumMarketEndDate_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getMaximumMarketEndDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getMaximumMarketEndDate', options.sender)
	}

	public getMaximumMarketEndDate_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getMaximumMarketEndDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTradeInterval_ = async (displayRange: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_displayRange","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"getTradeInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [displayRange, numTicks], options.sender)
		return <TBigNumber>result[0]
	}

	public getUniverseForkIndex_ = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"getUniverseForkIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <TBigNumber>result[0]
	}

	public isKnownCrowdsourcer_ = async (crowdsourcer: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IDisputeCrowdsourcer","name":"_crowdsourcer","type":"address"}],"name":"isKnownCrowdsourcer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [crowdsourcer], options.sender)
		return <boolean>result[0]
	}

	public isKnownFeeSender_ = async (feeSender: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_feeSender","type":"address"}],"name":"isKnownFeeSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [feeSender], options.sender)
		return <boolean>result[0]
	}

	public isKnownMarket_ = async (market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"isKnownMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <boolean>result[0]
	}

	public isKnownUniverse_ = async (universe: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"isKnownUniverse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <boolean>result[0]
	}

	public isTrustedSender = async (address: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isTrustedSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [address], 'isTrustedSender', options.sender)
	}
	
	public isTrustedSender_estimateGas = async (address: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isTrustedSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [address], 'isTrustedSender', options.sender)
	}

	public isTrustedSender_ = async (address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isTrustedSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [address], options.sender)
		return <boolean>result[0]
	}

	public logCompleteSetsPurchased = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, numCompleteSets], 'logCompleteSetsPurchased', options.sender)
	}
	
	public logCompleteSetsPurchased_estimateGas = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, numCompleteSets], 'logCompleteSetsPurchased', options.sender)
	}

	public logCompleteSetsPurchased_ = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"}],"name":"logCompleteSetsPurchased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, account, numCompleteSets], options.sender)
		return <boolean>result[0]
	}

	public logCompleteSetsSold = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, numCompleteSets, fees], 'logCompleteSetsSold', options.sender)
	}
	
	public logCompleteSetsSold_estimateGas = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, numCompleteSets, fees], 'logCompleteSetsSold', options.sender)
	}

	public logCompleteSetsSold_ = async (universe: string, market: string, account: string, numCompleteSets: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_numCompleteSets","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"logCompleteSetsSold","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, account, numCompleteSets, fees], options.sender)
		return <boolean>result[0]
	}

	public logDesignatedReportStakeChanged = async (designatedReportStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_designatedReportStake","type":"uint256"}],"name":"logDesignatedReportStakeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [designatedReportStake], 'logDesignatedReportStakeChanged', options.sender)
	}
	
	public logDesignatedReportStakeChanged_estimateGas = async (designatedReportStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_designatedReportStake","type":"uint256"}],"name":"logDesignatedReportStakeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [designatedReportStake], 'logDesignatedReportStakeChanged', options.sender)
	}

	public logDesignatedReportStakeChanged_ = async (designatedReportStake: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_designatedReportStake","type":"uint256"}],"name":"logDesignatedReportStakeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [designatedReportStake], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerCompleted = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, pacingOn: boolean, totalRepStakedInPayout: TBigNumber, totalRepStakedInMarket: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_nextWindowStartTime","type":"uint256"},{"internalType":"uint256","name":"_nextWindowEndTime","type":"uint256"},{"internalType":"bool","name":"_pacingOn","type":"bool"},{"internalType":"uint256","name":"_totalRepStakedInPayout","type":"uint256"},{"internalType":"uint256","name":"_totalRepStakedInMarket","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerCompleted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, nextWindowStartTime, nextWindowEndTime, pacingOn, totalRepStakedInPayout, totalRepStakedInMarket, disputeRound], 'logDisputeCrowdsourcerCompleted', options.sender)
	}
	
	public logDisputeCrowdsourcerCompleted_estimateGas = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, pacingOn: boolean, totalRepStakedInPayout: TBigNumber, totalRepStakedInMarket: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_nextWindowStartTime","type":"uint256"},{"internalType":"uint256","name":"_nextWindowEndTime","type":"uint256"},{"internalType":"bool","name":"_pacingOn","type":"bool"},{"internalType":"uint256","name":"_totalRepStakedInPayout","type":"uint256"},{"internalType":"uint256","name":"_totalRepStakedInMarket","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerCompleted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, nextWindowStartTime, nextWindowEndTime, pacingOn, totalRepStakedInPayout, totalRepStakedInMarket, disputeRound], 'logDisputeCrowdsourcerCompleted', options.sender)
	}

	public logDisputeCrowdsourcerCompleted_ = async (universe: string, market: string, disputeCrowdsourcer: string, payoutNumerators: Array<TBigNumber>, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, pacingOn: boolean, totalRepStakedInPayout: TBigNumber, totalRepStakedInMarket: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_nextWindowStartTime","type":"uint256"},{"internalType":"uint256","name":"_nextWindowEndTime","type":"uint256"},{"internalType":"bool","name":"_pacingOn","type":"bool"},{"internalType":"uint256","name":"_totalRepStakedInPayout","type":"uint256"},{"internalType":"uint256","name":"_totalRepStakedInMarket","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerCompleted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, disputeCrowdsourcer, payoutNumerators, nextWindowStartTime, nextWindowEndTime, pacingOn, totalRepStakedInPayout, totalRepStakedInMarket, disputeRound], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerContribution = async (universe: string, reporter: string, market: string, disputeCrowdsourcer: string, amountStaked: TBigNumber, description: string, payoutNumerators: Array<TBigNumber>, currentStake: TBigNumber, stakeRemaining: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256","name":"_amountStaked","type":"uint256"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_currentStake","type":"uint256"},{"internalType":"uint256","name":"_stakeRemaining","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerContribution","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, disputeCrowdsourcer, amountStaked, description, payoutNumerators, currentStake, stakeRemaining, disputeRound], 'logDisputeCrowdsourcerContribution', options.sender)
	}
	
	public logDisputeCrowdsourcerContribution_estimateGas = async (universe: string, reporter: string, market: string, disputeCrowdsourcer: string, amountStaked: TBigNumber, description: string, payoutNumerators: Array<TBigNumber>, currentStake: TBigNumber, stakeRemaining: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256","name":"_amountStaked","type":"uint256"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_currentStake","type":"uint256"},{"internalType":"uint256","name":"_stakeRemaining","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerContribution","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, disputeCrowdsourcer, amountStaked, description, payoutNumerators, currentStake, stakeRemaining, disputeRound], 'logDisputeCrowdsourcerContribution', options.sender)
	}

	public logDisputeCrowdsourcerContribution_ = async (universe: string, reporter: string, market: string, disputeCrowdsourcer: string, amountStaked: TBigNumber, description: string, payoutNumerators: Array<TBigNumber>, currentStake: TBigNumber, stakeRemaining: TBigNumber, disputeRound: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_disputeCrowdsourcer","type":"address"},{"internalType":"uint256","name":"_amountStaked","type":"uint256"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_currentStake","type":"uint256"},{"internalType":"uint256","name":"_stakeRemaining","type":"uint256"},{"internalType":"uint256","name":"_disputeRound","type":"uint256"}],"name":"logDisputeCrowdsourcerContribution","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, disputeCrowdsourcer, amountStaked, description, payoutNumerators, currentStake, stakeRemaining, disputeRound], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerRedeemed = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_amountRedeemed","type":"uint256"},{"internalType":"uint256","name":"_repReceived","type":"uint256"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"logDisputeCrowdsourcerRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logDisputeCrowdsourcerRedeemed', options.sender)
	}
	
	public logDisputeCrowdsourcerRedeemed_estimateGas = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_amountRedeemed","type":"uint256"},{"internalType":"uint256","name":"_repReceived","type":"uint256"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"logDisputeCrowdsourcerRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logDisputeCrowdsourcerRedeemed', options.sender)
	}

	public logDisputeCrowdsourcerRedeemed_ = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_amountRedeemed","type":"uint256"},{"internalType":"uint256","name":"_repReceived","type":"uint256"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"logDisputeCrowdsourcerRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerTokensBurned = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensBurned', options.sender)
	}
	
	public logDisputeCrowdsourcerTokensBurned_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensBurned', options.sender)
	}

	public logDisputeCrowdsourcerTokensBurned_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerTokensMinted = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensMinted', options.sender)
	}
	
	public logDisputeCrowdsourcerTokensMinted_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logDisputeCrowdsourcerTokensMinted', options.sender)
	}

	public logDisputeCrowdsourcerTokensMinted_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logDisputeCrowdsourcerTokensTransferred = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to, value, fromBalance, toBalance], 'logDisputeCrowdsourcerTokensTransferred', options.sender)
	}
	
	public logDisputeCrowdsourcerTokensTransferred_estimateGas = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to, value, fromBalance, toBalance], 'logDisputeCrowdsourcerTokensTransferred', options.sender)
	}

	public logDisputeCrowdsourcerTokensTransferred_ = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logDisputeCrowdsourcerTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to, value, fromBalance, toBalance], options.sender)
		return <boolean>result[0]
	}

	public logDisputeWindowCreated = async (disputeWindow: string, id: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IDisputeWindow","name":"_disputeWindow","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"logDisputeWindowCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [disputeWindow, id, initial], 'logDisputeWindowCreated', options.sender)
	}
	
	public logDisputeWindowCreated_estimateGas = async (disputeWindow: string, id: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IDisputeWindow","name":"_disputeWindow","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"logDisputeWindowCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [disputeWindow, id, initial], 'logDisputeWindowCreated', options.sender)
	}

	public logDisputeWindowCreated_ = async (disputeWindow: string, id: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IDisputeWindow","name":"_disputeWindow","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"logDisputeWindowCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [disputeWindow, id, initial], options.sender)
		return <boolean>result[0]
	}

	public logInitialReportSubmitted = async (universe: string, reporter: string, market: string, initialReporter: string, amountStaked: TBigNumber, isDesignatedReporter: boolean, payoutNumerators: Array<TBigNumber>, description: string, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_initialReporter","type":"address"},{"internalType":"uint256","name":"_amountStaked","type":"uint256"},{"internalType":"bool","name":"_isDesignatedReporter","type":"bool"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_nextWindowStartTime","type":"uint256"},{"internalType":"uint256","name":"_nextWindowEndTime","type":"uint256"}],"name":"logInitialReportSubmitted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, initialReporter, amountStaked, isDesignatedReporter, payoutNumerators, description, nextWindowStartTime, nextWindowEndTime], 'logInitialReportSubmitted', options.sender)
	}
	
	public logInitialReportSubmitted_estimateGas = async (universe: string, reporter: string, market: string, initialReporter: string, amountStaked: TBigNumber, isDesignatedReporter: boolean, payoutNumerators: Array<TBigNumber>, description: string, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_initialReporter","type":"address"},{"internalType":"uint256","name":"_amountStaked","type":"uint256"},{"internalType":"bool","name":"_isDesignatedReporter","type":"bool"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_nextWindowStartTime","type":"uint256"},{"internalType":"uint256","name":"_nextWindowEndTime","type":"uint256"}],"name":"logInitialReportSubmitted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, initialReporter, amountStaked, isDesignatedReporter, payoutNumerators, description, nextWindowStartTime, nextWindowEndTime], 'logInitialReportSubmitted', options.sender)
	}

	public logInitialReportSubmitted_ = async (universe: string, reporter: string, market: string, initialReporter: string, amountStaked: TBigNumber, isDesignatedReporter: boolean, payoutNumerators: Array<TBigNumber>, description: string, nextWindowStartTime: TBigNumber, nextWindowEndTime: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_initialReporter","type":"address"},{"internalType":"uint256","name":"_amountStaked","type":"uint256"},{"internalType":"bool","name":"_isDesignatedReporter","type":"bool"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_nextWindowStartTime","type":"uint256"},{"internalType":"uint256","name":"_nextWindowEndTime","type":"uint256"}],"name":"logInitialReportSubmitted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, initialReporter, amountStaked, isDesignatedReporter, payoutNumerators, description, nextWindowStartTime, nextWindowEndTime], options.sender)
		return <boolean>result[0]
	}

	public logInitialReporterRedeemed = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_amountRedeemed","type":"uint256"},{"internalType":"uint256","name":"_repReceived","type":"uint256"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"logInitialReporterRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logInitialReporterRedeemed', options.sender)
	}
	
	public logInitialReporterRedeemed_estimateGas = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_amountRedeemed","type":"uint256"},{"internalType":"uint256","name":"_repReceived","type":"uint256"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"logInitialReporterRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], 'logInitialReporterRedeemed', options.sender)
	}

	public logInitialReporterRedeemed_ = async (universe: string, reporter: string, market: string, amountRedeemed: TBigNumber, repReceived: TBigNumber, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_amountRedeemed","type":"uint256"},{"internalType":"uint256","name":"_repReceived","type":"uint256"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"logInitialReporterRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, reporter, market, amountRedeemed, repReceived, payoutNumerators], options.sender)
		return <boolean>result[0]
	}

	public logInitialReporterTransferred = async (universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logInitialReporterTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, from, to], 'logInitialReporterTransferred', options.sender)
	}
	
	public logInitialReporterTransferred_estimateGas = async (universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logInitialReporterTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, from, to], 'logInitialReporterTransferred', options.sender)
	}

	public logInitialReporterTransferred_ = async (universe: string, market: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logInitialReporterTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, from, to], options.sender)
		return <boolean>result[0]
	}

	public logMarketFinalized = async (universe: string, winningPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256[]","name":"_winningPayoutNumerators","type":"uint256[]"}],"name":"logMarketFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, winningPayoutNumerators], 'logMarketFinalized', options.sender)
	}
	
	public logMarketFinalized_estimateGas = async (universe: string, winningPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256[]","name":"_winningPayoutNumerators","type":"uint256[]"}],"name":"logMarketFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, winningPayoutNumerators], 'logMarketFinalized', options.sender)
	}

	public logMarketFinalized_ = async (universe: string, winningPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256[]","name":"_winningPayoutNumerators","type":"uint256[]"}],"name":"logMarketFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, winningPayoutNumerators], options.sender)
		return <boolean>result[0]
	}

	public logMarketMigrated = async (market: string, originalUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"contract IUniverse","name":"_originalUniverse","type":"address"}],"name":"logMarketMigrated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, originalUniverse], 'logMarketMigrated', options.sender)
	}
	
	public logMarketMigrated_estimateGas = async (market: string, originalUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"contract IUniverse","name":"_originalUniverse","type":"address"}],"name":"logMarketMigrated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, originalUniverse], 'logMarketMigrated', options.sender)
	}

	public logMarketMigrated_ = async (market: string, originalUniverse: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"contract IUniverse","name":"_originalUniverse","type":"address"}],"name":"logMarketMigrated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, originalUniverse], options.sender)
		return <boolean>result[0]
	}

	public logMarketOIChanged = async (universe: string, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"logMarketOIChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market], 'logMarketOIChanged', options.sender)
	}
	
	public logMarketOIChanged_estimateGas = async (universe: string, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"logMarketOIChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market], 'logMarketOIChanged', options.sender)
	}

	public logMarketOIChanged_ = async (universe: string, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"logMarketOIChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market], options.sender)
		return <boolean>result[0]
	}

	public logMarketParticipantsDisavowed = async (universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"logMarketParticipantsDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe], 'logMarketParticipantsDisavowed', options.sender)
	}
	
	public logMarketParticipantsDisavowed_estimateGas = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"logMarketParticipantsDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe], 'logMarketParticipantsDisavowed', options.sender)
	}

	public logMarketParticipantsDisavowed_ = async (universe: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"logMarketParticipantsDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <boolean>result[0]
	}

	public logMarketRepBondTransferred = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketRepBondTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to], 'logMarketRepBondTransferred', options.sender)
	}
	
	public logMarketRepBondTransferred_estimateGas = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketRepBondTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to], 'logMarketRepBondTransferred', options.sender)
	}

	public logMarketRepBondTransferred_ = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketRepBondTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to], options.sender)
		return <boolean>result[0]
	}

	public logMarketTransferred = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to], 'logMarketTransferred', options.sender)
	}
	
	public logMarketTransferred_estimateGas = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to], 'logMarketTransferred', options.sender)
	}

	public logMarketTransferred_ = async (universe: string, from: string, to: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"logMarketTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to], options.sender)
		return <boolean>result[0]
	}

	public logNoShowBondChanged = async (noShowBond: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_noShowBond","type":"uint256"}],"name":"logNoShowBondChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [noShowBond], 'logNoShowBondChanged', options.sender)
	}
	
	public logNoShowBondChanged_estimateGas = async (noShowBond: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_noShowBond","type":"uint256"}],"name":"logNoShowBondChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [noShowBond], 'logNoShowBondChanged', options.sender)
	}

	public logNoShowBondChanged_ = async (noShowBond: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_noShowBond","type":"uint256"}],"name":"logNoShowBondChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [noShowBond], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensBurned = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logParticipationTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensBurned', options.sender)
	}
	
	public logParticipationTokensBurned_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logParticipationTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensBurned', options.sender)
	}

	public logParticipationTokensBurned_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logParticipationTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensMinted = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logParticipationTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensMinted', options.sender)
	}
	
	public logParticipationTokensMinted_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logParticipationTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logParticipationTokensMinted', options.sender)
	}

	public logParticipationTokensMinted_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logParticipationTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensRedeemed = async (universe: string, account: string, attoParticipationTokens: TBigNumber, feePayoutShare: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_attoParticipationTokens","type":"uint256"},{"internalType":"uint256","name":"_feePayoutShare","type":"uint256"}],"name":"logParticipationTokensRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, account, attoParticipationTokens, feePayoutShare], 'logParticipationTokensRedeemed', options.sender)
	}
	
	public logParticipationTokensRedeemed_estimateGas = async (universe: string, account: string, attoParticipationTokens: TBigNumber, feePayoutShare: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_attoParticipationTokens","type":"uint256"},{"internalType":"uint256","name":"_feePayoutShare","type":"uint256"}],"name":"logParticipationTokensRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, account, attoParticipationTokens, feePayoutShare], 'logParticipationTokensRedeemed', options.sender)
	}

	public logParticipationTokensRedeemed_ = async (universe: string, account: string, attoParticipationTokens: TBigNumber, feePayoutShare: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_attoParticipationTokens","type":"uint256"},{"internalType":"uint256","name":"_feePayoutShare","type":"uint256"}],"name":"logParticipationTokensRedeemed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, account, attoParticipationTokens, feePayoutShare], options.sender)
		return <boolean>result[0]
	}

	public logParticipationTokensTransferred = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to, value, fromBalance, toBalance], 'logParticipationTokensTransferred', options.sender)
	}
	
	public logParticipationTokensTransferred_estimateGas = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to, value, fromBalance, toBalance], 'logParticipationTokensTransferred', options.sender)
	}

	public logParticipationTokensTransferred_ = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logParticipationTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to, value, fromBalance, toBalance], options.sender)
		return <boolean>result[0]
	}

	public logReportingFeeChanged = async (reportingFee: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"name":"logReportingFeeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reportingFee], 'logReportingFeeChanged', options.sender)
	}
	
	public logReportingFeeChanged_estimateGas = async (reportingFee: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"name":"logReportingFeeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reportingFee], 'logReportingFeeChanged', options.sender)
	}

	public logReportingFeeChanged_ = async (reportingFee: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"name":"logReportingFeeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reportingFee], options.sender)
		return <boolean>result[0]
	}

	public logReportingParticipantDisavowed = async (universe: string, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"logReportingParticipantDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market], 'logReportingParticipantDisavowed', options.sender)
	}
	
	public logReportingParticipantDisavowed_estimateGas = async (universe: string, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"logReportingParticipantDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market], 'logReportingParticipantDisavowed', options.sender)
	}

	public logReportingParticipantDisavowed_ = async (universe: string, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"logReportingParticipantDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market], options.sender)
		return <boolean>result[0]
	}

	public logReputationTokensBurned = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logReputationTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensBurned', options.sender)
	}
	
	public logReputationTokensBurned_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logReputationTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensBurned', options.sender)
	}

	public logReputationTokensBurned_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logReputationTokensBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logReputationTokensMinted = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logReputationTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensMinted', options.sender)
	}
	
	public logReputationTokensMinted_estimateGas = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logReputationTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, target, amount, totalSupply, balance], 'logReputationTokensMinted', options.sender)
	}

	public logReputationTokensMinted_ = async (universe: string, target: string, amount: TBigNumber, totalSupply: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalSupply","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logReputationTokensMinted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, target, amount, totalSupply, balance], options.sender)
		return <boolean>result[0]
	}

	public logReputationTokensTransferred = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, from, to, value, fromBalance, toBalance], 'logReputationTokensTransferred', options.sender)
	}
	
	public logReputationTokensTransferred_estimateGas = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, from, to, value, fromBalance, toBalance], 'logReputationTokensTransferred', options.sender)
	}

	public logReputationTokensTransferred_ = async (universe: string, from: string, to: string, value: TBigNumber, fromBalance: TBigNumber, toBalance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_fromBalance","type":"uint256"},{"internalType":"uint256","name":"_toBalance","type":"uint256"}],"name":"logReputationTokensTransferred","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, from, to, value, fromBalance, toBalance], options.sender)
		return <boolean>result[0]
	}

	public logShareTokensBalanceChanged = async (account: string, market: string, outcome: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logShareTokensBalanceChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [account, market, outcome, balance], 'logShareTokensBalanceChanged', options.sender)
	}
	
	public logShareTokensBalanceChanged_estimateGas = async (account: string, market: string, outcome: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logShareTokensBalanceChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [account, market, outcome, balance], 'logShareTokensBalanceChanged', options.sender)
	}

	public logShareTokensBalanceChanged_ = async (account: string, market: string, outcome: TBigNumber, balance: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_balance","type":"uint256"}],"name":"logShareTokensBalanceChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [account, market, outcome, balance], options.sender)
		return <boolean>result[0]
	}

	public logTimestampSet = async (newTimestamp: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newTimestamp], 'logTimestampSet', options.sender)
	}
	
	public logTimestampSet_estimateGas = async (newTimestamp: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newTimestamp], 'logTimestampSet', options.sender)
	}

	public logTimestampSet_ = async (newTimestamp: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_newTimestamp","type":"uint256"}],"name":"logTimestampSet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newTimestamp], options.sender)
		return <boolean>result[0]
	}

	public logTradingProceedsClaimed = async (universe: string, sender: string, market: string, outcome: TBigNumber, numShares: TBigNumber, numPayoutTokens: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numShares","type":"uint256"},{"internalType":"uint256","name":"_numPayoutTokens","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, sender, market, outcome, numShares, numPayoutTokens, fees], 'logTradingProceedsClaimed', options.sender)
	}
	
	public logTradingProceedsClaimed_estimateGas = async (universe: string, sender: string, market: string, outcome: TBigNumber, numShares: TBigNumber, numPayoutTokens: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numShares","type":"uint256"},{"internalType":"uint256","name":"_numPayoutTokens","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, sender, market, outcome, numShares, numPayoutTokens, fees], 'logTradingProceedsClaimed', options.sender)
	}

	public logTradingProceedsClaimed_ = async (universe: string, sender: string, market: string, outcome: TBigNumber, numShares: TBigNumber, numPayoutTokens: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numShares","type":"uint256"},{"internalType":"uint256","name":"_numPayoutTokens","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"logTradingProceedsClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, sender, market, outcome, numShares, numPayoutTokens, fees], options.sender)
		return <boolean>result[0]
	}

	public logUniverseForked = async (forkingMarket: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_forkingMarket","type":"address"}],"name":"logUniverseForked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [forkingMarket], 'logUniverseForked', options.sender)
	}
	
	public logUniverseForked_estimateGas = async (forkingMarket: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_forkingMarket","type":"address"}],"name":"logUniverseForked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [forkingMarket], 'logUniverseForked', options.sender)
	}

	public logUniverseForked_ = async (forkingMarket: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_forkingMarket","type":"address"}],"name":"logUniverseForked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [forkingMarket], options.sender)
		return <boolean>result[0]
	}

	public logValidityBondChanged = async (validityBond: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_validityBond","type":"uint256"}],"name":"logValidityBondChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [validityBond], 'logValidityBondChanged', options.sender)
	}
	
	public logValidityBondChanged_estimateGas = async (validityBond: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_validityBond","type":"uint256"}],"name":"logValidityBondChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [validityBond], 'logValidityBondChanged', options.sender)
	}

	public logValidityBondChanged_ = async (validityBond: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_validityBond","type":"uint256"}],"name":"logValidityBondChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [validityBond], options.sender)
		return <boolean>result[0]
	}

	public logWarpSyncDataUpdated = async (universe: string, warpSyncHash: TBigNumber, marketEndTime: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"uint256","name":"_warpSyncHash","type":"uint256"},{"internalType":"uint256","name":"_marketEndTime","type":"uint256"}],"name":"logWarpSyncDataUpdated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, warpSyncHash, marketEndTime], 'logWarpSyncDataUpdated', options.sender)
	}
	
	public logWarpSyncDataUpdated_estimateGas = async (universe: string, warpSyncHash: TBigNumber, marketEndTime: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"uint256","name":"_warpSyncHash","type":"uint256"},{"internalType":"uint256","name":"_marketEndTime","type":"uint256"}],"name":"logWarpSyncDataUpdated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, warpSyncHash, marketEndTime], 'logWarpSyncDataUpdated', options.sender)
	}

	public logWarpSyncDataUpdated_ = async (universe: string, warpSyncHash: TBigNumber, marketEndTime: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"uint256","name":"_warpSyncHash","type":"uint256"},{"internalType":"uint256","name":"_marketEndTime","type":"uint256"}],"name":"logWarpSyncDataUpdated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, warpSyncHash, marketEndTime], options.sender)
		return <boolean>result[0]
	}

	public lookup_ = async (key: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"lookup","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [key], options.sender)
		return <string>result[0]
	}

	public onCategoricalMarketCreated = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, outcomes: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"}],"name":"onCategoricalMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, outcomes], 'onCategoricalMarketCreated', options.sender)
	}
	
	public onCategoricalMarketCreated_estimateGas = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, outcomes: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"}],"name":"onCategoricalMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, outcomes], 'onCategoricalMarketCreated', options.sender)
	}

	public onCategoricalMarketCreated_ = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, outcomes: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"}],"name":"onCategoricalMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, outcomes], options.sender)
		return <boolean>result[0]
	}

	public onScalarMarketCreated = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, prices: Array<TBigNumber>, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"int256[]","name":"_prices","type":"int256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"onScalarMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, prices, numTicks], 'onScalarMarketCreated', options.sender)
	}
	
	public onScalarMarketCreated_estimateGas = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, prices: Array<TBigNumber>, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"int256[]","name":"_prices","type":"int256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"onScalarMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, prices, numTicks], 'onScalarMarketCreated', options.sender)
	}

	public onScalarMarketCreated_ = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, prices: Array<TBigNumber>, numTicks: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"int256[]","name":"_prices","type":"int256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"onScalarMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash, prices, numTicks], options.sender)
		return <boolean>result[0]
	}

	public onYesNoMarketCreated = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"}],"name":"onYesNoMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash], 'onYesNoMarketCreated', options.sender)
	}
	
	public onYesNoMarketCreated_estimateGas = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"}],"name":"onYesNoMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash], 'onYesNoMarketCreated', options.sender)
	}

	public onYesNoMarketCreated_ = async (endTime: TBigNumber, extraInfo: string, market: string, marketCreator: string, designatedReporter: string, feePerCashInAttoCash: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_marketCreator","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"}],"name":"onYesNoMarketCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, extraInfo, market, marketCreator, designatedReporter, feePerCashInAttoCash], options.sender)
		return <boolean>result[0]
	}

	public registerContract = async (key: string, address: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [key, address], 'registerContract', options.sender)
	}
	
	public registerContract_estimateGas = async (key: string, address: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [key, address], 'registerContract', options.sender)
	}

	public registerContract_ = async (key: string, address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [key, address], options.sender)
		return <boolean>result[0]
	}

	public time_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"time","outputs":[{"internalType":"contract ITime","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public trustedCashTransfer = async (from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"trustedCashTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, amount], 'trustedCashTransfer', options.sender)
	}
	
	public trustedCashTransfer_estimateGas = async (from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"trustedCashTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, amount], 'trustedCashTransfer', options.sender)
	}

	public trustedCashTransfer_ = async (from: string, to: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"trustedCashTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, amount], options.sender)
		return <boolean>result[0]
	}

	public upgradeTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"upgradeTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public uploader_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"uploader","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class AugurWallet<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public DOMAIN_SEPARATOR_TYPEHASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DOMAIN_SEPARATOR_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public MSG_TYPEHASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"MSG_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public addAuthorizedProxy = async (authorizedProxy: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_authorizedProxy","type":"address"}],"name":"addAuthorizedProxy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [authorizedProxy], 'addAuthorizedProxy', options.sender)
	}
	
	public addAuthorizedProxy_estimateGas = async (authorizedProxy: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_authorizedProxy","type":"address"}],"name":"addAuthorizedProxy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [authorizedProxy], 'addAuthorizedProxy', options.sender)
	}

	public addAuthorizedProxy_ = async (authorizedProxy: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_authorizedProxy","type":"address"}],"name":"addAuthorizedProxy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [authorizedProxy], options.sender)
		return <boolean>result[0]
	}

	public authorizedProxies_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedProxies","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public domainSeparator_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public executeTransaction = async (to: string, data: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"executeTransaction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, data, value], 'executeTransaction', options.sender)
	}
	
	public executeTransaction_estimateGas = async (to: string, data: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"executeTransaction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, data, value], 'executeTransaction', options.sender)
	}

	public executeTransaction_ = async (to: string, data: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"executeTransaction","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, data, value], options.sender)
		return <boolean>result[0]
	}

	public getAmountOut_ = async (amountIn: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountIn, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMessageHash_ = async (message: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [message], options.sender)
		return <string>result[0]
	}

	public initialize = async (owner: string, referralAddress: string, fingerprint: string, augur: string, registry: string, registryV2: string, cash: string, affiliates: string, shareToken: string, createOrder: string, fillOrder: string, zeroXTrade: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"address","name":"_augur","type":"address"},{"internalType":"address","name":"_registry","type":"address"},{"internalType":"address","name":"_registryV2","type":"address"},{"internalType":"contract IERC20","name":"_cash","type":"address"},{"internalType":"contract IAffiliates","name":"_affiliates","type":"address"},{"internalType":"contract IERC1155","name":"_shareToken","type":"address"},{"internalType":"address","name":"_createOrder","type":"address"},{"internalType":"address","name":"_fillOrder","type":"address"},{"internalType":"address","name":"_zeroXTrade","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owner, referralAddress, fingerprint, augur, registry, registryV2, cash, affiliates, shareToken, createOrder, fillOrder, zeroXTrade], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (owner: string, referralAddress: string, fingerprint: string, augur: string, registry: string, registryV2: string, cash: string, affiliates: string, shareToken: string, createOrder: string, fillOrder: string, zeroXTrade: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"address","name":"_augur","type":"address"},{"internalType":"address","name":"_registry","type":"address"},{"internalType":"address","name":"_registryV2","type":"address"},{"internalType":"contract IERC20","name":"_cash","type":"address"},{"internalType":"contract IAffiliates","name":"_affiliates","type":"address"},{"internalType":"contract IERC1155","name":"_shareToken","type":"address"},{"internalType":"address","name":"_createOrder","type":"address"},{"internalType":"address","name":"_fillOrder","type":"address"},{"internalType":"address","name":"_zeroXTrade","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owner, referralAddress, fingerprint, augur, registry, registryV2, cash, affiliates, shareToken, createOrder, fillOrder, zeroXTrade], 'initialize', options.sender)
	}

	public initialize_ = async (owner: string, referralAddress: string, fingerprint: string, augur: string, registry: string, registryV2: string, cash: string, affiliates: string, shareToken: string, createOrder: string, fillOrder: string, zeroXTrade: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"address","name":"_augur","type":"address"},{"internalType":"address","name":"_registry","type":"address"},{"internalType":"address","name":"_registryV2","type":"address"},{"internalType":"contract IERC20","name":"_cash","type":"address"},{"internalType":"contract IAffiliates","name":"_affiliates","type":"address"},{"internalType":"contract IERC1155","name":"_shareToken","type":"address"},{"internalType":"address","name":"_createOrder","type":"address"},{"internalType":"address","name":"_fillOrder","type":"address"},{"internalType":"address","name":"_zeroXTrade","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [owner, referralAddress, fingerprint, augur, registry, registryV2, cash, affiliates, shareToken, createOrder, fillOrder, zeroXTrade], options.sender)
	}

	public isValidSignature_ = async (data: string, signature: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [data, signature], options.sender)
		return <string>result[0]
	}

	public registry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"registry","outputs":[{"internalType":"contract IAugurWalletRegistry","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public removeAuthorizedProxy = async (authorizedProxy: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_authorizedProxy","type":"address"}],"name":"removeAuthorizedProxy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [authorizedProxy], 'removeAuthorizedProxy', options.sender)
	}
	
	public removeAuthorizedProxy_estimateGas = async (authorizedProxy: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_authorizedProxy","type":"address"}],"name":"removeAuthorizedProxy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [authorizedProxy], 'removeAuthorizedProxy', options.sender)
	}

	public removeAuthorizedProxy_ = async (authorizedProxy: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_authorizedProxy","type":"address"}],"name":"removeAuthorizedProxy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [authorizedProxy], options.sender)
		return <boolean>result[0]
	}

	public transferCash = async (to: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferCash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, amount], 'transferCash', options.sender)
	}
	
	public transferCash_estimateGas = async (to: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferCash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, amount], 'transferCash', options.sender)
	}

	public transferCash_ = async (to: string, amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferCash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [to, amount], options.sender)
	}

	public withdrawAllFundsAsDai = async (destination: string, minExchangeRateInDai: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_minExchangeRateInDai","type":"uint256"}],"name":"withdrawAllFundsAsDai","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [destination, minExchangeRateInDai], 'withdrawAllFundsAsDai', options.sender, options.attachedEth)
	}
	
	public withdrawAllFundsAsDai_estimateGas = async (destination: string, minExchangeRateInDai: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_minExchangeRateInDai","type":"uint256"}],"name":"withdrawAllFundsAsDai","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [destination, minExchangeRateInDai], 'withdrawAllFundsAsDai', options.sender, options.attachedEth)
	}

	public withdrawAllFundsAsDai_ = async (destination: string, minExchangeRateInDai: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_minExchangeRateInDai","type":"uint256"}],"name":"withdrawAllFundsAsDai","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [destination, minExchangeRateInDai], options.sender, options.attachedEth)
		return <boolean>result[0]
	}
}


export class AugurWalletRegistry<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public WETH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"WETH","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public acceptRelayedCall_ = async (arg0: string, from: string, encodedFunction: string, arg3: TBigNumber, arg4: TBigNumber, arg5: TBigNumber, arg6: TBigNumber, arg7: string, maxPossibleCharge: TBigNumber, options?: { sender?: string }): Promise<{_reason: TBigNumber, _context: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"bytes","name":"_encodedFunction","type":"bytes"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint256","name":"_maxPossibleCharge","type":"uint256"}],"name":"acceptRelayedCall","outputs":[{"internalType":"uint256","name":"_reason","type":"uint256"},{"internalType":"bytes","name":"_context","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, from, encodedFunction, arg3, arg4, arg5, arg6, arg7, maxPossibleCharge], options.sender)
		return <{_reason: TBigNumber, _context: string}>result
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurWalletFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurWalletFactory","outputs":[{"internalType":"contract IAugurWalletFactory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public ethExchange_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ethExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public executeWalletTransaction = async (to: string, data: string, value: TBigNumber, payment: TBigNumber, referralAddress: string, fingerprint: string, desiredSignerBalance: TBigNumber, maxExchangeRateInDai: TBigNumber, revertOnFailure: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"uint256","name":"_desiredSignerBalance","type":"uint256"},{"internalType":"uint256","name":"_maxExchangeRateInDai","type":"uint256"},{"internalType":"bool","name":"_revertOnFailure","type":"bool"}],"name":"executeWalletTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, data, value, payment, referralAddress, fingerprint, desiredSignerBalance, maxExchangeRateInDai, revertOnFailure], 'executeWalletTransaction', options.sender)
	}
	
	public executeWalletTransaction_estimateGas = async (to: string, data: string, value: TBigNumber, payment: TBigNumber, referralAddress: string, fingerprint: string, desiredSignerBalance: TBigNumber, maxExchangeRateInDai: TBigNumber, revertOnFailure: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"uint256","name":"_desiredSignerBalance","type":"uint256"},{"internalType":"uint256","name":"_maxExchangeRateInDai","type":"uint256"},{"internalType":"bool","name":"_revertOnFailure","type":"bool"}],"name":"executeWalletTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, data, value, payment, referralAddress, fingerprint, desiredSignerBalance, maxExchangeRateInDai, revertOnFailure], 'executeWalletTransaction', options.sender)
	}

	public executeWalletTransaction_ = async (to: string, data: string, value: TBigNumber, payment: TBigNumber, referralAddress: string, fingerprint: string, desiredSignerBalance: TBigNumber, maxExchangeRateInDai: TBigNumber, revertOnFailure: boolean, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"uint256","name":"_desiredSignerBalance","type":"uint256"},{"internalType":"uint256","name":"_maxExchangeRateInDai","type":"uint256"},{"internalType":"bool","name":"_revertOnFailure","type":"bool"}],"name":"executeWalletTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [to, data, value, payment, referralAddress, fingerprint, desiredSignerBalance, maxExchangeRateInDai, revertOnFailure], options.sender)
	}

	public getAmountIn_ = async (amountOut: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountOut, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getAmountOut_ = async (amountIn: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountIn, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getCreate2WalletAddress_ = async (owner: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getCreate2WalletAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner], options.sender)
		return <string>result[0]
	}

	public getHubAddr_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getHubAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getRelayMessageHash_ = async (relay: string, from: string, to: string, encodedFunction: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, nonce: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"relay","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"encodedFunction","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"getRelayMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relay, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce], options.sender)
		return <string>result[0]
	}

	public getWallet_ = async (account: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"getWallet","outputs":[{"internalType":"contract IAugurWallet","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender, options.attachedEth)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender, options.attachedEth)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [augur, augurTrading], options.sender, options.attachedEth)
		return <boolean>result[0]
	}

	public postRelayedCall = async (context: string, success: boolean, actualCharge: TBigNumber, preRetVal: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"actualCharge","type":"uint256"},{"internalType":"bytes32","name":"preRetVal","type":"bytes32"}],"name":"postRelayedCall","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [context, success, actualCharge, preRetVal], 'postRelayedCall', options.sender)
	}
	
	public postRelayedCall_estimateGas = async (context: string, success: boolean, actualCharge: TBigNumber, preRetVal: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"actualCharge","type":"uint256"},{"internalType":"bytes32","name":"preRetVal","type":"bytes32"}],"name":"postRelayedCall","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [context, success, actualCharge, preRetVal], 'postRelayedCall', options.sender)
	}

	public postRelayedCall_ = async (context: string, success: boolean, actualCharge: TBigNumber, preRetVal: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"actualCharge","type":"uint256"},{"internalType":"bytes32","name":"preRetVal","type":"bytes32"}],"name":"postRelayedCall","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [context, success, actualCharge, preRetVal], options.sender)
	}

	public preRelayedCall = async (context: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"name":"preRelayedCall","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [context], 'preRelayedCall', options.sender)
	}
	
	public preRelayedCall_estimateGas = async (context: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"name":"preRelayedCall","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [context], 'preRelayedCall', options.sender)
	}

	public preRelayedCall_ = async (context: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"name":"preRelayedCall","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [context], options.sender)
		return <string>result[0]
	}

	public relayHubVersion_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"relayHubVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public token0IsCash_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"token0IsCash","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}
}


export class AugurWalletRegistryV2<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public GENERIC_PARAMS_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"GENERIC_PARAMS","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public WETH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"WETH","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public _verifySig_ = async (req: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, suffixData: string, sig: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"req","type":"tuple"},{"internalType":"bytes","name":"suffixData","type":"bytes"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"_verifySig","outputs":[],"payable":false,"stateMutability":"pure","type":"function"}
		await this.localCall(abi, [req, suffixData, sig], options.sender)
	}

	public acceptRelayedCall_ = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, approvalData: string, maxPossibleGas: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"},{"internalType":"uint256","name":"maxPossibleGas","type":"uint256"}],"name":"acceptRelayedCall","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relayRequest, signature, approvalData, maxPossibleGas], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurWalletFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurWalletFactory","outputs":[{"internalType":"contract IAugurWalletFactory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public ethExchange_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ethExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public execute = async (req: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, domainSeparator: string, requestTypeHash: string, suffixData: string, sig: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"req","type":"tuple"},{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"},{"internalType":"bytes32","name":"requestTypeHash","type":"bytes32"},{"internalType":"bytes","name":"suffixData","type":"bytes"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"execute","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"ret","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [req, domainSeparator, requestTypeHash, suffixData, sig], 'execute', options.sender, options.attachedEth)
	}
	
	public execute_estimateGas = async (req: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, domainSeparator: string, requestTypeHash: string, suffixData: string, sig: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"req","type":"tuple"},{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"},{"internalType":"bytes32","name":"requestTypeHash","type":"bytes32"},{"internalType":"bytes","name":"suffixData","type":"bytes"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"execute","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"ret","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [req, domainSeparator, requestTypeHash, suffixData, sig], 'execute', options.sender, options.attachedEth)
	}

	public execute_ = async (req: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, domainSeparator: string, requestTypeHash: string, suffixData: string, sig: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{success: boolean, ret: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"req","type":"tuple"},{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"},{"internalType":"bytes32","name":"requestTypeHash","type":"bytes32"},{"internalType":"bytes","name":"suffixData","type":"bytes"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"execute","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"ret","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [req, domainSeparator, requestTypeHash, suffixData, sig], options.sender, options.attachedEth)
		return <{success: boolean, ret: string}>result
	}

	public executeWalletTransaction = async (to: string, data: string, value: TBigNumber, payment: TBigNumber, referralAddress: string, fingerprint: string, desiredSignerBalance: TBigNumber, maxExchangeRateInDai: TBigNumber, revertOnFailure: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"uint256","name":"_desiredSignerBalance","type":"uint256"},{"internalType":"uint256","name":"_maxExchangeRateInDai","type":"uint256"},{"internalType":"bool","name":"_revertOnFailure","type":"bool"}],"name":"executeWalletTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, data, value, payment, referralAddress, fingerprint, desiredSignerBalance, maxExchangeRateInDai, revertOnFailure], 'executeWalletTransaction', options.sender)
	}
	
	public executeWalletTransaction_estimateGas = async (to: string, data: string, value: TBigNumber, payment: TBigNumber, referralAddress: string, fingerprint: string, desiredSignerBalance: TBigNumber, maxExchangeRateInDai: TBigNumber, revertOnFailure: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"uint256","name":"_desiredSignerBalance","type":"uint256"},{"internalType":"uint256","name":"_maxExchangeRateInDai","type":"uint256"},{"internalType":"bool","name":"_revertOnFailure","type":"bool"}],"name":"executeWalletTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, data, value, payment, referralAddress, fingerprint, desiredSignerBalance, maxExchangeRateInDai, revertOnFailure], 'executeWalletTransaction', options.sender)
	}

	public executeWalletTransaction_ = async (to: string, data: string, value: TBigNumber, payment: TBigNumber, referralAddress: string, fingerprint: string, desiredSignerBalance: TBigNumber, maxExchangeRateInDai: TBigNumber, revertOnFailure: boolean, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"uint256","name":"_desiredSignerBalance","type":"uint256"},{"internalType":"uint256","name":"_maxExchangeRateInDai","type":"uint256"},{"internalType":"bool","name":"_revertOnFailure","type":"bool"}],"name":"executeWalletTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [to, data, value, payment, referralAddress, fingerprint, desiredSignerBalance, maxExchangeRateInDai, revertOnFailure], options.sender)
	}

	public getAmountIn_ = async (amountOut: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountOut, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getAmountOut_ = async (amountIn: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountIn, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getCreate2WalletAddress_ = async (owner: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getCreate2WalletAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner], options.sender)
		return <string>result[0]
	}

	public getGasLimits_ = async (options?: { sender?: string }): Promise<{ acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getGasLimits","outputs":[{"components":[{"internalType":"uint256","name":"acceptRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"preRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"postRelayedCallGasLimit","type":"uint256"}],"internalType":"struct IPaymaster.GasLimits","name":"limits","type":"tuple"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <{ acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }>result[0]
	}

	public getHubAddr_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getHubAddr","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getNonce_ = async (from: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"from","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [from], options.sender)
		return <TBigNumber>result[0]
	}

	public getRelayHubDeposit_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRelayHubDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getRelayMessageHash_ = async (req: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"req","type":"tuple"}],"name":"getRelayMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [req], options.sender)
		return <string>result[0]
	}

	public getWallet_ = async (account: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"getWallet","outputs":[{"internalType":"contract IAugurWallet","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender, options.attachedEth)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender, options.attachedEth)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [augur, augurTrading], options.sender, options.attachedEth)
		return <boolean>result[0]
	}

	public isTrustedForwarder_ = async (forwarder: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [forwarder], options.sender)
		return <boolean>result[0]
	}

	public postRelayedCall = async (context: string, success: boolean, preRetVal: string, gasUseWithoutPost: TBigNumber, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string }, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes32","name":"preRetVal","type":"bytes32"},{"internalType":"uint256","name":"gasUseWithoutPost","type":"uint256"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"name":"postRelayedCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [context, success, preRetVal, gasUseWithoutPost, relayData], 'postRelayedCall', options.sender)
	}
	
	public postRelayedCall_estimateGas = async (context: string, success: boolean, preRetVal: string, gasUseWithoutPost: TBigNumber, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string }, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes32","name":"preRetVal","type":"bytes32"},{"internalType":"uint256","name":"gasUseWithoutPost","type":"uint256"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"name":"postRelayedCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [context, success, preRetVal, gasUseWithoutPost, relayData], 'postRelayedCall', options.sender)
	}

	public postRelayedCall_ = async (context: string, success: boolean, preRetVal: string, gasUseWithoutPost: TBigNumber, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string }, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes32","name":"preRetVal","type":"bytes32"},{"internalType":"uint256","name":"gasUseWithoutPost","type":"uint256"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"name":"postRelayedCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [context, success, preRetVal, gasUseWithoutPost, relayData], options.sender)
		return <boolean>result[0]
	}

	public preRelayedCall_ = async (context: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"name":"preRelayedCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [context], options.sender)
		return <boolean>result[0]
	}

	public registerRequestType = async (typeName: string, typeSuffix: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"string","name":"typeName","type":"string"},{"internalType":"string","name":"typeSuffix","type":"string"}],"name":"registerRequestType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [typeName, typeSuffix], 'registerRequestType', options.sender)
	}
	
	public registerRequestType_estimateGas = async (typeName: string, typeSuffix: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"string","name":"typeName","type":"string"},{"internalType":"string","name":"typeSuffix","type":"string"}],"name":"registerRequestType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [typeName, typeSuffix], 'registerRequestType', options.sender)
	}

	public registerRequestType_ = async (typeName: string, typeSuffix: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"string","name":"typeName","type":"string"},{"internalType":"string","name":"typeSuffix","type":"string"}],"name":"registerRequestType","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [typeName, typeSuffix], options.sender)
	}

	public token0IsCash_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"token0IsCash","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public typeHashes_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"typeHashes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public verify_ = async (req: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, suffixData: string, sig: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"req","type":"tuple"},{"internalType":"bytes","name":"suffixData","type":"bytes"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"verify","outputs":[],"payable":false,"stateMutability":"view","type":"function"}
		await this.localCall(abi, [req, suffixData, sig], options.sender)
	}

	public versionRecipient_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"versionRecipient","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class Cash<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}
}


export class LegacyReputationToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public controllerLookupName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"controllerLookupName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getIsMigratingFromLegacy_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getIsMigratingFromLegacy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getLegacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLegacyRepToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTargetSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTargetSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalMigrated_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalMigrated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalTheoreticalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe], 'initialize', options.sender)
	}

	public initialize_ = async (universe: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [universe], options.sender)
	}

	public migrateAllowancesFromLegacyRep = async (owners: Array<string>, spenders: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"address[]","name":"_spenders","type":"address[]"}],"name":"migrateAllowancesFromLegacyRep","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owners, spenders], 'migrateAllowancesFromLegacyRep', options.sender)
	}
	
	public migrateAllowancesFromLegacyRep_estimateGas = async (owners: Array<string>, spenders: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"address[]","name":"_spenders","type":"address[]"}],"name":"migrateAllowancesFromLegacyRep","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owners, spenders], 'migrateAllowancesFromLegacyRep', options.sender)
	}

	public migrateAllowancesFromLegacyRep_ = async (owners: Array<string>, spenders: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"address[]","name":"_spenders","type":"address[]"}],"name":"migrateAllowancesFromLegacyRep","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [owners, spenders], options.sender)
		return <boolean>result[0]
	}

	public migrateBalancesFromLegacyRep = async (holders: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"_holders","type":"address[]"}],"name":"migrateBalancesFromLegacyRep","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [holders], 'migrateBalancesFromLegacyRep', options.sender)
	}
	
	public migrateBalancesFromLegacyRep_estimateGas = async (holders: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"_holders","type":"address[]"}],"name":"migrateBalancesFromLegacyRep","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [holders], 'migrateBalancesFromLegacyRep', options.sender)
	}

	public migrateBalancesFromLegacyRep_ = async (holders: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"_holders","type":"address[]"}],"name":"migrateBalancesFromLegacyRep","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [holders], options.sender)
		return <boolean>result[0]
	}

	public migrateIn = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}
	
	public migrateIn_estimateGas = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}

	public migrateIn_ = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reporter, attotokens], options.sender)
		return <boolean>result[0]
	}

	public migrateOut = async (destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReputationToken","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [destination, attotokens], 'migrateOut', options.sender)
	}
	
	public migrateOut_estimateGas = async (destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReputationToken","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [destination, attotokens], 'migrateOut', options.sender)
	}

	public migrateOut_ = async (destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReputationToken","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public migrateOutByPayout = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}
	
	public migrateOutByPayout_estimateGas = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}

	public migrateOutByPayout_ = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, attotokens], options.sender)
		return <boolean>result[0]
	}

	public mintForReportingParticipant = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}
	
	public mintForReportingParticipant_estimateGas = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}

	public mintForReportingParticipant_ = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountMigrated], options.sender)
		return <boolean>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value], 'transfer', options.sender)
	}

	public transfer_ = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, value], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}

	public trustedDisputeWindowTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}
	
	public trustedDisputeWindowTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}

	public trustedDisputeWindowTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedMarketTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}
	
	public trustedMarketTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}

	public trustedMarketTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedReportingParticipantTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}
	
	public trustedReportingParticipantTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}

	public trustedReportingParticipantTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedUniverseTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}
	
	public trustedUniverseTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}

	public trustedUniverseTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public updateParentTotalTheoreticalSupply = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateParentTotalTheoreticalSupply","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'updateParentTotalTheoreticalSupply', options.sender)
	}
	
	public updateParentTotalTheoreticalSupply_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateParentTotalTheoreticalSupply","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'updateParentTotalTheoreticalSupply', options.sender)
	}

	public updateParentTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateParentTotalTheoreticalSupply","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public updateSiblingMigrationTotal = async (token: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReputationToken","name":"_token","type":"address"}],"name":"updateSiblingMigrationTotal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token], 'updateSiblingMigrationTotal', options.sender)
	}
	
	public updateSiblingMigrationTotal_estimateGas = async (token: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReputationToken","name":"_token","type":"address"}],"name":"updateSiblingMigrationTotal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token], 'updateSiblingMigrationTotal', options.sender)
	}

	public updateSiblingMigrationTotal_ = async (token: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReputationToken","name":"_token","type":"address"}],"name":"updateSiblingMigrationTotal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token], options.sender)
		return <boolean>result[0]
	}
}


export class TestNetReputationToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public burnForMarket = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToBurn], 'burnForMarket', options.sender)
	}
	
	public burnForMarket_estimateGas = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToBurn], 'burnForMarket', options.sender)
	}

	public burnForMarket_ = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToBurn], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public getLegacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLegacyRepToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTotalMigrated_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalMigrated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalTheoreticalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public legacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"legacyRepToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public migrateFromLegacyReputationToken = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}
	
	public migrateFromLegacyReputationToken_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}

	public migrateFromLegacyReputationToken_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public migrateIn = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}
	
	public migrateIn_estimateGas = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}

	public migrateIn_ = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reporter, attotokens], options.sender)
		return <boolean>result[0]
	}

	public migrateOutByPayout = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}
	
	public migrateOutByPayout_estimateGas = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}

	public migrateOutByPayout_ = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, attotokens], options.sender)
		return <boolean>result[0]
	}

	public mintForReportingParticipant = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}
	
	public mintForReportingParticipant_estimateGas = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}

	public mintForReportingParticipant_ = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountMigrated], options.sender)
		return <boolean>result[0]
	}

	public mintForWarpSync = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToMint","type":"uint256"},{"internalType":"address","name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}
	
	public mintForWarpSync_estimateGas = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToMint","type":"uint256"},{"internalType":"address","name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}

	public mintForWarpSync_ = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToMint","type":"uint256"},{"internalType":"address","name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToMint, target], options.sender)
		return <boolean>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public parentUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"parentUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public trustedDisputeWindowTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}
	
	public trustedDisputeWindowTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}

	public trustedDisputeWindowTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedMarketTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}
	
	public trustedMarketTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}

	public trustedMarketTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedReportingParticipantTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}
	
	public trustedReportingParticipantTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}

	public trustedReportingParticipantTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedUniverseTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}
	
	public trustedUniverseTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}

	public trustedUniverseTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public warpSync_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"warpSync","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class Time<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class TimeControlled<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public incrementTimestamp = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'incrementTimestamp', options.sender)
	}
	
	public incrementTimestamp_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'incrementTimestamp', options.sender)
	}

	public incrementTimestamp_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public setTimestamp = async (timestamp: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [timestamp], 'setTimestamp', options.sender)
	}
	
	public setTimestamp_estimateGas = async (timestamp: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [timestamp], 'setTimestamp', options.sender)
	}

	public setTimestamp_ = async (timestamp: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"setTimestamp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [timestamp], options.sender)
		return <boolean>result[0]
	}

	public timestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"timestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class USDC<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}
}


export class USDT<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public faucet = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'faucet', options.sender)
	}
	
	public faucet_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'faucet', options.sender)
	}

	public faucet_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"faucet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}
}


export class WarpSync<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public data_ = async (arg0: string, options?: { sender?: string }): Promise<{warpSyncHash: TBigNumber, timestamp: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"data","outputs":[{"internalType":"uint256","name":"warpSyncHash","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <{warpSyncHash: TBigNumber, timestamp: TBigNumber}>result
	}

	public doInitialReport = async (universe: string, payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"}],"name":"doInitialReport","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, payoutNumerators, description], 'doInitialReport', options.sender)
	}
	
	public doInitialReport_estimateGas = async (universe: string, payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"}],"name":"doInitialReport","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, payoutNumerators, description], 'doInitialReport', options.sender)
	}

	public doInitialReport_ = async (universe: string, payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"}],"name":"doInitialReport","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, payoutNumerators, description], options.sender)
		return <boolean>result[0]
	}

	public getCreationReward_ = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"getCreationReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [universe], options.sender)
		return <TBigNumber>result[0]
	}

	public getFinalizationReward_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getFinalizationReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <boolean>result[0]
	}

	public initializeUniverse = async (universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initializeUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe], 'initializeUniverse', options.sender)
	}
	
	public initializeUniverse_estimateGas = async (universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initializeUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe], 'initializeUniverse', options.sender)
	}

	public initializeUniverse_ = async (universe: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initializeUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [universe], options.sender)
	}

	public markets_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"markets","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public notifyMarketFinalized = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"notifyMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'notifyMarketFinalized', options.sender)
	}
	
	public notifyMarketFinalized_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"notifyMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'notifyMarketFinalized', options.sender)
	}

	public notifyMarketFinalized_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"notifyMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}
}


export class AugurWalletFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public affiliates_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"affiliates","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurWalletRegistry_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurWalletRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurWalletRegistryV2_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurWalletRegistryV2","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createAugurWallet = async (owner: string, referralAddress: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"createAugurWallet","outputs":[{"internalType":"contract IAugurWallet","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owner, referralAddress, fingerprint], 'createAugurWallet', options.sender)
	}
	
	public createAugurWallet_estimateGas = async (owner: string, referralAddress: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"createAugurWallet","outputs":[{"internalType":"contract IAugurWallet","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owner, referralAddress, fingerprint], 'createAugurWallet', options.sender)
	}

	public createAugurWallet_ = async (owner: string, referralAddress: string, fingerprint: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_referralAddress","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"createAugurWallet","outputs":[{"internalType":"contract IAugurWallet","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [owner, referralAddress, fingerprint], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getCreate2WalletAddress_ = async (owner: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"getCreate2WalletAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, augurTrading], options.sender)
		return <boolean>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public zeroXTrade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"zeroXTrade","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class DisputeCrowdsourcerFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createDisputeCrowdsourcer = async (augur: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_crowdsourcerGeneration","type":"uint256"}],"name":"createDisputeCrowdsourcer","outputs":[{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], 'createDisputeCrowdsourcer', options.sender)
	}
	
	public createDisputeCrowdsourcer_estimateGas = async (augur: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_crowdsourcerGeneration","type":"uint256"}],"name":"createDisputeCrowdsourcer","outputs":[{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], 'createDisputeCrowdsourcer', options.sender)
	}

	public createDisputeCrowdsourcer_ = async (augur: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_crowdsourcerGeneration","type":"uint256"}],"name":"createDisputeCrowdsourcer","outputs":[{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], options.sender)
		return <string>result[0]
	}
}


export class DisputeWindowFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createDisputeWindow = async (augur: string, disputeWindowId: TBigNumber, windowDuration: TBigNumber, startTime: TBigNumber, participationTokensEnabled: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"},{"internalType":"uint256","name":"_windowDuration","type":"uint256"},{"internalType":"uint256","name":"_startTime","type":"uint256"},{"internalType":"bool","name":"_participationTokensEnabled","type":"bool"}],"name":"createDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, disputeWindowId, windowDuration, startTime, participationTokensEnabled], 'createDisputeWindow', options.sender)
	}
	
	public createDisputeWindow_estimateGas = async (augur: string, disputeWindowId: TBigNumber, windowDuration: TBigNumber, startTime: TBigNumber, participationTokensEnabled: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"},{"internalType":"uint256","name":"_windowDuration","type":"uint256"},{"internalType":"uint256","name":"_startTime","type":"uint256"},{"internalType":"bool","name":"_participationTokensEnabled","type":"bool"}],"name":"createDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, disputeWindowId, windowDuration, startTime, participationTokensEnabled], 'createDisputeWindow', options.sender)
	}

	public createDisputeWindow_ = async (augur: string, disputeWindowId: TBigNumber, windowDuration: TBigNumber, startTime: TBigNumber, participationTokensEnabled: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"},{"internalType":"uint256","name":"_windowDuration","type":"uint256"},{"internalType":"uint256","name":"_startTime","type":"uint256"},{"internalType":"bool","name":"_participationTokensEnabled","type":"bool"}],"name":"createDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, disputeWindowId, windowDuration, startTime, participationTokensEnabled], options.sender)
		return <string>result[0]
	}
}


export class InitialReporterFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createInitialReporter = async (augur: string, designatedReporter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"createInitialReporter","outputs":[{"internalType":"contract IInitialReporter","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, designatedReporter], 'createInitialReporter', options.sender)
	}
	
	public createInitialReporter_estimateGas = async (augur: string, designatedReporter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"createInitialReporter","outputs":[{"internalType":"contract IInitialReporter","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, designatedReporter], 'createInitialReporter', options.sender)
	}

	public createInitialReporter_ = async (augur: string, designatedReporter: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"createInitialReporter","outputs":[{"internalType":"contract IInitialReporter","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, designatedReporter], options.sender)
		return <string>result[0]
	}
}


export class MarketFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createMarket = async (augur: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, sender: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, sender, numOutcomes, numTicks], 'createMarket', options.sender)
	}
	
	public createMarket_estimateGas = async (augur: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, sender: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, sender, numOutcomes, numTicks], 'createMarket', options.sender)
	}

	public createMarket_ = async (augur: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, sender: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"createMarket","outputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, sender, numOutcomes, numTicks], options.sender)
		return <string>result[0]
	}
}


export class OICashFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createOICash = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"createOICash","outputs":[{"internalType":"contract IOICash","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'createOICash', options.sender)
	}
	
	public createOICash_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"createOICash","outputs":[{"internalType":"contract IOICash","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'createOICash', options.sender)
	}

	public createOICash_ = async (augur: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"createOICash","outputs":[{"internalType":"contract IOICash","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur], options.sender)
		return <string>result[0]
	}
}


export class ReputationTokenFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createReputationToken = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}
	
	public createReputationToken_estimateGas = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}

	public createReputationToken_ = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, parentUniverse], options.sender)
		return <string>result[0]
	}
}


export class TestNetReputationTokenFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createReputationToken = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}
	
	public createReputationToken_estimateGas = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, parentUniverse], 'createReputationToken', options.sender)
	}

	public createReputationToken_ = async (augur: string, parentUniverse: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"}],"name":"createReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [augur, parentUniverse], options.sender)
		return <string>result[0]
	}
}


export class UniverseFactory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public createUniverse = async (parentUniverse: string, parentPayoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"},{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentUniverse, parentPayoutDistributionHash, payoutNumerators], 'createUniverse', options.sender)
	}
	
	public createUniverse_estimateGas = async (parentUniverse: string, parentPayoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"},{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentUniverse, parentPayoutDistributionHash, payoutNumerators], 'createUniverse', options.sender)
	}

	public createUniverse_ = async (parentUniverse: string, parentPayoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_parentUniverse","type":"address"},{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"createUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentUniverse, parentPayoutDistributionHash, payoutNumerators], options.sender)
		return <string>result[0]
	}
}


export class RelayHub<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public balanceOf_ = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [target], options.sender)
		return <TBigNumber>result[0]
	}

	public canRelay_ = async (relay: string, from: string, to: string, encodedFunction: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, nonce: TBigNumber, signature: string, approvalData: string, options?: { sender?: string }): Promise<{status: TBigNumber, recipientContext: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"relay","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"encodedFunction","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"}],"name":"canRelay","outputs":[{"internalType":"uint256","name":"status","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relay, from, to, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData], options.sender)
		return <{status: TBigNumber, recipientContext: string}>result
	}

	public canUnstake_ = async (relay: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"canUnstake","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relay], options.sender)
		return <boolean>result[0]
	}

	public depositFor = async (target: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"depositFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [target], 'depositFor', options.sender, options.attachedEth)
	}
	
	public depositFor_estimateGas = async (target: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"depositFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [target], 'depositFor', options.sender, options.attachedEth)
	}

	public depositFor_ = async (target: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"depositFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [target], options.sender, options.attachedEth)
	}

	public getNonce_ = async (from: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"from","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [from], options.sender)
		return <TBigNumber>result[0]
	}

	public getRelay_ = async (relay: string, options?: { sender?: string }): Promise<{totalStake: TBigNumber, unstakeDelay: TBigNumber, unstakeTime: TBigNumber, owner: string, state: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"getRelay","outputs":[{"internalType":"uint256","name":"totalStake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"},{"internalType":"uint256","name":"unstakeTime","type":"uint256"},{"internalType":"address payable","name":"owner","type":"address"},{"internalType":"enum IRelayHub.RelayState","name":"state","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relay], options.sender)
		return <{totalStake: TBigNumber, unstakeDelay: TBigNumber, unstakeTime: TBigNumber, owner: string, state: TBigNumber}>result
	}

	public maxPossibleCharge_ = async (relayedCallStipend: TBigNumber, gasPrice: TBigNumber, transactionFee: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"relayedCallStipend","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"transactionFee","type":"uint256"}],"name":"maxPossibleCharge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relayedCallStipend, gasPrice, transactionFee], options.sender)
		return <TBigNumber>result[0]
	}

	public penalizeIllegalTransaction = async (unsignedTx: string, signature: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"penalizeIllegalTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [unsignedTx, signature], 'penalizeIllegalTransaction', options.sender)
	}
	
	public penalizeIllegalTransaction_estimateGas = async (unsignedTx: string, signature: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"penalizeIllegalTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [unsignedTx, signature], 'penalizeIllegalTransaction', options.sender)
	}

	public penalizeIllegalTransaction_ = async (unsignedTx: string, signature: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"penalizeIllegalTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [unsignedTx, signature], options.sender)
	}

	public penalizeRepeatedNonce = async (unsignedTx1: string, signature1: string, unsignedTx2: string, signature2: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx1","type":"bytes"},{"internalType":"bytes","name":"signature1","type":"bytes"},{"internalType":"bytes","name":"unsignedTx2","type":"bytes"},{"internalType":"bytes","name":"signature2","type":"bytes"}],"name":"penalizeRepeatedNonce","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [unsignedTx1, signature1, unsignedTx2, signature2], 'penalizeRepeatedNonce', options.sender)
	}
	
	public penalizeRepeatedNonce_estimateGas = async (unsignedTx1: string, signature1: string, unsignedTx2: string, signature2: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx1","type":"bytes"},{"internalType":"bytes","name":"signature1","type":"bytes"},{"internalType":"bytes","name":"unsignedTx2","type":"bytes"},{"internalType":"bytes","name":"signature2","type":"bytes"}],"name":"penalizeRepeatedNonce","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [unsignedTx1, signature1, unsignedTx2, signature2], 'penalizeRepeatedNonce', options.sender)
	}

	public penalizeRepeatedNonce_ = async (unsignedTx1: string, signature1: string, unsignedTx2: string, signature2: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx1","type":"bytes"},{"internalType":"bytes","name":"signature1","type":"bytes"},{"internalType":"bytes","name":"unsignedTx2","type":"bytes"},{"internalType":"bytes","name":"signature2","type":"bytes"}],"name":"penalizeRepeatedNonce","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [unsignedTx1, signature1, unsignedTx2, signature2], options.sender)
	}

	public recipientCallsAtomic = async (recipient: string, encodedFunctionWithFrom: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, preChecksGas: TBigNumber, recipientContext: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"encodedFunctionWithFrom","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"preChecksGas","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"name":"recipientCallsAtomic","outputs":[{"internalType":"enum IRelayHub.RelayCallStatus","name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, encodedFunctionWithFrom, transactionFee, gasPrice, gasLimit, preChecksGas, recipientContext], 'recipientCallsAtomic', options.sender)
	}
	
	public recipientCallsAtomic_estimateGas = async (recipient: string, encodedFunctionWithFrom: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, preChecksGas: TBigNumber, recipientContext: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"encodedFunctionWithFrom","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"preChecksGas","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"name":"recipientCallsAtomic","outputs":[{"internalType":"enum IRelayHub.RelayCallStatus","name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, encodedFunctionWithFrom, transactionFee, gasPrice, gasLimit, preChecksGas, recipientContext], 'recipientCallsAtomic', options.sender)
	}

	public recipientCallsAtomic_ = async (recipient: string, encodedFunctionWithFrom: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, preChecksGas: TBigNumber, recipientContext: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"encodedFunctionWithFrom","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"preChecksGas","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"name":"recipientCallsAtomic","outputs":[{"internalType":"enum IRelayHub.RelayCallStatus","name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, encodedFunctionWithFrom, transactionFee, gasPrice, gasLimit, preChecksGas, recipientContext], options.sender)
		return <TBigNumber>result[0]
	}

	public registerRelay = async (transactionFee: TBigNumber, url: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"string","name":"url","type":"string"}],"name":"registerRelay","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [transactionFee, url], 'registerRelay', options.sender)
	}
	
	public registerRelay_estimateGas = async (transactionFee: TBigNumber, url: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"string","name":"url","type":"string"}],"name":"registerRelay","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [transactionFee, url], 'registerRelay', options.sender)
	}

	public registerRelay_ = async (transactionFee: TBigNumber, url: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"string","name":"url","type":"string"}],"name":"registerRelay","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [transactionFee, url], options.sender)
	}

	public relayCall = async (from: string, recipient: string, encodedFunction: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, nonce: TBigNumber, signature: string, approvalData: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"encodedFunction","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"}],"name":"relayCall","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, recipient, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData], 'relayCall', options.sender)
	}
	
	public relayCall_estimateGas = async (from: string, recipient: string, encodedFunction: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, nonce: TBigNumber, signature: string, approvalData: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"encodedFunction","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"}],"name":"relayCall","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, recipient, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData], 'relayCall', options.sender)
	}

	public relayCall_ = async (from: string, recipient: string, encodedFunction: string, transactionFee: TBigNumber, gasPrice: TBigNumber, gasLimit: TBigNumber, nonce: TBigNumber, signature: string, approvalData: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"encodedFunction","type":"bytes"},{"internalType":"uint256","name":"transactionFee","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"}],"name":"relayCall","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, recipient, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, signature, approvalData], options.sender)
	}

	public removeRelayByOwner = async (relay: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"removeRelayByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relay], 'removeRelayByOwner', options.sender)
	}
	
	public removeRelayByOwner_estimateGas = async (relay: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"removeRelayByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relay], 'removeRelayByOwner', options.sender)
	}

	public removeRelayByOwner_ = async (relay: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"removeRelayByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relay], options.sender)
	}

	public requiredGas_ = async (relayedCallStipend: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"relayedCallStipend","type":"uint256"}],"name":"requiredGas","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relayedCallStipend], options.sender)
		return <TBigNumber>result[0]
	}

	public stake = async (relay: string, unstakeDelay: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"}],"name":"stake","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [relay, unstakeDelay], 'stake', options.sender, options.attachedEth)
	}
	
	public stake_estimateGas = async (relay: string, unstakeDelay: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"}],"name":"stake","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [relay, unstakeDelay], 'stake', options.sender, options.attachedEth)
	}

	public stake_ = async (relay: string, unstakeDelay: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"}],"name":"stake","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [relay, unstakeDelay], options.sender, options.attachedEth)
	}

	public unstake = async (relay: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"unstake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relay], 'unstake', options.sender)
	}
	
	public unstake_estimateGas = async (relay: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"unstake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relay], 'unstake', options.sender)
	}

	public unstake_ = async (relay: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relay","type":"address"}],"name":"unstake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relay], options.sender)
	}

	public version_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public withdraw = async (amount: TBigNumber, dest: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"dest","type":"address"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount, dest], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (amount: TBigNumber, dest: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"dest","type":"address"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount, dest], 'withdraw', options.sender)
	}

	public withdraw_ = async (amount: TBigNumber, dest: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"dest","type":"address"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [amount, dest], options.sender)
	}
}


export class Penalizer<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public penalizeIllegalTransaction = async (unsignedTx: string, signature: string, hub: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"contract IRelayHub","name":"hub","type":"address"}],"name":"penalizeIllegalTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [unsignedTx, signature, hub], 'penalizeIllegalTransaction', options.sender)
	}
	
	public penalizeIllegalTransaction_estimateGas = async (unsignedTx: string, signature: string, hub: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"contract IRelayHub","name":"hub","type":"address"}],"name":"penalizeIllegalTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [unsignedTx, signature, hub], 'penalizeIllegalTransaction', options.sender)
	}

	public penalizeIllegalTransaction_ = async (unsignedTx: string, signature: string, hub: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"contract IRelayHub","name":"hub","type":"address"}],"name":"penalizeIllegalTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [unsignedTx, signature, hub], options.sender)
	}

	public penalizeRepeatedNonce = async (unsignedTx1: string, signature1: string, unsignedTx2: string, signature2: string, hub: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx1","type":"bytes"},{"internalType":"bytes","name":"signature1","type":"bytes"},{"internalType":"bytes","name":"unsignedTx2","type":"bytes"},{"internalType":"bytes","name":"signature2","type":"bytes"},{"internalType":"contract IRelayHub","name":"hub","type":"address"}],"name":"penalizeRepeatedNonce","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [unsignedTx1, signature1, unsignedTx2, signature2, hub], 'penalizeRepeatedNonce', options.sender)
	}
	
	public penalizeRepeatedNonce_estimateGas = async (unsignedTx1: string, signature1: string, unsignedTx2: string, signature2: string, hub: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx1","type":"bytes"},{"internalType":"bytes","name":"signature1","type":"bytes"},{"internalType":"bytes","name":"unsignedTx2","type":"bytes"},{"internalType":"bytes","name":"signature2","type":"bytes"},{"internalType":"contract IRelayHub","name":"hub","type":"address"}],"name":"penalizeRepeatedNonce","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [unsignedTx1, signature1, unsignedTx2, signature2, hub], 'penalizeRepeatedNonce', options.sender)
	}

	public penalizeRepeatedNonce_ = async (unsignedTx1: string, signature1: string, unsignedTx2: string, signature2: string, hub: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes","name":"unsignedTx1","type":"bytes"},{"internalType":"bytes","name":"signature1","type":"bytes"},{"internalType":"bytes","name":"unsignedTx2","type":"bytes"},{"internalType":"bytes","name":"signature2","type":"bytes"},{"internalType":"contract IRelayHub","name":"hub","type":"address"}],"name":"penalizeRepeatedNonce","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [unsignedTx1, signature1, unsignedTx2, signature2, hub], options.sender)
	}

	public versionPenalizer_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"versionPenalizer","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class RelayHubV2<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public MAX_WORKER_COUNT_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"MAX_WORKER_COUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public addRelayWorkers = async (newRelayWorkers: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"newRelayWorkers","type":"address[]"}],"name":"addRelayWorkers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newRelayWorkers], 'addRelayWorkers', options.sender)
	}
	
	public addRelayWorkers_estimateGas = async (newRelayWorkers: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"newRelayWorkers","type":"address[]"}],"name":"addRelayWorkers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newRelayWorkers], 'addRelayWorkers', options.sender)
	}

	public addRelayWorkers_ = async (newRelayWorkers: Array<string>, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address[]","name":"newRelayWorkers","type":"address[]"}],"name":"addRelayWorkers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [newRelayWorkers], options.sender)
	}

	public balanceOf_ = async (target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [target], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateCharge_ = async (gasUsed: TBigNumber, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string }, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"gasUsed","type":"uint256"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"name":"calculateCharge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [gasUsed, relayData], options.sender)
		return <TBigNumber>result[0]
	}

	public canRelay_ = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, initialGas: TBigNumber, signature: string, approvalData: string, options?: { sender?: string }): Promise<{success: boolean, returnValue: string, gasLimits: { acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"uint256","name":"initialGas","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"}],"name":"canRelay","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnValue","type":"bytes"},{"components":[{"internalType":"uint256","name":"acceptRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"preRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"postRelayedCallGasLimit","type":"uint256"}],"internalType":"struct IPaymaster.GasLimits","name":"gasLimits","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relayRequest, initialGas, signature, approvalData], options.sender)
		return <{success: boolean, returnValue: string, gasLimits: { acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }}>result
	}

	public depositFor = async (target: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"depositFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [target], 'depositFor', options.sender, options.attachedEth)
	}
	
	public depositFor_estimateGas = async (target: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"depositFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [target], 'depositFor', options.sender, options.attachedEth)
	}

	public depositFor_ = async (target: string, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"depositFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [target], options.sender, options.attachedEth)
	}

	public getHubOverhead_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getHubOverhead","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getStakeManager_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStakeManager","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public innerRelayCall = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, gasLimits: { acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }, totalInitialGas: TBigNumber, recipientContext: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"uint256","name":"acceptRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"preRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"postRelayedCallGasLimit","type":"uint256"}],"internalType":"struct IPaymaster.GasLimits","name":"gasLimits","type":"tuple"},{"internalType":"uint256","name":"totalInitialGas","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"name":"innerRelayCall","outputs":[{"internalType":"enum IRelayHub.RelayCallStatus","name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayRequest, signature, gasLimits, totalInitialGas, recipientContext], 'innerRelayCall', options.sender)
	}
	
	public innerRelayCall_estimateGas = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, gasLimits: { acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }, totalInitialGas: TBigNumber, recipientContext: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"uint256","name":"acceptRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"preRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"postRelayedCallGasLimit","type":"uint256"}],"internalType":"struct IPaymaster.GasLimits","name":"gasLimits","type":"tuple"},{"internalType":"uint256","name":"totalInitialGas","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"name":"innerRelayCall","outputs":[{"internalType":"enum IRelayHub.RelayCallStatus","name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayRequest, signature, gasLimits, totalInitialGas, recipientContext], 'innerRelayCall', options.sender)
	}

	public innerRelayCall_ = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, gasLimits: { acceptRelayedCallGasLimit: TBigNumber, preRelayedCallGasLimit: TBigNumber, postRelayedCallGasLimit: TBigNumber }, totalInitialGas: TBigNumber, recipientContext: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"uint256","name":"acceptRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"preRelayedCallGasLimit","type":"uint256"},{"internalType":"uint256","name":"postRelayedCallGasLimit","type":"uint256"}],"internalType":"struct IPaymaster.GasLimits","name":"gasLimits","type":"tuple"},{"internalType":"uint256","name":"totalInitialGas","type":"uint256"},{"internalType":"bytes","name":"recipientContext","type":"bytes"}],"name":"innerRelayCall","outputs":[{"internalType":"enum IRelayHub.RelayCallStatus","name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [relayRequest, signature, gasLimits, totalInitialGas, recipientContext], options.sender)
		return <TBigNumber>result[0]
	}

	public penalize = async (relayWorker: string, beneficiary: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"penalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayWorker, beneficiary], 'penalize', options.sender)
	}
	
	public penalize_estimateGas = async (relayWorker: string, beneficiary: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"penalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayWorker, beneficiary], 'penalize', options.sender)
	}

	public penalize_ = async (relayWorker: string, beneficiary: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"penalize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayWorker, beneficiary], options.sender)
	}

	public penalizer_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"penalizer","outputs":[{"internalType":"contract Penalizer","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public registerRelayServer = async (baseRelayFee: TBigNumber, pctRelayFee: TBigNumber, url: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"string","name":"url","type":"string"}],"name":"registerRelayServer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [baseRelayFee, pctRelayFee, url], 'registerRelayServer', options.sender)
	}
	
	public registerRelayServer_estimateGas = async (baseRelayFee: TBigNumber, pctRelayFee: TBigNumber, url: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"string","name":"url","type":"string"}],"name":"registerRelayServer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [baseRelayFee, pctRelayFee, url], 'registerRelayServer', options.sender)
	}

	public registerRelayServer_ = async (baseRelayFee: TBigNumber, pctRelayFee: TBigNumber, url: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"string","name":"url","type":"string"}],"name":"registerRelayServer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [baseRelayFee, pctRelayFee, url], options.sender)
	}

	public relayCall = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, approvalData: string, externalGasLimit: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"},{"internalType":"uint256","name":"externalGasLimit","type":"uint256"}],"name":"relayCall","outputs":[{"internalType":"bool","name":"paymasterAccepted","type":"bool"},{"internalType":"string","name":"revertReason","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayRequest, signature, approvalData, externalGasLimit], 'relayCall', options.sender)
	}
	
	public relayCall_estimateGas = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, approvalData: string, externalGasLimit: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"},{"internalType":"uint256","name":"externalGasLimit","type":"uint256"}],"name":"relayCall","outputs":[{"internalType":"bool","name":"paymasterAccepted","type":"bool"},{"internalType":"string","name":"revertReason","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayRequest, signature, approvalData, externalGasLimit], 'relayCall', options.sender)
	}

	public relayCall_ = async (relayRequest: { request: { from: string, to: string, value: TBigNumber, gas: TBigNumber, nonce: TBigNumber, data: string }, relayData: { gasPrice: TBigNumber, pctRelayFee: TBigNumber, baseRelayFee: TBigNumber, relayWorker: string, paymaster: string, paymasterData: string, clientId: TBigNumber, forwarder: string } }, signature: string, approvalData: string, externalGasLimit: TBigNumber, options?: { sender?: string }): Promise<{paymasterAccepted: boolean, revertReason: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gas","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IForwarder.ForwardRequest","name":"request","type":"tuple"},{"components":[{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint256","name":"pctRelayFee","type":"uint256"},{"internalType":"uint256","name":"baseRelayFee","type":"uint256"},{"internalType":"address","name":"relayWorker","type":"address"},{"internalType":"address","name":"paymaster","type":"address"},{"internalType":"bytes","name":"paymasterData","type":"bytes"},{"internalType":"uint256","name":"clientId","type":"uint256"},{"internalType":"address","name":"forwarder","type":"address"}],"internalType":"struct GsnTypes.RelayData","name":"relayData","type":"tuple"}],"internalType":"struct GsnTypes.RelayRequest","name":"relayRequest","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"approvalData","type":"bytes"},{"internalType":"uint256","name":"externalGasLimit","type":"uint256"}],"name":"relayCall","outputs":[{"internalType":"bool","name":"paymasterAccepted","type":"bool"},{"internalType":"string","name":"revertReason","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [relayRequest, signature, approvalData, externalGasLimit], options.sender)
		return <{paymasterAccepted: boolean, revertReason: string}>result
	}

	public stakeManager_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"stakeManager","outputs":[{"internalType":"contract StakeManager","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public versionHub_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"versionHub","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public withdraw = async (amount: TBigNumber, dest: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"dest","type":"address"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount, dest], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (amount: TBigNumber, dest: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"dest","type":"address"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount, dest], 'withdraw', options.sender)
	}

	public withdraw_ = async (amount: TBigNumber, dest: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"dest","type":"address"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [amount, dest], options.sender)
	}

	public workerCount_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"workerCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public workerToManager_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"workerToManager","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}
}


export class StakeManager<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public authorizeHubByManager = async (relayHub: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayHub","type":"address"}],"name":"authorizeHubByManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayHub], 'authorizeHubByManager', options.sender)
	}
	
	public authorizeHubByManager_estimateGas = async (relayHub: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayHub","type":"address"}],"name":"authorizeHubByManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayHub], 'authorizeHubByManager', options.sender)
	}

	public authorizeHubByManager_ = async (relayHub: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayHub","type":"address"}],"name":"authorizeHubByManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayHub], options.sender)
	}

	public authorizeHubByOwner = async (relayManager: string, relayHub: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address","name":"relayHub","type":"address"}],"name":"authorizeHubByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayManager, relayHub], 'authorizeHubByOwner', options.sender)
	}
	
	public authorizeHubByOwner_estimateGas = async (relayManager: string, relayHub: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address","name":"relayHub","type":"address"}],"name":"authorizeHubByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayManager, relayHub], 'authorizeHubByOwner', options.sender)
	}

	public authorizeHubByOwner_ = async (relayManager: string, relayHub: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address","name":"relayHub","type":"address"}],"name":"authorizeHubByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayManager, relayHub], options.sender)
	}

	public authorizedHubs_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"authorizedHubs","outputs":[{"internalType":"uint256","name":"removalBlock","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public getStakeInfo_ = async (relayManager: string, options?: { sender?: string }): Promise<{ stake: TBigNumber, unstakeDelay: TBigNumber, withdrawBlock: TBigNumber, owner: string }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"getStakeInfo","outputs":[{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"},{"internalType":"uint256","name":"withdrawBlock","type":"uint256"},{"internalType":"address payable","name":"owner","type":"address"}],"internalType":"struct IStakeManager.StakeInfo","name":"stakeInfo","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relayManager], options.sender)
		return <{ stake: TBigNumber, unstakeDelay: TBigNumber, withdrawBlock: TBigNumber, owner: string }>result[0]
	}

	public isRelayManagerStaked_ = async (relayManager: string, minAmount: TBigNumber, minUnstakeDelay: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"uint256","name":"minAmount","type":"uint256"},{"internalType":"uint256","name":"minUnstakeDelay","type":"uint256"}],"name":"isRelayManagerStaked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [relayManager, minAmount, minUnstakeDelay], options.sender)
		return <boolean>result[0]
	}

	public penalizeRelayManager = async (relayManager: string, beneficiary: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address payable","name":"beneficiary","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"penalizeRelayManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayManager, beneficiary, amount], 'penalizeRelayManager', options.sender)
	}
	
	public penalizeRelayManager_estimateGas = async (relayManager: string, beneficiary: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address payable","name":"beneficiary","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"penalizeRelayManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayManager, beneficiary, amount], 'penalizeRelayManager', options.sender)
	}

	public penalizeRelayManager_ = async (relayManager: string, beneficiary: string, amount: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address payable","name":"beneficiary","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"penalizeRelayManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayManager, beneficiary, amount], options.sender)
	}

	public stakeForAddress = async (relayManager: string, unstakeDelay: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"}],"name":"stakeForAddress","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [relayManager, unstakeDelay], 'stakeForAddress', options.sender, options.attachedEth)
	}
	
	public stakeForAddress_estimateGas = async (relayManager: string, unstakeDelay: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"}],"name":"stakeForAddress","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [relayManager, unstakeDelay], 'stakeForAddress', options.sender, options.attachedEth)
	}

	public stakeForAddress_ = async (relayManager: string, unstakeDelay: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"}],"name":"stakeForAddress","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [relayManager, unstakeDelay], options.sender, options.attachedEth)
	}

	public stakes_ = async (arg0: string, options?: { sender?: string }): Promise<{stake: TBigNumber, unstakeDelay: TBigNumber, withdrawBlock: TBigNumber, owner: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stakes","outputs":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelay","type":"uint256"},{"internalType":"uint256","name":"withdrawBlock","type":"uint256"},{"internalType":"address payable","name":"owner","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <{stake: TBigNumber, unstakeDelay: TBigNumber, withdrawBlock: TBigNumber, owner: string}>result
	}

	public unauthorizeHubByManager = async (relayHub: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayHub","type":"address"}],"name":"unauthorizeHubByManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayHub], 'unauthorizeHubByManager', options.sender)
	}
	
	public unauthorizeHubByManager_estimateGas = async (relayHub: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayHub","type":"address"}],"name":"unauthorizeHubByManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayHub], 'unauthorizeHubByManager', options.sender)
	}

	public unauthorizeHubByManager_ = async (relayHub: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayHub","type":"address"}],"name":"unauthorizeHubByManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayHub], options.sender)
	}

	public unauthorizeHubByOwner = async (relayManager: string, relayHub: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address","name":"relayHub","type":"address"}],"name":"unauthorizeHubByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayManager, relayHub], 'unauthorizeHubByOwner', options.sender)
	}
	
	public unauthorizeHubByOwner_estimateGas = async (relayManager: string, relayHub: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address","name":"relayHub","type":"address"}],"name":"unauthorizeHubByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayManager, relayHub], 'unauthorizeHubByOwner', options.sender)
	}

	public unauthorizeHubByOwner_ = async (relayManager: string, relayHub: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"},{"internalType":"address","name":"relayHub","type":"address"}],"name":"unauthorizeHubByOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayManager, relayHub], options.sender)
	}

	public unlockStake = async (relayManager: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"unlockStake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayManager], 'unlockStake', options.sender)
	}
	
	public unlockStake_estimateGas = async (relayManager: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"unlockStake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayManager], 'unlockStake', options.sender)
	}

	public unlockStake_ = async (relayManager: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"unlockStake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayManager], options.sender)
	}

	public versionSM_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"versionSM","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public withdrawStake = async (relayManager: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"withdrawStake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [relayManager], 'withdrawStake', options.sender)
	}
	
	public withdrawStake_estimateGas = async (relayManager: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"withdrawStake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [relayManager], 'withdrawStake', options.sender)
	}

	public withdrawStake_ = async (relayManager: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"relayManager","type":"address"}],"name":"withdrawStake","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [relayManager], options.sender)
	}
}


export class AffiliateValidator<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public addKey = async (key: string, salt: TBigNumber, r: string, s: string, v: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"uint256","name":"_salt","type":"uint256"},{"internalType":"bytes32","name":"_r","type":"bytes32"},{"internalType":"bytes32","name":"_s","type":"bytes32"},{"internalType":"uint8","name":"_v","type":"uint8"}],"name":"addKey","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [key, salt, r, s, v], 'addKey', options.sender)
	}
	
	public addKey_estimateGas = async (key: string, salt: TBigNumber, r: string, s: string, v: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"uint256","name":"_salt","type":"uint256"},{"internalType":"bytes32","name":"_r","type":"bytes32"},{"internalType":"bytes32","name":"_s","type":"bytes32"},{"internalType":"uint8","name":"_v","type":"uint8"}],"name":"addKey","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [key, salt, r, s, v], 'addKey', options.sender)
	}

	public addKey_ = async (key: string, salt: TBigNumber, r: string, s: string, v: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"uint256","name":"_salt","type":"uint256"},{"internalType":"bytes32","name":"_r","type":"bytes32"},{"internalType":"bytes32","name":"_s","type":"bytes32"},{"internalType":"uint8","name":"_v","type":"uint8"}],"name":"addKey","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [key, salt, r, s, v], options.sender)
	}

	public addOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"addOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'addOperator', options.sender)
	}
	
	public addOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"addOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'addOperator', options.sender)
	}

	public addOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"addOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public getKeyHash_ = async (key: string, account: string, salt: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"getKeyHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [key, account, salt], options.sender)
		return <string>result[0]
	}

	public getOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public isValidSignature_ = async (hash: string, r: string, s: string, v: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes32","name":"_r","type":"bytes32"},{"internalType":"bytes32","name":"_s","type":"bytes32"},{"internalType":"uint8","name":"_v","type":"uint8"}],"name":"isValidSignature","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [hash, r, s, v], options.sender)
		return <boolean>result[0]
	}

	public keys_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"keys","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public operators_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"operators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public removeOperator = async (operator: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"removeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator], 'removeOperator', options.sender)
	}
	
	public removeOperator_estimateGas = async (operator: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"removeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator], 'removeOperator', options.sender)
	}

	public removeOperator_ = async (operator: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"}],"name":"removeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator], options.sender)
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}

	public usedSalts_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"usedSalts","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public validateReference_ = async (account: string, referrer: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"address","name":"_referrer","type":"address"}],"name":"validateReference","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, referrer], options.sender)
		return <boolean>result[0]
	}
}


export class Affiliates<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public affiliateValidators_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"affiliateValidators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public createAffiliateValidator = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createAffiliateValidator","outputs":[{"internalType":"contract AffiliateValidator","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'createAffiliateValidator', options.sender)
	}
	
	public createAffiliateValidator_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createAffiliateValidator","outputs":[{"internalType":"contract AffiliateValidator","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'createAffiliateValidator', options.sender)
	}

	public createAffiliateValidator_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"createAffiliateValidator","outputs":[{"internalType":"contract AffiliateValidator","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fingerprints_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"fingerprints","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public getAccountFingerprint_ = async (account: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"getAccountFingerprint","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <string>result[0]
	}

	public getAndValidateReferrer_ = async (account: string, affiliateValidator: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"}],"name":"getAndValidateReferrer","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, affiliateValidator], options.sender)
		return <string>result[0]
	}

	public getReferrer_ = async (account: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"getReferrer","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <string>result[0]
	}

	public referrals_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"referrals","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public setFingerprint = async (fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"setFingerprint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [fingerprint], 'setFingerprint', options.sender)
	}
	
	public setFingerprint_estimateGas = async (fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"setFingerprint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [fingerprint], 'setFingerprint', options.sender)
	}

	public setFingerprint_ = async (fingerprint: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"setFingerprint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [fingerprint], options.sender)
	}

	public setReferrer = async (referrer: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_referrer","type":"address"}],"name":"setReferrer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [referrer], 'setReferrer', options.sender)
	}
	
	public setReferrer_estimateGas = async (referrer: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_referrer","type":"address"}],"name":"setReferrer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [referrer], 'setReferrer', options.sender)
	}

	public setReferrer_ = async (referrer: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_referrer","type":"address"}],"name":"setReferrer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [referrer], options.sender)
	}
}


export class DisputeCrowdsourcer<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public contribute = async (participant: string, amount: TBigNumber, overload: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_participant","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_overload","type":"bool"}],"name":"contribute","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [participant, amount, overload], 'contribute', options.sender)
	}
	
	public contribute_estimateGas = async (participant: string, amount: TBigNumber, overload: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_participant","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_overload","type":"bool"}],"name":"contribute","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [participant, amount, overload], 'contribute', options.sender)
	}

	public contribute_ = async (participant: string, amount: TBigNumber, overload: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_participant","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_overload","type":"bool"}],"name":"contribute","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [participant, amount, overload], options.sender)
		return <TBigNumber>result[0]
	}

	public correctSize = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"correctSize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'correctSize', options.sender)
	}
	
	public correctSize_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"correctSize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'correctSize', options.sender)
	}

	public correctSize_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"correctSize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public crowdsourcerGeneration_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"crowdsourcerGeneration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public fork = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'fork', options.sender)
	}
	
	public fork_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'fork', options.sender)
	}

	public fork_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public forkAndRedeem = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'forkAndRedeem', options.sender)
	}
	
	public forkAndRedeem_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'forkAndRedeem', options.sender)
	}

	public forkAndRedeem_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getCrowdsourcerGeneration_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getCrowdsourcerGeneration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutDistributionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayoutNumerators_ = async (options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutNumerators","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getRemainingToFill_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getRemainingToFill","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"internalType":"contract IReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getSize_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, market: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_crowdsourcerGeneration","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, market, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, market: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_crowdsourcerGeneration","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, market, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, market: string, size: TBigNumber, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, crowdsourcerGeneration: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_crowdsourcerGeneration","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, market, size, payoutDistributionHash, payoutNumerators, crowdsourcerGeneration], options.sender)
	}

	public isDisavowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public liquidateLosing = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'liquidateLosing', options.sender)
	}
	
	public liquidateLosing_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'liquidateLosing', options.sender)
	}

	public liquidateLosing_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public redeem = async (redeemer: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_redeemer","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [redeemer], 'redeem', options.sender)
	}
	
	public redeem_estimateGas = async (redeemer: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_redeemer","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [redeemer], 'redeem', options.sender)
	}

	public redeem_ = async (redeemer: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_redeemer","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [redeemer], options.sender)
		return <boolean>result[0]
	}

	public setSize = async (size: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setSize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [size], 'setSize', options.sender)
	}
	
	public setSize_estimateGas = async (size: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setSize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [size], 'setSize', options.sender)
	}

	public setSize_ = async (size: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_size","type":"uint256"}],"name":"setSize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [size], options.sender)
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public universe_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"universe","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class DisputeWindow<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public buy = async (attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [attotokens], 'buy', options.sender)
	}
	
	public buy_estimateGas = async (attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [attotokens], 'buy', options.sender)
	}

	public buy_ = async (attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"buy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [attotokens], options.sender)
		return <boolean>result[0]
	}

	public buyParticipationTokens_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"buyParticipationTokens","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public designatedReportNoShowsTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReportNoShowsTotal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public designatedReporterNoShowBondTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterNoShowBondTotal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public duration_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"duration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"internalType":"contract IReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getStartTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStartTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getWindowId_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWindowId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public incorrectDesignatedReportTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"incorrectDesignatedReportTotal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public initialReportBondTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"initialReportBondTotal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, universe: string, disputeWindowId: TBigNumber, participationTokensEnabled: boolean, duration: TBigNumber, startTime: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"},{"internalType":"bool","name":"_participationTokensEnabled","type":"bool"},{"internalType":"uint256","name":"_duration","type":"uint256"},{"internalType":"uint256","name":"_startTime","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe, disputeWindowId, participationTokensEnabled, duration, startTime], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, universe: string, disputeWindowId: TBigNumber, participationTokensEnabled: boolean, duration: TBigNumber, startTime: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"},{"internalType":"bool","name":"_participationTokensEnabled","type":"bool"},{"internalType":"uint256","name":"_duration","type":"uint256"},{"internalType":"uint256","name":"_startTime","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe, disputeWindowId, participationTokensEnabled, duration, startTime], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, universe: string, disputeWindowId: TBigNumber, participationTokensEnabled: boolean, duration: TBigNumber, startTime: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"},{"internalType":"bool","name":"_participationTokensEnabled","type":"bool"},{"internalType":"uint256","name":"_duration","type":"uint256"},{"internalType":"uint256","name":"_startTime","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, universe, disputeWindowId, participationTokensEnabled, duration, startTime], options.sender)
	}

	public invalidMarketsTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"invalidMarketsTotal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public isActive_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isOver_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isOver","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public onMarketFinalized = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"onMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'onMarketFinalized', options.sender)
	}
	
	public onMarketFinalized_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"onMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'onMarketFinalized', options.sender)
	}

	public onMarketFinalized_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"onMarketFinalized","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public participationTokensEnabled_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"participationTokensEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public redeem = async (account: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [account], 'redeem', options.sender)
	}
	
	public redeem_estimateGas = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [account], 'redeem', options.sender)
	}

	public redeem_ = async (account: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public trustedBuy = async (buyer: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_buyer","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [buyer, attotokens], 'trustedBuy', options.sender)
	}
	
	public trustedBuy_estimateGas = async (buyer: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_buyer","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [buyer, attotokens], 'trustedBuy', options.sender)
	}

	public trustedBuy_ = async (buyer: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_buyer","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedBuy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [buyer, attotokens], options.sender)
		return <boolean>result[0]
	}

	public universe_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"universe","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public validityBondTotal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"validityBondTotal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public windowId_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"windowId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}
}


export class InitialReporter<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public designatedReporterShowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"designatedReporterShowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public fork = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'fork', options.sender)
	}
	
	public fork_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'fork', options.sender)
	}

	public fork_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public forkAndRedeem = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'forkAndRedeem', options.sender)
	}
	
	public forkAndRedeem_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'forkAndRedeem', options.sender)
	}

	public forkAndRedeem_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"forkAndRedeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getDesignatedReporter_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReporter","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutDistributionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayoutNumerators_ = async (options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutNumerators","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getReportTimestamp_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"internalType":"contract IReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getSize_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public initialReporterWasCorrect_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"initialReporterWasCorrect","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, market: string, designatedReporter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, market, designatedReporter], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, market: string, designatedReporter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, market, designatedReporter], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, market: string, designatedReporter: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, market, designatedReporter], options.sender)
	}

	public isDisavowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isDisavowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public liquidateLosing = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'liquidateLosing', options.sender)
	}
	
	public liquidateLosing_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'liquidateLosing', options.sender)
	}

	public liquidateLosing_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"liquidateLosing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public migrateToNewUniverse = async (designatedReporter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"migrateToNewUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [designatedReporter], 'migrateToNewUniverse', options.sender)
	}
	
	public migrateToNewUniverse_estimateGas = async (designatedReporter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"migrateToNewUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [designatedReporter], 'migrateToNewUniverse', options.sender)
	}

	public migrateToNewUniverse_ = async (designatedReporter: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_designatedReporter","type":"address"}],"name":"migrateToNewUniverse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [designatedReporter], options.sender)
	}

	public redeem = async (arg0: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [arg0], 'redeem', options.sender)
	}
	
	public redeem_estimateGas = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [arg0], 'redeem', options.sender)
	}

	public redeem_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"redeem","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public report = async (reporter: string, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, initialReportStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_initialReportStake","type":"uint256"}],"name":"report","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, payoutDistributionHash, payoutNumerators, initialReportStake], 'report', options.sender)
	}
	
	public report_estimateGas = async (reporter: string, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, initialReportStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_initialReportStake","type":"uint256"}],"name":"report","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, payoutDistributionHash, payoutNumerators, initialReportStake], 'report', options.sender)
	}

	public report_ = async (reporter: string, payoutDistributionHash: string, payoutNumerators: Array<TBigNumber>, initialReportStake: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"},{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_initialReportStake","type":"uint256"}],"name":"report","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [reporter, payoutDistributionHash, payoutNumerators, initialReportStake], options.sender)
	}

	public returnRepFromDisavow = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"returnRepFromDisavow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'returnRepFromDisavow', options.sender)
	}
	
	public returnRepFromDisavow_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"returnRepFromDisavow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'returnRepFromDisavow', options.sender)
	}

	public returnRepFromDisavow_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"returnRepFromDisavow","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}
}


export class Market<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public affiliateFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"affiliateFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public contribute = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}],"name":"contribute","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, amount, description], 'contribute', options.sender)
	}
	
	public contribute_estimateGas = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}],"name":"contribute","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, amount, description], 'contribute', options.sender)
	}

	public contribute_ = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}],"name":"contribute","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, amount, description], options.sender)
		return <boolean>result[0]
	}

	public contributeToTentative = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}],"name":"contributeToTentative","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, amount, description], 'contributeToTentative', options.sender)
	}
	
	public contributeToTentative_estimateGas = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}],"name":"contributeToTentative","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, amount, description], 'contributeToTentative', options.sender)
	}

	public contributeToTentative_ = async (payoutNumerators: Array<TBigNumber>, amount: TBigNumber, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_description","type":"string"}],"name":"contributeToTentative","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, amount, description], options.sender)
		return <boolean>result[0]
	}

	public crowdsourcerGeneration_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"crowdsourcerGeneration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public crowdsourcers_ = async (arg0: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"crowdsourcers","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public deriveMarketCreatorFeeAmount_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deriveMarketCreatorFeeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <TBigNumber>result[0]
	}

	public derivePayoutDistributionHash_ = async (payoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"}],"name":"derivePayoutDistributionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators], options.sender)
		return <string>result[0]
	}

	public disavowCrowdsourcers = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowCrowdsourcers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'disavowCrowdsourcers', options.sender)
	}
	
	public disavowCrowdsourcers_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowCrowdsourcers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'disavowCrowdsourcers', options.sender)
	}

	public disavowCrowdsourcers_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"disavowCrowdsourcers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public doInitialReport = async (payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, description, additionalStake], 'doInitialReport', options.sender)
	}
	
	public doInitialReport_estimateGas = async (payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, description, additionalStake], 'doInitialReport', options.sender)
	}

	public doInitialReport_ = async (payoutNumerators: Array<TBigNumber>, description: string, additionalStake: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"uint256","name":"_additionalStake","type":"uint256"}],"name":"doInitialReport","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, description, additionalStake], options.sender)
		return <boolean>result[0]
	}

	public finalize = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finalize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'finalize', options.sender)
	}
	
	public finalize_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finalize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'finalize', options.sender)
	}

	public finalize_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finalize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getCrowdsourcer_ = async (payoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"}],"name":"getCrowdsourcer","outputs":[{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutDistributionHash], options.sender)
		return <string>result[0]
	}

	public getDesignatedReportingEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDesignatedReportingEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputePacingOn_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputePacingOn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getDisputeWindow_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getFinalizationTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getFinalizationTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getForkingMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkingMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getHighestNonTentativeParticipantStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getHighestNonTentativeParticipantStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialReporter_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialReporter","outputs":[{"internalType":"contract IInitialReporter","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMarketCreatorSettlementFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getMarketCreatorSettlementFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getNumParticipants_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumParticipants","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getNumTicks_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumTicks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getNumberOfOutcomes_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getNumberOfOutcomes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOpenInterest_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOpenInterest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getParticipantStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParticipantStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getStakeInOutcome_ = async (payoutDistributionHash: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_payoutDistributionHash","type":"bytes32"}],"name":"getStakeInOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [payoutDistributionHash], options.sender)
		return <TBigNumber>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getValidityBondAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getValidityBondAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningChildPayout_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getWinningChildPayout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWinningPayoutDistributionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getWinningPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getWinningPayoutNumerator","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningReportingParticipant_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWinningReportingParticipant","outputs":[{"internalType":"contract IReportingParticipant","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, creator: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, creator: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, universe: string, endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, creator: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, universe, endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, creator, numOutcomes, numTicks], options.sender)
	}

	public isContainerForReportingParticipant_ = async (shadyReportingParticipant: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IReportingParticipant","name":"_shadyReportingParticipant","type":"address"}],"name":"isContainerForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyReportingParticipant], options.sender)
		return <boolean>result[0]
	}

	public isFinalized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isFinalizedAsInvalid_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isFinalizedAsInvalid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isForkingMarket_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForkingMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public marketCreatorFeesAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"marketCreatorFeesAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public migrateThroughOneFork = async (payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"}],"name":"migrateThroughOneFork","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, description], 'migrateThroughOneFork', options.sender)
	}
	
	public migrateThroughOneFork_estimateGas = async (payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"}],"name":"migrateThroughOneFork","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, description], 'migrateThroughOneFork', options.sender)
	}

	public migrateThroughOneFork_ = async (payoutNumerators: Array<TBigNumber>, description: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"string","name":"_description","type":"string"}],"name":"migrateThroughOneFork","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, description], options.sender)
		return <boolean>result[0]
	}

	public participants_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"participants","outputs":[{"internalType":"contract IReportingParticipant","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public preemptiveDisputeCrowdsourcer_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"preemptiveDisputeCrowdsourcer","outputs":[{"internalType":"contract IDisputeCrowdsourcer","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public recordMarketCreatorFees = async (marketCreatorFees: TBigNumber, sourceAccount: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_marketCreatorFees","type":"uint256"},{"internalType":"address","name":"_sourceAccount","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"recordMarketCreatorFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [marketCreatorFees, sourceAccount, fingerprint], 'recordMarketCreatorFees', options.sender)
	}
	
	public recordMarketCreatorFees_estimateGas = async (marketCreatorFees: TBigNumber, sourceAccount: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_marketCreatorFees","type":"uint256"},{"internalType":"address","name":"_sourceAccount","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"recordMarketCreatorFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [marketCreatorFees, sourceAccount, fingerprint], 'recordMarketCreatorFees', options.sender)
	}

	public recordMarketCreatorFees_ = async (marketCreatorFees: TBigNumber, sourceAccount: string, fingerprint: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_marketCreatorFees","type":"uint256"},{"internalType":"address","name":"_sourceAccount","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"recordMarketCreatorFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [marketCreatorFees, sourceAccount, fingerprint], options.sender)
		return <boolean>result[0]
	}

	public repBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"repBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public repBondOwner_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"repBondOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public transferOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferOwnership', options.sender)
	}
	
	public transferOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferOwnership', options.sender)
	}

	public transferOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}

	public transferRepBondOwnership = async (newOwner: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferRepBondOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [newOwner], 'transferRepBondOwnership', options.sender)
	}
	
	public transferRepBondOwnership_estimateGas = async (newOwner: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferRepBondOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [newOwner], 'transferRepBondOwnership', options.sender)
	}

	public transferRepBondOwnership_ = async (newOwner: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferRepBondOwnership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [newOwner], options.sender)
		return <boolean>result[0]
	}

	public validityBondAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"validityBondAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public warpSync_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"warpSync","outputs":[{"internalType":"contract IWarpSync","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class OICash<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public buyCompleteSets = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'buyCompleteSets', options.sender)
	}
	
	public buyCompleteSets_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'buyCompleteSets', options.sender)
	}

	public buyCompleteSets_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <boolean>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public deposit = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'deposit', options.sender)
	}
	
	public deposit_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'deposit', options.sender)
	}

	public deposit_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public feesPaid_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"feesPaid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, universe: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, universe], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, universe: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, universe], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, universe: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, universe], options.sender)
	}

	public payFees = async (feeAmount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_feeAmount","type":"uint256"}],"name":"payFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [feeAmount], 'payFees', options.sender)
	}
	
	public payFees_estimateGas = async (feeAmount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_feeAmount","type":"uint256"}],"name":"payFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [feeAmount], 'payFees', options.sender)
	}

	public payFees_ = async (feeAmount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_feeAmount","type":"uint256"}],"name":"payFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [feeAmount], options.sender)
		return <boolean>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public universe_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"universe","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public withdraw = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'withdraw', options.sender)
	}

	public withdraw_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}
}


export class RepOracle<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public PERIOD_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public genesisInitialRepPriceinAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"genesisInitialRepPriceinAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getExchange = async (reputationToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"getExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reputationToken], 'getExchange', options.sender)
	}
	
	public getExchange_estimateGas = async (reputationToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"getExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reputationToken], 'getExchange', options.sender)
	}

	public getExchange_ = async (reputationToken: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"getExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reputationToken], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getLastUpdateTimestamp_ = async (reputationToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"getLastUpdateTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [reputationToken], options.sender)
		return <TBigNumber>result[0]
	}

	public getPrice_ = async (reputationToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"getPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [reputationToken], options.sender)
		return <TBigNumber>result[0]
	}

	public getPriceCumulativeLast_ = async (reputationToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"getPriceCumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [reputationToken], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur], options.sender)
	}

	public poke = async (reputationToken: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"poke","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reputationToken], 'poke', options.sender)
	}
	
	public poke_estimateGas = async (reputationToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"poke","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reputationToken], 'poke', options.sender)
	}

	public poke_ = async (reputationToken: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reputationToken","type":"address"}],"name":"poke","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reputationToken], options.sender)
		return <TBigNumber>result[0]
	}

	public uniswapFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"uniswapFactory","outputs":[{"internalType":"contract IUniswapV2Factory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class ReputationToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allowance_ = async (owner: string, spender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, spender], options.sender)
		return <TBigNumber>result[0]
	}

	public allowances_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, amount], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, amount], 'approve', options.sender)
	}

	public approve_ = async (spender: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, amount], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account], options.sender)
		return <TBigNumber>result[0]
	}

	public balances_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public burnForMarket = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToBurn], 'burnForMarket', options.sender)
	}
	
	public burnForMarket_estimateGas = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToBurn], 'burnForMarket', options.sender)
	}

	public burnForMarket_ = async (amountToBurn: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToBurn","type":"uint256"}],"name":"burnForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToBurn], options.sender)
		return <boolean>result[0]
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decreaseAllowance = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}
	
	public decreaseAllowance_estimateGas = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, subtractedValue], 'decreaseAllowance', options.sender)
	}

	public decreaseAllowance_ = async (spender: string, subtractedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, subtractedValue], options.sender)
		return <boolean>result[0]
	}

	public getLegacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getLegacyRepToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTotalMigrated_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalMigrated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalTheoreticalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTotalTheoreticalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public increaseAllowance = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}
	
	public increaseAllowance_estimateGas = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, addedValue], 'increaseAllowance', options.sender)
	}

	public increaseAllowance_ = async (spender: string, addedValue: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, addedValue], options.sender)
		return <boolean>result[0]
	}

	public legacyRepToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"legacyRepToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public migrateFromLegacyReputationToken = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}
	
	public migrateFromLegacyReputationToken_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'migrateFromLegacyReputationToken', options.sender)
	}

	public migrateFromLegacyReputationToken_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"migrateFromLegacyReputationToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public migrateIn = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}
	
	public migrateIn_estimateGas = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reporter, attotokens], 'migrateIn', options.sender)
	}

	public migrateIn_ = async (reporter: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_reporter","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reporter, attotokens], options.sender)
		return <boolean>result[0]
	}

	public migrateOutByPayout = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}
	
	public migrateOutByPayout_estimateGas = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [payoutNumerators, attotokens], 'migrateOutByPayout', options.sender)
	}

	public migrateOutByPayout_ = async (payoutNumerators: Array<TBigNumber>, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_payoutNumerators","type":"uint256[]"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"migrateOutByPayout","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [payoutNumerators, attotokens], options.sender)
		return <boolean>result[0]
	}

	public mintForReportingParticipant = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}
	
	public mintForReportingParticipant_estimateGas = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountMigrated], 'mintForReportingParticipant', options.sender)
	}

	public mintForReportingParticipant_ = async (amountMigrated: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountMigrated","type":"uint256"}],"name":"mintForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountMigrated], options.sender)
		return <boolean>result[0]
	}

	public mintForWarpSync = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToMint","type":"uint256"},{"internalType":"address","name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}
	
	public mintForWarpSync_estimateGas = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToMint","type":"uint256"},{"internalType":"address","name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountToMint, target], 'mintForWarpSync', options.sender)
	}

	public mintForWarpSync_ = async (amountToMint: TBigNumber, target: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amountToMint","type":"uint256"},{"internalType":"address","name":"_target","type":"address"}],"name":"mintForWarpSync","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountToMint, target], options.sender)
		return <boolean>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public parentUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"parentUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount], 'transfer', options.sender)
	}

	public transfer_ = async (recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, recipient, amount], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (sender: string, recipient: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, recipient, amount], options.sender)
		return <boolean>result[0]
	}

	public trustedDisputeWindowTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}
	
	public trustedDisputeWindowTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedDisputeWindowTransfer', options.sender)
	}

	public trustedDisputeWindowTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedDisputeWindowTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedMarketTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}
	
	public trustedMarketTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedMarketTransfer', options.sender)
	}

	public trustedMarketTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedMarketTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedReportingParticipantTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}
	
	public trustedReportingParticipantTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedReportingParticipantTransfer', options.sender)
	}

	public trustedReportingParticipantTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedReportingParticipantTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public trustedUniverseTransfer = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}
	
	public trustedUniverseTransfer_estimateGas = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [source, destination, attotokens], 'trustedUniverseTransfer', options.sender)
	}

	public trustedUniverseTransfer_ = async (source: string, destination: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_source","type":"address"},{"internalType":"address","name":"_destination","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"trustedUniverseTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [source, destination, attotokens], options.sender)
		return <boolean>result[0]
	}

	public warpSync_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"warpSync","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class ShareToken<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public _balances_ = async (arg0: TBigNumber, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"_balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public _operatorApprovals_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"_operatorApprovals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <boolean>result[0]
	}

	public _supplys_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_supplys","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public assertBalances_ = async (market: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"assertBalances","outputs":[],"payable":false,"stateMutability":"view","type":"function"}
		await this.localCall(abi, [market], options.sender)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (account: string, id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, id], options.sender)
		return <TBigNumber>result[0]
	}

	public balanceOfBatch_ = async (accounts: Array<string>, ids: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [accounts, ids], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public balanceOfMarketOutcome_ = async (market: string, outcome: TBigNumber, account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"address","name":"_account","type":"address"}],"name":"balanceOfMarketOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome, account], options.sender)
		return <TBigNumber>result[0]
	}

	public buyCompleteSets = async (market: string, account: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, account, amount], 'buyCompleteSets', options.sender)
	}
	
	public buyCompleteSets_estimateGas = async (market: string, account: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, account, amount], 'buyCompleteSets', options.sender)
	}

	public buyCompleteSets_ = async (market: string, account: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, account, amount], options.sender)
		return <boolean>result[0]
	}

	public buyCompleteSetsForTrade = async (market: string, amount: TBigNumber, longOutcome: TBigNumber, longRecipient: string, shortRecipient: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_longOutcome","type":"uint256"},{"internalType":"address","name":"_longRecipient","type":"address"},{"internalType":"address","name":"_shortRecipient","type":"address"}],"name":"buyCompleteSetsForTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount, longOutcome, longRecipient, shortRecipient], 'buyCompleteSetsForTrade', options.sender)
	}
	
	public buyCompleteSetsForTrade_estimateGas = async (market: string, amount: TBigNumber, longOutcome: TBigNumber, longRecipient: string, shortRecipient: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_longOutcome","type":"uint256"},{"internalType":"address","name":"_longRecipient","type":"address"},{"internalType":"address","name":"_shortRecipient","type":"address"}],"name":"buyCompleteSetsForTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount, longOutcome, longRecipient, shortRecipient], 'buyCompleteSetsForTrade', options.sender)
	}

	public buyCompleteSetsForTrade_ = async (market: string, amount: TBigNumber, longOutcome: TBigNumber, longRecipient: string, shortRecipient: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_longOutcome","type":"uint256"},{"internalType":"address","name":"_longRecipient","type":"address"},{"internalType":"address","name":"_shortRecipient","type":"address"}],"name":"buyCompleteSetsForTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount, longOutcome, longRecipient, shortRecipient], options.sender)
		return <boolean>result[0]
	}

	public calculateCreatorFee_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"calculateCreatorFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateProceeds_ = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numberOfShares","type":"uint256"}],"name":"calculateProceeds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome, numberOfShares], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateReportingFee = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'calculateReportingFee', options.sender)
	}
	
	public calculateReportingFee_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'calculateReportingFee', options.sender)
	}

	public calculateReportingFee_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"calculateReportingFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <TBigNumber>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public claimTradingProceeds = async (market: string, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimTradingProceeds","outputs":[{"internalType":"uint256[]","name":"_outcomeFees","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, shareHolder, fingerprint], 'claimTradingProceeds', options.sender)
	}
	
	public claimTradingProceeds_estimateGas = async (market: string, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimTradingProceeds","outputs":[{"internalType":"uint256[]","name":"_outcomeFees","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, shareHolder, fingerprint], 'claimTradingProceeds', options.sender)
	}

	public claimTradingProceeds_ = async (market: string, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimTradingProceeds","outputs":[{"internalType":"uint256[]","name":"_outcomeFees","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, shareHolder, fingerprint], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public divideUpWinnings = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"internalType":"uint256","name":"_proceeds","type":"uint256"},{"internalType":"uint256","name":"_shareHolderShare","type":"uint256"},{"internalType":"uint256","name":"_creatorShare","type":"uint256"},{"internalType":"uint256","name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, numberOfShares], 'divideUpWinnings', options.sender)
	}
	
	public divideUpWinnings_estimateGas = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"internalType":"uint256","name":"_proceeds","type":"uint256"},{"internalType":"uint256","name":"_shareHolderShare","type":"uint256"},{"internalType":"uint256","name":"_creatorShare","type":"uint256"},{"internalType":"uint256","name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, numberOfShares], 'divideUpWinnings', options.sender)
	}

	public divideUpWinnings_ = async (market: string, outcome: TBigNumber, numberOfShares: TBigNumber, options?: { sender?: string }): Promise<{_proceeds: TBigNumber, _shareHolderShare: TBigNumber, _creatorShare: TBigNumber, _reporterShare: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_numberOfShares","type":"uint256"}],"name":"divideUpWinnings","outputs":[{"internalType":"uint256","name":"_proceeds","type":"uint256"},{"internalType":"uint256","name":"_shareHolderShare","type":"uint256"},{"internalType":"uint256","name":"_creatorShare","type":"uint256"},{"internalType":"uint256","name":"_reporterShare","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, numberOfShares], options.sender)
		return <{_proceeds: TBigNumber, _shareHolderShare: TBigNumber, _creatorShare: TBigNumber, _reporterShare: TBigNumber}>result
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMarket_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <string>result[0]
	}

	public getOutcome_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <TBigNumber>result[0]
	}

	public getTokenId_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getTokenIds_ = async (market: string, outcomes: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256[]","name":"_outcomes","type":"uint256[]"}],"name":"getTokenIds","outputs":[{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [market, outcomes], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getTypeName_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTypeName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur], options.sender)
	}

	public initializeMarket = async (market: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initializeMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, numOutcomes, numTicks], 'initializeMarket', options.sender)
	}
	
	public initializeMarket_estimateGas = async (market: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initializeMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, numOutcomes, numTicks], 'initializeMarket', options.sender)
	}

	public initializeMarket_ = async (market: string, numOutcomes: TBigNumber, numTicks: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"uint256","name":"_numTicks","type":"uint256"}],"name":"initializeMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [market, numOutcomes, numTicks], options.sender)
	}

	public isApprovedForAll_ = async (account: string, operator: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, operator], options.sender)
		return <boolean>result[0]
	}

	public lowestBalanceOfMarketOutcomes_ = async (market: string, outcomes: Array<TBigNumber>, account: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256[]","name":"_outcomes","type":"uint256[]"},{"internalType":"address","name":"_account","type":"address"}],"name":"lowestBalanceOfMarketOutcomes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcomes, account], options.sender)
		return <TBigNumber>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public publicBuyCompleteSets = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'publicBuyCompleteSets', options.sender)
	}
	
	public publicBuyCompleteSets_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'publicBuyCompleteSets', options.sender)
	}

	public publicBuyCompleteSets_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicBuyCompleteSets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <boolean>result[0]
	}

	public publicSellCompleteSets = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, amount], 'publicSellCompleteSets', options.sender)
	}
	
	public publicSellCompleteSets_estimateGas = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, amount], 'publicSellCompleteSets', options.sender)
	}

	public publicSellCompleteSets_ = async (market: string, amount: TBigNumber, options?: { sender?: string }): Promise<{_creatorFee: TBigNumber, _reportingFee: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"publicSellCompleteSets","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, amount], options.sender)
		return <{_creatorFee: TBigNumber, _reportingFee: TBigNumber}>result
	}

	public safeBatchTransferFrom = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}
	
	public safeBatchTransferFrom_estimateGas = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}

	public safeBatchTransferFrom_ = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, ids, values, data], options.sender)
	}

	public safeTransferFrom = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}
	
	public safeTransferFrom_estimateGas = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}

	public safeTransferFrom_ = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, id, value, data], options.sender)
	}

	public sellCompleteSets = async (market: string, holder: string, recipient: string, amount: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_holder","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"sellCompleteSets","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, holder, recipient, amount, fingerprint], 'sellCompleteSets', options.sender)
	}
	
	public sellCompleteSets_estimateGas = async (market: string, holder: string, recipient: string, amount: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_holder","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"sellCompleteSets","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, holder, recipient, amount, fingerprint], 'sellCompleteSets', options.sender)
	}

	public sellCompleteSets_ = async (market: string, holder: string, recipient: string, amount: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<{_creatorFee: TBigNumber, _reportingFee: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_holder","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"sellCompleteSets","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, holder, recipient, amount, fingerprint], options.sender)
		return <{_creatorFee: TBigNumber, _reportingFee: TBigNumber}>result
	}

	public sellCompleteSetsForTrade = async (market: string, outcome: TBigNumber, amount: TBigNumber, shortParticipant: string, longParticipant: string, shortRecipient: string, longRecipient: string, price: TBigNumber, sourceAccount: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_shortParticipant","type":"address"},{"internalType":"address","name":"_longParticipant","type":"address"},{"internalType":"address","name":"_shortRecipient","type":"address"},{"internalType":"address","name":"_longRecipient","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"address","name":"_sourceAccount","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"sellCompleteSetsForTrade","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, amount, shortParticipant, longParticipant, shortRecipient, longRecipient, price, sourceAccount, fingerprint], 'sellCompleteSetsForTrade', options.sender)
	}
	
	public sellCompleteSetsForTrade_estimateGas = async (market: string, outcome: TBigNumber, amount: TBigNumber, shortParticipant: string, longParticipant: string, shortRecipient: string, longRecipient: string, price: TBigNumber, sourceAccount: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_shortParticipant","type":"address"},{"internalType":"address","name":"_longParticipant","type":"address"},{"internalType":"address","name":"_shortRecipient","type":"address"},{"internalType":"address","name":"_longRecipient","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"address","name":"_sourceAccount","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"sellCompleteSetsForTrade","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, amount, shortParticipant, longParticipant, shortRecipient, longRecipient, price, sourceAccount, fingerprint], 'sellCompleteSetsForTrade', options.sender)
	}

	public sellCompleteSetsForTrade_ = async (market: string, outcome: TBigNumber, amount: TBigNumber, shortParticipant: string, longParticipant: string, shortRecipient: string, longRecipient: string, price: TBigNumber, sourceAccount: string, fingerprint: string, options?: { sender?: string }): Promise<{_creatorFee: TBigNumber, _reportingFee: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_shortParticipant","type":"address"},{"internalType":"address","name":"_longParticipant","type":"address"},{"internalType":"address","name":"_shortRecipient","type":"address"},{"internalType":"address","name":"_longRecipient","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"address","name":"_sourceAccount","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"sellCompleteSetsForTrade","outputs":[{"internalType":"uint256","name":"_creatorFee","type":"uint256"},{"internalType":"uint256","name":"_reportingFee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, amount, shortParticipant, longParticipant, shortRecipient, longRecipient, price, sourceAccount, fingerprint], options.sender)
		return <{_creatorFee: TBigNumber, _reportingFee: TBigNumber}>result
	}

	public setApprovalForAll = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}
	
	public setApprovalForAll_estimateGas = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}

	public setApprovalForAll_ = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator, approved], options.sender)
	}

	public supportsInterface_ = async (interfaceId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [interfaceId], options.sender)
		return <boolean>result[0]
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [id], options.sender)
		return <TBigNumber>result[0]
	}

	public totalSupplyForMarketOutcome_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"totalSupplyForMarketOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public unpackTokenId_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<{_market: string, _outcome: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"unpackTokenId","outputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <{_market: string, _outcome: TBigNumber}>result
	}

	public unsafeBatchTransferFrom = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"unsafeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, ids, values], 'unsafeBatchTransferFrom', options.sender)
	}
	
	public unsafeBatchTransferFrom_estimateGas = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"unsafeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, ids, values], 'unsafeBatchTransferFrom', options.sender)
	}

	public unsafeBatchTransferFrom_ = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"unsafeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, ids, values], options.sender)
	}

	public unsafeTransferFrom = async (from: string, to: string, id: TBigNumber, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"unsafeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, id, value], 'unsafeTransferFrom', options.sender)
	}
	
	public unsafeTransferFrom_estimateGas = async (from: string, to: string, id: TBigNumber, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"unsafeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, id, value], 'unsafeTransferFrom', options.sender)
	}

	public unsafeTransferFrom_ = async (from: string, to: string, id: TBigNumber, value: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"unsafeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, id, value], options.sender)
	}
}


export class Universe<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public DEFAULT_NUM_OUTCOMES_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DEFAULT_NUM_OUTCOMES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public DEFAULT_NUM_TICKS_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DEFAULT_NUM_TICKS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public INITIAL_WINDOW_ID_BUFFER_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"INITIAL_WINDOW_ID_BUFFER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createCategoricalMarket = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, outcomes: Array<string>, extraInfo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, outcomes, extraInfo], 'createCategoricalMarket', options.sender)
	}
	
	public createCategoricalMarket_estimateGas = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, outcomes: Array<string>, extraInfo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, outcomes, extraInfo], 'createCategoricalMarket', options.sender)
	}

	public createCategoricalMarket_ = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, outcomes: Array<string>, extraInfo: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"bytes32[]","name":"_outcomes","type":"bytes32[]"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createCategoricalMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, outcomes, extraInfo], options.sender)
		return <string>result[0]
	}

	public createChildUniverse = async (parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentPayoutNumerators], 'createChildUniverse', options.sender)
	}
	
	public createChildUniverse_estimateGas = async (parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentPayoutNumerators], 'createChildUniverse', options.sender)
	}

	public createChildUniverse_ = async (parentPayoutNumerators: Array<TBigNumber>, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_parentPayoutNumerators","type":"uint256[]"}],"name":"createChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentPayoutNumerators], options.sender)
		return <string>result[0]
	}

	public createScalarMarket = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, prices: Array<TBigNumber>, numTicks: TBigNumber, extraInfo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"int256[]","name":"_prices","type":"int256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, prices, numTicks, extraInfo], 'createScalarMarket', options.sender)
	}
	
	public createScalarMarket_estimateGas = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, prices: Array<TBigNumber>, numTicks: TBigNumber, extraInfo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"int256[]","name":"_prices","type":"int256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, prices, numTicks, extraInfo], 'createScalarMarket', options.sender)
	}

	public createScalarMarket_ = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, prices: Array<TBigNumber>, numTicks: TBigNumber, extraInfo: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"int256[]","name":"_prices","type":"int256[]"},{"internalType":"uint256","name":"_numTicks","type":"uint256"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createScalarMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, prices, numTicks, extraInfo], options.sender)
		return <string>result[0]
	}

	public createYesNoMarket = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, extraInfo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, extraInfo], 'createYesNoMarket', options.sender)
	}
	
	public createYesNoMarket_estimateGas = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, extraInfo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, extraInfo], 'createYesNoMarket', options.sender)
	}

	public createYesNoMarket_ = async (endTime: TBigNumber, feePerCashInAttoCash: TBigNumber, affiliateValidator: string, affiliateFeeDivisor: TBigNumber, designatedReporterAddress: string, extraInfo: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_endTime","type":"uint256"},{"internalType":"uint256","name":"_feePerCashInAttoCash","type":"uint256"},{"internalType":"contract IAffiliateValidator","name":"_affiliateValidator","type":"address"},{"internalType":"uint256","name":"_affiliateFeeDivisor","type":"uint256"},{"internalType":"address","name":"_designatedReporterAddress","type":"address"},{"internalType":"string","name":"_extraInfo","type":"string"}],"name":"createYesNoMarket","outputs":[{"internalType":"contract IMarket","name":"_newMarket","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [endTime, feePerCashInAttoCash, affiliateValidator, affiliateFeeDivisor, designatedReporterAddress, extraInfo], options.sender)
		return <string>result[0]
	}

	public creationTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"creationTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public decrementOpenInterest = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'decrementOpenInterest', options.sender)
	}
	
	public decrementOpenInterest_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'decrementOpenInterest', options.sender)
	}

	public decrementOpenInterest_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"decrementOpenInterest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public decrementOpenInterestFromMarket = async (market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"decrementOpenInterestFromMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market], 'decrementOpenInterestFromMarket', options.sender)
	}
	
	public decrementOpenInterestFromMarket_estimateGas = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"decrementOpenInterestFromMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market], 'decrementOpenInterestFromMarket', options.sender)
	}

	public decrementOpenInterestFromMarket_ = async (market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"decrementOpenInterestFromMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <boolean>result[0]
	}

	public deposit = async (sender: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_market","type":"address"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [sender, amount, market], 'deposit', options.sender)
	}
	
	public deposit_estimateGas = async (sender: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_market","type":"address"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [sender, amount, market], 'deposit', options.sender)
	}

	public deposit_ = async (sender: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_market","type":"address"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [sender, amount, market], options.sender)
		return <boolean>result[0]
	}

	public designatedReportNoShowBondInAttoRep_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"designatedReportNoShowBondInAttoRep","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public designatedReportStakeInAttoRep_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"designatedReportStakeInAttoRep","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public disputeWindowFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"disputeWindowFactory","outputs":[{"internalType":"contract IDisputeWindowFactory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public disputeWindows_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"disputeWindows","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public fork = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'fork', options.sender)
	}
	
	public fork_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'fork', options.sender)
	}

	public fork_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"fork","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public formulas_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"formulas","outputs":[{"internalType":"contract IFormulas","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getChildUniverse_ = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"getChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [parentPayoutDistributionHash], options.sender)
		return <string>result[0]
	}

	public getCurrentDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getCurrentDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getDisputeRoundDurationInSeconds_ = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getDisputeRoundDurationInSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputeThresholdForDisputePacing_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeThresholdForDisputePacing","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputeThresholdForFork_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getDisputeThresholdForFork","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputeWindow_ = async (disputeWindowId: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_disputeWindowId","type":"uint256"}],"name":"getDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [disputeWindowId], options.sender)
		return <string>result[0]
	}

	public getDisputeWindowByTimestamp_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getDisputeWindowByTimestamp","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <string>result[0]
	}

	public getDisputeWindowId_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getDisputeWindowId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <TBigNumber>result[0]
	}

	public getDisputeWindowStartTimeAndDuration_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<{_startTime: TBigNumber, _duration: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getDisputeWindowStartTimeAndDuration","outputs":[{"internalType":"uint256","name":"_startTime","type":"uint256"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <{_startTime: TBigNumber, _duration: TBigNumber}>result
	}

	public getForkEndTime_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getForkReputationGoal_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkReputationGoal","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getForkingMarket_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getForkingMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialReportMinValue_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialReportMinValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOpenInterestInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getOpenInterestInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheDesignatedReportNoShowBond = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheDesignatedReportNoShowBond', options.sender)
	}
	
	public getOrCacheDesignatedReportNoShowBond_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheDesignatedReportNoShowBond', options.sender)
	}

	public getOrCacheDesignatedReportNoShowBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportNoShowBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheDesignatedReportStake = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheDesignatedReportStake', options.sender)
	}
	
	public getOrCacheDesignatedReportStake_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheDesignatedReportStake', options.sender)
	}

	public getOrCacheDesignatedReportStake_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheDesignatedReportStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheMarketRepBond = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketRepBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheMarketRepBond', options.sender)
	}
	
	public getOrCacheMarketRepBond_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketRepBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheMarketRepBond', options.sender)
	}

	public getOrCacheMarketRepBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheMarketRepBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheReportingFeeDivisor = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheReportingFeeDivisor', options.sender)
	}
	
	public getOrCacheReportingFeeDivisor_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheReportingFeeDivisor', options.sender)
	}

	public getOrCacheReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheReportingFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCacheValidityBond = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'getOrCacheValidityBond', options.sender)
	}
	
	public getOrCacheValidityBond_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'getOrCacheValidityBond', options.sender)
	}

	public getOrCacheValidityBond_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"getOrCacheValidityBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrCreateCurrentDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateCurrentDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreateCurrentDisputeWindow', options.sender)
	}
	
	public getOrCreateCurrentDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateCurrentDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreateCurrentDisputeWindow', options.sender)
	}

	public getOrCreateCurrentDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateCurrentDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getOrCreateDisputeWindowByTimestamp = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateDisputeWindowByTimestamp","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [timestamp, initial], 'getOrCreateDisputeWindowByTimestamp', options.sender)
	}
	
	public getOrCreateDisputeWindowByTimestamp_estimateGas = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateDisputeWindowByTimestamp","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [timestamp, initial], 'getOrCreateDisputeWindowByTimestamp', options.sender)
	}

	public getOrCreateDisputeWindowByTimestamp_ = async (timestamp: TBigNumber, initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_timestamp","type":"uint256"},{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateDisputeWindowByTimestamp","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [timestamp, initial], options.sender)
		return <string>result[0]
	}

	public getOrCreateNextDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateNextDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreateNextDisputeWindow', options.sender)
	}
	
	public getOrCreateNextDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateNextDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreateNextDisputeWindow', options.sender)
	}

	public getOrCreateNextDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreateNextDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getOrCreatePreviousDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreatePreviousDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreatePreviousDisputeWindow', options.sender)
	}
	
	public getOrCreatePreviousDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreatePreviousDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreatePreviousDisputeWindow', options.sender)
	}

	public getOrCreatePreviousDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreatePreviousDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getOrCreatePreviousPreviousDisputeWindow = async (initial: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreatePreviousPreviousDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [initial], 'getOrCreatePreviousPreviousDisputeWindow', options.sender)
	}
	
	public getOrCreatePreviousPreviousDisputeWindow_estimateGas = async (initial: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreatePreviousPreviousDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [initial], 'getOrCreatePreviousPreviousDisputeWindow', options.sender)
	}

	public getOrCreatePreviousPreviousDisputeWindow_ = async (initial: boolean, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bool","name":"_initial","type":"bool"}],"name":"getOrCreatePreviousPreviousDisputeWindow","outputs":[{"internalType":"contract IDisputeWindow","name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [initial], options.sender)
		return <string>result[0]
	}

	public getParentPayoutDistributionHash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParentPayoutDistributionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getParentUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getParentUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getPayoutNumerator","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getPayoutNumerators_ = async (options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getPayoutNumerators","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReportingFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReputationToken","outputs":[{"internalType":"contract IV2ReputationToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getTargetRepMarketCapInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTargetRepMarketCapInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningChildPayoutNumerator_ = async (outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getWinningChildPayoutNumerator","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getWinningChildUniverse_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getWinningChildUniverse","outputs":[{"internalType":"contract IUniverse","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public incrementOpenInterest = async (amount: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount], 'incrementOpenInterest', options.sender)
	}
	
	public incrementOpenInterest_estimateGas = async (amount: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount], 'incrementOpenInterest', options.sender)
	}

	public incrementOpenInterest_ = async (amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"incrementOpenInterest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amount], options.sender)
		return <boolean>result[0]
	}

	public isContainerForDisputeWindow_ = async (shadyDisputeWindow: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IDisputeWindow","name":"_shadyDisputeWindow","type":"address"}],"name":"isContainerForDisputeWindow","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyDisputeWindow], options.sender)
		return <boolean>result[0]
	}

	public isContainerForMarket_ = async (shadyMarket: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_shadyMarket","type":"address"}],"name":"isContainerForMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyMarket], options.sender)
		return <boolean>result[0]
	}

	public isContainerForReportingParticipant_ = async (shadyReportingParticipant: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IReportingParticipant","name":"_shadyReportingParticipant","type":"address"}],"name":"isContainerForReportingParticipant","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyReportingParticipant], options.sender)
		return <boolean>result[0]
	}

	public isForking_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForking","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isForkingMarket_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"isForkingMarket","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public isOpenInterestCash_ = async (address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isOpenInterestCash","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [address], options.sender)
		return <boolean>result[0]
	}

	public isParentOf_ = async (shadyChild: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IUniverse","name":"_shadyChild","type":"address"}],"name":"isParentOf","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [shadyChild], options.sender)
		return <boolean>result[0]
	}

	public marketBalance_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"marketBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public marketFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"marketFactory","outputs":[{"internalType":"contract IMarketFactory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public migrateMarketIn = async (market: string, cashBalance: TBigNumber, marketOI: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_cashBalance","type":"uint256"},{"internalType":"uint256","name":"_marketOI","type":"uint256"}],"name":"migrateMarketIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, cashBalance, marketOI], 'migrateMarketIn', options.sender)
	}
	
	public migrateMarketIn_estimateGas = async (market: string, cashBalance: TBigNumber, marketOI: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_cashBalance","type":"uint256"},{"internalType":"uint256","name":"_marketOI","type":"uint256"}],"name":"migrateMarketIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, cashBalance, marketOI], 'migrateMarketIn', options.sender)
	}

	public migrateMarketIn_ = async (market: string, cashBalance: TBigNumber, marketOI: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_cashBalance","type":"uint256"},{"internalType":"uint256","name":"_marketOI","type":"uint256"}],"name":"migrateMarketIn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, cashBalance, marketOI], options.sender)
		return <boolean>result[0]
	}

	public migrateMarketOut = async (destinationUniverse: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_destinationUniverse","type":"address"}],"name":"migrateMarketOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [destinationUniverse], 'migrateMarketOut', options.sender)
	}
	
	public migrateMarketOut_estimateGas = async (destinationUniverse: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_destinationUniverse","type":"address"}],"name":"migrateMarketOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [destinationUniverse], 'migrateMarketOut', options.sender)
	}

	public migrateMarketOut_ = async (destinationUniverse: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_destinationUniverse","type":"address"}],"name":"migrateMarketOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [destinationUniverse], options.sender)
		return <boolean>result[0]
	}

	public openInterestCash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"openInterestCash","outputs":[{"internalType":"contract IOICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public payoutNumerators_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"payoutNumerators","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public pokeRepMarketCapInAttoCash = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pokeRepMarketCapInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'pokeRepMarketCapInAttoCash', options.sender)
	}
	
	public pokeRepMarketCapInAttoCash_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pokeRepMarketCapInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'pokeRepMarketCapInAttoCash', options.sender)
	}

	public pokeRepMarketCapInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"pokeRepMarketCapInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public previousDesignatedReportNoShowBondInAttoRep_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousDesignatedReportNoShowBondInAttoRep","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public previousDesignatedReportStakeInAttoRep_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousDesignatedReportStakeInAttoRep","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public previousReportingFeeDivisor_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousReportingFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public previousValidityBondInAttoCash_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"previousValidityBondInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public repOracle_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"repOracle","outputs":[{"internalType":"contract IRepOracle","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public runPeriodicals = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"runPeriodicals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'runPeriodicals', options.sender)
	}
	
	public runPeriodicals_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"runPeriodicals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'runPeriodicals', options.sender)
	}

	public runPeriodicals_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"runPeriodicals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public shareSettlementFeeDivisor_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"shareSettlementFeeDivisor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalBalance_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public updateForkValues = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateForkValues","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'updateForkValues', options.sender)
	}
	
	public updateForkValues_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateForkValues","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'updateForkValues', options.sender)
	}

	public updateForkValues_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"updateForkValues","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public updateTentativeWinningChildUniverse = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningChildUniverse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [parentPayoutDistributionHash], 'updateTentativeWinningChildUniverse', options.sender)
	}
	
	public updateTentativeWinningChildUniverse_estimateGas = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningChildUniverse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [parentPayoutDistributionHash], 'updateTentativeWinningChildUniverse', options.sender)
	}

	public updateTentativeWinningChildUniverse_ = async (parentPayoutDistributionHash: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_parentPayoutDistributionHash","type":"bytes32"}],"name":"updateTentativeWinningChildUniverse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [parentPayoutDistributionHash], options.sender)
		return <boolean>result[0]
	}

	public validityBondInAttoCash_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"validityBondInAttoCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public withdraw = async (recipient: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_market","type":"address"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [recipient, amount, market], 'withdraw', options.sender)
	}
	
	public withdraw_estimateGas = async (recipient: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_market","type":"address"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [recipient, amount, market], 'withdraw', options.sender)
	}

	public withdraw_ = async (recipient: string, amount: TBigNumber, market: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_market","type":"address"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [recipient, amount, market], options.sender)
		return <boolean>result[0]
	}
}


export class AugurTrading<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public claimMarketsProceeds = async (markets: Array<string>, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket[]","name":"_markets","type":"address[]"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimMarketsProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [markets, shareHolder, fingerprint], 'claimMarketsProceeds', options.sender)
	}
	
	public claimMarketsProceeds_estimateGas = async (markets: Array<string>, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket[]","name":"_markets","type":"address[]"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimMarketsProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [markets, shareHolder, fingerprint], 'claimMarketsProceeds', options.sender)
	}

	public claimMarketsProceeds_ = async (markets: Array<string>, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket[]","name":"_markets","type":"address[]"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimMarketsProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [markets, shareHolder, fingerprint], options.sender)
		return <boolean>result[0]
	}

	public claimTradingProceeds = async (market: string, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimTradingProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, shareHolder, fingerprint], 'claimTradingProceeds', options.sender)
	}
	
	public claimTradingProceeds_estimateGas = async (market: string, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimTradingProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, shareHolder, fingerprint], 'claimTradingProceeds', options.sender)
	}

	public claimTradingProceeds_ = async (market: string, shareHolder: string, fingerprint: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_shareHolder","type":"address"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"claimTradingProceeds","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, shareHolder, fingerprint], options.sender)
		return <boolean>result[0]
	}

	public doApprovals = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"doApprovals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'doApprovals', options.sender)
	}
	
	public doApprovals_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"doApprovals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'doApprovals', options.sender)
	}

	public doApprovals_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"doApprovals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public finishDeployment = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'finishDeployment', options.sender)
	}
	
	public finishDeployment_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'finishDeployment', options.sender)
	}

	public finishDeployment_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"finishDeployment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public logMarketVolumeChanged = async (universe: string, market: string, volume: TBigNumber, outcomeVolumes: Array<TBigNumber>, totalTrades: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_volume","type":"uint256"},{"internalType":"uint256[]","name":"_outcomeVolumes","type":"uint256[]"},{"internalType":"uint256","name":"_totalTrades","type":"uint256"}],"name":"logMarketVolumeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, volume, outcomeVolumes, totalTrades], 'logMarketVolumeChanged', options.sender)
	}
	
	public logMarketVolumeChanged_estimateGas = async (universe: string, market: string, volume: TBigNumber, outcomeVolumes: Array<TBigNumber>, totalTrades: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_volume","type":"uint256"},{"internalType":"uint256[]","name":"_outcomeVolumes","type":"uint256[]"},{"internalType":"uint256","name":"_totalTrades","type":"uint256"}],"name":"logMarketVolumeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, volume, outcomeVolumes, totalTrades], 'logMarketVolumeChanged', options.sender)
	}

	public logMarketVolumeChanged_ = async (universe: string, market: string, volume: TBigNumber, outcomeVolumes: Array<TBigNumber>, totalTrades: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_volume","type":"uint256"},{"internalType":"uint256[]","name":"_outcomeVolumes","type":"uint256[]"},{"internalType":"uint256","name":"_totalTrades","type":"uint256"}],"name":"logMarketVolumeChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, volume, outcomeVolumes, totalTrades], options.sender)
		return <boolean>result[0]
	}

	public logOrderCanceled = async (universe: string, market: string, creator: string, tokenRefund: TBigNumber, sharesRefund: TBigNumber, orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_tokenRefund","type":"uint256"},{"internalType":"uint256","name":"_sharesRefund","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"logOrderCanceled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, creator, tokenRefund, sharesRefund, orderId], 'logOrderCanceled', options.sender)
	}
	
	public logOrderCanceled_estimateGas = async (universe: string, market: string, creator: string, tokenRefund: TBigNumber, sharesRefund: TBigNumber, orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_tokenRefund","type":"uint256"},{"internalType":"uint256","name":"_sharesRefund","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"logOrderCanceled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, creator, tokenRefund, sharesRefund, orderId], 'logOrderCanceled', options.sender)
	}

	public logOrderCanceled_ = async (universe: string, market: string, creator: string, tokenRefund: TBigNumber, sharesRefund: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_tokenRefund","type":"uint256"},{"internalType":"uint256","name":"_sharesRefund","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"logOrderCanceled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, creator, tokenRefund, sharesRefund, orderId], options.sender)
		return <boolean>result[0]
	}

	public logOrderCreated = async (universe: string, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, orderId, tradeGroupId], 'logOrderCreated', options.sender)
	}
	
	public logOrderCreated_estimateGas = async (universe: string, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, orderId, tradeGroupId], 'logOrderCreated', options.sender)
	}

	public logOrderCreated_ = async (universe: string, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, orderId, tradeGroupId], options.sender)
		return <boolean>result[0]
	}

	public logOrderFilled = async (universe: string, creator: string, filler: string, price: TBigNumber, fees: TBigNumber, amountFilled: TBigNumber, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_filler","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"},{"internalType":"uint256","name":"_amountFilled","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderFilled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, creator, filler, price, fees, amountFilled, orderId, tradeGroupId], 'logOrderFilled', options.sender)
	}
	
	public logOrderFilled_estimateGas = async (universe: string, creator: string, filler: string, price: TBigNumber, fees: TBigNumber, amountFilled: TBigNumber, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_filler","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"},{"internalType":"uint256","name":"_amountFilled","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderFilled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, creator, filler, price, fees, amountFilled, orderId, tradeGroupId], 'logOrderFilled', options.sender)
	}

	public logOrderFilled_ = async (universe: string, creator: string, filler: string, price: TBigNumber, fees: TBigNumber, amountFilled: TBigNumber, orderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"address","name":"_filler","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"},{"internalType":"uint256","name":"_amountFilled","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"logOrderFilled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, creator, filler, price, fees, amountFilled, orderId, tradeGroupId], options.sender)
		return <boolean>result[0]
	}

	public logProfitLossChanged = async (market: string, account: string, outcome: TBigNumber, netPosition: TBigNumber, avgPrice: TBigNumber, realizedProfit: TBigNumber, frozenFunds: TBigNumber, realizedCost: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_netPosition","type":"int256"},{"internalType":"uint256","name":"_avgPrice","type":"uint256"},{"internalType":"int256","name":"_realizedProfit","type":"int256"},{"internalType":"int256","name":"_frozenFunds","type":"int256"},{"internalType":"int256","name":"_realizedCost","type":"int256"}],"name":"logProfitLossChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, account, outcome, netPosition, avgPrice, realizedProfit, frozenFunds, realizedCost], 'logProfitLossChanged', options.sender)
	}
	
	public logProfitLossChanged_estimateGas = async (market: string, account: string, outcome: TBigNumber, netPosition: TBigNumber, avgPrice: TBigNumber, realizedProfit: TBigNumber, frozenFunds: TBigNumber, realizedCost: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_netPosition","type":"int256"},{"internalType":"uint256","name":"_avgPrice","type":"uint256"},{"internalType":"int256","name":"_realizedProfit","type":"int256"},{"internalType":"int256","name":"_frozenFunds","type":"int256"},{"internalType":"int256","name":"_realizedCost","type":"int256"}],"name":"logProfitLossChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, account, outcome, netPosition, avgPrice, realizedProfit, frozenFunds, realizedCost], 'logProfitLossChanged', options.sender)
	}

	public logProfitLossChanged_ = async (market: string, account: string, outcome: TBigNumber, netPosition: TBigNumber, avgPrice: TBigNumber, realizedProfit: TBigNumber, frozenFunds: TBigNumber, realizedCost: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_netPosition","type":"int256"},{"internalType":"uint256","name":"_avgPrice","type":"uint256"},{"internalType":"int256","name":"_realizedProfit","type":"int256"},{"internalType":"int256","name":"_frozenFunds","type":"int256"},{"internalType":"int256","name":"_realizedCost","type":"int256"}],"name":"logProfitLossChanged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome, netPosition, avgPrice, realizedProfit, frozenFunds, realizedCost], options.sender)
		return <boolean>result[0]
	}

	public logZeroXOrderCanceled = async (universe: string, market: string, account: string, outcome: TBigNumber, price: TBigNumber, amount: TBigNumber, type: TBigNumber, orderHash: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint8","name":"_type","type":"uint8"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"}],"name":"logZeroXOrderCanceled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, outcome, price, amount, type, orderHash], 'logZeroXOrderCanceled', options.sender)
	}
	
	public logZeroXOrderCanceled_estimateGas = async (universe: string, market: string, account: string, outcome: TBigNumber, price: TBigNumber, amount: TBigNumber, type: TBigNumber, orderHash: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint8","name":"_type","type":"uint8"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"}],"name":"logZeroXOrderCanceled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, outcome, price, amount, type, orderHash], 'logZeroXOrderCanceled', options.sender)
	}

	public logZeroXOrderCanceled_ = async (universe: string, market: string, account: string, outcome: TBigNumber, price: TBigNumber, amount: TBigNumber, type: TBigNumber, orderHash: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_universe","type":"address"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint8","name":"_type","type":"uint8"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"}],"name":"logZeroXOrderCanceled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [universe, market, account, outcome, price, amount, type, orderHash], options.sender)
	}

	public logZeroXOrderFilled = async (universe: string, market: string, orderHash: string, tradeGroupId: string, orderType: TBigNumber, addressData: Array<string>, uint256Data: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint8","name":"_orderType","type":"uint8"},{"internalType":"address[]","name":"_addressData","type":"address[]"},{"internalType":"uint256[]","name":"_uint256Data","type":"uint256[]"}],"name":"logZeroXOrderFilled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, orderHash, tradeGroupId, orderType, addressData, uint256Data], 'logZeroXOrderFilled', options.sender)
	}
	
	public logZeroXOrderFilled_estimateGas = async (universe: string, market: string, orderHash: string, tradeGroupId: string, orderType: TBigNumber, addressData: Array<string>, uint256Data: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint8","name":"_orderType","type":"uint8"},{"internalType":"address[]","name":"_addressData","type":"address[]"},{"internalType":"uint256[]","name":"_uint256Data","type":"uint256[]"}],"name":"logZeroXOrderFilled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, orderHash, tradeGroupId, orderType, addressData, uint256Data], 'logZeroXOrderFilled', options.sender)
	}

	public logZeroXOrderFilled_ = async (universe: string, market: string, orderHash: string, tradeGroupId: string, orderType: TBigNumber, addressData: Array<string>, uint256Data: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint8","name":"_orderType","type":"uint8"},{"internalType":"address[]","name":"_addressData","type":"address[]"},{"internalType":"uint256[]","name":"_uint256Data","type":"uint256[]"}],"name":"logZeroXOrderFilled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, orderHash, tradeGroupId, orderType, addressData, uint256Data], options.sender)
		return <boolean>result[0]
	}

	public lookup_ = async (key: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"lookup","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [key], options.sender)
		return <string>result[0]
	}

	public registerContract = async (key: string, address: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [key, address], 'registerContract', options.sender)
	}
	
	public registerContract_estimateGas = async (key: string, address: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [key, address], 'registerContract', options.sender)
	}

	public registerContract_ = async (key: string, address: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_address","type":"address"}],"name":"registerContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [key, address], options.sender)
		return <boolean>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public trustedSender_ = async (arg0: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"trustedSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <boolean>result[0]
	}

	public uploader_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"uploader","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class CancelOrder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder = async (orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"cancelOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId], 'cancelOrder', options.sender)
	}
	
	public cancelOrder_estimateGas = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"cancelOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId], 'cancelOrder', options.sender)
	}

	public cancelOrder_ = async (orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"cancelOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <boolean>result[0]
	}

	public cancelOrders = async (orderIds: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32[]","name":"_orderIds","type":"bytes32[]"}],"name":"cancelOrders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderIds], 'cancelOrders', options.sender)
	}
	
	public cancelOrders_estimateGas = async (orderIds: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32[]","name":"_orderIds","type":"bytes32[]"}],"name":"cancelOrders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderIds], 'cancelOrders', options.sender)
	}

	public cancelOrders_ = async (orderIds: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32[]","name":"_orderIds","type":"bytes32[]"}],"name":"cancelOrders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderIds], options.sender)
		return <boolean>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"internalType":"contract IOrders","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"internalType":"contract IProfitLoss","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class CreateOrder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder = async (creator: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_creator","type":"address"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [creator, type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId], 'createOrder', options.sender)
	}
	
	public createOrder_estimateGas = async (creator: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_creator","type":"address"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [creator, type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId], 'createOrder', options.sender)
	}

	public createOrder_ = async (creator: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_creator","type":"address"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [creator, type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"internalType":"contract IOrders","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"internalType":"contract IProfitLoss","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public publicCreateOrder = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"publicCreateOrder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId], 'publicCreateOrder', options.sender)
	}
	
	public publicCreateOrder_estimateGas = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"publicCreateOrder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId], 'publicCreateOrder', options.sender)
	}

	public publicCreateOrder_ = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"publicCreateOrder","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, attoshares, price, market, outcome, betterOrderId, worseOrderId, tradeGroupId], options.sender)
		return <string>result[0]
	}

	public publicCreateOrders = async (outcomes: Array<TBigNumber>, types: Array<TBigNumber>, attoshareAmounts: Array<TBigNumber>, prices: Array<TBigNumber>, market: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_outcomes","type":"uint256[]"},{"internalType":"enum Order.Types[]","name":"_types","type":"uint8[]"},{"internalType":"uint256[]","name":"_attoshareAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"_prices","type":"uint256[]"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"publicCreateOrders","outputs":[{"internalType":"bytes32[]","name":"_orders","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [outcomes, types, attoshareAmounts, prices, market, tradeGroupId], 'publicCreateOrders', options.sender)
	}
	
	public publicCreateOrders_estimateGas = async (outcomes: Array<TBigNumber>, types: Array<TBigNumber>, attoshareAmounts: Array<TBigNumber>, prices: Array<TBigNumber>, market: string, tradeGroupId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_outcomes","type":"uint256[]"},{"internalType":"enum Order.Types[]","name":"_types","type":"uint8[]"},{"internalType":"uint256[]","name":"_attoshareAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"_prices","type":"uint256[]"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"publicCreateOrders","outputs":[{"internalType":"bytes32[]","name":"_orders","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [outcomes, types, attoshareAmounts, prices, market, tradeGroupId], 'publicCreateOrders', options.sender)
	}

	public publicCreateOrders_ = async (outcomes: Array<TBigNumber>, types: Array<TBigNumber>, attoshareAmounts: Array<TBigNumber>, prices: Array<TBigNumber>, market: string, tradeGroupId: string, options?: { sender?: string }): Promise<Array<string>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_outcomes","type":"uint256[]"},{"internalType":"enum Order.Types[]","name":"_types","type":"uint8[]"},{"internalType":"uint256[]","name":"_attoshareAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"_prices","type":"uint256[]"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"}],"name":"publicCreateOrders","outputs":[{"internalType":"bytes32[]","name":"_orders","type":"bytes32[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [outcomes, types, attoshareAmounts, prices, market, tradeGroupId], options.sender)
		return <Array<string>>result[0]
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class FillOrder<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder = async (filler: string, orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_filler","type":"address"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_amountFillerWants","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"fillOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [filler, orderId, amountFillerWants, tradeGroupId, fingerprint], 'fillOrder', options.sender)
	}
	
	public fillOrder_estimateGas = async (filler: string, orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_filler","type":"address"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_amountFillerWants","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"fillOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [filler, orderId, amountFillerWants, tradeGroupId, fingerprint], 'fillOrder', options.sender)
	}

	public fillOrder_ = async (filler: string, orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_filler","type":"address"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_amountFillerWants","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"fillOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [filler, orderId, amountFillerWants, tradeGroupId, fingerprint], options.sender)
		return <TBigNumber>result[0]
	}

	public fillZeroXOrder = async (market: string, outcome: TBigNumber, price: TBigNumber, orderType: TBigNumber, creator: string, amount: TBigNumber, fingerprint: string, tradeGroupId: string, filler: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"enum Order.Types","name":"_orderType","type":"uint8"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"address","name":"_filler","type":"address"}],"name":"fillZeroXOrder","outputs":[{"internalType":"uint256","name":"_amountRemaining","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, price, orderType, creator, amount, fingerprint, tradeGroupId, filler], 'fillZeroXOrder', options.sender)
	}
	
	public fillZeroXOrder_estimateGas = async (market: string, outcome: TBigNumber, price: TBigNumber, orderType: TBigNumber, creator: string, amount: TBigNumber, fingerprint: string, tradeGroupId: string, filler: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"enum Order.Types","name":"_orderType","type":"uint8"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"address","name":"_filler","type":"address"}],"name":"fillZeroXOrder","outputs":[{"internalType":"uint256","name":"_amountRemaining","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, price, orderType, creator, amount, fingerprint, tradeGroupId, filler], 'fillZeroXOrder', options.sender)
	}

	public fillZeroXOrder_ = async (market: string, outcome: TBigNumber, price: TBigNumber, orderType: TBigNumber, creator: string, amount: TBigNumber, fingerprint: string, tradeGroupId: string, filler: string, options?: { sender?: string }): Promise<{_amountRemaining: TBigNumber, _fees: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"enum Order.Types","name":"_orderType","type":"uint8"},{"internalType":"address","name":"_creator","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"address","name":"_filler","type":"address"}],"name":"fillZeroXOrder","outputs":[{"internalType":"uint256","name":"_amountRemaining","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, price, orderType, creator, amount, fingerprint, tradeGroupId, filler], options.sender)
		return <{_amountRemaining: TBigNumber, _fees: TBigNumber}>result
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getMarketOutcomeValues_ = async (market: string, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getMarketOutcomeValues","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getMarketVolume_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getMarketVolume","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public marketOutcomeVolumes_ = async (arg0: string, arg1: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"marketOutcomeVolumes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public marketTotalTrades_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"marketTotalTrades","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public publicFillOrder = async (orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_amountFillerWants","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicFillOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId, amountFillerWants, tradeGroupId, fingerprint], 'publicFillOrder', options.sender)
	}
	
	public publicFillOrder_estimateGas = async (orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_amountFillerWants","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicFillOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId, amountFillerWants, tradeGroupId, fingerprint], 'publicFillOrder', options.sender)
	}

	public publicFillOrder_ = async (orderId: string, amountFillerWants: TBigNumber, tradeGroupId: string, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_amountFillerWants","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicFillOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId, amountFillerWants, tradeGroupId, fingerprint], options.sender)
		return <TBigNumber>result[0]
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public zeroXTrade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"zeroXTrade","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class Orders<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public ascendOrderList_ = async (type: TBigNumber, price: TBigNumber, lowestOrderId: string, options?: { sender?: string }): Promise<{_betterOrderId: string, _worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_lowestOrderId","type":"bytes32"}],"name":"ascendOrderList","outputs":[{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, lowestOrderId], options.sender)
		return <{_betterOrderId: string, _worseOrderId: string}>result
	}

	public assertIsNotBetterPrice_ = async (type: TBigNumber, price: TBigNumber, betterOrderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"}],"name":"assertIsNotBetterPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, betterOrderId], options.sender)
		return <boolean>result[0]
	}

	public assertIsNotWorsePrice = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, price, worseOrderId], 'assertIsNotWorsePrice', options.sender)
	}
	
	public assertIsNotWorsePrice_estimateGas = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, price, worseOrderId], 'assertIsNotWorsePrice', options.sender)
	}

	public assertIsNotWorsePrice_ = async (type: TBigNumber, price: TBigNumber, worseOrderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"name":"assertIsNotWorsePrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, price, worseOrderId], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cancelOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public descendOrderList_ = async (type: TBigNumber, price: TBigNumber, highestOrderId: string, options?: { sender?: string }): Promise<{_betterOrderId: string, _worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_highestOrderId","type":"bytes32"}],"name":"descendOrderList","outputs":[{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, highestOrderId], options.sender)
		return <{_betterOrderId: string, _worseOrderId: string}>result
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public findBoundingOrders = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_bestOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worstOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"internalType":"bytes32","name":"betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], 'findBoundingOrders', options.sender)
	}
	
	public findBoundingOrders_estimateGas = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_bestOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worstOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"internalType":"bytes32","name":"betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], 'findBoundingOrders', options.sender)
	}

	public findBoundingOrders_ = async (type: TBigNumber, price: TBigNumber, bestOrderId: string, worstOrderId: string, betterOrderId: string, worseOrderId: string, options?: { sender?: string }): Promise<{betterOrderId: string, worseOrderId: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_bestOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worstOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"}],"name":"findBoundingOrders","outputs":[{"internalType":"bytes32","name":"betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"worseOrderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [type, price, bestOrderId, worstOrderId, betterOrderId, worseOrderId], options.sender)
		return <{betterOrderId: string, worseOrderId: string}>result
	}

	public getAmount_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getBestOrderId_ = async (type: TBigNumber, market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getBestOrderId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, market, outcome], options.sender)
		return <string>result[0]
	}

	public getBetterOrderId_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getBetterOrderId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getLastOutcomePrice_ = async (market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getLastOutcomePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getMarket_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getMarket","outputs":[{"internalType":"contract IMarket","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getOrderCreator_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderCreator","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getOrderDataForCancel_ = async (orderId: string, options?: { sender?: string }): Promise<{_moneyEscrowed: TBigNumber, _sharesEscrowed: TBigNumber, _type: TBigNumber, _market: string, _outcome: TBigNumber, _creator: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderDataForCancel","outputs":[{"internalType":"uint256","name":"_moneyEscrowed","type":"uint256"},{"internalType":"uint256","name":"_sharesEscrowed","type":"uint256"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"address","name":"_creator","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <{_moneyEscrowed: TBigNumber, _sharesEscrowed: TBigNumber, _type: TBigNumber, _market: string, _outcome: TBigNumber, _creator: string}>result
	}

	public getOrderDataForLogs_ = async (orderId: string, options?: { sender?: string }): Promise<{_type: TBigNumber, _addressData: Array<string>, _uint256Data: Array<TBigNumber>}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderDataForLogs","outputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"address[]","name":"_addressData","type":"address[]"},{"internalType":"uint256[]","name":"_uint256Data","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <{_type: TBigNumber, _addressData: Array<string>, _uint256Data: Array<TBigNumber>}>result
	}

	public getOrderId_ = async (type: TBigNumber, market: string, amount: TBigNumber, price: TBigNumber, sender: string, blockNumber: TBigNumber, outcome: TBigNumber, moneyEscrowed: TBigNumber, sharesEscrowed: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_blockNumber","type":"uint256"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_moneyEscrowed","type":"uint256"},{"internalType":"uint256","name":"_sharesEscrowed","type":"uint256"}],"name":"getOrderId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [type, market, amount, price, sender, blockNumber, outcome, moneyEscrowed, sharesEscrowed], options.sender)
		return <string>result[0]
	}

	public getOrderMoneyEscrowed_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderMoneyEscrowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrderSharesEscrowed_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderSharesEscrowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getOrderType_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderType","outputs":[{"internalType":"enum Order.Types","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getOutcome_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getPrice_ = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalEscrowed_ = async (market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getTotalEscrowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market], options.sender)
		return <TBigNumber>result[0]
	}

	public getWorseOrderId_ = async (orderId: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getWorseOrderId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <string>result[0]
	}

	public getWorstOrderId_ = async (type: TBigNumber, market: string, outcome: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getWorstOrderId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, market, outcome], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public isBetterPrice_ = async (type: TBigNumber, price: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"isBetterPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, orderId], options.sender)
		return <boolean>result[0]
	}

	public isWorsePrice_ = async (type: TBigNumber, price: TBigNumber, orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"isWorsePrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, price, orderId], options.sender)
		return <boolean>result[0]
	}

	public profitLoss_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"profitLoss","outputs":[{"internalType":"contract IProfitLoss","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public recordFillOrder = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_sharesFilled","type":"uint256"},{"internalType":"uint256","name":"_tokensFilled","type":"uint256"},{"internalType":"uint256","name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId, sharesFilled, tokensFilled, fill], 'recordFillOrder', options.sender)
	}
	
	public recordFillOrder_estimateGas = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_sharesFilled","type":"uint256"},{"internalType":"uint256","name":"_tokensFilled","type":"uint256"},{"internalType":"uint256","name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId, sharesFilled, tokensFilled, fill], 'recordFillOrder', options.sender)
	}

	public recordFillOrder_ = async (orderId: string, sharesFilled: TBigNumber, tokensFilled: TBigNumber, fill: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"uint256","name":"_sharesFilled","type":"uint256"},{"internalType":"uint256","name":"_tokensFilled","type":"uint256"},{"internalType":"uint256","name":"_fill","type":"uint256"}],"name":"recordFillOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId, sharesFilled, tokensFilled, fill], options.sender)
		return <boolean>result[0]
	}

	public removeOrder = async (orderId: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orderId], 'removeOrder', options.sender)
	}
	
	public removeOrder_estimateGas = async (orderId: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orderId], 'removeOrder', options.sender)
	}

	public removeOrder_ = async (orderId: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"removeOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orderId], options.sender)
		return <boolean>result[0]
	}

	public saveOrder = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_uints","type":"uint256[]"},{"internalType":"bytes32[]","name":"_bytes32s","type":"bytes32[]"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_sender","type":"address"}],"name":"saveOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [uints, bytes32s, type, market, sender], 'saveOrder', options.sender)
	}
	
	public saveOrder_estimateGas = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_uints","type":"uint256[]"},{"internalType":"bytes32[]","name":"_bytes32s","type":"bytes32[]"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_sender","type":"address"}],"name":"saveOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [uints, bytes32s, type, market, sender], 'saveOrder', options.sender)
	}

	public saveOrder_ = async (uints: Array<TBigNumber>, bytes32s: Array<string>, type: TBigNumber, market: string, sender: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256[]","name":"_uints","type":"uint256[]"},{"internalType":"bytes32[]","name":"_bytes32s","type":"bytes32[]"},{"internalType":"enum Order.Types","name":"_type","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_sender","type":"address"}],"name":"saveOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [uints, bytes32s, type, market, sender], options.sender)
		return <string>result[0]
	}

	public setPrice = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, outcome, price], 'setPrice', options.sender)
	}
	
	public setPrice_estimateGas = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, outcome, price], 'setPrice', options.sender)
	}

	public setPrice_ = async (market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"setPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, outcome, price], options.sender)
		return <boolean>result[0]
	}

	public trade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"trade","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class ProfitLoss<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public adjustTraderProfitForFees = async (market: string, trader: string, outcome: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_trader","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"adjustTraderProfitForFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, trader, outcome, fees], 'adjustTraderProfitForFees', options.sender)
	}
	
	public adjustTraderProfitForFees_estimateGas = async (market: string, trader: string, outcome: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_trader","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"adjustTraderProfitForFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, trader, outcome, fees], 'adjustTraderProfitForFees', options.sender)
	}

	public adjustTraderProfitForFees_ = async (market: string, trader: string, outcome: TBigNumber, fees: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_trader","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_fees","type":"uint256"}],"name":"adjustTraderProfitForFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, trader, outcome, fees], options.sender)
		return <boolean>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cancelOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cancelOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getAvgPrice_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getAvgPrice","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getFrozenFunds_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getFrozenFunds","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getNetPosition_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getNetPosition","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getRealizedCost_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getRealizedCost","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public getRealizedProfit_ = async (market: string, account: string, outcome: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"}],"name":"getRealizedProfit","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, account, outcome], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"internalType":"contract IOrders","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public recordClaim = async (market: string, account: string, outcomeFees: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256[]","name":"_outcomeFees","type":"uint256[]"}],"name":"recordClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [market, account, outcomeFees], 'recordClaim', options.sender)
	}
	
	public recordClaim_estimateGas = async (market: string, account: string, outcomeFees: Array<TBigNumber>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256[]","name":"_outcomeFees","type":"uint256[]"}],"name":"recordClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [market, account, outcomeFees], 'recordClaim', options.sender)
	}

	public recordClaim_ = async (market: string, account: string, outcomeFees: Array<TBigNumber>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256[]","name":"_outcomeFees","type":"uint256[]"}],"name":"recordClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [market, account, outcomeFees], options.sender)
		return <boolean>result[0]
	}

	public recordFrozenFundChange = async (universe: string, market: string, account: string, outcome: TBigNumber, frozenFundDelta: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_frozenFundDelta","type":"int256"}],"name":"recordFrozenFundChange","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, account, outcome, frozenFundDelta], 'recordFrozenFundChange', options.sender)
	}
	
	public recordFrozenFundChange_estimateGas = async (universe: string, market: string, account: string, outcome: TBigNumber, frozenFundDelta: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_frozenFundDelta","type":"int256"}],"name":"recordFrozenFundChange","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, account, outcome, frozenFundDelta], 'recordFrozenFundChange', options.sender)
	}

	public recordFrozenFundChange_ = async (universe: string, market: string, account: string, outcome: TBigNumber, frozenFundDelta: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_frozenFundDelta","type":"int256"}],"name":"recordFrozenFundChange","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, account, outcome, frozenFundDelta], options.sender)
		return <boolean>result[0]
	}

	public recordTrade = async (universe: string, market: string, longAddress: string, shortAddress: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, numLongTokens: TBigNumber, numShortTokens: TBigNumber, numLongShares: TBigNumber, numShortShares: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_longAddress","type":"address"},{"internalType":"address","name":"_shortAddress","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_amount","type":"int256"},{"internalType":"int256","name":"_price","type":"int256"},{"internalType":"uint256","name":"_numLongTokens","type":"uint256"},{"internalType":"uint256","name":"_numShortTokens","type":"uint256"},{"internalType":"uint256","name":"_numLongShares","type":"uint256"},{"internalType":"uint256","name":"_numShortShares","type":"uint256"}],"name":"recordTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, market, longAddress, shortAddress, outcome, amount, price, numLongTokens, numShortTokens, numLongShares, numShortShares], 'recordTrade', options.sender)
	}
	
	public recordTrade_estimateGas = async (universe: string, market: string, longAddress: string, shortAddress: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, numLongTokens: TBigNumber, numShortTokens: TBigNumber, numLongShares: TBigNumber, numShortShares: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_longAddress","type":"address"},{"internalType":"address","name":"_shortAddress","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_amount","type":"int256"},{"internalType":"int256","name":"_price","type":"int256"},{"internalType":"uint256","name":"_numLongTokens","type":"uint256"},{"internalType":"uint256","name":"_numShortTokens","type":"uint256"},{"internalType":"uint256","name":"_numLongShares","type":"uint256"},{"internalType":"uint256","name":"_numShortShares","type":"uint256"}],"name":"recordTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, market, longAddress, shortAddress, outcome, amount, price, numLongTokens, numShortTokens, numLongShares, numShortShares], 'recordTrade', options.sender)
	}

	public recordTrade_ = async (universe: string, market: string, longAddress: string, shortAddress: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, numLongTokens: TBigNumber, numShortTokens: TBigNumber, numLongShares: TBigNumber, numShortShares: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"address","name":"_longAddress","type":"address"},{"internalType":"address","name":"_shortAddress","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"int256","name":"_amount","type":"int256"},{"internalType":"int256","name":"_price","type":"int256"},{"internalType":"uint256","name":"_numLongTokens","type":"uint256"},{"internalType":"uint256","name":"_numShortTokens","type":"uint256"},{"internalType":"uint256","name":"_numLongShares","type":"uint256"},{"internalType":"uint256","name":"_numShortShares","type":"uint256"}],"name":"recordTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, market, longAddress, shortAddress, outcome, amount, price, numLongTokens, numShortTokens, numLongShares, numShortShares], options.sender)
		return <boolean>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class SimulateTrade<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getNumberOfAvaialableShares_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, sender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"getNumberOfAvaialableShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, sender], options.sender)
		return <TBigNumber>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"internalType":"contract IOrders","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public simulateTrade_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, fillOnly: boolean, options?: { sender?: string }): Promise<{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bool","name":"_fillOnly","type":"bool"}],"name":"simulateTrade","outputs":[{"internalType":"uint256","name":"_sharesFilled","type":"uint256"},{"internalType":"uint256","name":"_tokensDepleted","type":"uint256"},{"internalType":"uint256","name":"_sharesDepleted","type":"uint256"},{"internalType":"uint256","name":"_settlementFees","type":"uint256"},{"internalType":"uint256","name":"_numFills","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, amount, price, fillOnly], options.sender)
		return <{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}>result
	}

	public simulateZeroXTrade_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, amount: TBigNumber, fillOnly: boolean, options?: { sender?: string }): Promise<{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_fillOnly","type":"bool"}],"name":"simulateZeroXTrade","outputs":[{"internalType":"uint256","name":"_sharesFilled","type":"uint256"},{"internalType":"uint256","name":"_tokensDepleted","type":"uint256"},{"internalType":"uint256","name":"_sharesDepleted","type":"uint256"},{"internalType":"uint256","name":"_settlementFees","type":"uint256"},{"internalType":"uint256","name":"_numFills","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [orders, amount, fillOnly], options.sender)
		return <{_sharesFilled: TBigNumber, _tokensDepleted: TBigNumber, _sharesDepleted: TBigNumber, _settlementFees: TBigNumber, _numFills: TBigNumber}>result
	}

	public zeroXTrade_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"zeroXTrade","outputs":[{"internalType":"contract IZeroXTrade","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class Trade<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public createOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"createOrder","outputs":[{"internalType":"contract ICreateOrder","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"internalType":"contract IFillOrder","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public orders_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"orders","outputs":[{"internalType":"contract IOrders","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public publicFillBestOrder = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, tradeGroupId: string, loopLimit: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_loopLimit","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicFillBestOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [direction, market, outcome, amount, price, tradeGroupId, loopLimit, fingerprint], 'publicFillBestOrder', options.sender)
	}
	
	public publicFillBestOrder_estimateGas = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, tradeGroupId: string, loopLimit: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_loopLimit","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicFillBestOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [direction, market, outcome, amount, price, tradeGroupId, loopLimit, fingerprint], 'publicFillBestOrder', options.sender)
	}

	public publicFillBestOrder_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, tradeGroupId: string, loopLimit: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_loopLimit","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicFillBestOrder","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, amount, price, tradeGroupId, loopLimit, fingerprint], options.sender)
		return <TBigNumber>result[0]
	}

	public publicTrade = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, loopLimit: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_loopLimit","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicTrade","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [direction, market, outcome, amount, price, betterOrderId, worseOrderId, tradeGroupId, loopLimit, fingerprint], 'publicTrade', options.sender)
	}
	
	public publicTrade_estimateGas = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, loopLimit: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_loopLimit","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicTrade","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [direction, market, outcome, amount, price, betterOrderId, worseOrderId, tradeGroupId, loopLimit, fingerprint], 'publicTrade', options.sender)
	}

	public publicTrade_ = async (direction: TBigNumber, market: string, outcome: TBigNumber, amount: TBigNumber, price: TBigNumber, betterOrderId: string, worseOrderId: string, tradeGroupId: string, loopLimit: TBigNumber, fingerprint: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"enum Order.TradeDirections","name":"_direction","type":"uint8"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_outcome","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"bytes32","name":"_betterOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_worseOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_loopLimit","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"}],"name":"publicTrade","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [direction, market, outcome, amount, price, betterOrderId, worseOrderId, tradeGroupId, loopLimit, fingerprint], options.sender)
		return <string>result[0]
	}
}


export class ZeroXTrade<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public EIP1271_ORDER_WITH_HASH_SELECTOR_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP1271_ORDER_WITH_HASH_SELECTOR","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public EIP712_DOMAIN_HASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"EIP712_DOMAIN_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public WETH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"WETH","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public askBalance_ = async (owner: string, market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"askBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, market, outcome, price], options.sender)
		return <TBigNumber>result[0]
	}

	public augur_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augur","outputs":[{"internalType":"contract IAugur","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public augurTrading_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurTrading","outputs":[{"internalType":"contract IAugurTrading","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public balanceOf_ = async (owner: string, id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, id], options.sender)
		return <TBigNumber>result[0]
	}

	public balanceOfBatch_ = async (owners: Array<string>, ids: Array<TBigNumber>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances_","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owners, ids], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public bidBalance_ = async (owner: string, market: string, outcome: TBigNumber, price: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"bidBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, market, outcome, price], options.sender)
		return <TBigNumber>result[0]
	}

	public cancelOrders = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, maxProtocolFeeDai: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"bytes[]","name":"_signatures","type":"bytes[]"},{"internalType":"uint256","name":"_maxProtocolFeeDai","type":"uint256"}],"name":"cancelOrders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [orders, signatures, maxProtocolFeeDai], 'cancelOrders', options.sender)
	}
	
	public cancelOrders_estimateGas = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, maxProtocolFeeDai: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"bytes[]","name":"_signatures","type":"bytes[]"},{"internalType":"uint256","name":"_maxProtocolFeeDai","type":"uint256"}],"name":"cancelOrders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [orders, signatures, maxProtocolFeeDai], 'cancelOrders', options.sender)
	}

	public cancelOrders_ = async (orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, maxProtocolFeeDai: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"bytes[]","name":"_signatures","type":"bytes[]"},{"internalType":"uint256","name":"_maxProtocolFeeDai","type":"uint256"}],"name":"cancelOrders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [orders, signatures, maxProtocolFeeDai], options.sender)
		return <boolean>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract ICash","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cashAvailableForTransferFrom_ = async (owner: string, sender: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_sender","type":"address"}],"name":"cashAvailableForTransferFrom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, sender], options.sender)
		return <TBigNumber>result[0]
	}

	public createZeroXOrder_ = async (type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, options?: { sender?: string }): Promise<{_zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, _orderHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint8","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint256","name":"_expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"createZeroXOrder","outputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order","name":"_zeroXOrder","type":"tuple"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [type, attoshares, price, market, outcome, expirationTimeSeconds, salt], options.sender)
		return <{_zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, _orderHash: string}>result
	}

	public createZeroXOrderFor_ = async (maker: string, type: TBigNumber, attoshares: TBigNumber, price: TBigNumber, market: string, outcome: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, options?: { sender?: string }): Promise<{_zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, _orderHash: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_maker","type":"address"},{"internalType":"uint8","name":"_type","type":"uint8"},{"internalType":"uint256","name":"_attoshares","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint256","name":"_expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"createZeroXOrderFor","outputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order","name":"_zeroXOrder","type":"tuple"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [maker, type, attoshares, price, market, outcome, expirationTimeSeconds, salt], options.sender)
		return <{_zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, _orderHash: string}>result
	}

	public creatorHasFundsForTrade_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, amount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order","name":"_order","type":"tuple"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"creatorHasFundsForTrade","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order, amount], options.sender)
		return <boolean>result[0]
	}

	public decodeAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{_assetProxyId: string, _tokenAddress: string, _tokenIds: Array<TBigNumber>, _tokenValues: Array<TBigNumber>, _callbackData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"_assetData","type":"bytes"}],"name":"decodeAssetData","outputs":[{"internalType":"bytes4","name":"_assetProxyId","type":"bytes4"},{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_tokenValues","type":"uint256[]"},{"internalType":"bytes","name":"_callbackData","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{_assetProxyId: string, _tokenAddress: string, _tokenIds: Array<TBigNumber>, _tokenValues: Array<TBigNumber>, _callbackData: string}>result
	}

	public decodeTradeAssetData_ = async (assetData: string, options?: { sender?: string }): Promise<{_assetProxyId: string, _tokenAddress: string, _tokenIds: Array<TBigNumber>, _tokenValues: Array<TBigNumber>, _callbackData: string}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"_assetData","type":"bytes"}],"name":"decodeTradeAssetData","outputs":[{"internalType":"bytes4","name":"_assetProxyId","type":"bytes4"},{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_tokenValues","type":"uint256[]"},{"internalType":"bytes","name":"_callbackData","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{_assetProxyId: string, _tokenAddress: string, _tokenIds: Array<TBigNumber>, _tokenValues: Array<TBigNumber>, _callbackData: string}>result
	}

	public encodeAssetData_ = async (market: string, price: TBigNumber, outcome: TBigNumber, type: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint8","name":"_type","type":"uint8"}],"name":"encodeAssetData","outputs":[{"internalType":"bytes","name":"_assetData","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, price, outcome, type], options.sender)
		return <string>result[0]
	}

	public encodeEIP1271OrderWithHash_ = async (zeroXOrder: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, orderHash: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order","name":"_zeroXOrder","type":"tuple"},{"internalType":"bytes32","name":"_orderHash","type":"bytes32"}],"name":"encodeEIP1271OrderWithHash","outputs":[{"internalType":"bytes","name":"encoded","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [zeroXOrder, orderHash], options.sender)
		return <string>result[0]
	}

	public estimateProtocolFeeCostInCash_ = async (numOrders: TBigNumber, gasPrice: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_numOrders","type":"uint256"},{"internalType":"uint256","name":"_gasPrice","type":"uint256"}],"name":"estimateProtocolFeeCostInCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [numOrders, gasPrice], options.sender)
		return <TBigNumber>result[0]
	}

	public ethExchange_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ethExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public exchange_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"exchange","outputs":[{"internalType":"contract IExchange","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public fillOrder_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"fillOrder","outputs":[{"internalType":"contract IFillOrder","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getAmountIn_ = async (amountOut: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountOut, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getTokenId_ = async (market: string, price: TBigNumber, outcome: TBigNumber, type: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint8","name":"_type","type":"uint8"}],"name":"getTokenId","outputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [market, price, outcome, type], options.sender)
		return <TBigNumber>result[0]
	}

	public getTokenIdFromOrder_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order","name":"_order","type":"tuple"}],"name":"getTokenIdFromOrder","outputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order], options.sender)
		return <TBigNumber>result[0]
	}

	public getTransferFromAllowed_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getTransferFromAllowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public getZeroXTradeTokenData_ = async (assetData: string, options?: { sender?: string }): Promise<{_token: string, _tokenId: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"bytes","name":"_assetData","type":"bytes"}],"name":"getZeroXTradeTokenData","outputs":[{"internalType":"contract IERC1155","name":"_token","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [assetData], options.sender)
		return <{_token: string, _tokenId: TBigNumber}>result
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public isApprovedForAll_ = async (owner: string, operator: string, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [owner, operator], options.sender)
		return <boolean>result[0]
	}

	public isOrderAmountValid_ = async (market: string, orderAmount: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_orderAmount","type":"uint256"}],"name":"isOrderAmountValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, orderAmount], options.sender)
		return <boolean>result[0]
	}

	public parseOrderData_ = async (order: { makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }, options?: { sender?: string }): Promise<{ marketAddress: string, price: TBigNumber, outcome: TBigNumber, orderType: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order","name":"_order","type":"tuple"}],"name":"parseOrderData","outputs":[{"components":[{"internalType":"address","name":"marketAddress","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint8","name":"outcome","type":"uint8"},{"internalType":"uint8","name":"orderType","type":"uint8"}],"internalType":"struct IZeroXTrade.AugurOrderData","name":"_data","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [order], options.sender)
		return <{ marketAddress: string, price: TBigNumber, outcome: TBigNumber, orderType: TBigNumber }>result[0]
	}

	public safeBatchTransferFrom = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}
	
	public safeBatchTransferFrom_estimateGas = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, ids, values, data], 'safeBatchTransferFrom', options.sender)
	}

	public safeBatchTransferFrom_ = async (from: string, to: string, ids: Array<TBigNumber>, values: Array<TBigNumber>, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, ids, values, data], options.sender)
	}

	public safeTransferFrom = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}
	
	public safeTransferFrom_estimateGas = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, id, value, data], 'safeTransferFrom', options.sender)
	}

	public safeTransferFrom_ = async (from: string, to: string, id: TBigNumber, value: TBigNumber, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [from, to, id, value, data], options.sender)
	}

	public setApprovalForAll = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}
	
	public setApprovalForAll_estimateGas = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [operator, approved], 'setApprovalForAll', options.sender)
	}

	public setApprovalForAll_ = async (operator: string, approved: boolean, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [operator, approved], options.sender)
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public token0IsCash_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"token0IsCash","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public totalSupply_ = async (id: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [id], options.sender)
		return <TBigNumber>result[0]
	}

	public trade = async (requestedFillAmount: TBigNumber, fingerprint: string, tradeGroupId: string, maxProtocolFeeDai: TBigNumber, maxTrades: TBigNumber, orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_requestedFillAmount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_maxProtocolFeeDai","type":"uint256"},{"internalType":"uint256","name":"_maxTrades","type":"uint256"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"bytes[]","name":"_signatures","type":"bytes[]"}],"name":"trade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [requestedFillAmount, fingerprint, tradeGroupId, maxProtocolFeeDai, maxTrades, orders, signatures], 'trade', options.sender, options.attachedEth)
	}
	
	public trade_estimateGas = async (requestedFillAmount: TBigNumber, fingerprint: string, tradeGroupId: string, maxProtocolFeeDai: TBigNumber, maxTrades: TBigNumber, orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_requestedFillAmount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_maxProtocolFeeDai","type":"uint256"},{"internalType":"uint256","name":"_maxTrades","type":"uint256"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"bytes[]","name":"_signatures","type":"bytes[]"}],"name":"trade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [requestedFillAmount, fingerprint, tradeGroupId, maxProtocolFeeDai, maxTrades, orders, signatures], 'trade', options.sender, options.attachedEth)
	}

	public trade_ = async (requestedFillAmount: TBigNumber, fingerprint: string, tradeGroupId: string, maxProtocolFeeDai: TBigNumber, maxTrades: TBigNumber, orders: Array<{ makerAddress: string, takerAddress: string, feeRecipientAddress: string, senderAddress: string, makerAssetAmount: TBigNumber, takerAssetAmount: TBigNumber, makerFee: TBigNumber, takerFee: TBigNumber, expirationTimeSeconds: TBigNumber, salt: TBigNumber, makerAssetData: string, takerAssetData: string, makerFeeAssetData: string, takerFeeAssetData: string }>, signatures: Array<string>, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"_requestedFillAmount","type":"uint256"},{"internalType":"bytes32","name":"_fingerprint","type":"bytes32"},{"internalType":"bytes32","name":"_tradeGroupId","type":"bytes32"},{"internalType":"uint256","name":"_maxProtocolFeeDai","type":"uint256"},{"internalType":"uint256","name":"_maxTrades","type":"uint256"},{"components":[{"internalType":"address","name":"makerAddress","type":"address"},{"internalType":"address","name":"takerAddress","type":"address"},{"internalType":"address","name":"feeRecipientAddress","type":"address"},{"internalType":"address","name":"senderAddress","type":"address"},{"internalType":"uint256","name":"makerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"takerAssetAmount","type":"uint256"},{"internalType":"uint256","name":"makerFee","type":"uint256"},{"internalType":"uint256","name":"takerFee","type":"uint256"},{"internalType":"uint256","name":"expirationTimeSeconds","type":"uint256"},{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"bytes","name":"makerAssetData","type":"bytes"},{"internalType":"bytes","name":"takerAssetData","type":"bytes"},{"internalType":"bytes","name":"makerFeeAssetData","type":"bytes"},{"internalType":"bytes","name":"takerFeeAssetData","type":"bytes"}],"internalType":"struct IExchange.Order[]","name":"_orders","type":"tuple[]"},{"internalType":"bytes[]","name":"_signatures","type":"bytes[]"}],"name":"trade","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [requestedFillAmount, fingerprint, tradeGroupId, maxProtocolFeeDai, maxTrades, orders, signatures], options.sender, options.attachedEth)
		return <TBigNumber>result[0]
	}

	public unpackTokenId_ = async (tokenId: TBigNumber, options?: { sender?: string }): Promise<{_market: string, _price: TBigNumber, _outcome: TBigNumber, _type: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"unpackTokenId","outputs":[{"internalType":"address","name":"_market","type":"address"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"uint8","name":"_outcome","type":"uint8"},{"internalType":"uint8","name":"_type","type":"uint8"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [tokenId], options.sender)
		return <{_market: string, _price: TBigNumber, _outcome: TBigNumber, _type: TBigNumber}>result
	}
}


export class UniswapV2Factory<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public allPairs_ = async (arg0: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allPairs","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <string>result[0]
	}

	public allPairsLength_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"allPairsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public createPair = async (tokenA: string, tokenB: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [tokenA, tokenB], 'createPair', options.sender)
	}
	
	public createPair_estimateGas = async (tokenA: string, tokenB: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [tokenA, tokenB], 'createPair', options.sender)
	}

	public createPair_ = async (tokenA: string, tokenB: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [tokenA, tokenB], options.sender)
		return <string>result[0]
	}

	public feeTo_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"feeTo","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public feeToSetter_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"feeToSetter","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getPair_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"getPair","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <string>result[0]
	}

	public setFeeTo = async (feeTo: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_feeTo","type":"address"}],"name":"setFeeTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [feeTo], 'setFeeTo', options.sender)
	}
	
	public setFeeTo_estimateGas = async (feeTo: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_feeTo","type":"address"}],"name":"setFeeTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [feeTo], 'setFeeTo', options.sender)
	}

	public setFeeTo_ = async (feeTo: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_feeTo","type":"address"}],"name":"setFeeTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [feeTo], options.sender)
	}

	public setFeeToSetter = async (feeToSetter: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],"name":"setFeeToSetter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [feeToSetter], 'setFeeToSetter', options.sender)
	}
	
	public setFeeToSetter_estimateGas = async (feeToSetter: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],"name":"setFeeToSetter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [feeToSetter], 'setFeeToSetter', options.sender)
	}

	public setFeeToSetter_ = async (feeToSetter: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_feeToSetter","type":"address"}],"name":"setFeeToSetter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [feeToSetter], options.sender)
	}
}


export class UniswapV2Pair<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public DOMAIN_SEPARATOR_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public MINIMUM_LIQUIDITY_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public PERMIT_TYPEHASH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public allowance_ = async (arg0: string, arg1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0, arg1], options.sender)
		return <TBigNumber>result[0]
	}

	public approve = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [spender, value], 'approve', options.sender)
	}
	
	public approve_estimateGas = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [spender, value], 'approve', options.sender)
	}

	public approve_ = async (spender: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [spender, value], options.sender)
		return <boolean>result[0]
	}

	public balanceOf_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public burn = async (to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to], 'burn', options.sender)
	}
	
	public burn_estimateGas = async (to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to], 'burn', options.sender)
	}

	public burn_ = async (to: string, options?: { sender?: string }): Promise<{amount0: TBigNumber, amount1: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to], options.sender)
		return <{amount0: TBigNumber, amount1: TBigNumber}>result
	}

	public decimals_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public factory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getReserves_ = async (options?: { sender?: string }): Promise<{_reserve0: TBigNumber, _reserve1: TBigNumber, _blockTimestampLast: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"_reserve0","type":"uint112"},{"internalType":"uint112","name":"_reserve1","type":"uint112"},{"internalType":"uint32","name":"_blockTimestampLast","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <{_reserve0: TBigNumber, _reserve1: TBigNumber, _blockTimestampLast: TBigNumber}>result
	}

	public initialize = async (token0: string, token1: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token0, token1], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (token0: string, token1: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token0, token1], 'initialize', options.sender)
	}

	public initialize_ = async (token0: string, token1: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [token0, token1], options.sender)
	}

	public kLast_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public mint = async (to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to], 'mint', options.sender)
	}
	
	public mint_estimateGas = async (to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to], 'mint', options.sender)
	}

	public mint_ = async (to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to], options.sender)
		return <TBigNumber>result[0]
	}

	public name_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public nonces_ = async (arg0: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [arg0], options.sender)
		return <TBigNumber>result[0]
	}

	public permit = async (owner: string, spender: string, value: TBigNumber, deadline: TBigNumber, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [owner, spender, value, deadline, v, r, s], 'permit', options.sender)
	}
	
	public permit_estimateGas = async (owner: string, spender: string, value: TBigNumber, deadline: TBigNumber, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [owner, spender, value, deadline, v, r, s], 'permit', options.sender)
	}

	public permit_ = async (owner: string, spender: string, value: TBigNumber, deadline: TBigNumber, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [owner, spender, value, deadline, v, r, s], options.sender)
	}

	public price0CumulativeLast_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public price1CumulativeLast_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public skim = async (to: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to], 'skim', options.sender)
	}
	
	public skim_estimateGas = async (to: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to], 'skim', options.sender)
	}

	public skim_ = async (to: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [to], options.sender)
	}

	public swap = async (amount0Out: TBigNumber, amount1Out: TBigNumber, to: string, data: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amount0Out, amount1Out, to, data], 'swap', options.sender)
	}
	
	public swap_estimateGas = async (amount0Out: TBigNumber, amount1Out: TBigNumber, to: string, data: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amount0Out, amount1Out, to, data], 'swap', options.sender)
	}

	public swap_ = async (amount0Out: TBigNumber, amount1Out: TBigNumber, to: string, data: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [amount0Out, amount1Out, to, data], options.sender)
	}

	public symbol_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public sync = async (options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"sync","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [], 'sync', options.sender)
	}
	
	public sync_estimateGas = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"sync","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [], 'sync', options.sender)
	}

	public sync_ = async (options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[],"name":"sync","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [], options.sender)
	}

	public token0_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public token1_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public totalSupply_ = async (options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <TBigNumber>result[0]
	}

	public transfer = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [to, value], 'transfer', options.sender)
	}
	
	public transfer_estimateGas = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [to, value], 'transfer', options.sender)
	}

	public transfer_ = async (to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [to, value], options.sender)
		return <boolean>result[0]
	}

	public transferFrom = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [from, to, value], 'transferFrom', options.sender)
	}
	
	public transferFrom_estimateGas = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [from, to, value], 'transferFrom', options.sender)
	}

	public transferFrom_ = async (from: string, to: string, value: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [from, to, value], options.sender)
		return <boolean>result[0]
	}
}


export class UniswapV2Router02<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public WETH_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public addLiquidity = async (tokenA: string, tokenB: string, amountADesired: TBigNumber, amountBDesired: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline], 'addLiquidity', options.sender)
	}
	
	public addLiquidity_estimateGas = async (tokenA: string, tokenB: string, amountADesired: TBigNumber, amountBDesired: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline], 'addLiquidity', options.sender)
	}

	public addLiquidity_ = async (tokenA: string, tokenB: string, amountADesired: TBigNumber, amountBDesired: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<{amountA: TBigNumber, amountB: TBigNumber, liquidity: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline], options.sender)
		return <{amountA: TBigNumber, amountB: TBigNumber, liquidity: TBigNumber}>result
	}

	public addLiquidityETH = async (token: string, amountTokenDesired: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountTokenDesired","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline], 'addLiquidityETH', options.sender, options.attachedEth)
	}
	
	public addLiquidityETH_estimateGas = async (token: string, amountTokenDesired: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountTokenDesired","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline], 'addLiquidityETH', options.sender, options.attachedEth)
	}

	public addLiquidityETH_ = async (token: string, amountTokenDesired: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<{amountToken: TBigNumber, amountETH: TBigNumber, liquidity: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amountTokenDesired","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline], options.sender, options.attachedEth)
		return <{amountToken: TBigNumber, amountETH: TBigNumber, liquidity: TBigNumber}>result
	}

	public factory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getAmountIn_ = async (amountOut: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountOut, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getAmountOut_ = async (amountIn: TBigNumber, reserveIn: TBigNumber, reserveOut: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountIn, reserveIn, reserveOut], options.sender)
		return <TBigNumber>result[0]
	}

	public getAmountsIn_ = async (amountOut: TBigNumber, path: Array<string>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsIn","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [amountOut, path], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getAmountsOut_ = async (amountIn: TBigNumber, path: Array<string>, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"}],"name":"getAmountsOut","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [amountIn, path], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public quote_ = async (amountA: TBigNumber, reserveA: TBigNumber, reserveB: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"reserveA","type":"uint256"},{"internalType":"uint256","name":"reserveB","type":"uint256"}],"name":"quote","outputs":[{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [amountA, reserveA, reserveB], options.sender)
		return <TBigNumber>result[0]
	}

	public removeLiquidity = async (tokenA: string, tokenB: string, liquidity: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline], 'removeLiquidity', options.sender)
	}
	
	public removeLiquidity_estimateGas = async (tokenA: string, tokenB: string, liquidity: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline], 'removeLiquidity', options.sender)
	}

	public removeLiquidity_ = async (tokenA: string, tokenB: string, liquidity: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<{amountA: TBigNumber, amountB: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline], options.sender)
		return <{amountA: TBigNumber, amountB: TBigNumber}>result
	}

	public removeLiquidityETH = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline], 'removeLiquidityETH', options.sender)
	}
	
	public removeLiquidityETH_estimateGas = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline], 'removeLiquidityETH', options.sender)
	}

	public removeLiquidityETH_ = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<{amountToken: TBigNumber, amountETH: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETH","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline], options.sender)
		return <{amountToken: TBigNumber, amountETH: TBigNumber}>result
	}

	public removeLiquidityETHSupportingFeeOnTransferTokens = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETHSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline], 'removeLiquidityETHSupportingFeeOnTransferTokens', options.sender)
	}
	
	public removeLiquidityETHSupportingFeeOnTransferTokens_estimateGas = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETHSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline], 'removeLiquidityETHSupportingFeeOnTransferTokens', options.sender)
	}

	public removeLiquidityETHSupportingFeeOnTransferTokens_ = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidityETHSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline], options.sender)
		return <TBigNumber>result[0]
	}

	public removeLiquidityETHWithPermit = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermit","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s], 'removeLiquidityETHWithPermit', options.sender)
	}
	
	public removeLiquidityETHWithPermit_estimateGas = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermit","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s], 'removeLiquidityETHWithPermit', options.sender)
	}

	public removeLiquidityETHWithPermit_ = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<{amountToken: TBigNumber, amountETH: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermit","outputs":[{"internalType":"uint256","name":"amountToken","type":"uint256"},{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s], options.sender)
		return <{amountToken: TBigNumber, amountETH: TBigNumber}>result
	}

	public removeLiquidityETHWithPermitSupportingFeeOnTransferTokens = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s], 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', options.sender)
	}
	
	public removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_estimateGas = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s], 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', options.sender)
	}

	public removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_ = async (token: string, liquidity: TBigNumber, amountTokenMin: TBigNumber, amountETHMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountTokenMin","type":"uint256"},{"internalType":"uint256","name":"amountETHMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens","outputs":[{"internalType":"uint256","name":"amountETH","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [token, liquidity, amountTokenMin, amountETHMin, to, deadline, approveMax, v, r, s], options.sender)
		return <TBigNumber>result[0]
	}

	public removeLiquidityWithPermit = async (tokenA: string, tokenB: string, liquidity: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityWithPermit","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s], 'removeLiquidityWithPermit', options.sender)
	}
	
	public removeLiquidityWithPermit_estimateGas = async (tokenA: string, tokenB: string, liquidity: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityWithPermit","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s], 'removeLiquidityWithPermit', options.sender)
	}

	public removeLiquidityWithPermit_ = async (tokenA: string, tokenB: string, liquidity: TBigNumber, amountAMin: TBigNumber, amountBMin: TBigNumber, to: string, deadline: TBigNumber, approveMax: boolean, v: TBigNumber, r: string, s: string, options?: { sender?: string }): Promise<{amountA: TBigNumber, amountB: TBigNumber}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"approveMax","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"removeLiquidityWithPermit","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline, approveMax, v, r, s], options.sender)
		return <{amountA: TBigNumber, amountB: TBigNumber}>result
	}

	public swapETHForExactTokens = async (amountOut: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapETHForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [amountOut, path, to, deadline], 'swapETHForExactTokens', options.sender, options.attachedEth)
	}
	
	public swapETHForExactTokens_estimateGas = async (amountOut: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapETHForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [amountOut, path, to, deadline], 'swapETHForExactTokens', options.sender, options.attachedEth)
	}

	public swapETHForExactTokens_ = async (amountOut: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapETHForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [amountOut, path, to, deadline], options.sender, options.attachedEth)
		return <Array<TBigNumber>>result[0]
	}

	public swapExactETHForTokens = async (amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [amountOutMin, path, to, deadline], 'swapExactETHForTokens', options.sender, options.attachedEth)
	}
	
	public swapExactETHForTokens_estimateGas = async (amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [amountOutMin, path, to, deadline], 'swapExactETHForTokens', options.sender, options.attachedEth)
	}

	public swapExactETHForTokens_ = async (amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":true,"stateMutability":"payable","type":"function"}
		const result = await this.localCall(abi, [amountOutMin, path, to, deadline], options.sender, options.attachedEth)
		return <Array<TBigNumber>>result[0]
	}

	public swapExactETHForTokensSupportingFeeOnTransferTokens = async (amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.remoteCall(abi, [amountOutMin, path, to, deadline], 'swapExactETHForTokensSupportingFeeOnTransferTokens', options.sender, options.attachedEth)
	}
	
	public swapExactETHForTokensSupportingFeeOnTransferTokens_estimateGas = async (amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		return await this.estimateGas(abi, [amountOutMin, path, to, deadline], 'swapExactETHForTokensSupportingFeeOnTransferTokens', options.sender, options.attachedEth)
	}

	public swapExactETHForTokensSupportingFeeOnTransferTokens_ = async (amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string, attachedEth?: TBigNumber }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactETHForTokensSupportingFeeOnTransferTokens","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}
		await this.localCall(abi, [amountOutMin, path, to, deadline], options.sender, options.attachedEth)
	}

	public swapExactTokensForETH = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForETH', options.sender)
	}
	
	public swapExactTokensForETH_estimateGas = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForETH', options.sender)
	}

	public swapExactTokensForETH_ = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountIn, amountOutMin, path, to, deadline], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public swapExactTokensForETHSupportingFeeOnTransferTokens = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForETHSupportingFeeOnTransferTokens', options.sender)
	}
	
	public swapExactTokensForETHSupportingFeeOnTransferTokens_estimateGas = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForETHSupportingFeeOnTransferTokens', options.sender)
	}

	public swapExactTokensForETHSupportingFeeOnTransferTokens_ = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForETHSupportingFeeOnTransferTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [amountIn, amountOutMin, path, to, deadline], options.sender)
	}

	public swapExactTokensForTokens = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForTokens', options.sender)
	}
	
	public swapExactTokensForTokens_estimateGas = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForTokens', options.sender)
	}

	public swapExactTokensForTokens_ = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountIn, amountOutMin, path, to, deadline], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public swapExactTokensForTokensSupportingFeeOnTransferTokens = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForTokensSupportingFeeOnTransferTokens', options.sender)
	}
	
	public swapExactTokensForTokensSupportingFeeOnTransferTokens_estimateGas = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountIn, amountOutMin, path, to, deadline], 'swapExactTokensForTokensSupportingFeeOnTransferTokens', options.sender)
	}

	public swapExactTokensForTokensSupportingFeeOnTransferTokens_ = async (amountIn: TBigNumber, amountOutMin: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [amountIn, amountOutMin, path, to, deadline], options.sender)
	}

	public swapTokensForExactETH = async (amountOut: TBigNumber, amountInMax: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountOut, amountInMax, path, to, deadline], 'swapTokensForExactETH', options.sender)
	}
	
	public swapTokensForExactETH_estimateGas = async (amountOut: TBigNumber, amountInMax: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountOut, amountInMax, path, to, deadline], 'swapTokensForExactETH', options.sender)
	}

	public swapTokensForExactETH_ = async (amountOut: TBigNumber, amountInMax: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactETH","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountOut, amountInMax, path, to, deadline], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public swapTokensForExactTokens = async (amountOut: TBigNumber, amountInMax: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [amountOut, amountInMax, path, to, deadline], 'swapTokensForExactTokens', options.sender)
	}
	
	public swapTokensForExactTokens_estimateGas = async (amountOut: TBigNumber, amountInMax: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [amountOut, amountInMax, path, to, deadline], 'swapTokensForExactTokens', options.sender)
	}

	public swapTokensForExactTokens_ = async (amountOut: TBigNumber, amountInMax: TBigNumber, path: Array<string>, to: string, deadline: TBigNumber, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapTokensForExactTokens","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [amountOut, amountInMax, path, to, deadline], options.sender)
		return <Array<TBigNumber>>result[0]
	}
}


export class AccountLoader<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public augurWalletFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"augurWalletFactory","outputs":[{"internalType":"contract IAugurWalletFactory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public cash_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"cash","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public ethExchange_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"ethExchange","outputs":[{"internalType":"contract IUniswapV2Pair","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialize = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract Augur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur, augurTrading], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract Augur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur, augurTrading], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, augurTrading: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract Augur","name":"_augur","type":"address"},{"internalType":"contract IAugurTrading","name":"_augurTrading","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur, augurTrading], options.sender)
	}

	public legacyReputationToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"legacyReputationToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public loadAccountData_ = async (account: string, reputationToken: string, options?: { sender?: string }): Promise<{ signerETH: TBigNumber, signerDAI: TBigNumber, signerREP: TBigNumber, signerLegacyREP: TBigNumber, walletETH: TBigNumber, walletDAI: TBigNumber, walletREP: TBigNumber, walletLegacyREP: TBigNumber, attoDAIperREP: TBigNumber, attoDAIperETH: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"contract IERC20","name":"_reputationToken","type":"address"}],"name":"loadAccountData","outputs":[{"components":[{"internalType":"uint256","name":"signerETH","type":"uint256"},{"internalType":"uint256","name":"signerDAI","type":"uint256"},{"internalType":"uint256","name":"signerREP","type":"uint256"},{"internalType":"uint256","name":"signerLegacyREP","type":"uint256"},{"internalType":"uint256","name":"walletETH","type":"uint256"},{"internalType":"uint256","name":"walletDAI","type":"uint256"},{"internalType":"uint256","name":"walletREP","type":"uint256"},{"internalType":"uint256","name":"walletLegacyREP","type":"uint256"},{"internalType":"uint256","name":"attoDAIperREP","type":"uint256"},{"internalType":"uint256","name":"attoDAIperETH","type":"uint256"}],"internalType":"struct AccountLoader.AccountData","name":"_data","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, reputationToken], options.sender)
		return <{ signerETH: TBigNumber, signerDAI: TBigNumber, signerREP: TBigNumber, signerLegacyREP: TBigNumber, walletETH: TBigNumber, walletDAI: TBigNumber, walletREP: TBigNumber, walletLegacyREP: TBigNumber, attoDAIperREP: TBigNumber, attoDAIperETH: TBigNumber }>result[0]
	}

	public token0IsCashInETHExchange_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"token0IsCashInETHExchange","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public uniswapFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"uniswapFactory","outputs":[{"internalType":"contract IUniswapV2Factory","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public weth_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"weth","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class AuditFunds<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public addressFrom_ = async (origin: string, nonce: TBigNumber, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_origin","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"addressFrom","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [origin, nonce], options.sender)
		return <string>result[0]
	}

	public disputeCrowdsourcerFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"disputeCrowdsourcerFactory","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public getAvailableDisputes_ = async (account: string, offset: TBigNumber, num: TBigNumber, options?: { sender?: string }): Promise<{_data: Array<{ market: string, bond: string, amount: TBigNumber }>, _done: boolean}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_offset","type":"uint256"},{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"getAvailableDisputes","outputs":[{"components":[{"internalType":"contract IMarket","name":"market","type":"address"},{"internalType":"contract IReportingParticipant","name":"bond","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct AuditFunds.StakeData[]","name":"_data","type":"tuple[]"},{"internalType":"bool","name":"_done","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, offset, num], options.sender)
		return <{_data: Array<{ market: string, bond: string, amount: TBigNumber }>, _done: boolean}>result
	}

	public getAvailableReports_ = async (account: string, offset: TBigNumber, num: TBigNumber, options?: { sender?: string }): Promise<{_data: Array<{ market: string, bond: string, amount: TBigNumber }>, _done: boolean}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_offset","type":"uint256"},{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"getAvailableReports","outputs":[{"components":[{"internalType":"contract IMarket","name":"market","type":"address"},{"internalType":"contract IReportingParticipant","name":"bond","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct AuditFunds.StakeData[]","name":"_data","type":"tuple[]"},{"internalType":"bool","name":"_done","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, offset, num], options.sender)
		return <{_data: Array<{ market: string, bond: string, amount: TBigNumber }>, _done: boolean}>result
	}

	public getAvailableShareData_ = async (account: string, offset: TBigNumber, num: TBigNumber, options?: { sender?: string }): Promise<{_data: Array<{ market: string, payout: TBigNumber }>, _done: boolean}> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_account","type":"address"},{"internalType":"uint256","name":"_offset","type":"uint256"},{"internalType":"uint256","name":"_num","type":"uint256"}],"name":"getAvailableShareData","outputs":[{"components":[{"internalType":"contract IMarket","name":"market","type":"address"},{"internalType":"uint256","name":"payout","type":"uint256"}],"internalType":"struct AuditFunds.ShareData[]","name":"_data","type":"tuple[]"},{"internalType":"bool","name":"_done","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [account, offset, num], options.sender)
		return <{_data: Array<{ market: string, payout: TBigNumber }>, _done: boolean}>result
	}

	public getInitialized_ = async (options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"getInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <boolean>result[0]
	}

	public initialReporterFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"initialReporterFactory","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public initialize = async (augur: string, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [augur], 'initialize', options.sender)
	}
	
	public initialize_estimateGas = async (augur: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [augur], 'initialize', options.sender)
	}

	public initialize_ = async (augur: string, options?: { sender?: string }): Promise<void> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}
		await this.localCall(abi, [augur], options.sender)
	}

	public marketFactory_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"marketFactory","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}

	public shareToken_ = async (options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[],"name":"shareToken","outputs":[{"internalType":"contract IShareToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [], options.sender)
		return <string>result[0]
	}
}


export class BuyParticipationTokens<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public buyParticipationTokens = async (universe: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"buyParticipationTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [universe, attotokens], 'buyParticipationTokens', options.sender)
	}
	
	public buyParticipationTokens_estimateGas = async (universe: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"buyParticipationTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [universe, attotokens], 'buyParticipationTokens', options.sender)
	}

	public buyParticipationTokens_ = async (universe: string, attotokens: TBigNumber, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IUniverse","name":"_universe","type":"address"},{"internalType":"uint256","name":"_attotokens","type":"uint256"}],"name":"buyParticipationTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [universe, attotokens], options.sender)
		return <boolean>result[0]
	}
}


export class Formulas<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public calculateDesignatedReportNoShowBond_ = async (previousDisputeWindow: string, previousDesignatedReportNoShowBondInAttoRep: TBigNumber, initialReportMinValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IDisputeWindow","name":"_previousDisputeWindow","type":"address"},{"internalType":"uint256","name":"_previousDesignatedReportNoShowBondInAttoRep","type":"uint256"},{"internalType":"uint256","name":"_initialReportMinValue","type":"uint256"}],"name":"calculateDesignatedReportNoShowBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [previousDisputeWindow, previousDesignatedReportNoShowBondInAttoRep, initialReportMinValue], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateDesignatedReportStake_ = async (previousDisputeWindow: string, previousDesignatedReportStakeInAttoRep: TBigNumber, initialReportMinValue: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IDisputeWindow","name":"_previousDisputeWindow","type":"address"},{"internalType":"uint256","name":"_previousDesignatedReportStakeInAttoRep","type":"uint256"},{"internalType":"uint256","name":"_initialReportMinValue","type":"uint256"}],"name":"calculateDesignatedReportStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [previousDisputeWindow, previousDesignatedReportStakeInAttoRep, initialReportMinValue], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateFloatingValue_ = async (totalBad: TBigNumber, total: TBigNumber, targetDivisor: TBigNumber, previousValue: TBigNumber, floor: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"uint256","name":"_totalBad","type":"uint256"},{"internalType":"uint256","name":"_total","type":"uint256"},{"internalType":"uint256","name":"_targetDivisor","type":"uint256"},{"internalType":"uint256","name":"_previousValue","type":"uint256"},{"internalType":"uint256","name":"_floor","type":"uint256"}],"name":"calculateFloatingValue","outputs":[{"internalType":"uint256","name":"_newValue","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"}
		const result = await this.localCall(abi, [totalBad, total, targetDivisor, previousValue, floor], options.sender)
		return <TBigNumber>result[0]
	}

	public calculateValidityBond_ = async (previousDisputeWindow: string, previousValidityBondInAttoCash: TBigNumber, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IDisputeWindow","name":"_previousDisputeWindow","type":"address"},{"internalType":"uint256","name":"_previousValidityBondInAttoCash","type":"uint256"}],"name":"calculateValidityBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [previousDisputeWindow, previousValidityBondInAttoCash], options.sender)
		return <TBigNumber>result[0]
	}
}


export class HotLoading<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getCurrentDisputeWindowData_ = async (augur: string, universe: string, options?: { sender?: string }): Promise<{ disputeWindow: string, startTime: TBigNumber, endTime: TBigNumber, purchased: TBigNumber, fees: TBigNumber }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IUniverse","name":"_universe","type":"address"}],"name":"getCurrentDisputeWindowData","outputs":[{"components":[{"internalType":"address","name":"disputeWindow","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"purchased","type":"uint256"},{"internalType":"uint256","name":"fees","type":"uint256"}],"internalType":"struct HotLoading.DisputeWindowData","name":"_disputeWindowData","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [augur, universe], options.sender)
		return <{ disputeWindow: string, startTime: TBigNumber, endTime: TBigNumber, purchased: TBigNumber, fees: TBigNumber }>result[0]
	}

	public getLastTradedPrices_ = async (market: string, numOutcomes: TBigNumber, orders: string, options?: { sender?: string }): Promise<Array<TBigNumber>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"uint256","name":"_numOutcomes","type":"uint256"},{"internalType":"contract IOrders","name":"_orders","type":"address"}],"name":"getLastTradedPrices","outputs":[{"internalType":"uint256[]","name":"_lastTradedPrices","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [market, numOutcomes, orders], options.sender)
		return <Array<TBigNumber>>result[0]
	}

	public getMarketData_ = async (augur: string, market: string, fillOrder: string, orders: string, options?: { sender?: string }): Promise<{ extraInfo: string, marketCreator: string, owner: string, outcomes: Array<string>, marketType: TBigNumber, displayPrices: Array<TBigNumber>, designatedReporter: string, reportingState: TBigNumber, disputeRound: TBigNumber, winningPayout: Array<TBigNumber>, volume: TBigNumber, openInterest: TBigNumber, lastTradedPrices: Array<TBigNumber>, universe: string, numTicks: TBigNumber, feeDivisor: TBigNumber, affiliateFeeDivisor: TBigNumber, endTime: TBigNumber, numOutcomes: TBigNumber, validityBond: TBigNumber, reportingFeeDivisor: TBigNumber, outcomeVolumes: Array<TBigNumber> }> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"},{"internalType":"contract IFillOrder","name":"_fillOrder","type":"address"},{"internalType":"contract IOrders","name":"_orders","type":"address"}],"name":"getMarketData","outputs":[{"components":[{"internalType":"string","name":"extraInfo","type":"string"},{"internalType":"address","name":"marketCreator","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32[]","name":"outcomes","type":"bytes32[]"},{"internalType":"enum IMarket.MarketType","name":"marketType","type":"uint8"},{"internalType":"int256[]","name":"displayPrices","type":"int256[]"},{"internalType":"address","name":"designatedReporter","type":"address"},{"internalType":"enum HotLoading.ReportingState","name":"reportingState","type":"uint8"},{"internalType":"uint256","name":"disputeRound","type":"uint256"},{"internalType":"uint256[]","name":"winningPayout","type":"uint256[]"},{"internalType":"uint256","name":"volume","type":"uint256"},{"internalType":"uint256","name":"openInterest","type":"uint256"},{"internalType":"uint256[]","name":"lastTradedPrices","type":"uint256[]"},{"internalType":"address","name":"universe","type":"address"},{"internalType":"uint256","name":"numTicks","type":"uint256"},{"internalType":"uint256","name":"feeDivisor","type":"uint256"},{"internalType":"uint256","name":"affiliateFeeDivisor","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"numOutcomes","type":"uint256"},{"internalType":"uint256","name":"validityBond","type":"uint256"},{"internalType":"uint256","name":"reportingFeeDivisor","type":"uint256"},{"internalType":"uint256[]","name":"outcomeVolumes","type":"uint256[]"}],"internalType":"struct HotLoading.MarketData","name":"_marketData","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [augur, market, fillOrder, orders], options.sender)
		return <{ extraInfo: string, marketCreator: string, owner: string, outcomes: Array<string>, marketType: TBigNumber, displayPrices: Array<TBigNumber>, designatedReporter: string, reportingState: TBigNumber, disputeRound: TBigNumber, winningPayout: Array<TBigNumber>, volume: TBigNumber, openInterest: TBigNumber, lastTradedPrices: Array<TBigNumber>, universe: string, numTicks: TBigNumber, feeDivisor: TBigNumber, affiliateFeeDivisor: TBigNumber, endTime: TBigNumber, numOutcomes: TBigNumber, validityBond: TBigNumber, reportingFeeDivisor: TBigNumber, outcomeVolumes: Array<TBigNumber> }>result[0]
	}

	public getMarketsData_ = async (augur: string, markets: Array<string>, fillOrder: string, orders: string, options?: { sender?: string }): Promise<Array<{ extraInfo: string, marketCreator: string, owner: string, outcomes: Array<string>, marketType: TBigNumber, displayPrices: Array<TBigNumber>, designatedReporter: string, reportingState: TBigNumber, disputeRound: TBigNumber, winningPayout: Array<TBigNumber>, volume: TBigNumber, openInterest: TBigNumber, lastTradedPrices: Array<TBigNumber>, universe: string, numTicks: TBigNumber, feeDivisor: TBigNumber, affiliateFeeDivisor: TBigNumber, endTime: TBigNumber, numOutcomes: TBigNumber, validityBond: TBigNumber, reportingFeeDivisor: TBigNumber, outcomeVolumes: Array<TBigNumber> }>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket[]","name":"_markets","type":"address[]"},{"internalType":"contract IFillOrder","name":"_fillOrder","type":"address"},{"internalType":"contract IOrders","name":"_orders","type":"address"}],"name":"getMarketsData","outputs":[{"components":[{"internalType":"string","name":"extraInfo","type":"string"},{"internalType":"address","name":"marketCreator","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32[]","name":"outcomes","type":"bytes32[]"},{"internalType":"enum IMarket.MarketType","name":"marketType","type":"uint8"},{"internalType":"int256[]","name":"displayPrices","type":"int256[]"},{"internalType":"address","name":"designatedReporter","type":"address"},{"internalType":"enum HotLoading.ReportingState","name":"reportingState","type":"uint8"},{"internalType":"uint256","name":"disputeRound","type":"uint256"},{"internalType":"uint256[]","name":"winningPayout","type":"uint256[]"},{"internalType":"uint256","name":"volume","type":"uint256"},{"internalType":"uint256","name":"openInterest","type":"uint256"},{"internalType":"uint256[]","name":"lastTradedPrices","type":"uint256[]"},{"internalType":"address","name":"universe","type":"address"},{"internalType":"uint256","name":"numTicks","type":"uint256"},{"internalType":"uint256","name":"feeDivisor","type":"uint256"},{"internalType":"uint256","name":"affiliateFeeDivisor","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"numOutcomes","type":"uint256"},{"internalType":"uint256","name":"validityBond","type":"uint256"},{"internalType":"uint256","name":"reportingFeeDivisor","type":"uint256"},{"internalType":"uint256[]","name":"outcomeVolumes","type":"uint256[]"}],"internalType":"struct HotLoading.MarketData[]","name":"_marketsData","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [augur, markets, fillOrder, orders], options.sender)
		return <Array<{ extraInfo: string, marketCreator: string, owner: string, outcomes: Array<string>, marketType: TBigNumber, displayPrices: Array<TBigNumber>, designatedReporter: string, reportingState: TBigNumber, disputeRound: TBigNumber, winningPayout: Array<TBigNumber>, volume: TBigNumber, openInterest: TBigNumber, lastTradedPrices: Array<TBigNumber>, universe: string, numTicks: TBigNumber, feeDivisor: TBigNumber, affiliateFeeDivisor: TBigNumber, endTime: TBigNumber, numOutcomes: TBigNumber, validityBond: TBigNumber, reportingFeeDivisor: TBigNumber, outcomeVolumes: Array<TBigNumber> }>>result[0]
	}

	public getReportingState_ = async (augur: string, market: string, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IAugur","name":"_augur","type":"address"},{"internalType":"contract IMarket","name":"_market","type":"address"}],"name":"getReportingState","outputs":[{"internalType":"enum HotLoading.ReportingState","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [augur, market], options.sender)
		return <TBigNumber>result[0]
	}

	public getTotalValidityBonds_ = async (markets: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"contract IMarket[]","name":"_markets","type":"address[]"}],"name":"getTotalValidityBonds","outputs":[{"internalType":"uint256","name":"_totalValidityBonds","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [markets], options.sender)
		return <TBigNumber>result[0]
	}
}


export class RedeemStake<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public redeemStake = async (reportingParticipants: Array<string>, disputeWindows: Array<string>, options?: { sender?: string }): Promise<Array<Event>> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReportingParticipant[]","name":"_reportingParticipants","type":"address[]"},{"internalType":"contract IDisputeWindow[]","name":"_disputeWindows","type":"address[]"}],"name":"redeemStake","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.remoteCall(abi, [reportingParticipants, disputeWindows], 'redeemStake', options.sender)
	}
	
	public redeemStake_estimateGas = async (reportingParticipants: Array<string>, disputeWindows: Array<string>, options?: { sender?: string }): Promise<TBigNumber> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReportingParticipant[]","name":"_reportingParticipants","type":"address[]"},{"internalType":"contract IDisputeWindow[]","name":"_disputeWindows","type":"address[]"}],"name":"redeemStake","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		return await this.estimateGas(abi, [reportingParticipants, disputeWindows], 'redeemStake', options.sender)
	}

	public redeemStake_ = async (reportingParticipants: Array<string>, disputeWindows: Array<string>, options?: { sender?: string }): Promise<boolean> => {
		options = options || {}
		const abi: AbiFunction = {"constant":false,"inputs":[{"internalType":"contract IReportingParticipant[]","name":"_reportingParticipants","type":"address[]"},{"internalType":"contract IDisputeWindow[]","name":"_disputeWindows","type":"address[]"}],"name":"redeemStake","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}
		const result = await this.localCall(abi, [reportingParticipants, disputeWindows], options.sender)
		return <boolean>result[0]
	}
}


export class RepSymbol<TBigNumber> extends Contract<TBigNumber> {
	public constructor(dependencies: Dependencies<TBigNumber>, address: string) {
		super(dependencies, address)
	}

	public getRepSymbol_ = async (augurAddress: string, universeAddress: string, options?: { sender?: string }): Promise<string> => {
		options = options || {}
		const abi: AbiFunction = {"constant":true,"inputs":[{"internalType":"address","name":"_augurAddress","type":"address"},{"internalType":"address","name":"_universeAddress","type":"address"}],"name":"getRepSymbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}
		const result = await this.localCall(abi, [augurAddress, universeAddress], options.sender)
		return <string>result[0]
	}
}

