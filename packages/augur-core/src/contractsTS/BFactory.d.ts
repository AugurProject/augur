/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BFactoryInterface extends ethers.utils.Interface {
  functions: {
    "collect(address)": FunctionFragment;
    "getBLabs()": FunctionFragment;
    "getColor()": FunctionFragment;
    "isBPool(address)": FunctionFragment;
    "newBPool()": FunctionFragment;
    "setBLabs(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "collect", values: [string]): string;
  encodeFunctionData(functionFragment: "getBLabs", values?: undefined): string;
  encodeFunctionData(functionFragment: "getColor", values?: undefined): string;
  encodeFunctionData(functionFragment: "isBPool", values: [string]): string;
  encodeFunctionData(functionFragment: "newBPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBLabs", values: [string]): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBLabs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBLabs", data: BytesLike): Result;

  events: {
    "LOG_BLABS(address,address)": EventFragment;
    "LOG_NEW_POOL(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LOG_BLABS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LOG_NEW_POOL"): EventFragment;
}

export class BFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: BFactoryInterface;

  functions: {
    collect(pool: string, overrides?: Overrides): Promise<ContractTransaction>;

    "collect(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBLabs(overrides?: CallOverrides): Promise<[string]>;

    "getBLabs()"(overrides?: CallOverrides): Promise<[string]>;

    getColor(overrides?: CallOverrides): Promise<[string]>;

    "getColor()"(overrides?: CallOverrides): Promise<[string]>;

    isBPool(b: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newBPool(overrides?: Overrides): Promise<ContractTransaction>;

    "newBPool()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBLabs(b: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setBLabs(address)"(
      b: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  collect(pool: string, overrides?: Overrides): Promise<ContractTransaction>;

  "collect(address)"(
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBLabs(overrides?: CallOverrides): Promise<string>;

  "getBLabs()"(overrides?: CallOverrides): Promise<string>;

  getColor(overrides?: CallOverrides): Promise<string>;

  "getColor()"(overrides?: CallOverrides): Promise<string>;

  isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

  "isBPool(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

  newBPool(overrides?: Overrides): Promise<ContractTransaction>;

  "newBPool()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBLabs(b: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setBLabs(address)"(
    b: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    collect(pool: string, overrides?: CallOverrides): Promise<void>;

    "collect(address)"(pool: string, overrides?: CallOverrides): Promise<void>;

    getBLabs(overrides?: CallOverrides): Promise<string>;

    "getBLabs()"(overrides?: CallOverrides): Promise<string>;

    getColor(overrides?: CallOverrides): Promise<string>;

    "getColor()"(overrides?: CallOverrides): Promise<string>;

    isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

    "isBPool(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

    newBPool(overrides?: CallOverrides): Promise<string>;

    "newBPool()"(overrides?: CallOverrides): Promise<string>;

    setBLabs(b: string, overrides?: CallOverrides): Promise<void>;

    "setBLabs(address)"(b: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LOG_BLABS(
      caller: string | null,
      blabs: string | null
    ): TypedEventFilter<[string, string], { caller: string; blabs: string }>;

    LOG_NEW_POOL(
      caller: string | null,
      pool: string | null
    ): TypedEventFilter<[string, string], { caller: string; pool: string }>;
  };

  estimateGas: {
    collect(pool: string, overrides?: Overrides): Promise<BigNumber>;

    "collect(address)"(pool: string, overrides?: Overrides): Promise<BigNumber>;

    getBLabs(overrides?: CallOverrides): Promise<BigNumber>;

    "getBLabs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getColor(overrides?: CallOverrides): Promise<BigNumber>;

    "getColor()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBPool(b: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newBPool(overrides?: Overrides): Promise<BigNumber>;

    "newBPool()"(overrides?: Overrides): Promise<BigNumber>;

    setBLabs(b: string, overrides?: Overrides): Promise<BigNumber>;

    "setBLabs(address)"(b: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collect(pool: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "collect(address)"(
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBLabs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBLabs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getColor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBPool(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newBPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "newBPool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBLabs(b: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setBLabs(address)"(
      b: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
