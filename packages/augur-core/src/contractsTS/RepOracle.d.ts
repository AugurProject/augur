/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RepOracleInterface extends ethers.utils.Interface {
  functions: {
    "PERIOD()": FunctionFragment;
    "augur()": FunctionFragment;
    "cash()": FunctionFragment;
    "genesisInitialRepPriceinAttoCash()": FunctionFragment;
    "getExchange(address)": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getLastUpdateTimestamp(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getPriceCumulativeLast(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "poke(address)": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PERIOD", values?: undefined): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "genesisInitialRepPriceinAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getExchange", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdateTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPriceCumulativeLast",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "poke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "PERIOD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genesisInitialRepPriceinAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceCumulativeLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export class RepOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: RepOracleInterface;

  functions: {
    PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PERIOD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    genesisInitialRepPriceinAttoCash(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "genesisInitialRepPriceinAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExchange(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getExchange(address)"(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getLastUpdateTimestamp(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastUpdateTimestamp(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPrice(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceCumulativeLast(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceCumulativeLast(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _augur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poke(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "poke(address)"(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<[string]>;
  };

  PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  genesisInitialRepPriceinAttoCash(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "genesisInitialRepPriceinAttoCash()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExchange(
    _reputationToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getExchange(address)"(
    _reputationToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getLastUpdateTimestamp(
    _reputationToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastUpdateTimestamp(address)"(
    _reputationToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _reputationToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPrice(address)"(
    _reputationToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceCumulativeLast(
    _reputationToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceCumulativeLast(address)"(
    _reputationToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _augur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _augur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poke(
    _reputationToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "poke(address)"(
    _reputationToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    genesisInitialRepPriceinAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "genesisInitialRepPriceinAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getExchange(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getLastUpdateTimestamp(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastUpdateTimestamp(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceCumulativeLast(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceCumulativeLast(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_augur: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _augur: string,
      overrides?: CallOverrides
    ): Promise<void>;

    poke(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poke(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisInitialRepPriceinAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "genesisInitialRepPriceinAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getExchange(address)"(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastUpdateTimestamp(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastUpdateTimestamp(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceCumulativeLast(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceCumulativeLast(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_augur: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poke(_reputationToken: string, overrides?: Overrides): Promise<BigNumber>;

    "poke(address)"(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisInitialRepPriceinAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "genesisInitialRepPriceinAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getExchange(address)"(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdateTimestamp(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastUpdateTimestamp(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceCumulativeLast(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceCumulativeLast(address)"(
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poke(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "poke(address)"(
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
