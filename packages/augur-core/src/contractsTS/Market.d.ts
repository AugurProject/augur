/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "affiliateFeeDivisor()": FunctionFragment;
    "augur()": FunctionFragment;
    "cash()": FunctionFragment;
    "contribute(uint256[],uint256,string)": FunctionFragment;
    "contributeToTentative(uint256[],uint256,string)": FunctionFragment;
    "crowdsourcerGeneration()": FunctionFragment;
    "crowdsourcers(bytes32)": FunctionFragment;
    "deriveMarketCreatorFeeAmount(uint256)": FunctionFragment;
    "derivePayoutDistributionHash(uint256[])": FunctionFragment;
    "disavowCrowdsourcers()": FunctionFragment;
    "doInitialReport(uint256[],string,uint256)": FunctionFragment;
    "finalize()": FunctionFragment;
    "getCrowdsourcer(bytes32)": FunctionFragment;
    "getDesignatedReportingEndTime()": FunctionFragment;
    "getDisputePacingOn()": FunctionFragment;
    "getDisputeWindow()": FunctionFragment;
    "getEndTime()": FunctionFragment;
    "getFinalizationTime()": FunctionFragment;
    "getForkingMarket()": FunctionFragment;
    "getHighestNonTentativeParticipantStake()": FunctionFragment;
    "getInitialReporter()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getMarketCreatorSettlementFeeDivisor()": FunctionFragment;
    "getNumParticipants()": FunctionFragment;
    "getNumTicks()": FunctionFragment;
    "getNumberOfOutcomes()": FunctionFragment;
    "getOpenInterest()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getParticipantStake()": FunctionFragment;
    "getReputationToken()": FunctionFragment;
    "getStakeInOutcome(bytes32)": FunctionFragment;
    "getUniverse()": FunctionFragment;
    "getValidityBondAttoCash()": FunctionFragment;
    "getWinningChildPayout(uint256)": FunctionFragment;
    "getWinningPayoutDistributionHash()": FunctionFragment;
    "getWinningPayoutNumerator(uint256)": FunctionFragment;
    "getWinningReportingParticipant()": FunctionFragment;
    "initialize(address,address,uint256,uint256,address,uint256,address,address,uint256,uint256)": FunctionFragment;
    "isContainerForReportingParticipant(address)": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "isFinalizedAsInvalid()": FunctionFragment;
    "isForkingMarket()": FunctionFragment;
    "marketCreatorFeesAttoCash()": FunctionFragment;
    "migrateThroughOneFork(uint256[],string)": FunctionFragment;
    "participants(uint256)": FunctionFragment;
    "preemptiveDisputeCrowdsourcer()": FunctionFragment;
    "recordMarketCreatorFees(uint256,address,bytes32)": FunctionFragment;
    "repBond()": FunctionFragment;
    "repBondOwner()": FunctionFragment;
    "shareToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRepBondOwnership(address)": FunctionFragment;
    "validityBondAttoCash()": FunctionFragment;
    "warpSync()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "affiliateFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeToTentative",
    values: [BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdsourcerGeneration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crowdsourcers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveMarketCreatorFeeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "derivePayoutDistributionHash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disavowCrowdsourcers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doInitialReport",
    values: [BigNumberish[], string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCrowdsourcer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDesignatedReportingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputePacingOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalizationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForkingMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestNonTentativeParticipantStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialReporter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCreatorSettlementFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTicks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfOutcomes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getParticipantStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInOutcome",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidityBondAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningChildPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningPayoutDistributionHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningPayoutNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningReportingParticipant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isContainerForReportingParticipant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalizedAsInvalid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isForkingMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreatorFeesAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateThroughOneFork",
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preemptiveDisputeCrowdsourcer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordMarketCreatorFees",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "repBond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repBondOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRepBondOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validityBondAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "warpSync", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "affiliateFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributeToTentative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdsourcerGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdsourcers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveMarketCreatorFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivePayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disavowCrowdsourcers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doInitialReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCrowdsourcer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesignatedReportingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputePacingOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEndTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFinalizationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForkingMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestNonTentativeParticipantStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCreatorSettlementFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidityBondAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningChildPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningPayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningReportingParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isContainerForReportingParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalizedAsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForkingMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreatorFeesAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateThroughOneFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preemptiveDisputeCrowdsourcer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordMarketCreatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repBondOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRepBondOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validityBondAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warpSync", data: BytesLike): Result;

  events: {};
}

export class Market extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: MarketInterface;

  functions: {
    affiliateFeeDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "affiliateFeeDivisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    contribute(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "contribute(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contributeToTentative(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "contributeToTentative(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    crowdsourcerGeneration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    crowdsourcers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "crowdsourcers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deriveMarketCreatorFeeAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "deriveMarketCreatorFeeAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "derivePayoutDistributionHash(uint256[])"(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    disavowCrowdsourcers(overrides?: Overrides): Promise<ContractTransaction>;

    "disavowCrowdsourcers()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    doInitialReport(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "doInitialReport(uint256[],string,uint256)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    getCrowdsourcer(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCrowdsourcer(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDesignatedReportingEndTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDesignatedReportingEndTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputePacingOn(overrides?: CallOverrides): Promise<[boolean]>;

    "getDisputePacingOn()"(overrides?: CallOverrides): Promise<[boolean]>;

    getDisputeWindow(overrides?: CallOverrides): Promise<[string]>;

    "getDisputeWindow()"(overrides?: CallOverrides): Promise<[string]>;

    getEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEndTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFinalizationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFinalizationTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForkingMarket(overrides?: CallOverrides): Promise<[string]>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<[string]>;

    getHighestNonTentativeParticipantStake(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getHighestNonTentativeParticipantStake()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitialReporter(overrides?: CallOverrides): Promise<[string]>;

    "getInitialReporter()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getMarketCreatorSettlementFeeDivisor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMarketCreatorSettlementFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumParticipants()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumTicks(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumTicks()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfOutcomes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumberOfOutcomes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOpenInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getOpenInterest()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getParticipantStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getParticipantStake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    getStakeInOutcome(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getStakeInOutcome(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniverse(overrides?: CallOverrides): Promise<[string]>;

    "getUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    getValidityBondAttoCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getValidityBondAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinningChildPayout(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWinningChildPayout(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinningPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getWinningPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWinningPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWinningPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinningReportingParticipant(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getWinningReportingParticipant()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256,address,uint256,address,address,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    "isFinalized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isFinalizedAsInvalid(overrides?: CallOverrides): Promise<[boolean]>;

    "isFinalizedAsInvalid()"(overrides?: CallOverrides): Promise<[boolean]>;

    isForkingMarket(overrides?: CallOverrides): Promise<[boolean]>;

    "isForkingMarket()"(overrides?: CallOverrides): Promise<[boolean]>;

    marketCreatorFeesAttoCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "marketCreatorFeesAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrateThroughOneFork(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateThroughOneFork(uint256[],string)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    preemptiveDisputeCrowdsourcer(overrides?: CallOverrides): Promise<[string]>;

    "preemptiveDisputeCrowdsourcer()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    recordMarketCreatorFees(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordMarketCreatorFees(uint256,address,bytes32)"(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repBond(overrides?: CallOverrides): Promise<[BigNumber]>;

    "repBond()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    repBondOwner(overrides?: CallOverrides): Promise<[string]>;

    "repBondOwner()"(overrides?: CallOverrides): Promise<[string]>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferRepBondOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferRepBondOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validityBondAttoCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "validityBondAttoCash()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    warpSync(overrides?: CallOverrides): Promise<[string]>;

    "warpSync()"(overrides?: CallOverrides): Promise<[string]>;
  };

  affiliateFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "affiliateFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  contribute(
    _payoutNumerators: BigNumberish[],
    _amount: BigNumberish,
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "contribute(uint256[],uint256,string)"(
    _payoutNumerators: BigNumberish[],
    _amount: BigNumberish,
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contributeToTentative(
    _payoutNumerators: BigNumberish[],
    _amount: BigNumberish,
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "contributeToTentative(uint256[],uint256,string)"(
    _payoutNumerators: BigNumberish[],
    _amount: BigNumberish,
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  crowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

  "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

  crowdsourcers(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "crowdsourcers(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  deriveMarketCreatorFeeAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deriveMarketCreatorFeeAmount(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  derivePayoutDistributionHash(
    _payoutNumerators: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  "derivePayoutDistributionHash(uint256[])"(
    _payoutNumerators: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  disavowCrowdsourcers(overrides?: Overrides): Promise<ContractTransaction>;

  "disavowCrowdsourcers()"(overrides?: Overrides): Promise<ContractTransaction>;

  doInitialReport(
    _payoutNumerators: BigNumberish[],
    _description: string,
    _additionalStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "doInitialReport(uint256[],string,uint256)"(
    _payoutNumerators: BigNumberish[],
    _description: string,
    _additionalStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  getCrowdsourcer(
    _payoutDistributionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCrowdsourcer(bytes32)"(
    _payoutDistributionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getDesignatedReportingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getDesignatedReportingEndTime()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputePacingOn(overrides?: CallOverrides): Promise<boolean>;

  "getDisputePacingOn()"(overrides?: CallOverrides): Promise<boolean>;

  getDisputeWindow(overrides?: CallOverrides): Promise<string>;

  "getDisputeWindow()"(overrides?: CallOverrides): Promise<string>;

  getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFinalizationTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getFinalizationTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getForkingMarket(overrides?: CallOverrides): Promise<string>;

  "getForkingMarket()"(overrides?: CallOverrides): Promise<string>;

  getHighestNonTentativeParticipantStake(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getHighestNonTentativeParticipantStake()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitialReporter(overrides?: CallOverrides): Promise<string>;

  "getInitialReporter()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getMarketCreatorSettlementFeeDivisor(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketCreatorSettlementFeeDivisor()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumParticipants()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumTicks(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumTicks()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfOutcomes(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfOutcomes()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

  "getOpenInterest()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getParticipantStake(overrides?: CallOverrides): Promise<BigNumber>;

  "getParticipantStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationToken(overrides?: CallOverrides): Promise<string>;

  "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

  getStakeInOutcome(
    _payoutDistributionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStakeInOutcome(bytes32)"(
    _payoutDistributionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniverse(overrides?: CallOverrides): Promise<string>;

  "getUniverse()"(overrides?: CallOverrides): Promise<string>;

  getValidityBondAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

  "getValidityBondAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

  getWinningChildPayout(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWinningChildPayout(uint256)"(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWinningPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

  "getWinningPayoutDistributionHash()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getWinningPayoutNumerator(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWinningPayoutNumerator(uint256)"(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWinningReportingParticipant(overrides?: CallOverrides): Promise<string>;

  "getWinningReportingParticipant()"(
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _augur: string,
    _universe: string,
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _creator: string,
    _numOutcomes: BigNumberish,
    _numTicks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256,address,uint256,address,address,uint256,uint256)"(
    _augur: string,
    _universe: string,
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _creator: string,
    _numOutcomes: BigNumberish,
    _numTicks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isContainerForReportingParticipant(
    _shadyReportingParticipant: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isContainerForReportingParticipant(address)"(
    _shadyReportingParticipant: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  "isFinalized()"(overrides?: CallOverrides): Promise<boolean>;

  isFinalizedAsInvalid(overrides?: CallOverrides): Promise<boolean>;

  "isFinalizedAsInvalid()"(overrides?: CallOverrides): Promise<boolean>;

  isForkingMarket(overrides?: CallOverrides): Promise<boolean>;

  "isForkingMarket()"(overrides?: CallOverrides): Promise<boolean>;

  marketCreatorFeesAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

  "marketCreatorFeesAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

  migrateThroughOneFork(
    _payoutNumerators: BigNumberish[],
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateThroughOneFork(uint256[],string)"(
    _payoutNumerators: BigNumberish[],
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  participants(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "participants(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  preemptiveDisputeCrowdsourcer(overrides?: CallOverrides): Promise<string>;

  "preemptiveDisputeCrowdsourcer()"(overrides?: CallOverrides): Promise<string>;

  recordMarketCreatorFees(
    _marketCreatorFees: BigNumberish,
    _sourceAccount: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordMarketCreatorFees(uint256,address,bytes32)"(
    _marketCreatorFees: BigNumberish,
    _sourceAccount: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repBond(overrides?: CallOverrides): Promise<BigNumber>;

  "repBond()"(overrides?: CallOverrides): Promise<BigNumber>;

  repBondOwner(overrides?: CallOverrides): Promise<string>;

  "repBondOwner()"(overrides?: CallOverrides): Promise<string>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferRepBondOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferRepBondOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validityBondAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

  "validityBondAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

  warpSync(overrides?: CallOverrides): Promise<string>;

  "warpSync()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    affiliateFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "affiliateFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    contribute(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "contribute(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contributeToTentative(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "contributeToTentative(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    crowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

    "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

    crowdsourcers(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "crowdsourcers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deriveMarketCreatorFeeAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveMarketCreatorFeeAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "derivePayoutDistributionHash(uint256[])"(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    disavowCrowdsourcers(overrides?: CallOverrides): Promise<boolean>;

    "disavowCrowdsourcers()"(overrides?: CallOverrides): Promise<boolean>;

    doInitialReport(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "doInitialReport(uint256[],string,uint256)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalize(overrides?: CallOverrides): Promise<boolean>;

    "finalize()"(overrides?: CallOverrides): Promise<boolean>;

    getCrowdsourcer(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCrowdsourcer(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getDesignatedReportingEndTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDesignatedReportingEndTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputePacingOn(overrides?: CallOverrides): Promise<boolean>;

    "getDisputePacingOn()"(overrides?: CallOverrides): Promise<boolean>;

    getDisputeWindow(overrides?: CallOverrides): Promise<string>;

    "getDisputeWindow()"(overrides?: CallOverrides): Promise<string>;

    getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalizationTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getFinalizationTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkingMarket(overrides?: CallOverrides): Promise<string>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<string>;

    getHighestNonTentativeParticipantStake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHighestNonTentativeParticipantStake()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialReporter(overrides?: CallOverrides): Promise<string>;

    "getInitialReporter()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getMarketCreatorSettlementFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketCreatorSettlementFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumParticipants()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTicks(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTicks()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfOutcomes(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfOutcomes()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterest()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getParticipantStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getParticipantStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<string>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

    getStakeInOutcome(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakeInOutcome(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverse(overrides?: CallOverrides): Promise<string>;

    "getUniverse()"(overrides?: CallOverrides): Promise<string>;

    getValidityBondAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getValidityBondAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWinningChildPayout(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningChildPayout(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<string>;

    "getWinningPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getWinningPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningReportingParticipant(overrides?: CallOverrides): Promise<string>;

    "getWinningReportingParticipant()"(
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256,address,uint256,address,address,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    "isFinalized()"(overrides?: CallOverrides): Promise<boolean>;

    isFinalizedAsInvalid(overrides?: CallOverrides): Promise<boolean>;

    "isFinalizedAsInvalid()"(overrides?: CallOverrides): Promise<boolean>;

    isForkingMarket(overrides?: CallOverrides): Promise<boolean>;

    "isForkingMarket()"(overrides?: CallOverrides): Promise<boolean>;

    marketCreatorFeesAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "marketCreatorFeesAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateThroughOneFork(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "migrateThroughOneFork(uint256[],string)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    preemptiveDisputeCrowdsourcer(overrides?: CallOverrides): Promise<string>;

    "preemptiveDisputeCrowdsourcer()"(
      overrides?: CallOverrides
    ): Promise<string>;

    recordMarketCreatorFees(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "recordMarketCreatorFees(uint256,address,bytes32)"(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    repBond(overrides?: CallOverrides): Promise<BigNumber>;

    "repBond()"(overrides?: CallOverrides): Promise<BigNumber>;

    repBondOwner(overrides?: CallOverrides): Promise<string>;

    "repBondOwner()"(overrides?: CallOverrides): Promise<string>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferRepBondOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferRepBondOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validityBondAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "validityBondAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    warpSync(overrides?: CallOverrides): Promise<string>;

    "warpSync()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    affiliateFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "affiliateFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "contribute(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contributeToTentative(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "contributeToTentative(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    crowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

    "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

    crowdsourcers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "crowdsourcers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deriveMarketCreatorFeeAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveMarketCreatorFeeAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "derivePayoutDistributionHash(uint256[])"(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disavowCrowdsourcers(overrides?: Overrides): Promise<BigNumber>;

    "disavowCrowdsourcers()"(overrides?: Overrides): Promise<BigNumber>;

    doInitialReport(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "doInitialReport(uint256[],string,uint256)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    getCrowdsourcer(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCrowdsourcer(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDesignatedReportingEndTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDesignatedReportingEndTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputePacingOn(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputePacingOn()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDisputeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputeWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalizationTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getFinalizationTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkingMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHighestNonTentativeParticipantStake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHighestNonTentativeParticipantStake()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialReporter(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialReporter()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketCreatorSettlementFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketCreatorSettlementFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumParticipants()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTicks(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTicks()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfOutcomes(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfOutcomes()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterest()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getParticipantStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getParticipantStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInOutcome(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakeInOutcome(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "getUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    getValidityBondAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getValidityBondAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWinningChildPayout(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningChildPayout(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningReportingParticipant(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningReportingParticipant()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256,address,uint256,address,address,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    "isFinalized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFinalizedAsInvalid(overrides?: CallOverrides): Promise<BigNumber>;

    "isFinalizedAsInvalid()"(overrides?: CallOverrides): Promise<BigNumber>;

    isForkingMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "isForkingMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketCreatorFeesAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "marketCreatorFeesAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateThroughOneFork(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateThroughOneFork(uint256[],string)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preemptiveDisputeCrowdsourcer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preemptiveDisputeCrowdsourcer()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordMarketCreatorFees(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordMarketCreatorFees(uint256,address,bytes32)"(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repBond(overrides?: CallOverrides): Promise<BigNumber>;

    "repBond()"(overrides?: CallOverrides): Promise<BigNumber>;

    repBondOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "repBondOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferRepBondOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferRepBondOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validityBondAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "validityBondAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    warpSync(overrides?: CallOverrides): Promise<BigNumber>;

    "warpSync()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    affiliateFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "affiliateFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "contribute(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contributeToTentative(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "contributeToTentative(uint256[],uint256,string)"(
      _payoutNumerators: BigNumberish[],
      _amount: BigNumberish,
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    crowdsourcerGeneration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "crowdsourcerGeneration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crowdsourcers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "crowdsourcers(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deriveMarketCreatorFeeAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deriveMarketCreatorFeeAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "derivePayoutDistributionHash(uint256[])"(
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disavowCrowdsourcers(overrides?: Overrides): Promise<PopulatedTransaction>;

    "disavowCrowdsourcers()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    doInitialReport(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "doInitialReport(uint256[],string,uint256)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      _additionalStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getCrowdsourcer(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCrowdsourcer(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDesignatedReportingEndTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDesignatedReportingEndTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputePacingOn(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputePacingOn()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDisputeWindow()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEndTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFinalizationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFinalizationTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForkingMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getForkingMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHighestNonTentativeParticipantStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHighestNonTentativeParticipantStake()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialReporter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitialReporter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCreatorSettlementFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketCreatorSettlementFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumParticipants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumParticipants()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumTicks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfOutcomes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfOutcomes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOpenInterest()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParticipantStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParticipantStake()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInOutcome(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakeInOutcome(bytes32)"(
      _payoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUniverse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidityBondAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidityBondAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningChildPayout(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningChildPayout(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningReportingParticipant(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningReportingParticipant()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256,address,uint256,address,address,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _creator: string,
      _numOutcomes: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFinalized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFinalizedAsInvalid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFinalizedAsInvalid()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForkingMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isForkingMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketCreatorFeesAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketCreatorFeesAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateThroughOneFork(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateThroughOneFork(uint256[],string)"(
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participants(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preemptiveDisputeCrowdsourcer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "preemptiveDisputeCrowdsourcer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordMarketCreatorFees(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordMarketCreatorFees(uint256,address,bytes32)"(
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "repBond()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repBondOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "repBondOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferRepBondOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferRepBondOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validityBondAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validityBondAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warpSync(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "warpSync()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
