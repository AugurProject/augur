/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface InitialReporterInterface extends ethers.utils.Interface {
  functions: {
    "augur()": FunctionFragment;
    "designatedReporterShowed()": FunctionFragment;
    "fork()": FunctionFragment;
    "forkAndRedeem()": FunctionFragment;
    "getDesignatedReporter()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getMarket()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPayoutDistributionHash()": FunctionFragment;
    "getPayoutNumerator(uint256)": FunctionFragment;
    "getPayoutNumerators()": FunctionFragment;
    "getReportTimestamp()": FunctionFragment;
    "getReputationToken()": FunctionFragment;
    "getSize()": FunctionFragment;
    "getStake()": FunctionFragment;
    "initialReporterWasCorrect()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isDisavowed()": FunctionFragment;
    "liquidateLosing()": FunctionFragment;
    "migrateToNewUniverse(address)": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "report(address,bytes32,uint256[],uint256)": FunctionFragment;
    "returnRepFromDisavow()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "designatedReporterShowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forkAndRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDesignatedReporter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayoutDistributionHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutNumerators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReportTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialReporterWasCorrect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisavowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLosing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToNewUniverse",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [string, BytesLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnRepFromDisavow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "designatedReporterShowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forkAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesignatedReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutNumerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialReporterWasCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDisavowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToNewUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnRepFromDisavow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class InitialReporter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: InitialReporterInterface;

  functions: {
    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    designatedReporterShowed(overrides?: CallOverrides): Promise<[boolean]>;

    "designatedReporterShowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    fork(overrides?: Overrides): Promise<ContractTransaction>;

    "fork()"(overrides?: Overrides): Promise<ContractTransaction>;

    forkAndRedeem(overrides?: Overrides): Promise<ContractTransaction>;

    "forkAndRedeem()"(overrides?: Overrides): Promise<ContractTransaction>;

    getDesignatedReporter(overrides?: CallOverrides): Promise<[string]>;

    "getDesignatedReporter()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getMarket(overrides?: CallOverrides): Promise<[string]>;

    "getMarket()"(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getPayoutDistributionHash(overrides?: CallOverrides): Promise<[string]>;

    "getPayoutDistributionHash()"(overrides?: CallOverrides): Promise<[string]>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getReportTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReportTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    getSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getStake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialReporterWasCorrect(overrides?: CallOverrides): Promise<[boolean]>;

    "initialReporterWasCorrect()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isDisavowed(overrides?: CallOverrides): Promise<[boolean]>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateLosing(overrides?: Overrides): Promise<ContractTransaction>;

    "liquidateLosing()"(overrides?: Overrides): Promise<ContractTransaction>;

    migrateToNewUniverse(
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateToNewUniverse(address)"(
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeem(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

    "redeem(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    report(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "report(address,bytes32,uint256[],uint256)"(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    returnRepFromDisavow(overrides?: Overrides): Promise<ContractTransaction>;

    "returnRepFromDisavow()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  designatedReporterShowed(overrides?: CallOverrides): Promise<boolean>;

  "designatedReporterShowed()"(overrides?: CallOverrides): Promise<boolean>;

  fork(overrides?: Overrides): Promise<ContractTransaction>;

  "fork()"(overrides?: Overrides): Promise<ContractTransaction>;

  forkAndRedeem(overrides?: Overrides): Promise<ContractTransaction>;

  "forkAndRedeem()"(overrides?: Overrides): Promise<ContractTransaction>;

  getDesignatedReporter(overrides?: CallOverrides): Promise<string>;

  "getDesignatedReporter()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getMarket(overrides?: CallOverrides): Promise<string>;

  "getMarket()"(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

  "getPayoutDistributionHash()"(overrides?: CallOverrides): Promise<string>;

  getPayoutNumerator(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPayoutNumerator(uint256)"(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getReportTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getReportTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationToken(overrides?: CallOverrides): Promise<string>;

  "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

  getSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStake(overrides?: CallOverrides): Promise<BigNumber>;

  "getStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialReporterWasCorrect(overrides?: CallOverrides): Promise<boolean>;

  "initialReporterWasCorrect()"(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _augur: string,
    _market: string,
    _designatedReporter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _augur: string,
    _market: string,
    _designatedReporter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isDisavowed(overrides?: CallOverrides): Promise<boolean>;

  "isDisavowed()"(overrides?: CallOverrides): Promise<boolean>;

  liquidateLosing(overrides?: Overrides): Promise<ContractTransaction>;

  "liquidateLosing()"(overrides?: Overrides): Promise<ContractTransaction>;

  migrateToNewUniverse(
    _designatedReporter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateToNewUniverse(address)"(
    _designatedReporter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeem(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

  "redeem(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  report(
    _reporter: string,
    _payoutDistributionHash: BytesLike,
    _payoutNumerators: BigNumberish[],
    _initialReportStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "report(address,bytes32,uint256[],uint256)"(
    _reporter: string,
    _payoutDistributionHash: BytesLike,
    _payoutNumerators: BigNumberish[],
    _initialReportStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  returnRepFromDisavow(overrides?: Overrides): Promise<ContractTransaction>;

  "returnRepFromDisavow()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    designatedReporterShowed(overrides?: CallOverrides): Promise<boolean>;

    "designatedReporterShowed()"(overrides?: CallOverrides): Promise<boolean>;

    fork(overrides?: CallOverrides): Promise<void>;

    "fork()"(overrides?: CallOverrides): Promise<void>;

    forkAndRedeem(overrides?: CallOverrides): Promise<boolean>;

    "forkAndRedeem()"(overrides?: CallOverrides): Promise<boolean>;

    getDesignatedReporter(overrides?: CallOverrides): Promise<string>;

    "getDesignatedReporter()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getMarket(overrides?: CallOverrides): Promise<string>;

    "getMarket()"(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

    "getPayoutDistributionHash()"(overrides?: CallOverrides): Promise<string>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getReportTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getReportTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<string>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialReporterWasCorrect(overrides?: CallOverrides): Promise<boolean>;

    "initialReporterWasCorrect()"(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDisavowed(overrides?: CallOverrides): Promise<boolean>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<boolean>;

    liquidateLosing(overrides?: CallOverrides): Promise<void>;

    "liquidateLosing()"(overrides?: CallOverrides): Promise<void>;

    migrateToNewUniverse(
      _designatedReporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrateToNewUniverse(address)"(
      _designatedReporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "redeem(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    report(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "report(address,bytes32,uint256[],uint256)"(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnRepFromDisavow(overrides?: CallOverrides): Promise<void>;

    "returnRepFromDisavow()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    designatedReporterShowed(overrides?: CallOverrides): Promise<BigNumber>;

    "designatedReporterShowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    fork(overrides?: Overrides): Promise<BigNumber>;

    "fork()"(overrides?: Overrides): Promise<BigNumber>;

    forkAndRedeem(overrides?: Overrides): Promise<BigNumber>;

    "forkAndRedeem()"(overrides?: Overrides): Promise<BigNumber>;

    getDesignatedReporter(overrides?: CallOverrides): Promise<BigNumber>;

    "getDesignatedReporter()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutDistributionHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReportTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getReportTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialReporterWasCorrect(overrides?: CallOverrides): Promise<BigNumber>;

    "initialReporterWasCorrect()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isDisavowed(overrides?: CallOverrides): Promise<BigNumber>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateLosing(overrides?: Overrides): Promise<BigNumber>;

    "liquidateLosing()"(overrides?: Overrides): Promise<BigNumber>;

    migrateToNewUniverse(
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateToNewUniverse(address)"(
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeem(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "redeem(address)"(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    report(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "report(address,bytes32,uint256[],uint256)"(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    returnRepFromDisavow(overrides?: Overrides): Promise<BigNumber>;

    "returnRepFromDisavow()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    designatedReporterShowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "designatedReporterShowed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    forkAndRedeem(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forkAndRedeem()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getDesignatedReporter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDesignatedReporter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutNumerators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutNumerators()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReportTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReportTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialReporterWasCorrect(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialReporterWasCorrect()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _augur: string,
      _market: string,
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isDisavowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateLosing(overrides?: Overrides): Promise<PopulatedTransaction>;

    "liquidateLosing()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    migrateToNewUniverse(
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateToNewUniverse(address)"(
      _designatedReporter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeem(arg0: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "redeem(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    report(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "report(address,bytes32,uint256[],uint256)"(
      _reporter: string,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _initialReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    returnRepFromDisavow(overrides?: Overrides): Promise<PopulatedTransaction>;

    "returnRepFromDisavow()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
