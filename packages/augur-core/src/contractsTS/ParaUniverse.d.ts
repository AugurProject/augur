/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ParaUniverseInterface extends ethers.utils.Interface {
  functions: {
    "OINexus()": FunctionFragment;
    "augur()": FunctionFragment;
    "cash()": FunctionFragment;
    "currentReportingFeeDivisor()": FunctionFragment;
    "decrementOpenInterest(uint256)": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "feePot()": FunctionFragment;
    "getDisputeThresholdForDisputePacing()": FunctionFragment;
    "getFeePot()": FunctionFragment;
    "getForkingMarket()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getMarketOpenInterest(address)": FunctionFragment;
    "getOpenInterestInAttoCash()": FunctionFragment;
    "getOrCacheDesignatedReportStake()": FunctionFragment;
    "getOrCacheMarketRepBond()": FunctionFragment;
    "getOrCacheReportingFeeDivisor()": FunctionFragment;
    "getOrCacheValidityBond()": FunctionFragment;
    "getReportingFeeDivisor()": FunctionFragment;
    "getReputationToken()": FunctionFragment;
    "getTargetRepMarketCapInAttoCash()": FunctionFragment;
    "incrementOpenInterest(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isOpenInterestCash(address)": FunctionFragment;
    "lastReportingFeeUpdateTimestamp()": FunctionFragment;
    "marketBalance(address)": FunctionFragment;
    "marketCreatorFeesAttoCash(address)": FunctionFragment;
    "marketFinalized(address)": FunctionFragment;
    "openInterestCash()": FunctionFragment;
    "originUniverse()": FunctionFragment;
    "pokeRepMarketCapInAttoCash()": FunctionFragment;
    "recordMarketCreatorFees(address,uint256,address)": FunctionFragment;
    "runPeriodicals()": FunctionFragment;
    "setMarketFinalized(address,uint256)": FunctionFragment;
    "setOrigin(address)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "OINexus", values?: undefined): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrementOpenInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "feePot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDisputeThresholdForDisputePacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFeePot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getForkingMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOpenInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenInterestInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheDesignatedReportStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheMarketRepBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheValidityBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetRepMarketCapInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementOpenInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOpenInterestCash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastReportingFeeUpdateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreatorFeesAttoCash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketFinalized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openInterestCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pokeRepMarketCapInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordMarketCreatorFees",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "runPeriodicals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFinalized",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOrigin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "OINexus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeThresholdForDisputePacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeePot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getForkingMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenInterestInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheDesignatedReportStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheMarketRepBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheValidityBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetRepMarketCapInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOpenInterestCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastReportingFeeUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreatorFeesAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openInterestCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pokeRepMarketCapInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordMarketCreatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runPeriodicals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOrigin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class ParaUniverse extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ParaUniverseInterface;

  functions: {
    OINexus(overrides?: CallOverrides): Promise<[string]>;

    "OINexus()"(overrides?: CallOverrides): Promise<[string]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    currentReportingFeeDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feePot(overrides?: CallOverrides): Promise<[string]>;

    "feePot()"(overrides?: CallOverrides): Promise<[string]>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeePot(overrides?: CallOverrides): Promise<[string]>;

    "getFeePot()"(overrides?: CallOverrides): Promise<[string]>;

    getForkingMarket(overrides?: CallOverrides): Promise<[string]>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getMarketOpenInterest(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMarketOpenInterest(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrCacheDesignatedReportStake(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheMarketRepBond(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheMarketRepBond()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheReportingFeeDivisor(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheValidityBond(overrides?: Overrides): Promise<ContractTransaction>;

    "getOrCacheValidityBond()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getReportingFeeDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _augur: string,
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastReportingFeeUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastReportingFeeUpdateTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketCreatorFeesAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "marketCreatorFeesAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketFinalized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "marketFinalized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    openInterestCash(overrides?: CallOverrides): Promise<[string]>;

    "openInterestCash()"(overrides?: CallOverrides): Promise<[string]>;

    originUniverse(overrides?: CallOverrides): Promise<[string]>;

    "originUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    pokeRepMarketCapInAttoCash(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pokeRepMarketCapInAttoCash()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recordMarketCreatorFees(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordMarketCreatorFees(address,uint256,address)"(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    runPeriodicals(overrides?: Overrides): Promise<ContractTransaction>;

    "runPeriodicals()"(overrides?: Overrides): Promise<ContractTransaction>;

    setMarketFinalized(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarketFinalized(address,uint256)"(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOrigin(
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOrigin(address)"(
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  OINexus(overrides?: CallOverrides): Promise<string>;

  "OINexus()"(overrides?: CallOverrides): Promise<string>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  currentReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "currentReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  decrementOpenInterest(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementOpenInterest(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _sender: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address)"(
    _sender: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feePot(overrides?: CallOverrides): Promise<string>;

  "feePot()"(overrides?: CallOverrides): Promise<string>;

  getDisputeThresholdForDisputePacing(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeThresholdForDisputePacing()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeePot(overrides?: CallOverrides): Promise<string>;

  "getFeePot()"(overrides?: CallOverrides): Promise<string>;

  getForkingMarket(overrides?: CallOverrides): Promise<string>;

  "getForkingMarket()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getMarketOpenInterest(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketOpenInterest(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

  "getOpenInterestInAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOrCacheDesignatedReportStake(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCacheDesignatedReportStake()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheMarketRepBond(overrides?: Overrides): Promise<ContractTransaction>;

  "getOrCacheMarketRepBond()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheReportingFeeDivisor(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCacheReportingFeeDivisor()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheValidityBond(overrides?: Overrides): Promise<ContractTransaction>;

  "getOrCacheValidityBond()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationToken(overrides?: CallOverrides): Promise<string>;

  "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

  getTargetRepMarketCapInAttoCash(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTargetRepMarketCapInAttoCash()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incrementOpenInterest(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementOpenInterest(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _augur: string,
    _originUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _originUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isOpenInterestCash(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOpenInterestCash(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastReportingFeeUpdateTimestamp(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastReportingFeeUpdateTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "marketBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketCreatorFeesAttoCash(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "marketCreatorFeesAttoCash(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketFinalized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "marketFinalized(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  openInterestCash(overrides?: CallOverrides): Promise<string>;

  "openInterestCash()"(overrides?: CallOverrides): Promise<string>;

  originUniverse(overrides?: CallOverrides): Promise<string>;

  "originUniverse()"(overrides?: CallOverrides): Promise<string>;

  pokeRepMarketCapInAttoCash(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pokeRepMarketCapInAttoCash()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recordMarketCreatorFees(
    _market: string,
    _marketCreatorFees: BigNumberish,
    _sourceAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordMarketCreatorFees(address,uint256,address)"(
    _market: string,
    _marketCreatorFees: BigNumberish,
    _sourceAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  runPeriodicals(overrides?: Overrides): Promise<ContractTransaction>;

  "runPeriodicals()"(overrides?: Overrides): Promise<ContractTransaction>;

  setMarketFinalized(
    _market: string,
    _totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarketFinalized(address,uint256)"(
    _market: string,
    _totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOrigin(
    _originUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOrigin(address)"(
    _originUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _recipient: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,address)"(
    _recipient: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    OINexus(overrides?: CallOverrides): Promise<string>;

    "OINexus()"(overrides?: CallOverrides): Promise<string>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    currentReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "currentReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feePot(overrides?: CallOverrides): Promise<string>;

    "feePot()"(overrides?: CallOverrides): Promise<string>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeePot(overrides?: CallOverrides): Promise<string>;

    "getFeePot()"(overrides?: CallOverrides): Promise<string>;

    getForkingMarket(overrides?: CallOverrides): Promise<string>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getMarketOpenInterest(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketOpenInterest(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheDesignatedReportStake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheMarketRepBond(overrides?: CallOverrides): Promise<BigNumber>;

    "getOrCacheMarketRepBond()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheValidityBond(overrides?: CallOverrides): Promise<BigNumber>;

    "getOrCacheValidityBond()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<string>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _augur: string,
      _originUniverse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _augur: string,
      _originUniverse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastReportingFeeUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastReportingFeeUpdateTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketCreatorFeesAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketCreatorFeesAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketFinalized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "marketFinalized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openInterestCash(overrides?: CallOverrides): Promise<string>;

    "openInterestCash()"(overrides?: CallOverrides): Promise<string>;

    originUniverse(overrides?: CallOverrides): Promise<string>;

    "originUniverse()"(overrides?: CallOverrides): Promise<string>;

    pokeRepMarketCapInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "pokeRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordMarketCreatorFees(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "recordMarketCreatorFees(address,uint256,address)"(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    runPeriodicals(overrides?: CallOverrides): Promise<boolean>;

    "runPeriodicals()"(overrides?: CallOverrides): Promise<boolean>;

    setMarketFinalized(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setMarketFinalized(address,uint256)"(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOrigin(
      _originUniverse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOrigin(address)"(
      _originUniverse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    OINexus(overrides?: CallOverrides): Promise<BigNumber>;

    "OINexus()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "currentReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feePot(overrides?: CallOverrides): Promise<BigNumber>;

    "feePot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeePot(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeePot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkingMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketOpenInterest(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketOpenInterest(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheDesignatedReportStake(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCacheMarketRepBond(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheMarketRepBond()"(overrides?: Overrides): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCacheValidityBond(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheValidityBond()"(overrides?: Overrides): Promise<BigNumber>;

    getReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastReportingFeeUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastReportingFeeUpdateTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketCreatorFeesAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketCreatorFeesAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketFinalized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketFinalized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openInterestCash(overrides?: CallOverrides): Promise<BigNumber>;

    "openInterestCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    originUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "originUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    pokeRepMarketCapInAttoCash(overrides?: Overrides): Promise<BigNumber>;

    "pokeRepMarketCapInAttoCash()"(overrides?: Overrides): Promise<BigNumber>;

    recordMarketCreatorFees(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordMarketCreatorFees(address,uint256,address)"(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    runPeriodicals(overrides?: Overrides): Promise<BigNumber>;

    "runPeriodicals()"(overrides?: Overrides): Promise<BigNumber>;

    setMarketFinalized(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMarketFinalized(address,uint256)"(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOrigin(
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOrigin(address)"(
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OINexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OINexus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feePot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeePot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeePot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getForkingMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getForkingMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketOpenInterest(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketOpenInterest(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenInterestInAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrCacheDesignatedReportStake(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheMarketRepBond(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheMarketRepBond()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheReportingFeeDivisor(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheValidityBond(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheValidityBond()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastReportingFeeUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastReportingFeeUpdateTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketCreatorFeesAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketCreatorFeesAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketFinalized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketFinalized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openInterestCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "openInterestCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    originUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "originUniverse()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pokeRepMarketCapInAttoCash(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pokeRepMarketCapInAttoCash()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recordMarketCreatorFees(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordMarketCreatorFees(address,uint256,address)"(
      _market: string,
      _marketCreatorFees: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    runPeriodicals(overrides?: Overrides): Promise<PopulatedTransaction>;

    "runPeriodicals()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setMarketFinalized(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarketFinalized(address,uint256)"(
      _market: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOrigin(
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOrigin(address)"(
      _originUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
