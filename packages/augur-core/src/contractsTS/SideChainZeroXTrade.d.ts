/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SideChainZeroXTradeInterface extends ethers.utils.Interface {
  functions: {
    "EIP1271_ORDER_WITH_HASH_SELECTOR()": FunctionFragment;
    "EIP712_DOMAIN_HASH()": FunctionFragment;
    "askBalance(address,address,uint8,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "augurTrading()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "bidBalance(address,address,uint8,uint256)": FunctionFragment;
    "cancelOrders(tuple[],bytes[],uint256)": FunctionFragment;
    "cash()": FunctionFragment;
    "cashAvailableForTransferFrom(address,address)": FunctionFragment;
    "createZeroXOrder(uint8,uint256,uint256,address,uint8,uint256,uint256)": FunctionFragment;
    "createZeroXOrderFor(address,uint8,uint256,uint256,address,uint8,uint256,uint256)": FunctionFragment;
    "creatorHasFundsForTrade(tuple,uint256)": FunctionFragment;
    "decodeAssetData(bytes)": FunctionFragment;
    "decodeTradeAssetData(bytes)": FunctionFragment;
    "encodeAssetData(address,uint256,uint8,uint8)": FunctionFragment;
    "encodeEIP1271OrderWithHash(tuple,bytes32)": FunctionFragment;
    "exchange()": FunctionFragment;
    "fillOrder()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getTokenId(address,uint256,uint8,uint8)": FunctionFragment;
    "getTokenIdFromOrder(tuple)": FunctionFragment;
    "getTransferFromAllowed()": FunctionFragment;
    "getZeroXTradeTokenData(bytes)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "marketGetter()": FunctionFragment;
    "parseOrderData(tuple)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "token0IsCash()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "trade(uint256,bytes32,bytes32,uint256,uint256,tuple[],bytes[])": FunctionFragment;
    "unpackTokenId(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EIP1271_ORDER_WITH_HASH_SELECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "askBalance",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augurTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bidBalance",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cashAvailableForTransferFrom",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createZeroXOrder",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createZeroXOrderFor",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorHasFundsForTrade",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeAssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTradeAssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeAssetData",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeEIP1271OrderWithHash",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "exchange", values?: undefined): string;
  encodeFunctionData(functionFragment: "fillOrder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdFromOrder",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferFromAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getZeroXTradeTokenData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketGetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parseOrderData",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token0IsCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackTokenId",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP1271_ORDER_WITH_HASH_SELECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "askBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bidBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashAvailableForTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createZeroXOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createZeroXOrderFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorHasFundsForTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTradeAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeEIP1271OrderWithHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdFromOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferFromAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZeroXTradeTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseOrderData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token0IsCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpackTokenId",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class SideChainZeroXTrade extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: SideChainZeroXTradeInterface;

  functions: {
    EIP1271_ORDER_WITH_HASH_SELECTOR(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "EIP1271_ORDER_WITH_HASH_SELECTOR()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<[string]>;

    "EIP712_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<[string]>;

    askBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "askBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    augurTrading(overrides?: CallOverrides): Promise<[string]>;

    "augurTrading()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances_: BigNumber[] }>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances_: BigNumber[] }>;

    bidBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "bidBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOrders(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrders(tuple[],bytes[],uint256)"(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    cashAvailableForTransferFrom(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cashAvailableForTransferFrom(address,address)"(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createZeroXOrder(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    "createZeroXOrder(uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    createZeroXOrderFor(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    "createZeroXOrderFor(address,uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    creatorHasFundsForTrade(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "creatorHasFundsForTrade((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256)"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    decodeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    "decodeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    decodeTradeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    "decodeTradeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    encodeAssetData(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _assetData: string }>;

    "encodeAssetData(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _assetData: string }>;

    encodeEIP1271OrderWithHash(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    "encodeEIP1271OrderWithHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32)"(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    exchange(overrides?: CallOverrides): Promise<[string]>;

    "exchange()"(overrides?: CallOverrides): Promise<[string]>;

    fillOrder(overrides?: CallOverrides): Promise<[string]>;

    "fillOrder()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getTokenId(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    "getTokenId(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    getTokenIdFromOrder(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    "getTokenIdFromOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    getTransferFromAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    "getTransferFromAllowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    getZeroXTradeTokenData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _token: string; _tokenId: BigNumber }>;

    "getZeroXTradeTokenData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _token: string; _tokenId: BigNumber }>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketGetter(overrides?: CallOverrides): Promise<[string]>;

    "marketGetter()"(overrides?: CallOverrides): Promise<[string]>;

    parseOrderData(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, number, number] & {
          marketAddress: string;
          price: BigNumber;
          outcome: number;
          orderType: number;
        }
      ] & {
        _data: [string, BigNumber, number, number] & {
          marketAddress: string;
          price: BigNumber;
          outcome: number;
          orderType: number;
        };
      }
    >;

    "parseOrderData((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, number, number] & {
          marketAddress: string;
          price: BigNumber;
          outcome: number;
          orderType: number;
        }
      ] & {
        _data: [string, BigNumber, number, number] & {
          marketAddress: string;
          price: BigNumber;
          outcome: number;
          orderType: number;
        };
      }
    >;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    token0IsCash(overrides?: CallOverrides): Promise<[boolean]>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<[boolean]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    trade(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "trade(uint256,bytes32,bytes32,uint256,uint256,tuple[],bytes[])"(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        _market: string;
        _price: BigNumber;
        _outcome: number;
        _type: number;
      }
    >;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        _market: string;
        _price: BigNumber;
        _outcome: number;
        _type: number;
      }
    >;
  };

  EIP1271_ORDER_WITH_HASH_SELECTOR(overrides?: CallOverrides): Promise<string>;

  "EIP1271_ORDER_WITH_HASH_SELECTOR()"(
    overrides?: CallOverrides
  ): Promise<string>;

  EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

  "EIP712_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<string>;

  askBalance(
    _owner: string,
    _market: string,
    _outcome: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "askBalance(address,address,uint8,uint256)"(
    _owner: string,
    _market: string,
    _outcome: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  augurTrading(overrides?: CallOverrides): Promise<string>;

  "augurTrading()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    owner: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bidBalance(
    _owner: string,
    _market: string,
    _outcome: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bidBalance(address,address,uint8,uint256)"(
    _owner: string,
    _market: string,
    _outcome: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOrders(
    _orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    _signatures: BytesLike[],
    _maxProtocolFeeDai: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrders(tuple[],bytes[],uint256)"(
    _orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    _signatures: BytesLike[],
    _maxProtocolFeeDai: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  cashAvailableForTransferFrom(
    _owner: string,
    _sender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cashAvailableForTransferFrom(address,address)"(
    _owner: string,
    _sender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createZeroXOrder(
    _type: BigNumberish,
    _attoshares: BigNumberish,
    _price: BigNumberish,
    _market: string,
    _outcome: BigNumberish,
    _expirationTimeSeconds: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      },
      string
    ] & {
      _zeroXOrder: [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      };
      _orderHash: string;
    }
  >;

  "createZeroXOrder(uint8,uint256,uint256,address,uint8,uint256,uint256)"(
    _type: BigNumberish,
    _attoshares: BigNumberish,
    _price: BigNumberish,
    _market: string,
    _outcome: BigNumberish,
    _expirationTimeSeconds: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      },
      string
    ] & {
      _zeroXOrder: [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      };
      _orderHash: string;
    }
  >;

  createZeroXOrderFor(
    _maker: string,
    _type: BigNumberish,
    _attoshares: BigNumberish,
    _price: BigNumberish,
    _market: string,
    _outcome: BigNumberish,
    _expirationTimeSeconds: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      },
      string
    ] & {
      _zeroXOrder: [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      };
      _orderHash: string;
    }
  >;

  "createZeroXOrderFor(address,uint8,uint256,uint256,address,uint8,uint256,uint256)"(
    _maker: string,
    _type: BigNumberish,
    _attoshares: BigNumberish,
    _price: BigNumberish,
    _market: string,
    _outcome: BigNumberish,
    _expirationTimeSeconds: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      },
      string
    ] & {
      _zeroXOrder: [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumber;
        takerAssetAmount: BigNumber;
        makerFee: BigNumber;
        takerFee: BigNumber;
        expirationTimeSeconds: BigNumber;
        salt: BigNumber;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
      };
      _orderHash: string;
    }
  >;

  creatorHasFundsForTrade(
    _order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "creatorHasFundsForTrade((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256)"(
    _order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  decodeAssetData(
    _assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], BigNumber[], string] & {
      _assetProxyId: string;
      _tokenAddress: string;
      _tokenIds: BigNumber[];
      _tokenValues: BigNumber[];
      _callbackData: string;
    }
  >;

  "decodeAssetData(bytes)"(
    _assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], BigNumber[], string] & {
      _assetProxyId: string;
      _tokenAddress: string;
      _tokenIds: BigNumber[];
      _tokenValues: BigNumber[];
      _callbackData: string;
    }
  >;

  decodeTradeAssetData(
    _assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], BigNumber[], string] & {
      _assetProxyId: string;
      _tokenAddress: string;
      _tokenIds: BigNumber[];
      _tokenValues: BigNumber[];
      _callbackData: string;
    }
  >;

  "decodeTradeAssetData(bytes)"(
    _assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], BigNumber[], string] & {
      _assetProxyId: string;
      _tokenAddress: string;
      _tokenIds: BigNumber[];
      _tokenValues: BigNumber[];
      _callbackData: string;
    }
  >;

  encodeAssetData(
    _market: string,
    _price: BigNumberish,
    _outcome: BigNumberish,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeAssetData(address,uint256,uint8,uint8)"(
    _market: string,
    _price: BigNumberish,
    _outcome: BigNumberish,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeEIP1271OrderWithHash(
    _zeroXOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    _orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeEIP1271OrderWithHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32)"(
    _zeroXOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    _orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  exchange(overrides?: CallOverrides): Promise<string>;

  "exchange()"(overrides?: CallOverrides): Promise<string>;

  fillOrder(overrides?: CallOverrides): Promise<string>;

  "fillOrder()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getTokenId(
    _market: string,
    _price: BigNumberish,
    _outcome: BigNumberish,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenId(address,uint256,uint8,uint8)"(
    _market: string,
    _price: BigNumberish,
    _outcome: BigNumberish,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenIdFromOrder(
    _order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenIdFromOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
    _order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransferFromAllowed(overrides?: CallOverrides): Promise<boolean>;

  "getTransferFromAllowed()"(overrides?: CallOverrides): Promise<boolean>;

  getZeroXTradeTokenData(
    _assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _token: string; _tokenId: BigNumber }>;

  "getZeroXTradeTokenData(bytes)"(
    _assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _token: string; _tokenId: BigNumber }>;

  initialize(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketGetter(overrides?: CallOverrides): Promise<string>;

  "marketGetter()"(overrides?: CallOverrides): Promise<string>;

  parseOrderData(
    _order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      marketAddress: string;
      price: BigNumber;
      outcome: number;
      orderType: number;
    }
  >;

  "parseOrderData((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
    _order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      marketAddress: string;
      price: BigNumber;
      outcome: number;
      orderType: number;
    }
  >;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  token0IsCash(overrides?: CallOverrides): Promise<boolean>;

  "token0IsCash()"(overrides?: CallOverrides): Promise<boolean>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  trade(
    _requestedFillAmount: BigNumberish,
    _fingerprint: BytesLike,
    _tradeGroupId: BytesLike,
    _maxProtocolFeeDai: BigNumberish,
    _maxTrades: BigNumberish,
    _orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    _signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "trade(uint256,bytes32,bytes32,uint256,uint256,tuple[],bytes[])"(
    _requestedFillAmount: BigNumberish,
    _fingerprint: BytesLike,
    _tradeGroupId: BytesLike,
    _maxProtocolFeeDai: BigNumberish,
    _maxTrades: BigNumberish,
    _orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    _signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  unpackTokenId(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      _market: string;
      _price: BigNumber;
      _outcome: number;
      _type: number;
    }
  >;

  "unpackTokenId(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, number] & {
      _market: string;
      _price: BigNumber;
      _outcome: number;
      _type: number;
    }
  >;

  callStatic: {
    EIP1271_ORDER_WITH_HASH_SELECTOR(
      overrides?: CallOverrides
    ): Promise<string>;

    "EIP1271_ORDER_WITH_HASH_SELECTOR()"(
      overrides?: CallOverrides
    ): Promise<string>;

    EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

    "EIP712_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<string>;

    askBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "askBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    augurTrading(overrides?: CallOverrides): Promise<string>;

    "augurTrading()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bidBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrders(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelOrders(tuple[],bytes[],uint256)"(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    cashAvailableForTransferFrom(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cashAvailableForTransferFrom(address,address)"(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createZeroXOrder(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    "createZeroXOrder(uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    createZeroXOrderFor(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    "createZeroXOrderFor(address,uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        },
        string
      ] & {
        _zeroXOrder: [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          makerAddress: string;
          takerAddress: string;
          feeRecipientAddress: string;
          senderAddress: string;
          makerAssetAmount: BigNumber;
          takerAssetAmount: BigNumber;
          makerFee: BigNumber;
          takerFee: BigNumber;
          expirationTimeSeconds: BigNumber;
          salt: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          makerFeeAssetData: string;
          takerFeeAssetData: string;
        };
        _orderHash: string;
      }
    >;

    creatorHasFundsForTrade(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "creatorHasFundsForTrade((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256)"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decodeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    "decodeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    decodeTradeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    "decodeTradeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        _assetProxyId: string;
        _tokenAddress: string;
        _tokenIds: BigNumber[];
        _tokenValues: BigNumber[];
        _callbackData: string;
      }
    >;

    encodeAssetData(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeAssetData(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeEIP1271OrderWithHash(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeEIP1271OrderWithHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32)"(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    exchange(overrides?: CallOverrides): Promise<string>;

    "exchange()"(overrides?: CallOverrides): Promise<string>;

    fillOrder(overrides?: CallOverrides): Promise<string>;

    "fillOrder()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getTokenId(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdFromOrder(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenIdFromOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferFromAllowed(overrides?: CallOverrides): Promise<boolean>;

    "getTransferFromAllowed()"(overrides?: CallOverrides): Promise<boolean>;

    getZeroXTradeTokenData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _token: string; _tokenId: BigNumber }>;

    "getZeroXTradeTokenData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _token: string; _tokenId: BigNumber }>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketGetter(overrides?: CallOverrides): Promise<string>;

    "marketGetter()"(overrides?: CallOverrides): Promise<string>;

    parseOrderData(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        marketAddress: string;
        price: BigNumber;
        outcome: number;
        orderType: number;
      }
    >;

    "parseOrderData((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        marketAddress: string;
        price: BigNumber;
        outcome: number;
        orderType: number;
      }
    >;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    token0IsCash(overrides?: CallOverrides): Promise<boolean>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<boolean>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "trade(uint256,bytes32,bytes32,uint256,uint256,tuple[],bytes[])"(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        _market: string;
        _price: BigNumber;
        _outcome: number;
        _type: number;
      }
    >;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, number] & {
        _market: string;
        _price: BigNumber;
        _outcome: number;
        _type: number;
      }
    >;
  };

  filters: {
    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    URI(
      value: null,
      id: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    EIP1271_ORDER_WITH_HASH_SELECTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "EIP1271_ORDER_WITH_HASH_SELECTOR()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EIP712_DOMAIN_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    askBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "askBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurTrading(overrides?: CallOverrides): Promise<BigNumber>;

    "augurTrading()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrders(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrders(tuple[],bytes[],uint256)"(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    cashAvailableForTransferFrom(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cashAvailableForTransferFrom(address,address)"(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createZeroXOrder(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createZeroXOrder(uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createZeroXOrderFor(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createZeroXOrderFor(address,uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorHasFundsForTrade(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "creatorHasFundsForTrade((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256)"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTradeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeTradeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeAssetData(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeAssetData(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeEIP1271OrderWithHash(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeEIP1271OrderWithHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32)"(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(overrides?: CallOverrides): Promise<BigNumber>;

    "exchange()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(overrides?: CallOverrides): Promise<BigNumber>;

    "fillOrder()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenId(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIdFromOrder(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenIdFromOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferFromAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    "getTransferFromAllowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    getZeroXTradeTokenData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZeroXTradeTokenData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketGetter(overrides?: CallOverrides): Promise<BigNumber>;

    "marketGetter()"(overrides?: CallOverrides): Promise<BigNumber>;

    parseOrderData(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parseOrderData((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0IsCash(overrides?: CallOverrides): Promise<BigNumber>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "trade(uint256,bytes32,bytes32,uint256,uint256,tuple[],bytes[])"(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP1271_ORDER_WITH_HASH_SELECTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP1271_ORDER_WITH_HASH_SELECTOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP712_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    askBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "askBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurTrading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurTrading()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidBalance(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidBalance(address,address,uint8,uint256)"(
      _owner: string,
      _market: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrders(tuple[],bytes[],uint256)"(
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      _maxProtocolFeeDai: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cashAvailableForTransferFrom(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cashAvailableForTransferFrom(address,address)"(
      _owner: string,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createZeroXOrder(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createZeroXOrder(uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createZeroXOrderFor(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createZeroXOrderFor(address,uint8,uint256,uint256,address,uint8,uint256,uint256)"(
      _maker: string,
      _type: BigNumberish,
      _attoshares: BigNumberish,
      _price: BigNumberish,
      _market: string,
      _outcome: BigNumberish,
      _expirationTimeSeconds: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorHasFundsForTrade(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creatorHasFundsForTrade((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256)"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTradeAssetData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeTradeAssetData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeAssetData(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeAssetData(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeEIP1271OrderWithHash(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeEIP1271OrderWithHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32)"(
      _zeroXOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillOrder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fillOrder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenId(address,uint256,uint8,uint8)"(
      _market: string,
      _price: BigNumberish,
      _outcome: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIdFromOrder(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenIdFromOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferFromAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransferFromAllowed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZeroXTradeTokenData(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getZeroXTradeTokenData(bytes)"(
      _assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketGetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketGetter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseOrderData(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parseOrderData((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      _order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0IsCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "trade(uint256,bytes32,bytes32,uint256,uint256,tuple[],bytes[])"(
      _requestedFillAmount: BigNumberish,
      _fingerprint: BytesLike,
      _tradeGroupId: BytesLike,
      _maxProtocolFeeDai: BigNumberish,
      _maxTrades: BigNumberish,
      _orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      _signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
