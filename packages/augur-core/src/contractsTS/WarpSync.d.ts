/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WarpSyncInterface extends ethers.utils.Interface {
  functions: {
    "augur()": FunctionFragment;
    "data(address)": FunctionFragment;
    "doInitialReport(address,uint256[],string)": FunctionFragment;
    "getCreationReward(address)": FunctionFragment;
    "getFinalizationReward(address)": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeUniverse(address)": FunctionFragment;
    "markets(address)": FunctionFragment;
    "notifyMarketFinalized()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "data", values: [string]): string;
  encodeFunctionData(
    functionFragment: "doInitialReport",
    values: [string, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalizationReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeUniverse",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "notifyMarketFinalized",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doInitialReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalizationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyMarketFinalized",
    data: BytesLike
  ): Result;

  events: {};
}

export class WarpSync extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: WarpSyncInterface;

  functions: {
    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { warpSyncHash: BigNumber; timestamp: BigNumber }
    >;

    "data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { warpSyncHash: BigNumber; timestamp: BigNumber }
    >;

    doInitialReport(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "doInitialReport(address,uint256[],string)"(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCreationReward(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCreationReward(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFinalizationReward(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFinalizationReward(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _augur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeUniverse(
      _universe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeUniverse(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    markets(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "markets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    notifyMarketFinalized(overrides?: Overrides): Promise<ContractTransaction>;

    "notifyMarketFinalized()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  data(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { warpSyncHash: BigNumber; timestamp: BigNumber }
  >;

  "data(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { warpSyncHash: BigNumber; timestamp: BigNumber }
  >;

  doInitialReport(
    _universe: string,
    _payoutNumerators: BigNumberish[],
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "doInitialReport(address,uint256[],string)"(
    _universe: string,
    _payoutNumerators: BigNumberish[],
    _description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCreationReward(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCreationReward(address)"(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFinalizationReward(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFinalizationReward(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _augur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _augur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeUniverse(
    _universe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeUniverse(address)"(
    _universe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  markets(arg0: string, overrides?: CallOverrides): Promise<string>;

  "markets(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  notifyMarketFinalized(overrides?: Overrides): Promise<ContractTransaction>;

  "notifyMarketFinalized()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { warpSyncHash: BigNumber; timestamp: BigNumber }
    >;

    "data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { warpSyncHash: BigNumber; timestamp: BigNumber }
    >;

    doInitialReport(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "doInitialReport(address,uint256[],string)"(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCreationReward(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreationReward(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinalizationReward(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFinalizationReward(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    initialize(_augur: string, overrides?: CallOverrides): Promise<boolean>;

    "initialize(address)"(
      _augur: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<void>;

    markets(arg0: string, overrides?: CallOverrides): Promise<string>;

    "markets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    notifyMarketFinalized(overrides?: CallOverrides): Promise<void>;

    "notifyMarketFinalized()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    data(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doInitialReport(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "doInitialReport(address,uint256[],string)"(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCreationReward(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreationReward(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinalizationReward(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFinalizationReward(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_augur: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeUniverse(
      _universe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeUniverse(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    markets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "markets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyMarketFinalized(overrides?: Overrides): Promise<BigNumber>;

    "notifyMarketFinalized()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doInitialReport(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "doInitialReport(address,uint256[],string)"(
      _universe: string,
      _payoutNumerators: BigNumberish[],
      _description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCreationReward(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreationReward(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinalizationReward(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFinalizationReward(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeUniverse(
      _universe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeUniverse(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "markets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyMarketFinalized(overrides?: Overrides): Promise<PopulatedTransaction>;

    "notifyMarketFinalized()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
