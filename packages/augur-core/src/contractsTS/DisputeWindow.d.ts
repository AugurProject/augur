/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DisputeWindowInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "allowances(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "buyParticipationTokens()": FunctionFragment;
    "cash()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "designatedReportNoShowsTotal()": FunctionFragment;
    "designatedReporterNoShowBondTotal()": FunctionFragment;
    "duration()": FunctionFragment;
    "getEndTime()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getReputationToken()": FunctionFragment;
    "getStartTime()": FunctionFragment;
    "getTypeName()": FunctionFragment;
    "getUniverse()": FunctionFragment;
    "getWindowId()": FunctionFragment;
    "incorrectDesignatedReportTotal()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialReportBondTotal()": FunctionFragment;
    "initialize(address,address,uint256,bool,uint256,uint256)": FunctionFragment;
    "invalidMarketsTotal()": FunctionFragment;
    "isActive()": FunctionFragment;
    "isOver()": FunctionFragment;
    "onMarketFinalized()": FunctionFragment;
    "participationTokensEnabled()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "trustedBuy(address,uint256)": FunctionFragment;
    "universe()": FunctionFragment;
    "validityBondTotal()": FunctionFragment;
    "windowId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buyParticipationTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "designatedReportNoShowsTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "designatedReporterNoShowBondTotal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWindowId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incorrectDesignatedReportTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialReportBondTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidMarketsTotal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onMarketFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participationTokensEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedBuy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "universe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validityBondTotal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "windowId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyParticipationTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "designatedReportNoShowsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "designatedReporterNoShowBondTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEndTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWindowId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incorrectDesignatedReportTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialReportBondTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidMarketsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onMarketFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationTokensEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trustedBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "universe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validityBondTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "windowId", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DisputeWindow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: DisputeWindowInterface;

  functions: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyParticipationTokens(overrides?: CallOverrides): Promise<[string]>;

    "buyParticipationTokens()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    designatedReportNoShowsTotal(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "designatedReportNoShowsTotal()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    designatedReporterNoShowBondTotal(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "designatedReporterNoShowBondTotal()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "duration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEndTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    getStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTypeName(overrides?: CallOverrides): Promise<[string]>;

    "getTypeName()"(overrides?: CallOverrides): Promise<[string]>;

    getUniverse(overrides?: CallOverrides): Promise<[string]>;

    "getUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    getWindowId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getWindowId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    incorrectDesignatedReportTotal(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "incorrectDesignatedReportTotal()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialReportBondTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialReportBondTotal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,bool,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invalidMarketsTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "invalidMarketsTotal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    "isActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOver(overrides?: CallOverrides): Promise<[boolean]>;

    "isOver()"(overrides?: CallOverrides): Promise<[boolean]>;

    onMarketFinalized(overrides?: Overrides): Promise<ContractTransaction>;

    "onMarketFinalized()"(overrides?: Overrides): Promise<ContractTransaction>;

    participationTokensEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "participationTokensEnabled()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    redeem(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedBuy(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedBuy(address,uint256)"(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    universe(overrides?: CallOverrides): Promise<[string]>;

    "universe()"(overrides?: CallOverrides): Promise<[string]>;

    validityBondTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "validityBondTotal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    windowId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "windowId()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowances(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buy(
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyParticipationTokens(overrides?: CallOverrides): Promise<string>;

  "buyParticipationTokens()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  designatedReportNoShowsTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "designatedReportNoShowsTotal()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  designatedReporterNoShowBondTotal(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "designatedReporterNoShowBondTotal()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getReputationToken(overrides?: CallOverrides): Promise<string>;

  "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

  getStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTypeName(overrides?: CallOverrides): Promise<string>;

  "getTypeName()"(overrides?: CallOverrides): Promise<string>;

  getUniverse(overrides?: CallOverrides): Promise<string>;

  "getUniverse()"(overrides?: CallOverrides): Promise<string>;

  getWindowId(overrides?: CallOverrides): Promise<BigNumber>;

  "getWindowId()"(overrides?: CallOverrides): Promise<BigNumber>;

  incorrectDesignatedReportTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "incorrectDesignatedReportTotal()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialReportBondTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "initialReportBondTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _augur: string,
    _universe: string,
    _disputeWindowId: BigNumberish,
    _participationTokensEnabled: boolean,
    _duration: BigNumberish,
    _startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,bool,uint256,uint256)"(
    _augur: string,
    _universe: string,
    _disputeWindowId: BigNumberish,
    _participationTokensEnabled: boolean,
    _duration: BigNumberish,
    _startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invalidMarketsTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "invalidMarketsTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  "isActive()"(overrides?: CallOverrides): Promise<boolean>;

  isOver(overrides?: CallOverrides): Promise<boolean>;

  "isOver()"(overrides?: CallOverrides): Promise<boolean>;

  onMarketFinalized(overrides?: Overrides): Promise<ContractTransaction>;

  "onMarketFinalized()"(overrides?: Overrides): Promise<ContractTransaction>;

  participationTokensEnabled(overrides?: CallOverrides): Promise<boolean>;

  "participationTokensEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  redeem(_account: string, overrides?: Overrides): Promise<ContractTransaction>;

  "redeem(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedBuy(
    _buyer: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedBuy(address,uint256)"(
    _buyer: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  universe(overrides?: CallOverrides): Promise<string>;

  "universe()"(overrides?: CallOverrides): Promise<string>;

  validityBondTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "validityBondTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  windowId(overrides?: CallOverrides): Promise<BigNumber>;

  "windowId()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(_attotokens: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "buy(uint256)"(
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyParticipationTokens(overrides?: CallOverrides): Promise<string>;

    "buyParticipationTokens()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    designatedReportNoShowsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "designatedReportNoShowsTotal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    designatedReporterNoShowBondTotal(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "designatedReporterNoShowBondTotal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getReputationToken(overrides?: CallOverrides): Promise<string>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

    getStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeName(overrides?: CallOverrides): Promise<string>;

    "getTypeName()"(overrides?: CallOverrides): Promise<string>;

    getUniverse(overrides?: CallOverrides): Promise<string>;

    "getUniverse()"(overrides?: CallOverrides): Promise<string>;

    getWindowId(overrides?: CallOverrides): Promise<BigNumber>;

    "getWindowId()"(overrides?: CallOverrides): Promise<BigNumber>;

    incorrectDesignatedReportTotal(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incorrectDesignatedReportTotal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialReportBondTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "initialReportBondTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,bool,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invalidMarketsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "invalidMarketsTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    "isActive()"(overrides?: CallOverrides): Promise<boolean>;

    isOver(overrides?: CallOverrides): Promise<boolean>;

    "isOver()"(overrides?: CallOverrides): Promise<boolean>;

    onMarketFinalized(overrides?: CallOverrides): Promise<void>;

    "onMarketFinalized()"(overrides?: CallOverrides): Promise<void>;

    participationTokensEnabled(overrides?: CallOverrides): Promise<boolean>;

    "participationTokensEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    redeem(_account: string, overrides?: CallOverrides): Promise<boolean>;

    "redeem(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedBuy(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedBuy(address,uint256)"(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    universe(overrides?: CallOverrides): Promise<string>;

    "universe()"(overrides?: CallOverrides): Promise<string>;

    validityBondTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "validityBondTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    windowId(overrides?: CallOverrides): Promise<BigNumber>;

    "windowId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(_attotokens: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "buy(uint256)"(
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyParticipationTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "buyParticipationTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    designatedReportNoShowsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "designatedReportNoShowsTotal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    designatedReporterNoShowBondTotal(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "designatedReporterNoShowBondTotal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeName(overrides?: CallOverrides): Promise<BigNumber>;

    "getTypeName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "getUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWindowId(overrides?: CallOverrides): Promise<BigNumber>;

    "getWindowId()"(overrides?: CallOverrides): Promise<BigNumber>;

    incorrectDesignatedReportTotal(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incorrectDesignatedReportTotal()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialReportBondTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "initialReportBondTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,bool,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    invalidMarketsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "invalidMarketsTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOver(overrides?: CallOverrides): Promise<BigNumber>;

    "isOver()"(overrides?: CallOverrides): Promise<BigNumber>;

    onMarketFinalized(overrides?: Overrides): Promise<BigNumber>;

    "onMarketFinalized()"(overrides?: Overrides): Promise<BigNumber>;

    participationTokensEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "participationTokensEnabled()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(_account: string, overrides?: Overrides): Promise<BigNumber>;

    "redeem(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedBuy(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedBuy(address,uint256)"(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    universe(overrides?: CallOverrides): Promise<BigNumber>;

    "universe()"(overrides?: CallOverrides): Promise<BigNumber>;

    validityBondTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "validityBondTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    windowId(overrides?: CallOverrides): Promise<BigNumber>;

    "windowId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyParticipationTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyParticipationTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    designatedReportNoShowsTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "designatedReportNoShowsTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    designatedReporterNoShowBondTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "designatedReporterNoShowBondTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "duration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEndTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStartTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTypeName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTypeName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUniverse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWindowId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getWindowId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incorrectDesignatedReportTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "incorrectDesignatedReportTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialReportBondTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialReportBondTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,bool,uint256,uint256)"(
      _augur: string,
      _universe: string,
      _disputeWindowId: BigNumberish,
      _participationTokensEnabled: boolean,
      _duration: BigNumberish,
      _startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    invalidMarketsTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "invalidMarketsTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onMarketFinalized(overrides?: Overrides): Promise<PopulatedTransaction>;

    "onMarketFinalized()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    participationTokensEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participationTokensEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedBuy(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedBuy(address,uint256)"(
      _buyer: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    universe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "universe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validityBondTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validityBondTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    windowId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "windowId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
