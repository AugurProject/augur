/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DisputeCrowdsourcerInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "allowances(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "contribute(address,uint256,bool)": FunctionFragment;
    "correctSize()": FunctionFragment;
    "crowdsourcerGeneration()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "fork()": FunctionFragment;
    "forkAndRedeem()": FunctionFragment;
    "getCrowdsourcerGeneration()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getMarket()": FunctionFragment;
    "getPayoutDistributionHash()": FunctionFragment;
    "getPayoutNumerator(uint256)": FunctionFragment;
    "getPayoutNumerators()": FunctionFragment;
    "getRemainingToFill()": FunctionFragment;
    "getReputationToken()": FunctionFragment;
    "getSize()": FunctionFragment;
    "getStake()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256,bytes32,uint256[],uint256)": FunctionFragment;
    "isDisavowed()": FunctionFragment;
    "liquidateLosing()": FunctionFragment;
    "name()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "setSize(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "universe()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "correctSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crowdsourcerGeneration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forkAndRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCrowdsourcerGeneration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayoutDistributionHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutNumerators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingToFill",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisavowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLosing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "universe", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correctSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdsourcerGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forkAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrowdsourcerGeneration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutNumerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingToFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDisavowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "universe", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DisputeCrowdsourcer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: DisputeCrowdsourcerInterface;

  functions: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contribute(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "contribute(address,uint256,bool)"(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    correctSize(overrides?: Overrides): Promise<ContractTransaction>;

    "correctSize()"(overrides?: Overrides): Promise<ContractTransaction>;

    crowdsourcerGeneration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fork(overrides?: Overrides): Promise<ContractTransaction>;

    "fork()"(overrides?: Overrides): Promise<ContractTransaction>;

    forkAndRedeem(overrides?: Overrides): Promise<ContractTransaction>;

    "forkAndRedeem()"(overrides?: Overrides): Promise<ContractTransaction>;

    getCrowdsourcerGeneration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCrowdsourcerGeneration()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getMarket(overrides?: CallOverrides): Promise<[string]>;

    "getMarket()"(overrides?: CallOverrides): Promise<[string]>;

    getPayoutDistributionHash(overrides?: CallOverrides): Promise<[string]>;

    "getPayoutDistributionHash()"(overrides?: CallOverrides): Promise<[string]>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getRemainingToFill(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRemainingToFill()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    getSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getStake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,bytes32,uint256[],uint256)"(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isDisavowed(overrides?: CallOverrides): Promise<[boolean]>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateLosing(overrides?: Overrides): Promise<ContractTransaction>;

    "liquidateLosing()"(overrides?: Overrides): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _redeemer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(address)"(
      _redeemer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSize(
      _size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSize(uint256)"(
      _size: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    universe(overrides?: CallOverrides): Promise<[string]>;

    "universe()"(overrides?: CallOverrides): Promise<[string]>;
  };

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowances(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contribute(
    _participant: string,
    _amount: BigNumberish,
    _overload: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "contribute(address,uint256,bool)"(
    _participant: string,
    _amount: BigNumberish,
    _overload: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  correctSize(overrides?: Overrides): Promise<ContractTransaction>;

  "correctSize()"(overrides?: Overrides): Promise<ContractTransaction>;

  crowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

  "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fork(overrides?: Overrides): Promise<ContractTransaction>;

  "fork()"(overrides?: Overrides): Promise<ContractTransaction>;

  forkAndRedeem(overrides?: Overrides): Promise<ContractTransaction>;

  "forkAndRedeem()"(overrides?: Overrides): Promise<ContractTransaction>;

  getCrowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

  "getCrowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getMarket(overrides?: CallOverrides): Promise<string>;

  "getMarket()"(overrides?: CallOverrides): Promise<string>;

  getPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

  "getPayoutDistributionHash()"(overrides?: CallOverrides): Promise<string>;

  getPayoutNumerator(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPayoutNumerator(uint256)"(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRemainingToFill(overrides?: CallOverrides): Promise<BigNumber>;

  "getRemainingToFill()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationToken(overrides?: CallOverrides): Promise<string>;

  "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

  getSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStake(overrides?: CallOverrides): Promise<BigNumber>;

  "getStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _augur: string,
    _market: string,
    _size: BigNumberish,
    _payoutDistributionHash: BytesLike,
    _payoutNumerators: BigNumberish[],
    _crowdsourcerGeneration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,bytes32,uint256[],uint256)"(
    _augur: string,
    _market: string,
    _size: BigNumberish,
    _payoutDistributionHash: BytesLike,
    _payoutNumerators: BigNumberish[],
    _crowdsourcerGeneration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isDisavowed(overrides?: CallOverrides): Promise<boolean>;

  "isDisavowed()"(overrides?: CallOverrides): Promise<boolean>;

  liquidateLosing(overrides?: Overrides): Promise<ContractTransaction>;

  "liquidateLosing()"(overrides?: Overrides): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  redeem(
    _redeemer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(address)"(
    _redeemer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSize(
    _size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSize(uint256)"(
    _size: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  universe(overrides?: CallOverrides): Promise<string>;

  "universe()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contribute(address,uint256,bool)"(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    correctSize(overrides?: CallOverrides): Promise<boolean>;

    "correctSize()"(overrides?: CallOverrides): Promise<boolean>;

    crowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

    "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fork(overrides?: CallOverrides): Promise<void>;

    "fork()"(overrides?: CallOverrides): Promise<void>;

    forkAndRedeem(overrides?: CallOverrides): Promise<boolean>;

    "forkAndRedeem()"(overrides?: CallOverrides): Promise<boolean>;

    getCrowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

    "getCrowdsourcerGeneration()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getMarket(overrides?: CallOverrides): Promise<string>;

    "getMarket()"(overrides?: CallOverrides): Promise<string>;

    getPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

    "getPayoutDistributionHash()"(overrides?: CallOverrides): Promise<string>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRemainingToFill(overrides?: CallOverrides): Promise<BigNumber>;

    "getRemainingToFill()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<string>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,bytes32,uint256[],uint256)"(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isDisavowed(overrides?: CallOverrides): Promise<boolean>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<boolean>;

    liquidateLosing(overrides?: CallOverrides): Promise<void>;

    "liquidateLosing()"(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    redeem(_redeemer: string, overrides?: CallOverrides): Promise<boolean>;

    "redeem(address)"(
      _redeemer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSize(_size: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setSize(uint256)"(
      _size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    universe(overrides?: CallOverrides): Promise<string>;

    "universe()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "contribute(address,uint256,bool)"(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    correctSize(overrides?: Overrides): Promise<BigNumber>;

    "correctSize()"(overrides?: Overrides): Promise<BigNumber>;

    crowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

    "crowdsourcerGeneration()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fork(overrides?: Overrides): Promise<BigNumber>;

    "fork()"(overrides?: Overrides): Promise<BigNumber>;

    forkAndRedeem(overrides?: Overrides): Promise<BigNumber>;

    "forkAndRedeem()"(overrides?: Overrides): Promise<BigNumber>;

    getCrowdsourcerGeneration(overrides?: CallOverrides): Promise<BigNumber>;

    "getCrowdsourcerGeneration()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutDistributionHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingToFill(overrides?: CallOverrides): Promise<BigNumber>;

    "getRemainingToFill()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStake(overrides?: CallOverrides): Promise<BigNumber>;

    "getStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,bytes32,uint256[],uint256)"(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isDisavowed(overrides?: CallOverrides): Promise<BigNumber>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateLosing(overrides?: Overrides): Promise<BigNumber>;

    "liquidateLosing()"(overrides?: Overrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(_redeemer: string, overrides?: Overrides): Promise<BigNumber>;

    "redeem(address)"(
      _redeemer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSize(_size: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setSize(uint256)"(
      _size: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    universe(overrides?: CallOverrides): Promise<BigNumber>;

    "universe()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "contribute(address,uint256,bool)"(
      _participant: string,
      _amount: BigNumberish,
      _overload: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    correctSize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "correctSize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    crowdsourcerGeneration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "crowdsourcerGeneration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    forkAndRedeem(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forkAndRedeem()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getCrowdsourcerGeneration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCrowdsourcerGeneration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutNumerators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutNumerators()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingToFill(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRemainingToFill()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,bytes32,uint256[],uint256)"(
      _augur: string,
      _market: string,
      _size: BigNumberish,
      _payoutDistributionHash: BytesLike,
      _payoutNumerators: BigNumberish[],
      _crowdsourcerGeneration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isDisavowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDisavowed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateLosing(overrides?: Overrides): Promise<PopulatedTransaction>;

    "liquidateLosing()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _redeemer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(address)"(
      _redeemer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSize(
      _size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSize(uint256)"(
      _size: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    universe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "universe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
