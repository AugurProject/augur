/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AffiliateValidatorInterface extends ethers.utils.Interface {
  functions: {
    "addKey(bytes32,uint256,bytes32,bytes32,uint8)": FunctionFragment;
    "addOperator(address)": FunctionFragment;
    "getKeyHash(bytes32,address,uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "isValidSignature(bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "keys(address)": FunctionFragment;
    "operators(address)": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedSalts(uint256)": FunctionFragment;
    "validateReference(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addKey",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getKeyHash",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keys", values: [string]): string;
  encodeFunctionData(functionFragment: "operators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSalts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateReference",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKeyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedSalts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateReference",
    data: BytesLike
  ): Result;

  events: {};
}

export class AffiliateValidator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AffiliateValidatorInterface;

  functions: {
    addKey(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addKey(bytes32,uint256,bytes32,bytes32,uint8)"(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getKeyHash(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getKeyHash(bytes32,address,uint256)"(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    isValidSignature(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidSignature(bytes32,bytes32,bytes32,uint8)"(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keys(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "keys(address)"(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    operators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "operators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    usedSalts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "usedSalts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateReference(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validateReference(address,address)"(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addKey(
    _key: BytesLike,
    _salt: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    _v: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addKey(bytes32,uint256,bytes32,bytes32,uint8)"(
    _key: BytesLike,
    _salt: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    _v: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOperator(
    _operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOperator(address)"(
    _operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getKeyHash(
    _key: BytesLike,
    _account: string,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getKeyHash(bytes32,address,uint256)"(
    _key: BytesLike,
    _account: string,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  isValidSignature(
    _hash: BytesLike,
    _r: BytesLike,
    _s: BytesLike,
    _v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidSignature(bytes32,bytes32,bytes32,uint8)"(
    _hash: BytesLike,
    _r: BytesLike,
    _s: BytesLike,
    _v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keys(arg0: string, overrides?: CallOverrides): Promise<string>;

  "keys(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "operators(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeOperator(
    _operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOperator(address)"(
    _operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  usedSalts(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "usedSalts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateReference(
    _account: string,
    _referrer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "validateReference(address,address)"(
    _account: string,
    _referrer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addKey(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addKey(bytes32,uint256,bytes32,bytes32,uint8)"(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    "addOperator(address)"(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getKeyHash(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getKeyHash(bytes32,address,uint256)"(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    isValidSignature(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidSignature(bytes32,bytes32,bytes32,uint8)"(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keys(arg0: string, overrides?: CallOverrides): Promise<string>;

    "keys(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    operators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "operators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    "removeOperator(address)"(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usedSalts(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "usedSalts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateReference(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "validateReference(address,address)"(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addKey(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addKey(bytes32,uint256,bytes32,bytes32,uint8)"(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOperator(_operator: string, overrides?: Overrides): Promise<BigNumber>;

    "addOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getKeyHash(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getKeyHash(bytes32,address,uint256)"(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isValidSignature(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidSignature(bytes32,bytes32,bytes32,uint8)"(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keys(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "keys(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "operators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    usedSalts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "usedSalts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateReference(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateReference(address,address)"(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addKey(bytes32,uint256,bytes32,bytes32,uint8)"(
      _key: BytesLike,
      _salt: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getKeyHash(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getKeyHash(bytes32,address,uint256)"(
      _key: BytesLike,
      _account: string,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidSignature(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidSignature(bytes32,bytes32,bytes32,uint8)"(
      _hash: BytesLike,
      _r: BytesLike,
      _s: BytesLike,
      _v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "keys(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOperator(
      _operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOperator(address)"(
      _operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    usedSalts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "usedSalts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateReference(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateReference(address,address)"(
      _account: string,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
