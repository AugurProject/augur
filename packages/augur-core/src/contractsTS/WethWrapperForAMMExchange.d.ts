/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WethWrapperForAMMExchangeInterface extends ethers.utils.Interface {
  functions: {
    "addAMMWithLiquidity(address,uint256,uint256,bool,address,string[])": FunctionFragment;
    "addInitialLiquidity(address,uint256,uint256,bool,address)": FunctionFragment;
    "addLiquidity(address,uint256,address)": FunctionFragment;
    "claimMarketsProceeds(address[],address[],address,bytes32)": FunctionFragment;
    "claimTradingProceeds(address,address,bytes32)": FunctionFragment;
    "enterPosition(address,uint256,bool,uint256)": FunctionFragment;
    "exitAll(address,uint256,uint256)": FunctionFragment;
    "exitPosition(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAMM(address,uint256)": FunctionFragment;
    "getBPool(address,address,uint256)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAMMWithLiquidity",
    values: [string, BigNumberish, BigNumberish, boolean, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addInitialLiquidity",
    values: [string, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMarketsProceeds",
    values: [string[], string[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTradingProceeds",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enterPosition",
    values: [string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitAll",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAMM",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addAMMWithLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInitialLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMarketsProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTradingProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAMM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AddLiquidity(address,address)": EventFragment;
    "EnterPosition(address,address)": EventFragment;
    "ExitPosition(address,address)": EventFragment;
    "RemoveLiquidity(address,address)": EventFragment;
    "TradingProceedsClaimed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingProceedsClaimed"): EventFragment;
}

export class WethWrapperForAMMExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: WethWrapperForAMMExchangeInterface;

  functions: {
    addAMMWithLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addAMMWithLiquidity(address,uint256,uint256,bool,address,string[])"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addInitialLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addInitialLiquidity(address,uint256,uint256,bool,address)"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,uint256,address)"(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimTradingProceeds(address,address,bytes32)"(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterPosition(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "enterPosition(address,uint256,bool,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exitAll(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitAll(address,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPosition(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPosition(address,uint256,uint256,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getAMM(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAMM(address,uint256)"(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addAMMWithLiquidity(
    _market: string,
    _fee: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    _symbols: string[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addAMMWithLiquidity(address,uint256,uint256,bool,address,string[])"(
    _market: string,
    _fee: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    _symbols: string[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addInitialLiquidity(
    _market: string,
    _fee: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addInitialLiquidity(address,uint256,uint256,bool,address)"(
    _market: string,
    _fee: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    _market: string,
    _fee: BigNumberish,
    _recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,uint256,address)"(
    _market: string,
    _fee: BigNumberish,
    _recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  claimMarketsProceeds(
    _markets: string[],
    _shareTokens: string[],
    _shareHolder: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMarketsProceeds(address[],address[],address,bytes32)"(
    _markets: string[],
    _shareTokens: string[],
    _shareHolder: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimTradingProceeds(
    _market: string,
    _shareHolder: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimTradingProceeds(address,address,bytes32)"(
    _market: string,
    _shareHolder: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterPosition(
    _market: string,
    _fee: BigNumberish,
    _buyLong: boolean,
    _minShares: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "enterPosition(address,uint256,bool,uint256)"(
    _market: string,
    _fee: BigNumberish,
    _buyLong: boolean,
    _minShares: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exitAll(
    _market: string,
    _fee: BigNumberish,
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitAll(address,uint256,uint256)"(
    _market: string,
    _fee: BigNumberish,
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPosition(
    _market: string,
    _fee: BigNumberish,
    _shortShares: BigNumberish,
    _longShares: BigNumberish,
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPosition(address,uint256,uint256,uint256,uint256)"(
    _market: string,
    _fee: BigNumberish,
    _shortShares: BigNumberish,
    _longShares: BigNumberish,
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getAMM(
    _market: string,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAMM(address,uint256)"(
    _market: string,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBPool(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBPool(address,address,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAMMWithLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _ammAddress: string; _lpTokens: BigNumber }
    >;

    "addAMMWithLiquidity(address,uint256,uint256,bool,address,string[])"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _ammAddress: string; _lpTokens: BigNumber }
    >;

    addInitialLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addInitialLiquidity(address,uint256,uint256,bool,address)"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,address)"(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimTradingProceeds(address,address,bytes32)"(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enterPosition(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enterPosition(address,uint256,bool,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitAll(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitAll(address,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPosition(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitPosition(address,uint256,uint256,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getAMM(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAMM(address,uint256)"(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AddLiquidity(
      amm: null,
      sender: null
    ): TypedEventFilter<[string, string], { amm: string; sender: string }>;

    EnterPosition(
      amm: null,
      sender: null
    ): TypedEventFilter<[string, string], { amm: string; sender: string }>;

    ExitPosition(
      amm: null,
      sender: null
    ): TypedEventFilter<[string, string], { amm: string; sender: string }>;

    RemoveLiquidity(
      amm: null,
      sender: null
    ): TypedEventFilter<[string, string], { amm: string; sender: string }>;

    TradingProceedsClaimed(
      sender: null
    ): TypedEventFilter<[string], { sender: string }>;
  };

  estimateGas: {
    addAMMWithLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addAMMWithLiquidity(address,uint256,uint256,bool,address,string[])"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addInitialLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addInitialLiquidity(address,uint256,uint256,bool,address)"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,address)"(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimTradingProceeds(address,address,bytes32)"(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterPosition(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "enterPosition(address,uint256,bool,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exitAll(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitAll(address,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPosition(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPosition(address,uint256,uint256,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAMM(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAMM(address,uint256)"(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAMMWithLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addAMMWithLiquidity(address,uint256,uint256,bool,address,string[])"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addInitialLiquidity(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addInitialLiquidity(address,uint256,uint256,bool,address)"(
      _market: string,
      _fee: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,uint256,address)"(
      _market: string,
      _fee: BigNumberish,
      _recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimTradingProceeds(address,address,bytes32)"(
      _market: string,
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterPosition(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "enterPosition(address,uint256,bool,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exitAll(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitAll(address,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPosition(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPosition(address,uint256,uint256,uint256,uint256)"(
      _market: string,
      _fee: BigNumberish,
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAMM(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAMM(address,uint256)"(
      _market: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
