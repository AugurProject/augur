/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ParaAugurInterface extends ethers.utils.Interface {
  functions: {
    "OINexus()": FunctionFragment;
    "augur()": FunctionFragment;
    "cash()": FunctionFragment;
    "derivePayoutDistributionHash(uint256[],uint256,uint256)": FunctionFragment;
    "finishDeployment()": FunctionFragment;
    "generateParaUniverse(address)": FunctionFragment;
    "genesisUniverse()": FunctionFragment;
    "getMarketCreationData(address)": FunctionFragment;
    "getMarketOutcomes(address)": FunctionFragment;
    "getMarketRecommendedTradeInterval(address)": FunctionFragment;
    "getMarketType(address)": FunctionFragment;
    "getMaximumMarketEndDate()": FunctionFragment;
    "getOriginCash()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getParaUniverse(address)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getUniverseForkIndex(address)": FunctionFragment;
    "isKnownFeeSender(address)": FunctionFragment;
    "isKnownMarket(address)": FunctionFragment;
    "isKnownParaUniverse(address)": FunctionFragment;
    "isKnownUniverse(address)": FunctionFragment;
    "logCompleteSetsPurchased(address,address,address,uint256)": FunctionFragment;
    "logCompleteSetsSold(address,address,address,uint256,uint256)": FunctionFragment;
    "logMarketOIChanged(address,address)": FunctionFragment;
    "logReportingFeeChanged(uint256)": FunctionFragment;
    "logShareTokensBalanceChanged(address,address,uint256,uint256)": FunctionFragment;
    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "lookup(bytes32)": FunctionFragment;
    "paraUniverseFactory()": FunctionFragment;
    "registerContract(bytes32,address)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "tradeIntervalModifier()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedCashTransfer(address,address,uint256)": FunctionFragment;
    "universes(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "OINexus", values?: undefined): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "derivePayoutDistributionHash",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishDeployment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateParaUniverse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCreationData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOutcomes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRecommendedTradeInterval",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumMarketEndDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOriginCash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getParaUniverse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniverseForkIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownFeeSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownParaUniverse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownUniverse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "logCompleteSetsPurchased",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logCompleteSetsSold",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketOIChanged",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logReportingFeeChanged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logShareTokensBalanceChanged",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logTradingProceedsClaimed",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "lookup", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "paraUniverseFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIntervalModifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedCashTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "universes", values: [string]): string;

  decodeFunctionResult(functionFragment: "OINexus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "derivePayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateParaUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCreationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRecommendedTradeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumMarketEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOriginCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParaUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniverseForkIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownFeeSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownParaUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logCompleteSetsPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logCompleteSetsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketOIChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logReportingFeeChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logShareTokensBalanceChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logTradingProceedsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lookup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paraUniverseFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeIntervalModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedCashTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "universes", data: BytesLike): Result;

  events: {
    "CompleteSetsPurchased(address,address,address,uint256,uint256,address)": EventFragment;
    "CompleteSetsSold(address,address,address,uint256,uint256,uint256,address)": EventFragment;
    "FinishDeployment()": EventFragment;
    "MarketOIChanged(address,address,uint256,address)": EventFragment;
    "RegisterContract(address,bytes32)": EventFragment;
    "ReportingFeeChanged(address,uint256,address)": EventFragment;
    "ShareTokenBalanceChanged(address,address,address,uint256,uint256,address)": EventFragment;
    "TradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompleteSetsPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteSetsSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishDeployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportingFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShareTokenBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingProceedsClaimed"): EventFragment;
}

export class ParaAugur extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ParaAugurInterface;

  functions: {
    OINexus(overrides?: CallOverrides): Promise<[string]>;

    "OINexus()"(overrides?: CallOverrides): Promise<[string]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finishDeployment(overrides?: Overrides): Promise<ContractTransaction>;

    "finishDeployment()"(overrides?: Overrides): Promise<ContractTransaction>;

    generateParaUniverse(
      _universe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "generateParaUniverse(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    genesisUniverse(overrides?: CallOverrides): Promise<[string]>;

    "genesisUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string[], BigNumber[], number, BigNumber] & {
          extraInfo: string;
          marketCreator: string;
          outcomes: string[];
          displayPrices: BigNumber[];
          marketType: number;
          recommendedTradeInterval: BigNumber;
        }
      ]
    >;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string[], BigNumber[], number, BigNumber] & {
          extraInfo: string;
          marketCreator: string;
          outcomes: string[];
          displayPrices: BigNumber[];
          marketType: number;
          recommendedTradeInterval: BigNumber;
        }
      ]
    >;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _outcomes: string[] }>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _outcomes: string[] }>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketType(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMaximumMarketEndDate(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getMaximumMarketEndDate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOriginCash(overrides?: CallOverrides): Promise<[string]>;

    "getOriginCash()"(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getParaUniverse(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "getParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownParaUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownParaUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paraUniverseFactory(overrides?: CallOverrides): Promise<[string]>;

    "paraUniverseFactory()"(overrides?: CallOverrides): Promise<[string]>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    tradeIntervalModifier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tradeIntervalModifier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    universes(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "universes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  OINexus(overrides?: CallOverrides): Promise<string>;

  "OINexus()"(overrides?: CallOverrides): Promise<string>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  derivePayoutDistributionHash(
    _payoutNumerators: BigNumberish[],
    _numTicks: BigNumberish,
    _numOutcomes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
    _payoutNumerators: BigNumberish[],
    _numTicks: BigNumberish,
    _numOutcomes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  finishDeployment(overrides?: Overrides): Promise<ContractTransaction>;

  "finishDeployment()"(overrides?: Overrides): Promise<ContractTransaction>;

  generateParaUniverse(
    _universe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "generateParaUniverse(address)"(
    _universe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  genesisUniverse(overrides?: CallOverrides): Promise<string>;

  "genesisUniverse()"(overrides?: CallOverrides): Promise<string>;

  getMarketCreationData(
    _market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string[], BigNumber[], number, BigNumber] & {
      extraInfo: string;
      marketCreator: string;
      outcomes: string[];
      displayPrices: BigNumber[];
      marketType: number;
      recommendedTradeInterval: BigNumber;
    }
  >;

  "getMarketCreationData(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string[], BigNumber[], number, BigNumber] & {
      extraInfo: string;
      marketCreator: string;
      outcomes: string[];
      displayPrices: BigNumber[];
      marketType: number;
      recommendedTradeInterval: BigNumber;
    }
  >;

  getMarketOutcomes(
    _market: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getMarketOutcomes(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMarketRecommendedTradeInterval(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketRecommendedTradeInterval(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketType(_market: string, overrides?: CallOverrides): Promise<number>;

  "getMarketType(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getMaximumMarketEndDate(overrides?: Overrides): Promise<ContractTransaction>;

  "getMaximumMarketEndDate()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOriginCash(overrides?: CallOverrides): Promise<string>;

  "getOriginCash()"(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  getParaUniverse(arg0: string, overrides?: CallOverrides): Promise<string>;

  "getParaUniverse(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUniverseForkIndex(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUniverseForkIndex(address)"(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isKnownFeeSender(
    _feeSender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isKnownFeeSender(address)"(
    _feeSender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownMarket(_market: string, overrides?: CallOverrides): Promise<boolean>;

  "isKnownMarket(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownParaUniverse(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isKnownParaUniverse(address)"(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownUniverse(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isKnownUniverse(address)"(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  logCompleteSetsPurchased(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logCompleteSetsPurchased(address,address,address,uint256)"(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logCompleteSetsSold(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logCompleteSetsSold(address,address,address,uint256,uint256)"(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketOIChanged(
    _universe: string,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketOIChanged(address,address)"(
    _universe: string,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logReportingFeeChanged(
    _reportingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logReportingFeeChanged(uint256)"(
    _reportingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logShareTokensBalanceChanged(
    _account: string,
    _market: string,
    _outcome: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
    _account: string,
    _market: string,
    _outcome: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logTradingProceedsClaimed(
    _universe: string,
    _sender: string,
    _market: string,
    _outcome: BigNumberish,
    _numShares: BigNumberish,
    _numPayoutTokens: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
    _universe: string,
    _sender: string,
    _market: string,
    _outcome: BigNumberish,
    _numShares: BigNumberish,
    _numPayoutTokens: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lookup(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  "lookup(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  paraUniverseFactory(overrides?: CallOverrides): Promise<string>;

  "paraUniverseFactory()"(overrides?: CallOverrides): Promise<string>;

  registerContract(
    _key: BytesLike,
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerContract(bytes32,address)"(
    _key: BytesLike,
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  tradeIntervalModifier(overrides?: CallOverrides): Promise<BigNumber>;

  "tradeIntervalModifier()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedCashTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedCashTransfer(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  universes(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "universes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    OINexus(overrides?: CallOverrides): Promise<string>;

    "OINexus()"(overrides?: CallOverrides): Promise<string>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    finishDeployment(overrides?: CallOverrides): Promise<boolean>;

    "finishDeployment()"(overrides?: CallOverrides): Promise<boolean>;

    generateParaUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "generateParaUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<string>;

    genesisUniverse(overrides?: CallOverrides): Promise<string>;

    "genesisUniverse()"(overrides?: CallOverrides): Promise<string>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string[], BigNumber[], number, BigNumber] & {
        extraInfo: string;
        marketCreator: string;
        outcomes: string[];
        displayPrices: BigNumber[];
        marketType: number;
        recommendedTradeInterval: BigNumber;
      }
    >;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string[], BigNumber[], number, BigNumber] & {
        extraInfo: string;
        marketCreator: string;
        outcomes: string[];
        displayPrices: BigNumber[];
        marketType: number;
        recommendedTradeInterval: BigNumber;
      }
    >;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketType(_market: string, overrides?: CallOverrides): Promise<number>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getMaximumMarketEndDate(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaximumMarketEndDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOriginCash(overrides?: CallOverrides): Promise<string>;

    "getOriginCash()"(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    getParaUniverse(arg0: string, overrides?: CallOverrides): Promise<string>;

    "getParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownMarket(_market: string, overrides?: CallOverrides): Promise<boolean>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownParaUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isKnownParaUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    paraUniverseFactory(overrides?: CallOverrides): Promise<string>;

    "paraUniverseFactory()"(overrides?: CallOverrides): Promise<string>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    tradeIntervalModifier(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeIntervalModifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    universes(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "universes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    CompleteSetsPurchased(
      universe: string | null,
      market: string | null,
      account: string | null,
      numCompleteSets: null,
      timestamp: null,
      para: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        universe: string;
        market: string;
        account: string;
        numCompleteSets: BigNumber;
        timestamp: BigNumber;
        para: string;
      }
    >;

    CompleteSetsSold(
      universe: string | null,
      market: string | null,
      account: string | null,
      numCompleteSets: null,
      fees: null,
      timestamp: null,
      para: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, string],
      {
        universe: string;
        market: string;
        account: string;
        numCompleteSets: BigNumber;
        fees: BigNumber;
        timestamp: BigNumber;
        para: string;
      }
    >;

    FinishDeployment(): TypedEventFilter<[]>;

    MarketOIChanged(
      universe: string | null,
      market: string | null,
      marketOI: null,
      para: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { universe: string; market: string; marketOI: BigNumber; para: string }
    >;

    RegisterContract(
      contractAddress: null,
      key: null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; key: string }
    >;

    ReportingFeeChanged(
      universe: string | null,
      reportingFee: null,
      para: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { universe: string; reportingFee: BigNumber; para: string }
    >;

    ShareTokenBalanceChanged(
      universe: string | null,
      account: string | null,
      market: string | null,
      outcome: null,
      balance: null,
      para: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        universe: string;
        account: string;
        market: string;
        outcome: BigNumber;
        balance: BigNumber;
        para: string;
      }
    >;

    TradingProceedsClaimed(
      universe: string | null,
      sender: string | null,
      market: null,
      outcome: null,
      numShares: null,
      numPayoutTokens: null,
      fees: null,
      timestamp: null,
      para: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        universe: string;
        sender: string;
        market: string;
        outcome: BigNumber;
        numShares: BigNumber;
        numPayoutTokens: BigNumber;
        fees: BigNumber;
        timestamp: BigNumber;
        para: string;
      }
    >;
  };

  estimateGas: {
    OINexus(overrides?: CallOverrides): Promise<BigNumber>;

    "OINexus()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishDeployment(overrides?: Overrides): Promise<BigNumber>;

    "finishDeployment()"(overrides?: Overrides): Promise<BigNumber>;

    generateParaUniverse(
      _universe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "generateParaUniverse(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    genesisUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketType(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumMarketEndDate(overrides?: Overrides): Promise<BigNumber>;

    "getMaximumMarketEndDate()"(overrides?: Overrides): Promise<BigNumber>;

    getOriginCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getOriginCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getParaUniverse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownParaUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownParaUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paraUniverseFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "paraUniverseFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradeIntervalModifier(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeIntervalModifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    universes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "universes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OINexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OINexus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishDeployment(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finishDeployment()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    generateParaUniverse(
      _universe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "generateParaUniverse(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    genesisUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisUniverse()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketType(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumMarketEndDate(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getMaximumMarketEndDate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOriginCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOriginCash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParaUniverse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownParaUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownParaUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lookup(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paraUniverseFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paraUniverseFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeIntervalModifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tradeIntervalModifier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    universes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "universes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
