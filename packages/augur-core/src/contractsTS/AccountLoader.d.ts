/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AccountLoaderInterface extends ethers.utils.Interface {
  functions: {
    "cash()": FunctionFragment;
    "getExchangeRate(address,address)": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "legacyReputationToken()": FunctionFragment;
    "loadAccountData(address,address,address,address,address)": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loadAccountData",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legacyReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class AccountLoader extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AccountLoaderInterface;

  functions: {
    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    getExchangeRate(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getExchangeRate(address,address)"(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    legacyReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "legacyReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    loadAccountData(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          signerETH: BigNumber;
          signerDAI: BigNumber;
          signerREP: BigNumber;
          signerLegacyREP: BigNumber;
          attoDAIperREP: BigNumber;
          attoDAIperETH: BigNumber;
          attoDAIperUSDC: BigNumber;
          attoDAIperUSDT: BigNumber;
          attoETHperREP: BigNumber;
          attoETHperUSDC: BigNumber;
          attoETHperUSDT: BigNumber;
          attoREPperUSDC: BigNumber;
          attoREPperUSDT: BigNumber;
          attoUSDCperUSDT: BigNumber;
          attoETHperCollateral: BigNumber;
          signerUSDC: BigNumber;
          signerUSDT: BigNumber;
          signerCollateral: BigNumber;
        }
      ] & {
        _data: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          signerETH: BigNumber;
          signerDAI: BigNumber;
          signerREP: BigNumber;
          signerLegacyREP: BigNumber;
          attoDAIperREP: BigNumber;
          attoDAIperETH: BigNumber;
          attoDAIperUSDC: BigNumber;
          attoDAIperUSDT: BigNumber;
          attoETHperREP: BigNumber;
          attoETHperUSDC: BigNumber;
          attoETHperUSDT: BigNumber;
          attoREPperUSDC: BigNumber;
          attoREPperUSDT: BigNumber;
          attoUSDCperUSDT: BigNumber;
          attoETHperCollateral: BigNumber;
          signerUSDC: BigNumber;
          signerUSDT: BigNumber;
          signerCollateral: BigNumber;
        };
      }
    >;

    "loadAccountData(address,address,address,address,address)"(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          signerETH: BigNumber;
          signerDAI: BigNumber;
          signerREP: BigNumber;
          signerLegacyREP: BigNumber;
          attoDAIperREP: BigNumber;
          attoDAIperETH: BigNumber;
          attoDAIperUSDC: BigNumber;
          attoDAIperUSDT: BigNumber;
          attoETHperREP: BigNumber;
          attoETHperUSDC: BigNumber;
          attoETHperUSDT: BigNumber;
          attoREPperUSDC: BigNumber;
          attoREPperUSDT: BigNumber;
          attoUSDCperUSDT: BigNumber;
          attoETHperCollateral: BigNumber;
          signerUSDC: BigNumber;
          signerUSDT: BigNumber;
          signerCollateral: BigNumber;
        }
      ] & {
        _data: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          signerETH: BigNumber;
          signerDAI: BigNumber;
          signerREP: BigNumber;
          signerLegacyREP: BigNumber;
          attoDAIperREP: BigNumber;
          attoDAIperETH: BigNumber;
          attoDAIperUSDC: BigNumber;
          attoDAIperUSDT: BigNumber;
          attoETHperREP: BigNumber;
          attoETHperUSDC: BigNumber;
          attoETHperUSDT: BigNumber;
          attoREPperUSDC: BigNumber;
          attoREPperUSDT: BigNumber;
          attoUSDCperUSDT: BigNumber;
          attoETHperCollateral: BigNumber;
          signerUSDC: BigNumber;
          signerUSDT: BigNumber;
          signerCollateral: BigNumber;
        };
      }
    >;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  getExchangeRate(
    _firstToken: string,
    _secondToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getExchangeRate(address,address)"(
    _firstToken: string,
    _secondToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  legacyReputationToken(overrides?: CallOverrides): Promise<string>;

  "legacyReputationToken()"(overrides?: CallOverrides): Promise<string>;

  loadAccountData(
    _account: string,
    _reputationToken: string,
    _USDC: string,
    _USDT: string,
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      signerETH: BigNumber;
      signerDAI: BigNumber;
      signerREP: BigNumber;
      signerLegacyREP: BigNumber;
      attoDAIperREP: BigNumber;
      attoDAIperETH: BigNumber;
      attoDAIperUSDC: BigNumber;
      attoDAIperUSDT: BigNumber;
      attoETHperREP: BigNumber;
      attoETHperUSDC: BigNumber;
      attoETHperUSDT: BigNumber;
      attoREPperUSDC: BigNumber;
      attoREPperUSDT: BigNumber;
      attoUSDCperUSDT: BigNumber;
      attoETHperCollateral: BigNumber;
      signerUSDC: BigNumber;
      signerUSDT: BigNumber;
      signerCollateral: BigNumber;
    }
  >;

  "loadAccountData(address,address,address,address,address)"(
    _account: string,
    _reputationToken: string,
    _USDC: string,
    _USDT: string,
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      signerETH: BigNumber;
      signerDAI: BigNumber;
      signerREP: BigNumber;
      signerLegacyREP: BigNumber;
      attoDAIperREP: BigNumber;
      attoDAIperETH: BigNumber;
      attoDAIperUSDC: BigNumber;
      attoDAIperUSDT: BigNumber;
      attoETHperREP: BigNumber;
      attoETHperUSDC: BigNumber;
      attoETHperUSDT: BigNumber;
      attoREPperUSDC: BigNumber;
      attoREPperUSDT: BigNumber;
      attoUSDCperUSDT: BigNumber;
      attoETHperCollateral: BigNumber;
      signerUSDC: BigNumber;
      signerUSDT: BigNumber;
      signerCollateral: BigNumber;
    }
  >;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    getExchangeRate(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExchangeRate(address,address)"(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    legacyReputationToken(overrides?: CallOverrides): Promise<string>;

    "legacyReputationToken()"(overrides?: CallOverrides): Promise<string>;

    loadAccountData(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        signerETH: BigNumber;
        signerDAI: BigNumber;
        signerREP: BigNumber;
        signerLegacyREP: BigNumber;
        attoDAIperREP: BigNumber;
        attoDAIperETH: BigNumber;
        attoDAIperUSDC: BigNumber;
        attoDAIperUSDT: BigNumber;
        attoETHperREP: BigNumber;
        attoETHperUSDC: BigNumber;
        attoETHperUSDT: BigNumber;
        attoREPperUSDC: BigNumber;
        attoREPperUSDT: BigNumber;
        attoUSDCperUSDT: BigNumber;
        attoETHperCollateral: BigNumber;
        signerUSDC: BigNumber;
        signerUSDT: BigNumber;
        signerCollateral: BigNumber;
      }
    >;

    "loadAccountData(address,address,address,address,address)"(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        signerETH: BigNumber;
        signerDAI: BigNumber;
        signerREP: BigNumber;
        signerLegacyREP: BigNumber;
        attoDAIperREP: BigNumber;
        attoDAIperETH: BigNumber;
        attoDAIperUSDC: BigNumber;
        attoDAIperUSDT: BigNumber;
        attoETHperREP: BigNumber;
        attoETHperUSDC: BigNumber;
        attoETHperUSDT: BigNumber;
        attoREPperUSDC: BigNumber;
        attoREPperUSDT: BigNumber;
        attoUSDCperUSDT: BigNumber;
        attoETHperCollateral: BigNumber;
        signerUSDC: BigNumber;
        signerUSDT: BigNumber;
        signerCollateral: BigNumber;
      }
    >;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExchangeRate(address,address)"(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    legacyReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "legacyReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    loadAccountData(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loadAccountData(address,address,address,address,address)"(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeRate(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExchangeRate(address,address)"(
      _firstToken: string,
      _secondToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    legacyReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "legacyReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loadAccountData(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loadAccountData(address,address,address,address,address)"(
      _account: string,
      _reputationToken: string,
      _USDC: string,
      _USDT: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
