/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RelayHubV2Interface extends ethers.utils.Interface {
  functions: {
    "MAX_WORKER_COUNT()": FunctionFragment;
    "addRelayWorkers(address[])": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "calculateCharge(uint256,tuple)": FunctionFragment;
    "canRelay(tuple,uint256,bytes,bytes)": FunctionFragment;
    "depositFor(address)": FunctionFragment;
    "getHubOverhead()": FunctionFragment;
    "getStakeManager()": FunctionFragment;
    "innerRelayCall(tuple,bytes,tuple,uint256,bytes)": FunctionFragment;
    "penalize(address,address)": FunctionFragment;
    "penalizer()": FunctionFragment;
    "registerRelayServer(uint256,uint256,string)": FunctionFragment;
    "relayCall(tuple,bytes,bytes,uint256)": FunctionFragment;
    "stakeManager()": FunctionFragment;
    "versionHub()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "workerCount(address)": FunctionFragment;
    "workerToManager(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_WORKER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayWorkers",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateCharge",
    values: [
      BigNumberish,
      {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canRelay",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "depositFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getHubOverhead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "innerRelayCall",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      BytesLike,
      {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "penalize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "penalizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerRelayServer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayCall",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "workerCount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "workerToManager",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_WORKER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRelayWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHubOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "innerRelayCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "penalizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionHub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerToManager",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,address,uint256)": EventFragment;
    "Penalized(address,address,uint256)": EventFragment;
    "RelayServerRegistered(address,uint256,uint256,string)": EventFragment;
    "RelayWorkersAdded(address,address[],uint256)": EventFragment;
    "TransactionRejectedByPaymaster(address,address,address,address,address,bytes4,string)": EventFragment;
    "TransactionRelayed(address,address,address,address,address,bytes4,uint8,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Penalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayServerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayWorkersAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransactionRejectedByPaymaster"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class RelayHubV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: RelayHubV2Interface;

  functions: {
    MAX_WORKER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_WORKER_COUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(target: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canRelay(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        success: boolean;
        returnValue: string;
        gasLimits: [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    "canRelay(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),uint256,bytes,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        success: boolean;
        returnValue: string;
        gasLimits: [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    depositFor(
      target: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositFor(address)"(
      target: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getHubOverhead(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getHubOverhead()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeManager(overrides?: CallOverrides): Promise<[string]>;

    "getStakeManager()"(overrides?: CallOverrides): Promise<[string]>;

    innerRelayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "innerRelayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,(uint256,uint256,uint256),uint256,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    penalizer(overrides?: CallOverrides): Promise<[string]>;

    "penalizer()"(overrides?: CallOverrides): Promise<[string]>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    relayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "relayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeManager(overrides?: CallOverrides): Promise<[string]>;

    "stakeManager()"(overrides?: CallOverrides): Promise<[string]>;

    versionHub(overrides?: CallOverrides): Promise<[string]>;

    "versionHub()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    workerCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "workerCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workerToManager(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "workerToManager(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  MAX_WORKER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_WORKER_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addRelayWorkers(
    newRelayWorkers: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRelayWorkers(address[])"(
    newRelayWorkers: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    target: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateCharge(
    gasUsed: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateCharge(uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
    gasUsed: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canRelay(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    initialGas: BigNumberish,
    signature: BytesLike,
    approvalData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      [BigNumber, BigNumber, BigNumber] & {
        acceptRelayedCallGasLimit: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    ] & {
      success: boolean;
      returnValue: string;
      gasLimits: [BigNumber, BigNumber, BigNumber] & {
        acceptRelayedCallGasLimit: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      };
    }
  >;

  "canRelay(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),uint256,bytes,bytes)"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    initialGas: BigNumberish,
    signature: BytesLike,
    approvalData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      [BigNumber, BigNumber, BigNumber] & {
        acceptRelayedCallGasLimit: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    ] & {
      success: boolean;
      returnValue: string;
      gasLimits: [BigNumber, BigNumber, BigNumber] & {
        acceptRelayedCallGasLimit: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      };
    }
  >;

  depositFor(
    target: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositFor(address)"(
    target: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getHubOverhead(overrides?: CallOverrides): Promise<BigNumber>;

  "getHubOverhead()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeManager(overrides?: CallOverrides): Promise<string>;

  "getStakeManager()"(overrides?: CallOverrides): Promise<string>;

  innerRelayCall(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    gasLimits: {
      acceptRelayedCallGasLimit: BigNumberish;
      preRelayedCallGasLimit: BigNumberish;
      postRelayedCallGasLimit: BigNumberish;
    },
    totalInitialGas: BigNumberish,
    recipientContext: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "innerRelayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,(uint256,uint256,uint256),uint256,bytes)"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    gasLimits: {
      acceptRelayedCallGasLimit: BigNumberish;
      preRelayedCallGasLimit: BigNumberish;
      postRelayedCallGasLimit: BigNumberish;
    },
    totalInitialGas: BigNumberish,
    recipientContext: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  penalize(
    relayWorker: string,
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "penalize(address,address)"(
    relayWorker: string,
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  penalizer(overrides?: CallOverrides): Promise<string>;

  "penalizer()"(overrides?: CallOverrides): Promise<string>;

  registerRelayServer(
    baseRelayFee: BigNumberish,
    pctRelayFee: BigNumberish,
    url: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerRelayServer(uint256,uint256,string)"(
    baseRelayFee: BigNumberish,
    pctRelayFee: BigNumberish,
    url: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  relayCall(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    externalGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "relayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    externalGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeManager(overrides?: CallOverrides): Promise<string>;

  "stakeManager()"(overrides?: CallOverrides): Promise<string>;

  versionHub(overrides?: CallOverrides): Promise<string>;

  "versionHub()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    dest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    amount: BigNumberish,
    dest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  workerCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "workerCount(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workerToManager(arg0: string, overrides?: CallOverrides): Promise<string>;

  "workerToManager(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    MAX_WORKER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_WORKER_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRelay(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        success: boolean;
        returnValue: string;
        gasLimits: [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    "canRelay(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),uint256,bytes,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        success: boolean;
        returnValue: string;
        gasLimits: [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    depositFor(target: string, overrides?: CallOverrides): Promise<void>;

    "depositFor(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getHubOverhead(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubOverhead()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeManager(overrides?: CallOverrides): Promise<string>;

    "getStakeManager()"(overrides?: CallOverrides): Promise<string>;

    innerRelayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "innerRelayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,(uint256,uint256,uint256),uint256,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    penalizer(overrides?: CallOverrides): Promise<string>;

    "penalizer()"(overrides?: CallOverrides): Promise<string>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    relayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { paymasterAccepted: boolean; revertReason: string }
    >;

    "relayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { paymasterAccepted: boolean; revertReason: string }
    >;

    stakeManager(overrides?: CallOverrides): Promise<string>;

    "stakeManager()"(overrides?: CallOverrides): Promise<string>;

    versionHub(overrides?: CallOverrides): Promise<string>;

    "versionHub()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workerCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "workerCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerToManager(arg0: string, overrides?: CallOverrides): Promise<string>;

    "workerToManager(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Deposited(
      paymaster: string | null,
      from: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { paymaster: string; from: string; amount: BigNumber }
    >;

    Penalized(
      relayWorker: string | null,
      sender: null,
      reward: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { relayWorker: string; sender: string; reward: BigNumber }
    >;

    RelayServerRegistered(
      relayManager: string | null,
      baseRelayFee: null,
      pctRelayFee: null,
      relayUrl: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        relayManager: string;
        baseRelayFee: BigNumber;
        pctRelayFee: BigNumber;
        relayUrl: string;
      }
    >;

    RelayWorkersAdded(
      relayManager: string | null,
      newRelayWorkers: null,
      workersCount: null
    ): TypedEventFilter<
      [string, string[], BigNumber],
      {
        relayManager: string;
        newRelayWorkers: string[];
        workersCount: BigNumber;
      }
    >;

    TransactionRejectedByPaymaster(
      relayManager: string | null,
      paymaster: string | null,
      from: string | null,
      to: null,
      relayWorker: null,
      selector: null,
      reason: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        relayManager: string;
        paymaster: string;
        from: string;
        to: string;
        relayWorker: string;
        selector: string;
        reason: string;
      }
    >;

    TransactionRelayed(
      relayManager: string | null,
      relayWorker: string | null,
      from: string | null,
      to: null,
      paymaster: null,
      selector: null,
      status: null,
      charge: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, number, BigNumber],
      {
        relayManager: string;
        relayWorker: string;
        from: string;
        to: string;
        paymaster: string;
        selector: string;
        status: number;
        charge: BigNumber;
      }
    >;

    Withdrawn(
      account: string | null,
      dest: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; dest: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    MAX_WORKER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_WORKER_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRelay(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canRelay(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),uint256,bytes,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      target: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositFor(address)"(
      target: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getHubOverhead(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubOverhead()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeManager(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakeManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    innerRelayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "innerRelayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,(uint256,uint256,uint256),uint256,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    penalizer(overrides?: CallOverrides): Promise<BigNumber>;

    "penalizer()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    relayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "relayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeManager(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionHub(overrides?: CallOverrides): Promise<BigNumber>;

    "versionHub()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    workerCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "workerCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerToManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workerToManager(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_WORKER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_WORKER_COUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      gasUsed: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRelay(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canRelay(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),uint256,bytes,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      initialGas: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      target: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositFor(address)"(
      target: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getHubOverhead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHubOverhead()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStakeManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    innerRelayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "innerRelayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,(uint256,uint256,uint256),uint256,bytes)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      gasLimits: {
        acceptRelayedCallGasLimit: BigNumberish;
        preRelayedCallGasLimit: BigNumberish;
        postRelayedCallGasLimit: BigNumberish;
      },
      totalInitialGas: BigNumberish,
      recipientContext: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    penalizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "penalizer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    relayCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "relayCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionHub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    workerCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerToManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerToManager(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
