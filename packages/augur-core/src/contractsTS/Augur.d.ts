/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AugurInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_RECOMMENDED_TRADE_INTERVAL()": FunctionFragment;
    "MIN_TRADE_INTERVAL()": FunctionFragment;
    "TRADE_INTERVAL_VALUE()": FunctionFragment;
    "cash()": FunctionFragment;
    "createChildUniverse(bytes32,uint256[])": FunctionFragment;
    "createGenesisUniverse()": FunctionFragment;
    "derivePayoutDistributionHash(uint256[],uint256,uint256)": FunctionFragment;
    "disputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)": FunctionFragment;
    "finishDeployment()": FunctionFragment;
    "forkCounter()": FunctionFragment;
    "genesisUniverse()": FunctionFragment;
    "getMarketCreationData(address)": FunctionFragment;
    "getMarketOutcomes(address)": FunctionFragment;
    "getMarketRecommendedTradeInterval(address)": FunctionFragment;
    "getMarketType(address)": FunctionFragment;
    "getMaximumMarketEndDate()": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getTradeInterval(uint256,uint256)": FunctionFragment;
    "getUniverseForkIndex(address)": FunctionFragment;
    "isKnownCrowdsourcer(address)": FunctionFragment;
    "isKnownFeeSender(address)": FunctionFragment;
    "isKnownMarket(address)": FunctionFragment;
    "isKnownUniverse(address)": FunctionFragment;
    "isTrustedSender(address)": FunctionFragment;
    "logCompleteSetsPurchased(address,address,address,uint256)": FunctionFragment;
    "logCompleteSetsSold(address,address,address,uint256,uint256)": FunctionFragment;
    "logDesignatedReportStakeChanged(uint256)": FunctionFragment;
    "logDisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)": FunctionFragment;
    "logDisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256)": FunctionFragment;
    "logDisputeCrowdsourcerRedeemed(address,address,address,uint256,uint256,uint256[])": FunctionFragment;
    "logDisputeCrowdsourcerTokensBurned(address,address,uint256,uint256,uint256)": FunctionFragment;
    "logDisputeCrowdsourcerTokensMinted(address,address,uint256,uint256,uint256)": FunctionFragment;
    "logDisputeCrowdsourcerTokensTransferred(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "logDisputeWindowCreated(address,uint256,bool)": FunctionFragment;
    "logInitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256)": FunctionFragment;
    "logInitialReporterRedeemed(address,address,address,uint256,uint256,uint256[])": FunctionFragment;
    "logInitialReporterTransferred(address,address,address,address)": FunctionFragment;
    "logMarketFinalized(address,uint256[])": FunctionFragment;
    "logMarketMigrated(address,address)": FunctionFragment;
    "logMarketOIChanged(address,address)": FunctionFragment;
    "logMarketParticipantsDisavowed(address)": FunctionFragment;
    "logMarketRepBondTransferred(address,address,address)": FunctionFragment;
    "logMarketTransferred(address,address,address)": FunctionFragment;
    "logNoShowBondChanged(uint256)": FunctionFragment;
    "logParticipationTokensBurned(address,address,uint256,uint256,uint256)": FunctionFragment;
    "logParticipationTokensMinted(address,address,uint256,uint256,uint256)": FunctionFragment;
    "logParticipationTokensRedeemed(address,address,uint256,uint256)": FunctionFragment;
    "logParticipationTokensTransferred(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "logReportingFeeChanged(uint256)": FunctionFragment;
    "logReportingParticipantDisavowed(address,address)": FunctionFragment;
    "logReputationTokensBurned(address,address,uint256,uint256,uint256)": FunctionFragment;
    "logReputationTokensMinted(address,address,uint256,uint256,uint256)": FunctionFragment;
    "logReputationTokensTransferred(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "logShareTokensBalanceChanged(address,address,uint256,uint256)": FunctionFragment;
    "logTimestampSet(uint256)": FunctionFragment;
    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "logUniverseForked(address)": FunctionFragment;
    "logValidityBondChanged(uint256)": FunctionFragment;
    "logWarpSyncDataUpdated(address,uint256,uint256)": FunctionFragment;
    "lookup(bytes32)": FunctionFragment;
    "onCategoricalMarketCreated(uint256,string,address,address,address,uint256,bytes32[])": FunctionFragment;
    "onScalarMarketCreated(uint256,string,address,address,address,uint256,int256[],uint256)": FunctionFragment;
    "onYesNoMarketCreated(uint256,string,address,address,address,uint256)": FunctionFragment;
    "registerContract(bytes32,address)": FunctionFragment;
    "time()": FunctionFragment;
    "trustedCashTransfer(address,address,uint256)": FunctionFragment;
    "upgradeTimestamp()": FunctionFragment;
    "uploader()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_RECOMMENDED_TRADE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TRADE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADE_INTERVAL_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createChildUniverse",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createGenesisUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "derivePayoutDistributionHash",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeCrowdsourcerCreated",
    values: [string, string, string, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishDeployment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forkCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCreationData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOutcomes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRecommendedTradeInterval",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumMarketEndDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeInterval",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniverseForkIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownCrowdsourcer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownFeeSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownUniverse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "logCompleteSetsPurchased",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logCompleteSetsSold",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logDesignatedReportStakeChanged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeCrowdsourcerCompleted",
    values: [
      string,
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeCrowdsourcerContribution",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeCrowdsourcerRedeemed",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeCrowdsourcerTokensBurned",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeCrowdsourcerTokensMinted",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeCrowdsourcerTokensTransferred",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logDisputeWindowCreated",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "logInitialReportSubmitted",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      boolean,
      BigNumberish[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logInitialReporterRedeemed",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "logInitialReporterTransferred",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketFinalized",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketMigrated",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketOIChanged",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketParticipantsDisavowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketRepBondTransferred",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketTransferred",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logNoShowBondChanged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logParticipationTokensBurned",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logParticipationTokensMinted",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logParticipationTokensRedeemed",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logParticipationTokensTransferred",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logReportingFeeChanged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logReportingParticipantDisavowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logReputationTokensBurned",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logReputationTokensMinted",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logReputationTokensTransferred",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logShareTokensBalanceChanged",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logTimestampSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logTradingProceedsClaimed",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logUniverseForked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "logValidityBondChanged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logWarpSyncDataUpdated",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lookup", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onCategoricalMarketCreated",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onScalarMarketCreated",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onYesNoMarketCreated",
    values: [BigNumberish, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "time", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trustedCashTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uploader", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_RECOMMENDED_TRADE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TRADE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADE_INTERVAL_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createChildUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGenesisUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivePayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeCrowdsourcerCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forkCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCreationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRecommendedTradeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumMarketEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniverseForkIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownCrowdsourcer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownFeeSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logCompleteSetsPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logCompleteSetsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDesignatedReportStakeChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeCrowdsourcerCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeCrowdsourcerContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeCrowdsourcerRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeCrowdsourcerTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeCrowdsourcerTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeCrowdsourcerTokensTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logDisputeWindowCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logInitialReportSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logInitialReporterRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logInitialReporterTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketOIChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketParticipantsDisavowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketRepBondTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logNoShowBondChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logParticipationTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logParticipationTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logParticipationTokensRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logParticipationTokensTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logReportingFeeChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logReportingParticipantDisavowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logReputationTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logReputationTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logReputationTokensTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logShareTokensBalanceChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logTimestampSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logTradingProceedsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logUniverseForked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logValidityBondChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logWarpSyncDataUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lookup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onCategoricalMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onScalarMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onYesNoMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "time", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedCashTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uploader", data: BytesLike): Result;

  events: {
    "CompleteSetsPurchased(address,address,address,uint256,uint256)": EventFragment;
    "CompleteSetsSold(address,address,address,uint256,uint256,uint256)": EventFragment;
    "DesignatedReportStakeChanged(address,uint256)": EventFragment;
    "DisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "DisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256,uint256)": EventFragment;
    "DisputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)": EventFragment;
    "DisputeCrowdsourcerRedeemed(address,address,address,address,uint256,uint256,uint256[],uint256)": EventFragment;
    "DisputeWindowCreated(address,address,uint256,uint256,uint256,bool)": EventFragment;
    "FinishDeployment()": EventFragment;
    "InitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256,uint256)": EventFragment;
    "InitialReporterRedeemed(address,address,address,address,uint256,uint256,uint256[],uint256)": EventFragment;
    "InitialReporterTransferred(address,address,address,address)": EventFragment;
    "MarketCreated(address,uint256,string,address,address,address,uint256,int256[],uint8,uint256,bytes32[],uint256,uint256)": EventFragment;
    "MarketFinalized(address,address,uint256,uint256[])": EventFragment;
    "MarketMigrated(address,address,address)": EventFragment;
    "MarketOIChanged(address,address,uint256)": EventFragment;
    "MarketParticipantsDisavowed(address,address)": EventFragment;
    "MarketRepBondTransferred(address,address,address,address)": EventFragment;
    "MarketTransferred(address,address,address,address)": EventFragment;
    "NoShowBondChanged(address,uint256)": EventFragment;
    "ParticipationTokensRedeemed(address,address,address,uint256,uint256,uint256)": EventFragment;
    "RegisterContract(address,bytes32)": EventFragment;
    "ReportingFeeChanged(address,uint256)": EventFragment;
    "ReportingParticipantDisavowed(address,address,address)": EventFragment;
    "ShareTokenBalanceChanged(address,address,address,uint256,uint256)": EventFragment;
    "TimestampSet(uint256)": EventFragment;
    "TokenBalanceChanged(address,address,address,uint8,address,uint256,uint256)": EventFragment;
    "TokensBurned(address,address,address,uint256,uint8,address,uint256)": EventFragment;
    "TokensMinted(address,address,address,uint256,uint8,address,uint256)": EventFragment;
    "TokensTransferred(address,address,address,address,uint256,uint8,address)": EventFragment;
    "TradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UniverseCreated(address,address,uint256[],uint256)": EventFragment;
    "UniverseForked(address,address)": EventFragment;
    "ValidityBondChanged(address,uint256)": EventFragment;
    "WarpSyncDataUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompleteSetsPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteSetsSold"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DesignatedReportStakeChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeCrowdsourcerCompleted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeCrowdsourcerContribution"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeCrowdsourcerCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DisputeCrowdsourcerRedeemed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeWindowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishDeployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialReportSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialReporterRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialReporterTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOIChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarketParticipantsDisavowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRepBondTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoShowBondChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ParticipationTokensRedeemed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportingFeeChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReportingParticipantDisavowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShareTokenBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimestampSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingProceedsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniverseCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniverseForked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidityBondChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarpSyncDataUpdated"): EventFragment;
}

export class Augur extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AugurInterface;

  functions: {
    DEFAULT_RECOMMENDED_TRADE_INTERVAL(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "DEFAULT_RECOMMENDED_TRADE_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_TRADE_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MIN_TRADE_INTERVAL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRADE_INTERVAL_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TRADE_INTERVAL_VALUE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    createChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createChildUniverse(bytes32,uint256[])"(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createGenesisUniverse(overrides?: Overrides): Promise<ContractTransaction>;

    "createGenesisUniverse()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    disputeCrowdsourcerCreated(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finishDeployment(overrides?: Overrides): Promise<ContractTransaction>;

    "finishDeployment()"(overrides?: Overrides): Promise<ContractTransaction>;

    forkCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forkCounter()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesisUniverse(overrides?: CallOverrides): Promise<[string]>;

    "genesisUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string[], BigNumber[], number, BigNumber] & {
          extraInfo: string;
          marketCreator: string;
          outcomes: string[];
          displayPrices: BigNumber[];
          marketType: number;
          recommendedTradeInterval: BigNumber;
        }
      ]
    >;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string[], BigNumber[], number, BigNumber] & {
          extraInfo: string;
          marketCreator: string;
          outcomes: string[];
          displayPrices: BigNumber[];
          marketType: number;
          recommendedTradeInterval: BigNumber;
        }
      ]
    >;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _outcomes: string[] }>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _outcomes: string[] }>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketType(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[number] & { _marketType: number }>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[number] & { _marketType: number }>;

    getMaximumMarketEndDate(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getMaximumMarketEndDate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTradeInterval(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTradeInterval(uint256,uint256)"(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isKnownCrowdsourcer(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownCrowdsourcer(address)"(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedSender(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isTrustedSender(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDesignatedReportStakeChanged(
      _designatedReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDesignatedReportStakeChanged(uint256)"(
      _designatedReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeCrowdsourcerCompleted(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeCrowdsourcerContribution(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeCrowdsourcerRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeCrowdsourcerRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeCrowdsourcerTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeCrowdsourcerTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeCrowdsourcerTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeCrowdsourcerTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeCrowdsourcerTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeCrowdsourcerTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logDisputeWindowCreated(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logDisputeWindowCreated(address,uint256,bool)"(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logInitialReportSubmitted(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logInitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logInitialReporterRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logInitialReporterRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logInitialReporterTransferred(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logInitialReporterTransferred(address,address,address,address)"(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketFinalized(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketFinalized(address,uint256[])"(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketMigrated(
      _market: string,
      _originalUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketMigrated(address,address)"(
      _market: string,
      _originalUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketParticipantsDisavowed(
      _universe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketParticipantsDisavowed(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketRepBondTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketRepBondTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logMarketTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logNoShowBondChanged(
      _noShowBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logNoShowBondChanged(uint256)"(
      _noShowBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logParticipationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logParticipationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logParticipationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logParticipationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logParticipationTokensRedeemed(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logParticipationTokensRedeemed(address,address,uint256,uint256)"(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logParticipationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logParticipationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logReportingParticipantDisavowed(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logReportingParticipantDisavowed(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logReputationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logReputationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logReputationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logReputationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logReputationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logReputationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logTimestampSet(
      _newTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logTimestampSet(uint256)"(
      _newTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logUniverseForked(
      _forkingMarket: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logUniverseForked(address)"(
      _forkingMarket: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logValidityBondChanged(
      _validityBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logValidityBondChanged(uint256)"(
      _validityBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logWarpSyncDataUpdated(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logWarpSyncDataUpdated(address,uint256,uint256)"(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onCategoricalMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onCategoricalMarketCreated(uint256,string,address,address,address,uint256,bytes32[])"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onScalarMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onScalarMarketCreated(uint256,string,address,address,address,uint256,int256[],uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onYesNoMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onYesNoMarketCreated(uint256,string,address,address,address,uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    time(overrides?: CallOverrides): Promise<[string]>;

    "time()"(overrides?: CallOverrides): Promise<[string]>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "upgradeTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    uploader(overrides?: CallOverrides): Promise<[string]>;

    "uploader()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_RECOMMENDED_TRADE_INTERVAL(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "DEFAULT_RECOMMENDED_TRADE_INTERVAL()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MIN_TRADE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_TRADE_INTERVAL()"(overrides?: CallOverrides): Promise<BigNumber>;

  TRADE_INTERVAL_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  "TRADE_INTERVAL_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  createChildUniverse(
    _parentPayoutDistributionHash: BytesLike,
    _parentPayoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createChildUniverse(bytes32,uint256[])"(
    _parentPayoutDistributionHash: BytesLike,
    _parentPayoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createGenesisUniverse(overrides?: Overrides): Promise<ContractTransaction>;

  "createGenesisUniverse()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  derivePayoutDistributionHash(
    _payoutNumerators: BigNumberish[],
    _numTicks: BigNumberish,
    _numOutcomes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
    _payoutNumerators: BigNumberish[],
    _numTicks: BigNumberish,
    _numOutcomes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  disputeCrowdsourcerCreated(
    _universe: string,
    _market: string,
    _disputeCrowdsourcer: string,
    _payoutNumerators: BigNumberish[],
    _size: BigNumberish,
    _disputeRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)"(
    _universe: string,
    _market: string,
    _disputeCrowdsourcer: string,
    _payoutNumerators: BigNumberish[],
    _size: BigNumberish,
    _disputeRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finishDeployment(overrides?: Overrides): Promise<ContractTransaction>;

  "finishDeployment()"(overrides?: Overrides): Promise<ContractTransaction>;

  forkCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "forkCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  genesisUniverse(overrides?: CallOverrides): Promise<string>;

  "genesisUniverse()"(overrides?: CallOverrides): Promise<string>;

  getMarketCreationData(
    _market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string[], BigNumber[], number, BigNumber] & {
      extraInfo: string;
      marketCreator: string;
      outcomes: string[];
      displayPrices: BigNumber[];
      marketType: number;
      recommendedTradeInterval: BigNumber;
    }
  >;

  "getMarketCreationData(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string[], BigNumber[], number, BigNumber] & {
      extraInfo: string;
      marketCreator: string;
      outcomes: string[];
      displayPrices: BigNumber[];
      marketType: number;
      recommendedTradeInterval: BigNumber;
    }
  >;

  getMarketOutcomes(
    _market: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getMarketOutcomes(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMarketRecommendedTradeInterval(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMarketRecommendedTradeInterval(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketType(_market: string, overrides?: CallOverrides): Promise<number>;

  "getMarketType(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getMaximumMarketEndDate(overrides?: Overrides): Promise<ContractTransaction>;

  "getMaximumMarketEndDate()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTradeInterval(
    _displayRange: BigNumberish,
    _numTicks: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTradeInterval(uint256,uint256)"(
    _displayRange: BigNumberish,
    _numTicks: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniverseForkIndex(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUniverseForkIndex(address)"(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isKnownCrowdsourcer(
    _crowdsourcer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isKnownCrowdsourcer(address)"(
    _crowdsourcer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownFeeSender(
    _feeSender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isKnownFeeSender(address)"(
    _feeSender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownMarket(_market: string, overrides?: CallOverrides): Promise<boolean>;

  "isKnownMarket(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownUniverse(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isKnownUniverse(address)"(
    _universe: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedSender(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isTrustedSender(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logCompleteSetsPurchased(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logCompleteSetsPurchased(address,address,address,uint256)"(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logCompleteSetsSold(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logCompleteSetsSold(address,address,address,uint256,uint256)"(
    _universe: string,
    _market: string,
    _account: string,
    _numCompleteSets: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDesignatedReportStakeChanged(
    _designatedReportStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDesignatedReportStakeChanged(uint256)"(
    _designatedReportStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeCrowdsourcerCompleted(
    _universe: string,
    _market: string,
    _disputeCrowdsourcer: string,
    _payoutNumerators: BigNumberish[],
    _nextWindowStartTime: BigNumberish,
    _nextWindowEndTime: BigNumberish,
    _pacingOn: boolean,
    _totalRepStakedInPayout: BigNumberish,
    _totalRepStakedInMarket: BigNumberish,
    _disputeRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)"(
    _universe: string,
    _market: string,
    _disputeCrowdsourcer: string,
    _payoutNumerators: BigNumberish[],
    _nextWindowStartTime: BigNumberish,
    _nextWindowEndTime: BigNumberish,
    _pacingOn: boolean,
    _totalRepStakedInPayout: BigNumberish,
    _totalRepStakedInMarket: BigNumberish,
    _disputeRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeCrowdsourcerContribution(
    _universe: string,
    _reporter: string,
    _market: string,
    _disputeCrowdsourcer: string,
    _amountStaked: BigNumberish,
    _description: string,
    _payoutNumerators: BigNumberish[],
    _currentStake: BigNumberish,
    _stakeRemaining: BigNumberish,
    _disputeRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256)"(
    _universe: string,
    _reporter: string,
    _market: string,
    _disputeCrowdsourcer: string,
    _amountStaked: BigNumberish,
    _description: string,
    _payoutNumerators: BigNumberish[],
    _currentStake: BigNumberish,
    _stakeRemaining: BigNumberish,
    _disputeRound: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeCrowdsourcerRedeemed(
    _universe: string,
    _reporter: string,
    _market: string,
    _amountRedeemed: BigNumberish,
    _repReceived: BigNumberish,
    _payoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeCrowdsourcerRedeemed(address,address,address,uint256,uint256,uint256[])"(
    _universe: string,
    _reporter: string,
    _market: string,
    _amountRedeemed: BigNumberish,
    _repReceived: BigNumberish,
    _payoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeCrowdsourcerTokensBurned(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeCrowdsourcerTokensBurned(address,address,uint256,uint256,uint256)"(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeCrowdsourcerTokensMinted(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeCrowdsourcerTokensMinted(address,address,uint256,uint256,uint256)"(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeCrowdsourcerTokensTransferred(
    _universe: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _fromBalance: BigNumberish,
    _toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeCrowdsourcerTokensTransferred(address,address,address,uint256,uint256,uint256)"(
    _universe: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _fromBalance: BigNumberish,
    _toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logDisputeWindowCreated(
    _disputeWindow: string,
    _id: BigNumberish,
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logDisputeWindowCreated(address,uint256,bool)"(
    _disputeWindow: string,
    _id: BigNumberish,
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logInitialReportSubmitted(
    _universe: string,
    _reporter: string,
    _market: string,
    _initialReporter: string,
    _amountStaked: BigNumberish,
    _isDesignatedReporter: boolean,
    _payoutNumerators: BigNumberish[],
    _description: string,
    _nextWindowStartTime: BigNumberish,
    _nextWindowEndTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logInitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256)"(
    _universe: string,
    _reporter: string,
    _market: string,
    _initialReporter: string,
    _amountStaked: BigNumberish,
    _isDesignatedReporter: boolean,
    _payoutNumerators: BigNumberish[],
    _description: string,
    _nextWindowStartTime: BigNumberish,
    _nextWindowEndTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logInitialReporterRedeemed(
    _universe: string,
    _reporter: string,
    _market: string,
    _amountRedeemed: BigNumberish,
    _repReceived: BigNumberish,
    _payoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logInitialReporterRedeemed(address,address,address,uint256,uint256,uint256[])"(
    _universe: string,
    _reporter: string,
    _market: string,
    _amountRedeemed: BigNumberish,
    _repReceived: BigNumberish,
    _payoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logInitialReporterTransferred(
    _universe: string,
    _market: string,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logInitialReporterTransferred(address,address,address,address)"(
    _universe: string,
    _market: string,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketFinalized(
    _universe: string,
    _winningPayoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketFinalized(address,uint256[])"(
    _universe: string,
    _winningPayoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketMigrated(
    _market: string,
    _originalUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketMigrated(address,address)"(
    _market: string,
    _originalUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketOIChanged(
    _universe: string,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketOIChanged(address,address)"(
    _universe: string,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketParticipantsDisavowed(
    _universe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketParticipantsDisavowed(address)"(
    _universe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketRepBondTransferred(
    _universe: string,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketRepBondTransferred(address,address,address)"(
    _universe: string,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logMarketTransferred(
    _universe: string,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketTransferred(address,address,address)"(
    _universe: string,
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logNoShowBondChanged(
    _noShowBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logNoShowBondChanged(uint256)"(
    _noShowBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logParticipationTokensBurned(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logParticipationTokensBurned(address,address,uint256,uint256,uint256)"(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logParticipationTokensMinted(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logParticipationTokensMinted(address,address,uint256,uint256,uint256)"(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logParticipationTokensRedeemed(
    _universe: string,
    _account: string,
    _attoParticipationTokens: BigNumberish,
    _feePayoutShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logParticipationTokensRedeemed(address,address,uint256,uint256)"(
    _universe: string,
    _account: string,
    _attoParticipationTokens: BigNumberish,
    _feePayoutShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logParticipationTokensTransferred(
    _universe: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _fromBalance: BigNumberish,
    _toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logParticipationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
    _universe: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _fromBalance: BigNumberish,
    _toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logReportingFeeChanged(
    _reportingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logReportingFeeChanged(uint256)"(
    _reportingFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logReportingParticipantDisavowed(
    _universe: string,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logReportingParticipantDisavowed(address,address)"(
    _universe: string,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logReputationTokensBurned(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logReputationTokensBurned(address,address,uint256,uint256,uint256)"(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logReputationTokensMinted(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logReputationTokensMinted(address,address,uint256,uint256,uint256)"(
    _universe: string,
    _target: string,
    _amount: BigNumberish,
    _totalSupply: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logReputationTokensTransferred(
    _universe: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _fromBalance: BigNumberish,
    _toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logReputationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
    _universe: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _fromBalance: BigNumberish,
    _toBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logShareTokensBalanceChanged(
    _account: string,
    _market: string,
    _outcome: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
    _account: string,
    _market: string,
    _outcome: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logTimestampSet(
    _newTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logTimestampSet(uint256)"(
    _newTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logTradingProceedsClaimed(
    _universe: string,
    _sender: string,
    _market: string,
    _outcome: BigNumberish,
    _numShares: BigNumberish,
    _numPayoutTokens: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
    _universe: string,
    _sender: string,
    _market: string,
    _outcome: BigNumberish,
    _numShares: BigNumberish,
    _numPayoutTokens: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logUniverseForked(
    _forkingMarket: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logUniverseForked(address)"(
    _forkingMarket: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logValidityBondChanged(
    _validityBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logValidityBondChanged(uint256)"(
    _validityBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logWarpSyncDataUpdated(
    _universe: string,
    _warpSyncHash: BigNumberish,
    _marketEndTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logWarpSyncDataUpdated(address,uint256,uint256)"(
    _universe: string,
    _warpSyncHash: BigNumberish,
    _marketEndTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lookup(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  "lookup(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onCategoricalMarketCreated(
    _endTime: BigNumberish,
    _extraInfo: string,
    _market: string,
    _marketCreator: string,
    _designatedReporter: string,
    _feePerCashInAttoCash: BigNumberish,
    _outcomes: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onCategoricalMarketCreated(uint256,string,address,address,address,uint256,bytes32[])"(
    _endTime: BigNumberish,
    _extraInfo: string,
    _market: string,
    _marketCreator: string,
    _designatedReporter: string,
    _feePerCashInAttoCash: BigNumberish,
    _outcomes: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onScalarMarketCreated(
    _endTime: BigNumberish,
    _extraInfo: string,
    _market: string,
    _marketCreator: string,
    _designatedReporter: string,
    _feePerCashInAttoCash: BigNumberish,
    _prices: BigNumberish[],
    _numTicks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onScalarMarketCreated(uint256,string,address,address,address,uint256,int256[],uint256)"(
    _endTime: BigNumberish,
    _extraInfo: string,
    _market: string,
    _marketCreator: string,
    _designatedReporter: string,
    _feePerCashInAttoCash: BigNumberish,
    _prices: BigNumberish[],
    _numTicks: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onYesNoMarketCreated(
    _endTime: BigNumberish,
    _extraInfo: string,
    _market: string,
    _marketCreator: string,
    _designatedReporter: string,
    _feePerCashInAttoCash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onYesNoMarketCreated(uint256,string,address,address,address,uint256)"(
    _endTime: BigNumberish,
    _extraInfo: string,
    _market: string,
    _marketCreator: string,
    _designatedReporter: string,
    _feePerCashInAttoCash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerContract(
    _key: BytesLike,
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerContract(bytes32,address)"(
    _key: BytesLike,
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  time(overrides?: CallOverrides): Promise<string>;

  "time()"(overrides?: CallOverrides): Promise<string>;

  trustedCashTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedCashTransfer(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "upgradeTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  uploader(overrides?: CallOverrides): Promise<string>;

  "uploader()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_RECOMMENDED_TRADE_INTERVAL(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DEFAULT_RECOMMENDED_TRADE_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_TRADE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_TRADE_INTERVAL()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRADE_INTERVAL_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "TRADE_INTERVAL_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    createChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "createChildUniverse(bytes32,uint256[])"(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    createGenesisUniverse(overrides?: CallOverrides): Promise<string>;

    "createGenesisUniverse()"(overrides?: CallOverrides): Promise<string>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    disputeCrowdsourcerCreated(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "disputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finishDeployment(overrides?: CallOverrides): Promise<boolean>;

    "finishDeployment()"(overrides?: CallOverrides): Promise<boolean>;

    forkCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "forkCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisUniverse(overrides?: CallOverrides): Promise<string>;

    "genesisUniverse()"(overrides?: CallOverrides): Promise<string>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string[], BigNumber[], number, BigNumber] & {
        extraInfo: string;
        marketCreator: string;
        outcomes: string[];
        displayPrices: BigNumber[];
        marketType: number;
        recommendedTradeInterval: BigNumber;
      }
    >;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string[], BigNumber[], number, BigNumber] & {
        extraInfo: string;
        marketCreator: string;
        outcomes: string[];
        displayPrices: BigNumber[];
        marketType: number;
        recommendedTradeInterval: BigNumber;
      }
    >;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketType(_market: string, overrides?: CallOverrides): Promise<number>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getMaximumMarketEndDate(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaximumMarketEndDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeInterval(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTradeInterval(uint256,uint256)"(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownCrowdsourcer(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isKnownCrowdsourcer(address)"(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownMarket(_market: string, overrides?: CallOverrides): Promise<boolean>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedSender(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedSender(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDesignatedReportStakeChanged(
      _designatedReportStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDesignatedReportStakeChanged(uint256)"(
      _designatedReportStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeCrowdsourcerCompleted(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeCrowdsourcerContribution(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeCrowdsourcerRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeCrowdsourcerRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeCrowdsourcerTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeCrowdsourcerTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeCrowdsourcerTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeCrowdsourcerTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeCrowdsourcerTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeCrowdsourcerTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logDisputeWindowCreated(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logDisputeWindowCreated(address,uint256,bool)"(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logInitialReportSubmitted(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logInitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logInitialReporterRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logInitialReporterRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    logInitialReporterTransferred(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logInitialReporterTransferred(address,address,address,address)"(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketFinalized(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketFinalized(address,uint256[])"(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketMigrated(
      _market: string,
      _originalUniverse: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketMigrated(address,address)"(
      _market: string,
      _originalUniverse: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketParticipantsDisavowed(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketParticipantsDisavowed(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketRepBondTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketRepBondTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logMarketTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logNoShowBondChanged(
      _noShowBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logNoShowBondChanged(uint256)"(
      _noShowBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logParticipationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logParticipationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logParticipationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logParticipationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logParticipationTokensRedeemed(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logParticipationTokensRedeemed(address,address,uint256,uint256)"(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logParticipationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logParticipationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logReportingParticipantDisavowed(
      _universe: string,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logReportingParticipantDisavowed(address,address)"(
      _universe: string,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logReputationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logReputationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logReputationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logReputationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logReputationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logReputationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logTimestampSet(
      _newTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logTimestampSet(uint256)"(
      _newTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logUniverseForked(
      _forkingMarket: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logUniverseForked(address)"(
      _forkingMarket: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logValidityBondChanged(
      _validityBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logValidityBondChanged(uint256)"(
      _validityBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logWarpSyncDataUpdated(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logWarpSyncDataUpdated(address,uint256,uint256)"(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onCategoricalMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "onCategoricalMarketCreated(uint256,string,address,address,address,uint256,bytes32[])"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    onScalarMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "onScalarMarketCreated(uint256,string,address,address,address,uint256,int256[],uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onYesNoMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "onYesNoMarketCreated(uint256,string,address,address,address,uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    time(overrides?: CallOverrides): Promise<string>;

    "time()"(overrides?: CallOverrides): Promise<string>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    uploader(overrides?: CallOverrides): Promise<string>;

    "uploader()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CompleteSetsPurchased(
      universe: string | null,
      market: string | null,
      account: string | null,
      numCompleteSets: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        universe: string;
        market: string;
        account: string;
        numCompleteSets: BigNumber;
        timestamp: BigNumber;
      }
    >;

    CompleteSetsSold(
      universe: string | null,
      market: string | null,
      account: string | null,
      numCompleteSets: null,
      fees: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        universe: string;
        market: string;
        account: string;
        numCompleteSets: BigNumber;
        fees: BigNumber;
        timestamp: BigNumber;
      }
    >;

    DesignatedReportStakeChanged(
      universe: string | null,
      designatedReportStake: null
    ): TypedEventFilter<
      [string, BigNumber],
      { universe: string; designatedReportStake: BigNumber }
    >;

    DisputeCrowdsourcerCompleted(
      universe: string | null,
      market: string | null,
      disputeCrowdsourcer: null,
      payoutNumerators: null,
      nextWindowStartTime: null,
      nextWindowEndTime: null,
      pacingOn: null,
      totalRepStakedInPayout: null,
      totalRepStakedInMarket: null,
      disputeRound: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        universe: string;
        market: string;
        disputeCrowdsourcer: string;
        payoutNumerators: BigNumber[];
        nextWindowStartTime: BigNumber;
        nextWindowEndTime: BigNumber;
        pacingOn: boolean;
        totalRepStakedInPayout: BigNumber;
        totalRepStakedInMarket: BigNumber;
        disputeRound: BigNumber;
        timestamp: BigNumber;
      }
    >;

    DisputeCrowdsourcerContribution(
      universe: string | null,
      reporter: string | null,
      market: string | null,
      disputeCrowdsourcer: null,
      amountStaked: null,
      description: null,
      payoutNumerators: null,
      currentStake: null,
      stakeRemaining: null,
      disputeRound: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        universe: string;
        reporter: string;
        market: string;
        disputeCrowdsourcer: string;
        amountStaked: BigNumber;
        description: string;
        payoutNumerators: BigNumber[];
        currentStake: BigNumber;
        stakeRemaining: BigNumber;
        disputeRound: BigNumber;
        timestamp: BigNumber;
      }
    >;

    DisputeCrowdsourcerCreated(
      universe: string | null,
      market: string | null,
      disputeCrowdsourcer: null,
      payoutNumerators: null,
      size: null,
      disputeRound: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber, BigNumber],
      {
        universe: string;
        market: string;
        disputeCrowdsourcer: string;
        payoutNumerators: BigNumber[];
        size: BigNumber;
        disputeRound: BigNumber;
      }
    >;

    DisputeCrowdsourcerRedeemed(
      universe: string | null,
      reporter: string | null,
      market: string | null,
      disputeCrowdsourcer: null,
      amountRedeemed: null,
      repReceived: null,
      payoutNumerators: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber
      ],
      {
        universe: string;
        reporter: string;
        market: string;
        disputeCrowdsourcer: string;
        amountRedeemed: BigNumber;
        repReceived: BigNumber;
        payoutNumerators: BigNumber[];
        timestamp: BigNumber;
      }
    >;

    DisputeWindowCreated(
      universe: string | null,
      disputeWindow: null,
      startTime: null,
      endTime: null,
      id: null,
      initial: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, boolean],
      {
        universe: string;
        disputeWindow: string;
        startTime: BigNumber;
        endTime: BigNumber;
        id: BigNumber;
        initial: boolean;
      }
    >;

    FinishDeployment(): TypedEventFilter<[]>;

    InitialReportSubmitted(
      universe: string | null,
      reporter: string | null,
      market: string | null,
      initialReporter: null,
      amountStaked: null,
      isDesignatedReporter: null,
      payoutNumerators: null,
      description: null,
      nextWindowStartTime: null,
      nextWindowEndTime: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        universe: string;
        reporter: string;
        market: string;
        initialReporter: string;
        amountStaked: BigNumber;
        isDesignatedReporter: boolean;
        payoutNumerators: BigNumber[];
        description: string;
        nextWindowStartTime: BigNumber;
        nextWindowEndTime: BigNumber;
        timestamp: BigNumber;
      }
    >;

    InitialReporterRedeemed(
      universe: string | null,
      reporter: string | null,
      market: string | null,
      initialReporter: null,
      amountRedeemed: null,
      repReceived: null,
      payoutNumerators: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber
      ],
      {
        universe: string;
        reporter: string;
        market: string;
        initialReporter: string;
        amountRedeemed: BigNumber;
        repReceived: BigNumber;
        payoutNumerators: BigNumber[];
        timestamp: BigNumber;
      }
    >;

    InitialReporterTransferred(
      universe: string | null,
      market: string | null,
      from: null,
      to: null
    ): TypedEventFilter<
      [string, string, string, string],
      { universe: string; market: string; from: string; to: string }
    >;

    MarketCreated(
      universe: string | null,
      endTime: null,
      extraInfo: null,
      market: null,
      marketCreator: string | null,
      designatedReporter: null,
      feePerCashInAttoCash: null,
      prices: null,
      marketType: null,
      numTicks: null,
      outcomes: null,
      noShowBond: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber[],
        number,
        BigNumber,
        string[],
        BigNumber,
        BigNumber
      ],
      {
        universe: string;
        endTime: BigNumber;
        extraInfo: string;
        market: string;
        marketCreator: string;
        designatedReporter: string;
        feePerCashInAttoCash: BigNumber;
        prices: BigNumber[];
        marketType: number;
        numTicks: BigNumber;
        outcomes: string[];
        noShowBond: BigNumber;
        timestamp: BigNumber;
      }
    >;

    MarketFinalized(
      universe: string | null,
      market: string | null,
      timestamp: null,
      winningPayoutNumerators: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber[]],
      {
        universe: string;
        market: string;
        timestamp: BigNumber;
        winningPayoutNumerators: BigNumber[];
      }
    >;

    MarketMigrated(
      market: string | null,
      originalUniverse: string | null,
      newUniverse: string | null
    ): TypedEventFilter<
      [string, string, string],
      { market: string; originalUniverse: string; newUniverse: string }
    >;

    MarketOIChanged(
      universe: string | null,
      market: string | null,
      marketOI: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { universe: string; market: string; marketOI: BigNumber }
    >;

    MarketParticipantsDisavowed(
      universe: string | null,
      market: string | null
    ): TypedEventFilter<[string, string], { universe: string; market: string }>;

    MarketRepBondTransferred(
      universe: string | null,
      market: null,
      from: null,
      to: null
    ): TypedEventFilter<
      [string, string, string, string],
      { universe: string; market: string; from: string; to: string }
    >;

    MarketTransferred(
      universe: string | null,
      market: string | null,
      from: null,
      to: null
    ): TypedEventFilter<
      [string, string, string, string],
      { universe: string; market: string; from: string; to: string }
    >;

    NoShowBondChanged(
      universe: string | null,
      noShowBond: null
    ): TypedEventFilter<
      [string, BigNumber],
      { universe: string; noShowBond: BigNumber }
    >;

    ParticipationTokensRedeemed(
      universe: string | null,
      disputeWindow: string | null,
      account: string | null,
      attoParticipationTokens: null,
      feePayoutShare: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        universe: string;
        disputeWindow: string;
        account: string;
        attoParticipationTokens: BigNumber;
        feePayoutShare: BigNumber;
        timestamp: BigNumber;
      }
    >;

    RegisterContract(
      contractAddress: null,
      key: null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; key: string }
    >;

    ReportingFeeChanged(
      universe: string | null,
      reportingFee: null
    ): TypedEventFilter<
      [string, BigNumber],
      { universe: string; reportingFee: BigNumber }
    >;

    ReportingParticipantDisavowed(
      universe: string | null,
      market: string | null,
      reportingParticipant: null
    ): TypedEventFilter<
      [string, string, string],
      { universe: string; market: string; reportingParticipant: string }
    >;

    ShareTokenBalanceChanged(
      universe: string | null,
      account: string | null,
      market: string | null,
      outcome: null,
      balance: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        universe: string;
        account: string;
        market: string;
        outcome: BigNumber;
        balance: BigNumber;
      }
    >;

    TimestampSet(
      newTimestamp: null
    ): TypedEventFilter<[BigNumber], { newTimestamp: BigNumber }>;

    TokenBalanceChanged(
      universe: string | null,
      owner: string | null,
      token: null,
      tokenType: null,
      market: null,
      balance: null,
      outcome: null
    ): TypedEventFilter<
      [string, string, string, number, string, BigNumber, BigNumber],
      {
        universe: string;
        owner: string;
        token: string;
        tokenType: number;
        market: string;
        balance: BigNumber;
        outcome: BigNumber;
      }
    >;

    TokensBurned(
      universe: string | null,
      token: string | null,
      target: string | null,
      amount: null,
      tokenType: null,
      market: null,
      totalSupply: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number, string, BigNumber],
      {
        universe: string;
        token: string;
        target: string;
        amount: BigNumber;
        tokenType: number;
        market: string;
        totalSupply: BigNumber;
      }
    >;

    TokensMinted(
      universe: string | null,
      token: string | null,
      target: string | null,
      amount: null,
      tokenType: null,
      market: null,
      totalSupply: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number, string, BigNumber],
      {
        universe: string;
        token: string;
        target: string;
        amount: BigNumber;
        tokenType: number;
        market: string;
        totalSupply: BigNumber;
      }
    >;

    TokensTransferred(
      universe: string | null,
      token: null,
      from: string | null,
      to: string | null,
      value: null,
      tokenType: null,
      market: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, number, string],
      {
        universe: string;
        token: string;
        from: string;
        to: string;
        value: BigNumber;
        tokenType: number;
        market: string;
      }
    >;

    TradingProceedsClaimed(
      universe: string | null,
      sender: string | null,
      market: null,
      outcome: null,
      numShares: null,
      numPayoutTokens: null,
      fees: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        universe: string;
        sender: string;
        market: string;
        outcome: BigNumber;
        numShares: BigNumber;
        numPayoutTokens: BigNumber;
        fees: BigNumber;
        timestamp: BigNumber;
      }
    >;

    UniverseCreated(
      parentUniverse: string | null,
      childUniverse: string | null,
      payoutNumerators: null,
      creationTimestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber],
      {
        parentUniverse: string;
        childUniverse: string;
        payoutNumerators: BigNumber[];
        creationTimestamp: BigNumber;
      }
    >;

    UniverseForked(
      universe: string | null,
      forkingMarket: null
    ): TypedEventFilter<
      [string, string],
      { universe: string; forkingMarket: string }
    >;

    ValidityBondChanged(
      universe: string | null,
      validityBond: null
    ): TypedEventFilter<
      [string, BigNumber],
      { universe: string; validityBond: BigNumber }
    >;

    WarpSyncDataUpdated(
      universe: string | null,
      warpSyncHash: null,
      marketEndTime: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { universe: string; warpSyncHash: BigNumber; marketEndTime: BigNumber }
    >;
  };

  estimateGas: {
    DEFAULT_RECOMMENDED_TRADE_INTERVAL(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DEFAULT_RECOMMENDED_TRADE_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_TRADE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_TRADE_INTERVAL()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRADE_INTERVAL_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "TRADE_INTERVAL_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    createChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createChildUniverse(bytes32,uint256[])"(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    createGenesisUniverse(overrides?: Overrides): Promise<BigNumber>;

    "createGenesisUniverse()"(overrides?: Overrides): Promise<BigNumber>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeCrowdsourcerCreated(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finishDeployment(overrides?: Overrides): Promise<BigNumber>;

    "finishDeployment()"(overrides?: Overrides): Promise<BigNumber>;

    forkCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "forkCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketType(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumMarketEndDate(overrides?: Overrides): Promise<BigNumber>;

    "getMaximumMarketEndDate()"(overrides?: Overrides): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeInterval(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTradeInterval(uint256,uint256)"(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownCrowdsourcer(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownCrowdsourcer(address)"(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedSender(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "isTrustedSender(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDesignatedReportStakeChanged(
      _designatedReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDesignatedReportStakeChanged(uint256)"(
      _designatedReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeCrowdsourcerCompleted(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeCrowdsourcerContribution(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeCrowdsourcerRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeCrowdsourcerRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeCrowdsourcerTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeCrowdsourcerTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeCrowdsourcerTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeCrowdsourcerTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeCrowdsourcerTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeCrowdsourcerTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logDisputeWindowCreated(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logDisputeWindowCreated(address,uint256,bool)"(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logInitialReportSubmitted(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logInitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logInitialReporterRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logInitialReporterRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    logInitialReporterTransferred(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logInitialReporterTransferred(address,address,address,address)"(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketFinalized(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketFinalized(address,uint256[])"(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketMigrated(
      _market: string,
      _originalUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketMigrated(address,address)"(
      _market: string,
      _originalUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketParticipantsDisavowed(
      _universe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketParticipantsDisavowed(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketRepBondTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketRepBondTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logMarketTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logNoShowBondChanged(
      _noShowBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logNoShowBondChanged(uint256)"(
      _noShowBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logParticipationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logParticipationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logParticipationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logParticipationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logParticipationTokensRedeemed(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logParticipationTokensRedeemed(address,address,uint256,uint256)"(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logParticipationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logParticipationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logReportingParticipantDisavowed(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logReportingParticipantDisavowed(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logReputationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logReputationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logReputationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logReputationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logReputationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logReputationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logTimestampSet(
      _newTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logTimestampSet(uint256)"(
      _newTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logUniverseForked(
      _forkingMarket: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logUniverseForked(address)"(
      _forkingMarket: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logValidityBondChanged(
      _validityBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logValidityBondChanged(uint256)"(
      _validityBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logWarpSyncDataUpdated(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logWarpSyncDataUpdated(address,uint256,uint256)"(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onCategoricalMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onCategoricalMarketCreated(uint256,string,address,address,address,uint256,bytes32[])"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    onScalarMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onScalarMarketCreated(uint256,string,address,address,address,uint256,int256[],uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onYesNoMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onYesNoMarketCreated(uint256,string,address,address,address,uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    time(overrides?: CallOverrides): Promise<BigNumber>;

    "time()"(overrides?: CallOverrides): Promise<BigNumber>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradeTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    uploader(overrides?: CallOverrides): Promise<BigNumber>;

    "uploader()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_RECOMMENDED_TRADE_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_RECOMMENDED_TRADE_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_TRADE_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MIN_TRADE_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRADE_INTERVAL_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRADE_INTERVAL_VALUE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createChildUniverse(bytes32,uint256[])"(
      _parentPayoutDistributionHash: BytesLike,
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createGenesisUniverse(overrides?: Overrides): Promise<PopulatedTransaction>;

    "createGenesisUniverse()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    derivePayoutDistributionHash(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "derivePayoutDistributionHash(uint256[],uint256,uint256)"(
      _payoutNumerators: BigNumberish[],
      _numTicks: BigNumberish,
      _numOutcomes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeCrowdsourcerCreated(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disputeCrowdsourcerCreated(address,address,address,uint256[],uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _size: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finishDeployment(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finishDeployment()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    forkCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forkCounter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisUniverse()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCreationData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketCreationData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketRecommendedTradeInterval(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketRecommendedTradeInterval(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketType(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketType(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumMarketEndDate(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getMaximumMarketEndDate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradeInterval(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradeInterval(uint256,uint256)"(
      _displayRange: BigNumberish,
      _numTicks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniverseForkIndex(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUniverseForkIndex(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownCrowdsourcer(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownCrowdsourcer(address)"(
      _crowdsourcer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownFeeSender(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownFeeSender(address)"(
      _feeSender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownUniverse(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isKnownUniverse(address)"(
      _universe: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedSender(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isTrustedSender(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logCompleteSetsPurchased(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logCompleteSetsPurchased(address,address,address,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logCompleteSetsSold(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logCompleteSetsSold(address,address,address,uint256,uint256)"(
      _universe: string,
      _market: string,
      _account: string,
      _numCompleteSets: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDesignatedReportStakeChanged(
      _designatedReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDesignatedReportStakeChanged(uint256)"(
      _designatedReportStake: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeCrowdsourcerCompleted(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeCrowdsourcerCompleted(address,address,address,uint256[],uint256,uint256,bool,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _payoutNumerators: BigNumberish[],
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      _pacingOn: boolean,
      _totalRepStakedInPayout: BigNumberish,
      _totalRepStakedInMarket: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeCrowdsourcerContribution(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeCrowdsourcerContribution(address,address,address,address,uint256,string,uint256[],uint256,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _disputeCrowdsourcer: string,
      _amountStaked: BigNumberish,
      _description: string,
      _payoutNumerators: BigNumberish[],
      _currentStake: BigNumberish,
      _stakeRemaining: BigNumberish,
      _disputeRound: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeCrowdsourcerRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeCrowdsourcerRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeCrowdsourcerTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeCrowdsourcerTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeCrowdsourcerTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeCrowdsourcerTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeCrowdsourcerTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeCrowdsourcerTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logDisputeWindowCreated(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logDisputeWindowCreated(address,uint256,bool)"(
      _disputeWindow: string,
      _id: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logInitialReportSubmitted(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logInitialReportSubmitted(address,address,address,address,uint256,bool,uint256[],string,uint256,uint256)"(
      _universe: string,
      _reporter: string,
      _market: string,
      _initialReporter: string,
      _amountStaked: BigNumberish,
      _isDesignatedReporter: boolean,
      _payoutNumerators: BigNumberish[],
      _description: string,
      _nextWindowStartTime: BigNumberish,
      _nextWindowEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logInitialReporterRedeemed(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logInitialReporterRedeemed(address,address,address,uint256,uint256,uint256[])"(
      _universe: string,
      _reporter: string,
      _market: string,
      _amountRedeemed: BigNumberish,
      _repReceived: BigNumberish,
      _payoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logInitialReporterTransferred(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logInitialReporterTransferred(address,address,address,address)"(
      _universe: string,
      _market: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketFinalized(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketFinalized(address,uint256[])"(
      _universe: string,
      _winningPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketMigrated(
      _market: string,
      _originalUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketMigrated(address,address)"(
      _market: string,
      _originalUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketOIChanged(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketOIChanged(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketParticipantsDisavowed(
      _universe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketParticipantsDisavowed(address)"(
      _universe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketRepBondTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketRepBondTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logMarketTransferred(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketTransferred(address,address,address)"(
      _universe: string,
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logNoShowBondChanged(
      _noShowBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logNoShowBondChanged(uint256)"(
      _noShowBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logParticipationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logParticipationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logParticipationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logParticipationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logParticipationTokensRedeemed(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logParticipationTokensRedeemed(address,address,uint256,uint256)"(
      _universe: string,
      _account: string,
      _attoParticipationTokens: BigNumberish,
      _feePayoutShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logParticipationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logParticipationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logReportingFeeChanged(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logReportingFeeChanged(uint256)"(
      _reportingFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logReportingParticipantDisavowed(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logReportingParticipantDisavowed(address,address)"(
      _universe: string,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logReputationTokensBurned(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logReputationTokensBurned(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logReputationTokensMinted(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logReputationTokensMinted(address,address,uint256,uint256,uint256)"(
      _universe: string,
      _target: string,
      _amount: BigNumberish,
      _totalSupply: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logReputationTokensTransferred(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logReputationTokensTransferred(address,address,address,uint256,uint256,uint256)"(
      _universe: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logShareTokensBalanceChanged(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logShareTokensBalanceChanged(address,address,uint256,uint256)"(
      _account: string,
      _market: string,
      _outcome: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logTimestampSet(
      _newTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logTimestampSet(uint256)"(
      _newTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logTradingProceedsClaimed(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logTradingProceedsClaimed(address,address,address,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _sender: string,
      _market: string,
      _outcome: BigNumberish,
      _numShares: BigNumberish,
      _numPayoutTokens: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logUniverseForked(
      _forkingMarket: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logUniverseForked(address)"(
      _forkingMarket: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logValidityBondChanged(
      _validityBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logValidityBondChanged(uint256)"(
      _validityBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logWarpSyncDataUpdated(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logWarpSyncDataUpdated(address,uint256,uint256)"(
      _universe: string,
      _warpSyncHash: BigNumberish,
      _marketEndTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lookup(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onCategoricalMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onCategoricalMarketCreated(uint256,string,address,address,address,uint256,bytes32[])"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _outcomes: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onScalarMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onScalarMarketCreated(uint256,string,address,address,address,uint256,int256[],uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onYesNoMarketCreated(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onYesNoMarketCreated(uint256,string,address,address,address,uint256)"(
      _endTime: BigNumberish,
      _extraInfo: string,
      _market: string,
      _marketCreator: string,
      _designatedReporter: string,
      _feePerCashInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "time()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trustedCashTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedCashTransfer(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "upgradeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uploader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uploader()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
