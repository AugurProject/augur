/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AugurWalletRegistryInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "augurTrading()": FunctionFragment;
    "augurWalletFactory()": FunctionFragment;
    "cash()": FunctionFragment;
    "ethExchange()": FunctionFragment;
    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getCreate2WalletAddress(address)": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getRelayMessageHash(address,address,address,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getWallet(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,bytes32)": FunctionFragment;
    "preRelayedCall(bytes)": FunctionFragment;
    "relayHubVersion()": FunctionFragment;
    "token0IsCash()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptRelayedCall",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augurTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "augurWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeWalletTransaction",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreate2WalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayMessageHash",
    values: [
      string,
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "getWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayHubVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token0IsCash",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "augurWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWalletTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreate2WalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayHubVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0IsCash",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteTransactionStatus(bool,bool)": EventFragment;
    "RelayHubChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteTransactionStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayHubChanged"): EventFragment;
}

export class AugurWalletRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AugurWalletRegistryInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    acceptRelayedCall(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { _reason: BigNumber; _context: string }>;

    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { _reason: BigNumber; _context: string }>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    augurTrading(overrides?: CallOverrides): Promise<[string]>;

    "augurTrading()"(overrides?: CallOverrides): Promise<[string]>;

    augurWalletFactory(overrides?: CallOverrides): Promise<[string]>;

    "augurWalletFactory()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    ethExchange(overrides?: CallOverrides): Promise<[string]>;

    "ethExchange()"(overrides?: CallOverrides): Promise<[string]>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getRelayMessageHash(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRelayMessageHash(address,address,address,bytes,uint256,uint256,uint256,uint256)"(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWallet(_account: string, overrides?: CallOverrides): Promise<[string]>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    relayHubVersion(overrides?: CallOverrides): Promise<[string]>;

    "relayHubVersion()"(overrides?: CallOverrides): Promise<[string]>;

    token0IsCash(overrides?: CallOverrides): Promise<[boolean]>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  acceptRelayedCall(
    arg0: string,
    _from: string,
    _encodedFunction: BytesLike,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: BytesLike,
    _maxPossibleCharge: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { _reason: BigNumber; _context: string }>;

  "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
    arg0: string,
    _from: string,
    _encodedFunction: BytesLike,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: BytesLike,
    _maxPossibleCharge: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { _reason: BigNumber; _context: string }>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  augurTrading(overrides?: CallOverrides): Promise<string>;

  "augurTrading()"(overrides?: CallOverrides): Promise<string>;

  augurWalletFactory(overrides?: CallOverrides): Promise<string>;

  "augurWalletFactory()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  ethExchange(overrides?: CallOverrides): Promise<string>;

  "ethExchange()"(overrides?: CallOverrides): Promise<string>;

  executeWalletTransaction(
    _to: string,
    _data: BytesLike,
    _value: BigNumberish,
    _payment: BigNumberish,
    _referralAddress: string,
    _fingerprint: BytesLike,
    _desiredSignerBalance: BigNumberish,
    _maxExchangeRateInDai: BigNumberish,
    _revertOnFailure: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
    _to: string,
    _data: BytesLike,
    _value: BigNumberish,
    _payment: BigNumberish,
    _referralAddress: string,
    _fingerprint: BytesLike,
    _desiredSignerBalance: BigNumberish,
    _maxExchangeRateInDai: BigNumberish,
    _revertOnFailure: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountIn(uint256,uint256,uint256)"(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreate2WalletAddress(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreate2WalletAddress(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getRelayMessageHash(
    relay: string,
    from: string,
    to: string,
    encodedFunction: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRelayMessageHash(address,address,address,bytes,uint256,uint256,uint256,uint256)"(
    relay: string,
    from: string,
    to: string,
    encodedFunction: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWallet(_account: string, overrides?: CallOverrides): Promise<string>;

  "getWallet(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _augur: string,
    _augurTrading: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _augurTrading: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    actualCharge: BigNumberish,
    preRetVal: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "postRelayedCall(bytes,bool,uint256,bytes32)"(
    context: BytesLike,
    success: boolean,
    actualCharge: BigNumberish,
    preRetVal: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  preRelayedCall(
    context: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "preRelayedCall(bytes)"(
    context: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  relayHubVersion(overrides?: CallOverrides): Promise<string>;

  "relayHubVersion()"(overrides?: CallOverrides): Promise<string>;

  token0IsCash(overrides?: CallOverrides): Promise<boolean>;

  "token0IsCash()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    acceptRelayedCall(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { _reason: BigNumber; _context: string }>;

    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { _reason: BigNumber; _context: string }>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    augurTrading(overrides?: CallOverrides): Promise<string>;

    "augurTrading()"(overrides?: CallOverrides): Promise<string>;

    augurWalletFactory(overrides?: CallOverrides): Promise<string>;

    "augurWalletFactory()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    ethExchange(overrides?: CallOverrides): Promise<string>;

    "ethExchange()"(overrides?: CallOverrides): Promise<string>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getRelayMessageHash(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRelayMessageHash(address,address,address,bytes,uint256,uint256,uint256,uint256)"(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWallet(_account: string, overrides?: CallOverrides): Promise<string>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    relayHubVersion(overrides?: CallOverrides): Promise<string>;

    "relayHubVersion()"(overrides?: CallOverrides): Promise<string>;

    token0IsCash(overrides?: CallOverrides): Promise<boolean>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    ExecuteTransactionStatus(
      success: null,
      fundingSuccess: null
    ): TypedEventFilter<
      [boolean, boolean],
      { success: boolean; fundingSuccess: boolean }
    >;

    RelayHubChanged(
      oldRelayHub: string | null,
      newRelayHub: string | null
    ): TypedEventFilter<
      [string, string],
      { oldRelayHub: string; newRelayHub: string }
    >;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptRelayedCall(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurTrading(overrides?: CallOverrides): Promise<BigNumber>;

    "augurTrading()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurWalletFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "augurWalletFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethExchange(overrides?: CallOverrides): Promise<BigNumber>;

    "ethExchange()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayMessageHash(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRelayMessageHash(address,address,address,bytes,uint256,uint256,uint256,uint256)"(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallet(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    relayHubVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "relayHubVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    token0IsCash(overrides?: CallOverrides): Promise<BigNumber>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptRelayedCall(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"(
      arg0: string,
      _from: string,
      _encodedFunction: BytesLike,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      _maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurTrading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurTrading()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurWalletFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "augurWalletFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethExchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelayMessageHash(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelayMessageHash(address,address,address,bytes,uint256,uint256,uint256,uint256)"(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallet(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "postRelayedCall(bytes,bool,uint256,bytes32)"(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    relayHubVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relayHubVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0IsCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
