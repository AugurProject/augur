/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TimeInterface extends ethers.utils.Interface {
  functions: {
    "getTimestamp()": FunctionFragment;
    "getTypeName()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeName",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeName",
    data: BytesLike
  ): Result;

  events: {};
}

export class Time extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: TimeInterface;

  functions: {
    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTypeName(overrides?: CallOverrides): Promise<[string]>;

    "getTypeName()"(overrides?: CallOverrides): Promise<[string]>;
  };

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTypeName(overrides?: CallOverrides): Promise<string>;

  "getTypeName()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeName(overrides?: CallOverrides): Promise<string>;

    "getTypeName()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeName(overrides?: CallOverrides): Promise<BigNumber>;

    "getTypeName()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTypeName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTypeName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
