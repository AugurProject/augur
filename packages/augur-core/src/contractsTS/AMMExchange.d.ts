/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AMMExchangeInterface extends ethers.utils.Interface {
  functions: {
    "INVALID()": FunctionFragment;
    "NO()": FunctionFragment;
    "YES()": FunctionFragment;
    "addInitialLiquidity(uint256,uint256,bool,address)": FunctionFragment;
    "addLiquidity(uint256,address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowances(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "augurMarket()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "cash()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enterPosition(uint256,bool,uint256)": FunctionFragment;
    "exitAll(uint256)": FunctionFragment;
    "exitPosition(uint256,uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "numTicks()": FunctionFragment;
    "rateAddLiquidity(uint256,uint256)": FunctionFragment;
    "rateRemoveLiquidity(uint256)": FunctionFragment;
    "rateSwap(uint256,bool)": FunctionFragment;
    "removeLiquidity(uint256)": FunctionFragment;
    "shareBalances(address)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "swap(uint256,bool,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "INVALID", values?: undefined): string;
  encodeFunctionData(functionFragment: "NO", values?: undefined): string;
  encodeFunctionData(functionFragment: "YES", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addInitialLiquidity",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "augurMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterPosition",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numTicks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateAddLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateRemoveLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateSwap",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "INVALID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addInitialLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numTicks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "EnterPosition(address,uint256,uint256,bool,uint256)": EventFragment;
    "ExitPosition(address,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256,uint256)": EventFragment;
    "SwapPosition(address,uint256,uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class AMMExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AMMExchangeInterface;

  functions: {
    INVALID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "INVALID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    NO(overrides?: CallOverrides): Promise<[BigNumber]>;

    "NO()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    YES(overrides?: CallOverrides): Promise<[BigNumber]>;

    "YES()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addInitialLiquidity(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addInitialLiquidity(uint256,uint256,bool,address)"(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,address)"(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    augurMarket(overrides?: CallOverrides): Promise<[string]>;

    "augurMarket()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterPosition(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enterPosition(uint256,bool,uint256)"(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitAll(
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitAll(uint256)"(
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPosition(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPosition(uint256,uint256,uint256)"(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256)"(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    numTicks(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numTicks()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rateAddLiquidity(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rateAddLiquidity(uint256,uint256)"(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateRemoveLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    "rateRemoveLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    rateSwap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rateSwap(uint256,bool)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareBalances(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _invalid: BigNumber;
        _no: BigNumber;
        _yes: BigNumber;
      }
    >;

    "shareBalances(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _invalid: BigNumber;
        _no: BigNumber;
        _yes: BigNumber;
      }
    >;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    swap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(uint256,bool,uint256)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  INVALID(overrides?: CallOverrides): Promise<BigNumber>;

  "INVALID()"(overrides?: CallOverrides): Promise<BigNumber>;

  NO(overrides?: CallOverrides): Promise<BigNumber>;

  "NO()"(overrides?: CallOverrides): Promise<BigNumber>;

  YES(overrides?: CallOverrides): Promise<BigNumber>;

  "YES()"(overrides?: CallOverrides): Promise<BigNumber>;

  addInitialLiquidity(
    _cash: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addInitialLiquidity(uint256,uint256,bool,address)"(
    _cash: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    _cash: BigNumberish,
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,address)"(
    _cash: BigNumberish,
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowances(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  augurMarket(overrides?: CallOverrides): Promise<string>;

  "augurMarket()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterPosition(
    _cashCost: BigNumberish,
    _buyLong: boolean,
    _minShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enterPosition(uint256,bool,uint256)"(
    _cashCost: BigNumberish,
    _buyLong: boolean,
    _minShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitAll(
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitAll(uint256)"(
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPosition(
    _shortShares: BigNumberish,
    _longShares: BigNumberish,
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPosition(uint256,uint256,uint256)"(
    _shortShares: BigNumberish,
    _longShares: BigNumberish,
    _minCashPayout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _market: string,
    _shareToken: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256)"(
    _market: string,
    _shareToken: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  numTicks(overrides?: CallOverrides): Promise<BigNumber>;

  "numTicks()"(overrides?: CallOverrides): Promise<BigNumber>;

  rateAddLiquidity(
    _longs: BigNumberish,
    _shorts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rateAddLiquidity(uint256,uint256)"(
    _longs: BigNumberish,
    _shorts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateRemoveLiquidity(
    _poolTokensToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
  >;

  "rateRemoveLiquidity(uint256)"(
    _poolTokensToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
  >;

  rateSwap(
    _inputShares: BigNumberish,
    _outputLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rateSwap(uint256,bool)"(
    _inputShares: BigNumberish,
    _outputLong: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _poolTokensToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256)"(
    _poolTokensToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareBalances(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _invalid: BigNumber;
      _no: BigNumber;
      _yes: BigNumber;
    }
  >;

  "shareBalances(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _invalid: BigNumber;
      _no: BigNumber;
      _yes: BigNumber;
    }
  >;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  swap(
    _inputShares: BigNumberish,
    _outputLong: boolean,
    _minOutputShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(uint256,bool,uint256)"(
    _inputShares: BigNumberish,
    _outputLong: boolean,
    _minOutputShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID(overrides?: CallOverrides): Promise<BigNumber>;

    "INVALID()"(overrides?: CallOverrides): Promise<BigNumber>;

    NO(overrides?: CallOverrides): Promise<BigNumber>;

    "NO()"(overrides?: CallOverrides): Promise<BigNumber>;

    YES(overrides?: CallOverrides): Promise<BigNumber>;

    "YES()"(overrides?: CallOverrides): Promise<BigNumber>;

    addInitialLiquidity(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addInitialLiquidity(uint256,uint256,bool,address)"(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256,address)"(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    augurMarket(overrides?: CallOverrides): Promise<string>;

    "augurMarket()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enterPosition(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enterPosition(uint256,bool,uint256)"(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitAll(
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitAll(uint256)"(
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPosition(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitPosition(uint256,uint256,uint256)"(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256)"(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numTicks(overrides?: CallOverrides): Promise<BigNumber>;

    "numTicks()"(overrides?: CallOverrides): Promise<BigNumber>;

    rateAddLiquidity(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateAddLiquidity(uint256,uint256)"(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateRemoveLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    "rateRemoveLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    rateSwap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateSwap(uint256,bool)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    "removeLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    shareBalances(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _invalid: BigNumber;
        _no: BigNumber;
        _yes: BigNumber;
      }
    >;

    "shareBalances(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _invalid: BigNumber;
        _no: BigNumber;
        _yes: BigNumber;
      }
    >;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    swap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swap(uint256,bool,uint256)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AddLiquidity(
      sender: null,
      cash: null,
      shortShares: null,
      longShares: null,
      lpTokens: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        cash: BigNumber;
        shortShares: BigNumber;
        longShares: BigNumber;
        lpTokens: BigNumber;
      }
    >;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    EnterPosition(
      sender: null,
      cash: null,
      outputShares: null,
      buyLong: null,
      priorShares: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean, BigNumber],
      {
        sender: string;
        cash: BigNumber;
        outputShares: BigNumber;
        buyLong: boolean;
        priorShares: BigNumber;
      }
    >;

    ExitPosition(
      sender: null,
      shortShares: null,
      longShares: null,
      cashPayout: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        shortShares: BigNumber;
        longShares: BigNumber;
        cashPayout: BigNumber;
      }
    >;

    RemoveLiquidity(
      sender: null,
      shortShares: null,
      longShares: null,
      lpTokensBurnt: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        shortShares: BigNumber;
        longShares: BigNumber;
        lpTokensBurnt: BigNumber;
      }
    >;

    SwapPosition(
      sender: null,
      inputShares: null,
      outputShares: null,
      outputLong: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      {
        sender: string;
        inputShares: BigNumber;
        outputShares: BigNumber;
        outputLong: boolean;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    INVALID(overrides?: CallOverrides): Promise<BigNumber>;

    "INVALID()"(overrides?: CallOverrides): Promise<BigNumber>;

    NO(overrides?: CallOverrides): Promise<BigNumber>;

    "NO()"(overrides?: CallOverrides): Promise<BigNumber>;

    YES(overrides?: CallOverrides): Promise<BigNumber>;

    "YES()"(overrides?: CallOverrides): Promise<BigNumber>;

    addInitialLiquidity(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addInitialLiquidity(uint256,uint256,bool,address)"(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256,address)"(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    augurMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "augurMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterPosition(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enterPosition(uint256,bool,uint256)"(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitAll(
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitAll(uint256)"(
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPosition(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPosition(uint256,uint256,uint256)"(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256)"(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    numTicks(overrides?: CallOverrides): Promise<BigNumber>;

    "numTicks()"(overrides?: CallOverrides): Promise<BigNumber>;

    rateAddLiquidity(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateAddLiquidity(uint256,uint256)"(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateRemoveLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateRemoveLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateSwap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateSwap(uint256,bool)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareBalances(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareBalances(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(uint256,bool,uint256)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INVALID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NO()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YES()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addInitialLiquidity(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addInitialLiquidity(uint256,uint256,bool,address)"(
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,address)"(
      _cash: BigNumberish,
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    augurMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterPosition(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enterPosition(uint256,bool,uint256)"(
      _cashCost: BigNumberish,
      _buyLong: boolean,
      _minShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitAll(
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitAll(uint256)"(
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPosition(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPosition(uint256,uint256,uint256)"(
      _shortShares: BigNumberish,
      _longShares: BigNumberish,
      _minCashPayout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256)"(
      _market: string,
      _shareToken: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    numTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numTicks()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateAddLiquidity(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateAddLiquidity(uint256,uint256)"(
      _longs: BigNumberish,
      _shorts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateRemoveLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateRemoveLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateSwap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateSwap(uint256,bool)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _poolTokensToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256)"(
      _poolTokensToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareBalances(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareBalances(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(uint256,bool,uint256)"(
      _inputShares: BigNumberish,
      _outputLong: boolean,
      _minOutputShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
