/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "EIP1271_MAGIC_VALUE()": FunctionFragment;
    "EIP712_EXCHANGE_DOMAIN_HASH()": FunctionFragment;
    "allowedValidators(address,address)": FunctionFragment;
    "batchCancelOrders(tuple[])": FunctionFragment;
    "batchExecuteTransactions(tuple[],bytes[])": FunctionFragment;
    "batchFillOrKillOrders(tuple[],uint256[],bytes[])": FunctionFragment;
    "batchFillOrders(tuple[],uint256[],bytes[])": FunctionFragment;
    "batchFillOrdersNoThrow(tuple[],uint256[],bytes[])": FunctionFragment;
    "batchMatchOrders(tuple[],tuple[],bytes[],bytes[])": FunctionFragment;
    "batchMatchOrdersWithMaximalFill(tuple[],tuple[],bytes[],bytes[])": FunctionFragment;
    "cancelOrder(tuple)": FunctionFragment;
    "cancelOrdersUpTo(uint256)": FunctionFragment;
    "cancelled(bytes32)": FunctionFragment;
    "currentContextAddress()": FunctionFragment;
    "detachProtocolFeeCollector()": FunctionFragment;
    "executeTransaction(tuple,bytes)": FunctionFragment;
    "fillOrKillOrder(tuple,uint256,bytes)": FunctionFragment;
    "fillOrder(tuple,uint256,bytes)": FunctionFragment;
    "filled(bytes32)": FunctionFragment;
    "getAssetProxy(bytes4)": FunctionFragment;
    "getOrderInfo(tuple)": FunctionFragment;
    "isValidHashSignature(bytes32,address,bytes)": FunctionFragment;
    "isValidOrderSignature(tuple,bytes)": FunctionFragment;
    "isValidSignature(tuple,bytes32,bytes)": FunctionFragment;
    "isValidTransactionSignature(tuple,bytes)": FunctionFragment;
    "marketBuyOrdersFillOrKill(tuple[],uint256,bytes[])": FunctionFragment;
    "marketBuyOrdersNoThrow(tuple[],uint256,bytes[])": FunctionFragment;
    "marketSellOrdersFillOrKill(tuple[],uint256,bytes[])": FunctionFragment;
    "marketSellOrdersNoThrow(tuple[],uint256,bytes[])": FunctionFragment;
    "matchOrders(tuple,tuple,bytes,bytes)": FunctionFragment;
    "matchOrdersWithMaximalFill(tuple,tuple,bytes,bytes)": FunctionFragment;
    "orderEpoch(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "preSign(bytes32)": FunctionFragment;
    "preSigned(bytes32,address)": FunctionFragment;
    "protocolFeeCollector()": FunctionFragment;
    "protocolFeeMultiplier()": FunctionFragment;
    "registerAssetProxy(address)": FunctionFragment;
    "setProtocolFeeCollectorAddress(address)": FunctionFragment;
    "setProtocolFeeMultiplier(uint256)": FunctionFragment;
    "setSignatureValidatorApproval(address,bool)": FunctionFragment;
    "simulateDispatchTransferFromCalls(bytes[],address[],address[],uint256[])": FunctionFragment;
    "transactionsExecuted(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EIP1271_MAGIC_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_EXCHANGE_DOMAIN_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedValidators",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelOrders",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecuteTransactions",
    values: [
      {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFillOrKillOrders",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFillOrders",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFillOrdersNoThrow",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMatchOrders",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMatchOrdersWithMaximalFill",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrdersUpTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentContextAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "detachProtocolFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [
      {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillOrder",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "filled", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAssetProxy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderInfo",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidHashSignature",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrderSignature",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidTransactionSignature",
    values: [
      {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBuyOrdersFillOrKill",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBuyOrdersNoThrow",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSellOrdersFillOrKill",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSellOrdersNoThrow",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrdersWithMaximalFill",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderEpoch",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "preSign", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "preSigned",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAssetProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeCollectorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureValidatorApproval",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateDispatchTransferFromCalls",
    values: [BytesLike[], string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP1271_MAGIC_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_EXCHANGE_DOMAIN_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExecuteTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFillOrKillOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFillOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFillOrdersNoThrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMatchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMatchOrdersWithMaximalFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrdersUpTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentContextAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detachProtocolFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidHashSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrderSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidTransactionSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketBuyOrdersFillOrKill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketBuyOrdersNoThrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSellOrdersFillOrKill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSellOrdersNoThrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrdersWithMaximalFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preSign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preSigned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAssetProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeCollectorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureValidatorApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateDispatchTransferFromCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetProxyRegistered(bytes4,address)": EventFragment;
    "Cancel(address,address,bytes,bytes,address,bytes32)": EventFragment;
    "CancelUpTo(address,address,uint256)": EventFragment;
    "Fill(address,address,bytes,bytes,bytes,bytes,bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolFeeCollectorAddress(address,address)": EventFragment;
    "ProtocolFeeMultiplier(uint256,uint256)": EventFragment;
    "SignatureValidatorApproval(address,address,bool)": EventFragment;
    "TransactionExecution(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetProxyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelUpTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeeCollectorAddress"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureValidatorApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecution"): EventFragment;
}

export class Exchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ExchangeInterface;

  functions: {
    EIP1271_MAGIC_VALUE(overrides?: CallOverrides): Promise<[string]>;

    "EIP1271_MAGIC_VALUE()"(overrides?: CallOverrides): Promise<[string]>;

    EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<[string]>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedValidators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowedValidators(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    batchCancelOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchCancelOrders(tuple[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    batchExecuteTransactions(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchExecuteTransactions(tuple[],bytes[])"(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    batchFillOrKillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchFillOrKillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    batchFillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchFillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    batchFillOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchFillOrdersNoThrow(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    batchMatchOrders(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchMatchOrders(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    batchMatchOrdersWithMaximalFill(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batchMatchOrdersWithMaximalFill(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelOrdersUpTo(
      targetOrderEpoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "cancelOrdersUpTo(uint256)"(
      targetOrderEpoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelled(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "cancelled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentContextAddress(overrides?: CallOverrides): Promise<[string]>;

    "currentContextAddress()"(overrides?: CallOverrides): Promise<[string]>;

    detachProtocolFeeCollector(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "detachProtocolFeeCollector()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeTransaction(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "executeTransaction((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    fillOrKillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    fillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    filled(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "filled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAssetProxy(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetProxy: string }>;

    "getAssetProxy(bytes4)"(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetProxy: string }>;

    getOrderInfo(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        }
      ] & {
        orderInfo: [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        };
      }
    >;

    "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        }
      ] & {
        orderInfo: [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        };
      }
    >;

    isValidHashSignature(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    "isValidHashSignature(bytes32,address,bytes)"(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    isValidOrderSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    "isValidOrderSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    isValidSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidTransactionSignature(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    "isValidTransactionSignature((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    marketBuyOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "marketBuyOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    marketBuyOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "marketBuyOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    marketSellOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "marketSellOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    marketSellOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "marketSellOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    matchOrders(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    matchOrdersWithMaximalFill(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "matchOrdersWithMaximalFill((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    orderEpoch(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "orderEpoch(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    preSign(
      hash: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "preSign(bytes32)"(
      hash: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    preSigned(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "preSigned(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    "protocolFeeCollector()"(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "protocolFeeMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerAssetProxy(
      assetProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAssetProxy(address)"(
      assetProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtocolFeeCollectorAddress(
      updatedProtocolFeeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtocolFeeCollectorAddress(address)"(
      updatedProtocolFeeCollector: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtocolFeeMultiplier(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtocolFeeMultiplier(uint256)"(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSignatureValidatorApproval(
      validatorAddress: string,
      approval: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "setSignatureValidatorApproval(address,bool)"(
      validatorAddress: string,
      approval: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    simulateDispatchTransferFromCalls(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "simulateDispatchTransferFromCalls(bytes[],address[],address[],uint256[])"(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transactionsExecuted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "transactionsExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  EIP1271_MAGIC_VALUE(overrides?: CallOverrides): Promise<string>;

  "EIP1271_MAGIC_VALUE()"(overrides?: CallOverrides): Promise<string>;

  EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

  "EIP712_EXCHANGE_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<string>;

  allowedValidators(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowedValidators(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batchCancelOrders(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchCancelOrders(tuple[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  batchExecuteTransactions(
    transactions: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    }[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchExecuteTransactions(tuple[],bytes[])"(
    transactions: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    }[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  batchFillOrKillOrders(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmounts: BigNumberish[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchFillOrKillOrders(tuple[],uint256[],bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmounts: BigNumberish[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  batchFillOrders(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmounts: BigNumberish[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchFillOrders(tuple[],uint256[],bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmounts: BigNumberish[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  batchFillOrdersNoThrow(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmounts: BigNumberish[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchFillOrdersNoThrow(tuple[],uint256[],bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmounts: BigNumberish[],
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  batchMatchOrders(
    leftOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    rightOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    leftSignatures: BytesLike[],
    rightSignatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchMatchOrders(tuple[],tuple[],bytes[],bytes[])"(
    leftOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    rightOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    leftSignatures: BytesLike[],
    rightSignatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  batchMatchOrdersWithMaximalFill(
    leftOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    rightOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    leftSignatures: BytesLike[],
    rightSignatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batchMatchOrdersWithMaximalFill(tuple[],tuple[],bytes[],bytes[])"(
    leftOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    rightOrders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    leftSignatures: BytesLike[],
    rightSignatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelOrder(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelOrdersUpTo(
    targetOrderEpoch: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "cancelOrdersUpTo(uint256)"(
    targetOrderEpoch: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelled(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "cancelled(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentContextAddress(overrides?: CallOverrides): Promise<string>;

  "currentContextAddress()"(overrides?: CallOverrides): Promise<string>;

  detachProtocolFeeCollector(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "detachProtocolFeeCollector()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeTransaction(
    transaction: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "executeTransaction((uint256,uint256,uint256,address,bytes),bytes)"(
    transaction: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  fillOrKillOrder(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAssetFillAmount: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAssetFillAmount: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  fillOrder(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAssetFillAmount: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAssetFillAmount: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  filled(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "filled(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAssetProxy(
    assetProxyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAssetProxy(bytes4)"(
    assetProxyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrderInfo(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      orderStatus: number;
      orderHash: string;
      orderTakerAssetFilledAmount: BigNumber;
    }
  >;

  "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      orderStatus: number;
      orderHash: string;
      orderTakerAssetFilledAmount: BigNumber;
    }
  >;

  isValidHashSignature(
    hash: BytesLike,
    signerAddress: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidHashSignature(bytes32,address,bytes)"(
    hash: BytesLike,
    signerAddress: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidOrderSignature(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidOrderSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    orderHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32,bytes)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    orderHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidTransactionSignature(
    transaction: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidTransactionSignature((uint256,uint256,uint256,address,bytes),bytes)"(
    transaction: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketBuyOrdersFillOrKill(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    makerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "marketBuyOrdersFillOrKill(tuple[],uint256,bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    makerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  marketBuyOrdersNoThrow(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    makerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "marketBuyOrdersNoThrow(tuple[],uint256,bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    makerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  marketSellOrdersFillOrKill(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "marketSellOrdersFillOrKill(tuple[],uint256,bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  marketSellOrdersNoThrow(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "marketSellOrdersNoThrow(tuple[],uint256,bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAssetFillAmount: BigNumberish,
    signatures: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  matchOrders(
    leftOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    rightOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    leftSignature: BytesLike,
    rightSignature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
    leftOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    rightOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    leftSignature: BytesLike,
    rightSignature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  matchOrdersWithMaximalFill(
    leftOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    rightOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    leftSignature: BytesLike,
    rightSignature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "matchOrdersWithMaximalFill((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
    leftOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    rightOrder: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    leftSignature: BytesLike,
    rightSignature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  orderEpoch(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "orderEpoch(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  preSign(
    hash: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "preSign(bytes32)"(
    hash: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  preSigned(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "preSigned(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

  "protocolFeeCollector()"(overrides?: CallOverrides): Promise<string>;

  protocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  registerAssetProxy(
    assetProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAssetProxy(address)"(
    assetProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtocolFeeCollectorAddress(
    updatedProtocolFeeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtocolFeeCollectorAddress(address)"(
    updatedProtocolFeeCollector: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtocolFeeMultiplier(
    updatedProtocolFeeMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtocolFeeMultiplier(uint256)"(
    updatedProtocolFeeMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSignatureValidatorApproval(
    validatorAddress: string,
    approval: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "setSignatureValidatorApproval(address,bool)"(
    validatorAddress: string,
    approval: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  simulateDispatchTransferFromCalls(
    assetData: BytesLike[],
    fromAddresses: string[],
    toAddresses: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "simulateDispatchTransferFromCalls(bytes[],address[],address[],uint256[])"(
    assetData: BytesLike[],
    fromAddresses: string[],
    toAddresses: string[],
    amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transactionsExecuted(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "transactionsExecuted(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    EIP1271_MAGIC_VALUE(overrides?: CallOverrides): Promise<string>;

    "EIP1271_MAGIC_VALUE()"(overrides?: CallOverrides): Promise<string>;

    EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<string>;

    allowedValidators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowedValidators(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchCancelOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchCancelOrders(tuple[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchExecuteTransactions(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "batchExecuteTransactions(tuple[],bytes[])"(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    batchFillOrKillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      })[]
    >;

    "batchFillOrKillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      })[]
    >;

    batchFillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      })[]
    >;

    "batchFillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      })[]
    >;

    batchFillOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      })[]
    >;

    "batchFillOrdersNoThrow(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      })[]
    >;

    batchMatchOrders(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        left: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        right: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    "batchMatchOrders(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        left: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        right: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    batchMatchOrdersWithMaximalFill(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        left: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        right: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    "batchMatchOrdersWithMaximalFill(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[],
        BigNumber,
        BigNumber
      ] & {
        left: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        right: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        })[];
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    cancelOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrdersUpTo(
      targetOrderEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrdersUpTo(uint256)"(
      targetOrderEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelled(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "cancelled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentContextAddress(overrides?: CallOverrides): Promise<string>;

    "currentContextAddress()"(overrides?: CallOverrides): Promise<string>;

    detachProtocolFeeCollector(overrides?: CallOverrides): Promise<void>;

    "detachProtocolFeeCollector()"(overrides?: CallOverrides): Promise<void>;

    executeTransaction(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeTransaction((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    fillOrKillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    fillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    filled(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "filled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetProxy(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAssetProxy(bytes4)"(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrderInfo(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        orderStatus: number;
        orderHash: string;
        orderTakerAssetFilledAmount: BigNumber;
      }
    >;

    "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        orderStatus: number;
        orderHash: string;
        orderTakerAssetFilledAmount: BigNumber;
      }
    >;

    isValidHashSignature(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidHashSignature(bytes32,address,bytes)"(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidOrderSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidOrderSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidTransactionSignature(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidTransactionSignature((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketBuyOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    "marketBuyOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    marketBuyOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    "marketBuyOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    marketSellOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    "marketSellOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    marketSellOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    "marketSellOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    matchOrders(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        left: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        right: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        left: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        right: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    matchOrdersWithMaximalFill(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        left: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        right: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    "matchOrdersWithMaximalFill((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        left: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        right: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          makerAssetFilledAmount: BigNumber;
          takerAssetFilledAmount: BigNumber;
          makerFeePaid: BigNumber;
          takerFeePaid: BigNumber;
          protocolFeePaid: BigNumber;
        };
        profitInLeftMakerAsset: BigNumber;
        profitInRightMakerAsset: BigNumber;
      }
    >;

    orderEpoch(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderEpoch(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    preSign(hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    "preSign(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    preSigned(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "preSigned(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<string>;

    "protocolFeeCollector()"(overrides?: CallOverrides): Promise<string>;

    protocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerAssetProxy(
      assetProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerAssetProxy(address)"(
      assetProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeCollectorAddress(
      updatedProtocolFeeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolFeeCollectorAddress(address)"(
      updatedProtocolFeeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeMultiplier(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolFeeMultiplier(uint256)"(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSignatureValidatorApproval(
      validatorAddress: string,
      approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSignatureValidatorApproval(address,bool)"(
      validatorAddress: string,
      approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateDispatchTransferFromCalls(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "simulateDispatchTransferFromCalls(bytes[],address[],address[],uint256[])"(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transactionsExecuted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transactionsExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AssetProxyRegistered(
      id: null,
      assetProxy: null
    ): TypedEventFilter<[string, string], { id: string; assetProxy: string }>;

    Cancel(
      makerAddress: string | null,
      feeRecipientAddress: string | null,
      makerAssetData: null,
      takerAssetData: null,
      senderAddress: null,
      orderHash: BytesLike | null
    ): TypedEventFilter<
      [string, string, string, string, string, string],
      {
        makerAddress: string;
        feeRecipientAddress: string;
        makerAssetData: string;
        takerAssetData: string;
        senderAddress: string;
        orderHash: string;
      }
    >;

    CancelUpTo(
      makerAddress: string | null,
      orderSenderAddress: string | null,
      orderEpoch: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      {
        makerAddress: string;
        orderSenderAddress: string;
        orderEpoch: BigNumber;
      }
    >;

    Fill(
      makerAddress: string | null,
      feeRecipientAddress: string | null,
      makerAssetData: null,
      takerAssetData: null,
      makerFeeAssetData: null,
      takerFeeAssetData: null,
      orderHash: BytesLike | null,
      takerAddress: null,
      senderAddress: null,
      makerAssetFilledAmount: null,
      takerAssetFilledAmount: null,
      makerFeePaid: null,
      takerFeePaid: null,
      protocolFeePaid: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        makerAddress: string;
        feeRecipientAddress: string;
        makerAssetData: string;
        takerAssetData: string;
        makerFeeAssetData: string;
        takerFeeAssetData: string;
        orderHash: string;
        takerAddress: string;
        senderAddress: string;
        makerAssetFilledAmount: BigNumber;
        takerAssetFilledAmount: BigNumber;
        makerFeePaid: BigNumber;
        takerFeePaid: BigNumber;
        protocolFeePaid: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ProtocolFeeCollectorAddress(
      oldProtocolFeeCollector: null,
      updatedProtocolFeeCollector: null
    ): TypedEventFilter<
      [string, string],
      { oldProtocolFeeCollector: string; updatedProtocolFeeCollector: string }
    >;

    ProtocolFeeMultiplier(
      oldProtocolFeeMultiplier: null,
      updatedProtocolFeeMultiplier: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldProtocolFeeMultiplier: BigNumber;
        updatedProtocolFeeMultiplier: BigNumber;
      }
    >;

    SignatureValidatorApproval(
      signerAddress: string | null,
      validatorAddress: string | null,
      isApproved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { signerAddress: string; validatorAddress: string; isApproved: boolean }
    >;

    TransactionExecution(
      transactionHash: BytesLike | null
    ): TypedEventFilter<[string], { transactionHash: string }>;
  };

  estimateGas: {
    EIP1271_MAGIC_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP1271_MAGIC_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedValidators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedValidators(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCancelOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchCancelOrders(tuple[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    batchExecuteTransactions(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchExecuteTransactions(tuple[],bytes[])"(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    batchFillOrKillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchFillOrKillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    batchFillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchFillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    batchFillOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchFillOrdersNoThrow(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    batchMatchOrders(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchMatchOrders(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    batchMatchOrdersWithMaximalFill(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batchMatchOrdersWithMaximalFill(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelOrdersUpTo(
      targetOrderEpoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "cancelOrdersUpTo(uint256)"(
      targetOrderEpoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelled(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "cancelled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentContextAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "currentContextAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    detachProtocolFeeCollector(overrides?: Overrides): Promise<BigNumber>;

    "detachProtocolFeeCollector()"(overrides?: Overrides): Promise<BigNumber>;

    executeTransaction(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "executeTransaction((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    fillOrKillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    fillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    filled(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "filled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetProxy(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetProxy(bytes4)"(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderInfo(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidHashSignature(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidHashSignature(bytes32,address,bytes)"(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidOrderSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidOrderSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidTransactionSignature(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidTransactionSignature((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketBuyOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "marketBuyOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    marketBuyOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "marketBuyOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    marketSellOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "marketSellOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    marketSellOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "marketSellOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    matchOrders(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    matchOrdersWithMaximalFill(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "matchOrdersWithMaximalFill((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    orderEpoch(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderEpoch(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    preSign(hash: BytesLike, overrides?: PayableOverrides): Promise<BigNumber>;

    "preSign(bytes32)"(
      hash: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    preSigned(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preSigned(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFeeCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerAssetProxy(
      assetProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerAssetProxy(address)"(
      assetProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtocolFeeCollectorAddress(
      updatedProtocolFeeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtocolFeeCollectorAddress(address)"(
      updatedProtocolFeeCollector: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtocolFeeMultiplier(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtocolFeeMultiplier(uint256)"(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSignatureValidatorApproval(
      validatorAddress: string,
      approval: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "setSignatureValidatorApproval(address,bool)"(
      validatorAddress: string,
      approval: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    simulateDispatchTransferFromCalls(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "simulateDispatchTransferFromCalls(bytes[],address[],address[],uint256[])"(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transactionsExecuted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactionsExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP1271_MAGIC_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP1271_MAGIC_VALUE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_EXCHANGE_DOMAIN_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedValidators(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedValidators(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCancelOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchCancelOrders(tuple[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    batchExecuteTransactions(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchExecuteTransactions(tuple[],bytes[])"(
      transactions: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    batchFillOrKillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchFillOrKillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    batchFillOrders(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchFillOrders(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    batchFillOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchFillOrdersNoThrow(tuple[],uint256[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmounts: BigNumberish[],
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    batchMatchOrders(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchMatchOrders(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    batchMatchOrdersWithMaximalFill(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batchMatchOrdersWithMaximalFill(tuple[],tuple[],bytes[],bytes[])"(
      leftOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      rightOrders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      leftSignatures: BytesLike[],
      rightSignatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrdersUpTo(
      targetOrderEpoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "cancelOrdersUpTo(uint256)"(
      targetOrderEpoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cancelled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentContextAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentContextAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    detachProtocolFeeCollector(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "detachProtocolFeeCollector()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "executeTransaction((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    fillOrKillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    fillOrder(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAssetFillAmount: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    filled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "filled(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetProxy(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetProxy(bytes4)"(
      assetProxyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderInfo(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes))"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidHashSignature(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidHashSignature(bytes32,address,bytes)"(
      hash: BytesLike,
      signerAddress: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidOrderSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidOrderSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidSignature((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes32,bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      orderHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidTransactionSignature(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidTransactionSignature((uint256,uint256,uint256,address,bytes),bytes)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketBuyOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "marketBuyOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    marketBuyOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "marketBuyOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      makerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    marketSellOrdersFillOrKill(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "marketSellOrdersFillOrKill(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    marketSellOrdersNoThrow(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "marketSellOrdersNoThrow(tuple[],uint256,bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAssetFillAmount: BigNumberish,
      signatures: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    matchOrders(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    matchOrdersWithMaximalFill(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "matchOrdersWithMaximalFill((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,bytes)"(
      leftOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      rightOrder: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      leftSignature: BytesLike,
      rightSignature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    orderEpoch(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderEpoch(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preSign(
      hash: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "preSign(bytes32)"(
      hash: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    preSigned(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "preSigned(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolFeeCollector()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolFeeMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAssetProxy(
      assetProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAssetProxy(address)"(
      assetProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtocolFeeCollectorAddress(
      updatedProtocolFeeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtocolFeeCollectorAddress(address)"(
      updatedProtocolFeeCollector: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtocolFeeMultiplier(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtocolFeeMultiplier(uint256)"(
      updatedProtocolFeeMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSignatureValidatorApproval(
      validatorAddress: string,
      approval: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "setSignatureValidatorApproval(address,bool)"(
      validatorAddress: string,
      approval: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    simulateDispatchTransferFromCalls(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "simulateDispatchTransferFromCalls(bytes[],address[],address[],uint256[])"(
      assetData: BytesLike[],
      fromAddresses: string[],
      toAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transactionsExecuted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactionsExecuted(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
