/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArbitrumMarketGetterInterface extends ethers.utils.Interface {
  functions: {
    "getAffiliateFeeDivisor(address)": FunctionFragment;
    "getCreatorFee(address)": FunctionFragment;
    "getNumTicks(address)": FunctionFragment;
    "getNumberOfOutcomes(address)": FunctionFragment;
    "getOrCacheReportingFeeDivisor()": FunctionFragment;
    "getOwner(address)": FunctionFragment;
    "getUniverse(address)": FunctionFragment;
    "getWinningPayoutNumerator(address,uint256)": FunctionFragment;
    "isFinalized(address)": FunctionFragment;
    "isFinalizedAsInvalid(address)": FunctionFragment;
    "isValid(address)": FunctionFragment;
    "receiveFeeData(uint256)": FunctionFragment;
    "receiveMarketData(bytes,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAffiliateFeeDivisor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getNumTicks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNumberOfOutcomes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "getUniverse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWinningPayoutNumerator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isFinalized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isFinalizedAsInvalid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isValid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "receiveFeeData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMarketData",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAffiliateFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalizedAsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMarketData",
    data: BytesLike
  ): Result;

  events: {
    "EnterPosition(address,uint256,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnterPosition"): EventFragment;
}

export class ArbitrumMarketGetter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ArbitrumMarketGetterInterface;

  functions: {
    getAffiliateFeeDivisor(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAffiliateFeeDivisor(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreatorFee(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCreatorFee(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumTicks(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumTicks(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfOutcomes(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumberOfOutcomes(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwner(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOwner(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUniverse(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUniverse(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWinningPayoutNumerator(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWinningPayoutNumerator(address,uint256)"(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isFinalized(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFinalized(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFinalizedAsInvalid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFinalizedAsInvalid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveFeeData(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "receiveFeeData(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    receiveMarketData(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "receiveMarketData(bytes,address)"(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAffiliateFeeDivisor(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAffiliateFeeDivisor(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreatorFee(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCreatorFee(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumTicks(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumTicks(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfOutcomes(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumberOfOutcomes(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrCacheReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "getOrCacheReportingFeeDivisor()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(_marketAddress: string, overrides?: CallOverrides): Promise<string>;

  "getOwner(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getUniverse(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUniverse(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getWinningPayoutNumerator(
    _marketAddress: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWinningPayoutNumerator(address,uint256)"(
    _marketAddress: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isFinalized(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFinalized(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFinalizedAsInvalid(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFinalizedAsInvalid(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValid(_marketAddress: string, overrides?: CallOverrides): Promise<boolean>;

  "isValid(address)"(
    _marketAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  receiveFeeData(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "receiveFeeData(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  receiveMarketData(
    _rawMarketData: BytesLike,
    _marketAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "receiveMarketData(bytes,address)"(
    _rawMarketData: BytesLike,
    _marketAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAffiliateFeeDivisor(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAffiliateFeeDivisor(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorFee(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreatorFee(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTicks(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumTicks(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfOutcomes(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfOutcomes(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOwner(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUniverse(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUniverse(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getWinningPayoutNumerator(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutNumerator(address,uint256)"(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFinalized(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFinalizedAsInvalid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFinalizedAsInvalid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveFeeData(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "receiveFeeData(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveMarketData(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "receiveMarketData(bytes,address)"(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    EnterPosition(
      sender: null,
      cash: null,
      outputShares: null,
      buyLong: null,
      priorShares: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean, BigNumber],
      {
        sender: string;
        cash: BigNumber;
        outputShares: BigNumber;
        buyLong: boolean;
        priorShares: BigNumber;
      }
    >;
  };

  estimateGas: {
    getAffiliateFeeDivisor(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAffiliateFeeDivisor(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorFee(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreatorFee(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTicks(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumTicks(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfOutcomes(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfOutcomes(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwner(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverse(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUniverse(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningPayoutNumerator(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutNumerator(address,uint256)"(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFinalized(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalizedAsInvalid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFinalizedAsInvalid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveFeeData(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "receiveFeeData(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    receiveMarketData(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "receiveMarketData(bytes,address)"(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAffiliateFeeDivisor(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAffiliateFeeDivisor(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorFee(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreatorFee(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTicks(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumTicks(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfOutcomes(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfOutcomes(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniverse(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUniverse(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningPayoutNumerator(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningPayoutNumerator(address,uint256)"(
      _marketAddress: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFinalized(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalizedAsInvalid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFinalizedAsInvalid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValid(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValid(address)"(
      _marketAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveFeeData(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "receiveFeeData(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    receiveMarketData(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "receiveMarketData(bytes,address)"(
      _rawMarketData: BytesLike,
      _marketAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
