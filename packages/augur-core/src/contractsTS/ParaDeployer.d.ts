/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ParaDeployerInterface extends ethers.utils.Interface {
  functions: {
    "OICash()": FunctionFragment;
    "OINexus()": FunctionFragment;
    "WETH9()": FunctionFragment;
    "addToken(address,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "burnOwnership()": FunctionFragment;
    "factories()": FunctionFragment;
    "feePotFactory()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "openInterestCashFactory()": FunctionFragment;
    "paraAugurTradings(address)": FunctionFragment;
    "paraAugurs(address)": FunctionFragment;
    "paraDeployProgress(address)": FunctionFragment;
    "paraUniverseFactory()": FunctionFragment;
    "progressDeployment(address)": FunctionFragment;
    "tokenTradeIntervalModifier(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zeroXExchange()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "OICash", values?: undefined): string;
  encodeFunctionData(functionFragment: "OINexus", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factories", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePotFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openInterestCashFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paraAugurTradings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paraAugurs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "paraDeployProgress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "paraUniverseFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "progressDeployment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTradeIntervalModifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroXExchange",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "OICash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OINexus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePotFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openInterestCashFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paraAugurTradings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paraAugurs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paraDeployProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paraUniverseFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "progressDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTradeIntervalModifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroXExchange",
    data: BytesLike
  ): Result;

  events: {
    "ParaAugurDeployFinished(address,address,address,address)": EventFragment;
    "ParaAugurTradingDeployed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParaAugurDeployFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParaAugurTradingDeployed"): EventFragment;
}

export class ParaDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ParaDeployerInterface;

  functions: {
    OICash(overrides?: CallOverrides): Promise<[string]>;

    "OICash()"(overrides?: CallOverrides): Promise<[string]>;

    OINexus(overrides?: CallOverrides): Promise<[string]>;

    "OINexus()"(overrides?: CallOverrides): Promise<[string]>;

    WETH9(overrides?: CallOverrides): Promise<[string]>;

    "WETH9()"(overrides?: CallOverrides): Promise<[string]>;

    addToken(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(address,uint256)"(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    burnOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "burnOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    factories(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        paraAugurFactory: string;
        paraAugurTradingFactory: string;
        paraShareTokenFactory: string;
        cancelOrderFactory: string;
        createOrderFactory: string;
        fillOrderFactory: string;
        ordersFactory: string;
        profitLossFactory: string;
        simulateTradeFactory: string;
        tradeFactory: string;
        zeroXTradeFactory: string;
      }
    >;

    "factories()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        paraAugurFactory: string;
        paraAugurTradingFactory: string;
        paraShareTokenFactory: string;
        cancelOrderFactory: string;
        createOrderFactory: string;
        fillOrderFactory: string;
        ordersFactory: string;
        profitLossFactory: string;
        simulateTradeFactory: string;
        tradeFactory: string;
        zeroXTradeFactory: string;
      }
    >;

    feePotFactory(overrides?: CallOverrides): Promise<[string]>;

    "feePotFactory()"(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    openInterestCashFactory(overrides?: CallOverrides): Promise<[string]>;

    "openInterestCashFactory()"(overrides?: CallOverrides): Promise<[string]>;

    paraAugurTradings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "paraAugurTradings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paraAugurs(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "paraAugurs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paraDeployProgress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "paraDeployProgress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    paraUniverseFactory(overrides?: CallOverrides): Promise<[string]>;

    "paraUniverseFactory()"(overrides?: CallOverrides): Promise<[string]>;

    progressDeployment(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "progressDeployment(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenTradeIntervalModifier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenTradeIntervalModifier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    zeroXExchange(overrides?: CallOverrides): Promise<[string]>;

    "zeroXExchange()"(overrides?: CallOverrides): Promise<[string]>;
  };

  OICash(overrides?: CallOverrides): Promise<string>;

  "OICash()"(overrides?: CallOverrides): Promise<string>;

  OINexus(overrides?: CallOverrides): Promise<string>;

  "OINexus()"(overrides?: CallOverrides): Promise<string>;

  WETH9(overrides?: CallOverrides): Promise<string>;

  "WETH9()"(overrides?: CallOverrides): Promise<string>;

  addToken(
    _token: string,
    _tradeIntervalModifier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToken(address,uint256)"(
    _token: string,
    _tradeIntervalModifier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  burnOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "burnOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  factories(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      paraAugurFactory: string;
      paraAugurTradingFactory: string;
      paraShareTokenFactory: string;
      cancelOrderFactory: string;
      createOrderFactory: string;
      fillOrderFactory: string;
      ordersFactory: string;
      profitLossFactory: string;
      simulateTradeFactory: string;
      tradeFactory: string;
      zeroXTradeFactory: string;
    }
  >;

  "factories()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      paraAugurFactory: string;
      paraAugurTradingFactory: string;
      paraShareTokenFactory: string;
      cancelOrderFactory: string;
      createOrderFactory: string;
      fillOrderFactory: string;
      ordersFactory: string;
      profitLossFactory: string;
      simulateTradeFactory: string;
      tradeFactory: string;
      zeroXTradeFactory: string;
    }
  >;

  feePotFactory(overrides?: CallOverrides): Promise<string>;

  "feePotFactory()"(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  openInterestCashFactory(overrides?: CallOverrides): Promise<string>;

  "openInterestCashFactory()"(overrides?: CallOverrides): Promise<string>;

  paraAugurTradings(arg0: string, overrides?: CallOverrides): Promise<string>;

  "paraAugurTradings(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  paraAugurs(arg0: string, overrides?: CallOverrides): Promise<string>;

  "paraAugurs(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  paraDeployProgress(arg0: string, overrides?: CallOverrides): Promise<number>;

  "paraDeployProgress(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  paraUniverseFactory(overrides?: CallOverrides): Promise<string>;

  "paraUniverseFactory()"(overrides?: CallOverrides): Promise<string>;

  progressDeployment(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "progressDeployment(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenTradeIntervalModifier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenTradeIntervalModifier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  zeroXExchange(overrides?: CallOverrides): Promise<string>;

  "zeroXExchange()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    OICash(overrides?: CallOverrides): Promise<string>;

    "OICash()"(overrides?: CallOverrides): Promise<string>;

    OINexus(overrides?: CallOverrides): Promise<string>;

    "OINexus()"(overrides?: CallOverrides): Promise<string>;

    WETH9(overrides?: CallOverrides): Promise<string>;

    "WETH9()"(overrides?: CallOverrides): Promise<string>;

    addToken(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addToken(address,uint256)"(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    burnOwnership(overrides?: CallOverrides): Promise<boolean>;

    "burnOwnership()"(overrides?: CallOverrides): Promise<boolean>;

    factories(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        paraAugurFactory: string;
        paraAugurTradingFactory: string;
        paraShareTokenFactory: string;
        cancelOrderFactory: string;
        createOrderFactory: string;
        fillOrderFactory: string;
        ordersFactory: string;
        profitLossFactory: string;
        simulateTradeFactory: string;
        tradeFactory: string;
        zeroXTradeFactory: string;
      }
    >;

    "factories()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        paraAugurFactory: string;
        paraAugurTradingFactory: string;
        paraShareTokenFactory: string;
        cancelOrderFactory: string;
        createOrderFactory: string;
        fillOrderFactory: string;
        ordersFactory: string;
        profitLossFactory: string;
        simulateTradeFactory: string;
        tradeFactory: string;
        zeroXTradeFactory: string;
      }
    >;

    feePotFactory(overrides?: CallOverrides): Promise<string>;

    "feePotFactory()"(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    openInterestCashFactory(overrides?: CallOverrides): Promise<string>;

    "openInterestCashFactory()"(overrides?: CallOverrides): Promise<string>;

    paraAugurTradings(arg0: string, overrides?: CallOverrides): Promise<string>;

    "paraAugurTradings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    paraAugurs(arg0: string, overrides?: CallOverrides): Promise<string>;

    "paraAugurs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    paraDeployProgress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "paraDeployProgress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    paraUniverseFactory(overrides?: CallOverrides): Promise<string>;

    "paraUniverseFactory()"(overrides?: CallOverrides): Promise<string>;

    progressDeployment(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "progressDeployment(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenTradeIntervalModifier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenTradeIntervalModifier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    zeroXExchange(overrides?: CallOverrides): Promise<string>;

    "zeroXExchange()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ParaAugurDeployFinished(
      paraAugur: null,
      shareToken: null,
      cash: null,
      OINexus: null
    ): TypedEventFilter<
      [string, string, string, string],
      { paraAugur: string; shareToken: string; cash: string; OINexus: string }
    >;

    ParaAugurTradingDeployed(
      paraAugur: null,
      cash: null
    ): TypedEventFilter<[string, string], { paraAugur: string; cash: string }>;
  };

  estimateGas: {
    OICash(overrides?: CallOverrides): Promise<BigNumber>;

    "OICash()"(overrides?: CallOverrides): Promise<BigNumber>;

    OINexus(overrides?: CallOverrides): Promise<BigNumber>;

    "OINexus()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH9()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addToken(address,uint256)"(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnOwnership(overrides?: Overrides): Promise<BigNumber>;

    "burnOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    factories(overrides?: CallOverrides): Promise<BigNumber>;

    "factories()"(overrides?: CallOverrides): Promise<BigNumber>;

    feePotFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "feePotFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    openInterestCashFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "openInterestCashFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    paraAugurTradings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paraAugurTradings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paraAugurs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "paraAugurs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paraDeployProgress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paraDeployProgress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paraUniverseFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "paraUniverseFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    progressDeployment(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "progressDeployment(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenTradeIntervalModifier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenTradeIntervalModifier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    zeroXExchange(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroXExchange()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    OICash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OICash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OINexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OINexus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH9()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToken(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(address,uint256)"(
      _token: string,
      _tradeIntervalModifier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "burnOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    factories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factories()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePotFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePotFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openInterestCashFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openInterestCashFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paraAugurTradings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paraAugurTradings(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paraAugurs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paraAugurs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paraDeployProgress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paraDeployProgress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paraUniverseFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paraUniverseFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    progressDeployment(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "progressDeployment(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenTradeIntervalModifier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenTradeIntervalModifier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    zeroXExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zeroXExchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
