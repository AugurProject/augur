/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SideChainAugurTradingInterface extends ethers.utils.Interface {
  functions: {
    "augur()": FunctionFragment;
    "claimMarketsProceeds(address[],address)": FunctionFragment;
    "claimTradingProceeds(address,address)": FunctionFragment;
    "finishDeployment()": FunctionFragment;
    "logMarketVolumeChanged(address,address,uint256,uint256[],uint256)": FunctionFragment;
    "logOrderFilled(address,address,address,uint256,uint256,uint256,bytes32,bytes32)": FunctionFragment;
    "logProfitLossChanged(address,address,uint256,int256,uint256,int256,int256,int256)": FunctionFragment;
    "logZeroXOrderCanceled(address,address,address,uint256,uint256,uint256,uint8,bytes32)": FunctionFragment;
    "logZeroXOrderFilled(address,address,bytes32,bytes32,uint8,address[],uint256[])": FunctionFragment;
    "lookup(bytes32)": FunctionFragment;
    "marketGetter()": FunctionFragment;
    "registerContract(bytes32,address)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "trustedSender(address)": FunctionFragment;
    "uploader()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimMarketsProceeds",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTradingProceeds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finishDeployment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "logMarketVolumeChanged",
    values: [string, string, BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logOrderFilled",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logProfitLossChanged",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logZeroXOrderCanceled",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logZeroXOrderFilled",
    values: [
      string,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "lookup", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "marketGetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSender",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uploader", values?: undefined): string;

  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimMarketsProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTradingProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMarketVolumeChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logOrderFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logProfitLossChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logZeroXOrderCanceled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logZeroXOrderFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lookup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uploader", data: BytesLike): Result;

  events: {
    "CancelZeroXOrder(address,address,address,uint256,uint256,uint256,uint8,bytes32)": EventFragment;
    "MarketVolumeChanged(address,address,uint256,uint256[],uint256,uint256)": EventFragment;
    "OrderEvent(address,address,uint8,uint8,bytes32,bytes32,address[],uint256[])": EventFragment;
    "ProfitLossChanged(address,address,address,uint256,int256,uint256,int256,int256,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelZeroXOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketVolumeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitLossChanged"): EventFragment;
}

export class SideChainAugurTrading extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: SideChainAugurTradingInterface;

  functions: {
    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    claimMarketsProceeds(
      _markets: string[],
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMarketsProceeds(address[],address)"(
      _markets: string[],
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finishDeployment(overrides?: Overrides): Promise<ContractTransaction>;

    "finishDeployment()"(overrides?: Overrides): Promise<ContractTransaction>;

    logMarketVolumeChanged(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logMarketVolumeChanged(address,address,uint256,uint256[],uint256)"(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logOrderFilled(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logOrderFilled(address,address,address,uint256,uint256,uint256,bytes32,bytes32)"(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logProfitLossChanged(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logProfitLossChanged(address,address,uint256,int256,uint256,int256,int256,int256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logZeroXOrderCanceled(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logZeroXOrderCanceled(address,address,address,uint256,uint256,uint256,uint8,bytes32)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    logZeroXOrderFilled(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "logZeroXOrderFilled(address,address,bytes32,bytes32,uint8,address[],uint256[])"(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketGetter(overrides?: CallOverrides): Promise<[string]>;

    "marketGetter()"(overrides?: CallOverrides): Promise<[string]>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    trustedSender(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "trustedSender(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uploader(overrides?: CallOverrides): Promise<[string]>;

    "uploader()"(overrides?: CallOverrides): Promise<[string]>;
  };

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  claimMarketsProceeds(
    _markets: string[],
    _shareHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMarketsProceeds(address[],address)"(
    _markets: string[],
    _shareHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimTradingProceeds(
    _market: string,
    _shareHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimTradingProceeds(address,address)"(
    _market: string,
    _shareHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finishDeployment(overrides?: Overrides): Promise<ContractTransaction>;

  "finishDeployment()"(overrides?: Overrides): Promise<ContractTransaction>;

  logMarketVolumeChanged(
    _universe: string,
    _market: string,
    _volume: BigNumberish,
    _outcomeVolumes: BigNumberish[],
    _totalTrades: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logMarketVolumeChanged(address,address,uint256,uint256[],uint256)"(
    _universe: string,
    _market: string,
    _volume: BigNumberish,
    _outcomeVolumes: BigNumberish[],
    _totalTrades: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logOrderFilled(
    _universe: string,
    _creator: string,
    _filler: string,
    _price: BigNumberish,
    _fees: BigNumberish,
    _amountFilled: BigNumberish,
    _orderId: BytesLike,
    _tradeGroupId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logOrderFilled(address,address,address,uint256,uint256,uint256,bytes32,bytes32)"(
    _universe: string,
    _creator: string,
    _filler: string,
    _price: BigNumberish,
    _fees: BigNumberish,
    _amountFilled: BigNumberish,
    _orderId: BytesLike,
    _tradeGroupId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logProfitLossChanged(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    _netPosition: BigNumberish,
    _avgPrice: BigNumberish,
    _realizedProfit: BigNumberish,
    _frozenFunds: BigNumberish,
    _realizedCost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logProfitLossChanged(address,address,uint256,int256,uint256,int256,int256,int256)"(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    _netPosition: BigNumberish,
    _avgPrice: BigNumberish,
    _realizedProfit: BigNumberish,
    _frozenFunds: BigNumberish,
    _realizedCost: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logZeroXOrderCanceled(
    _universe: string,
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    _price: BigNumberish,
    _amount: BigNumberish,
    _type: BigNumberish,
    _orderHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logZeroXOrderCanceled(address,address,address,uint256,uint256,uint256,uint8,bytes32)"(
    _universe: string,
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    _price: BigNumberish,
    _amount: BigNumberish,
    _type: BigNumberish,
    _orderHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  logZeroXOrderFilled(
    _universe: string,
    _market: string,
    _orderHash: BytesLike,
    _tradeGroupId: BytesLike,
    _orderType: BigNumberish,
    _addressData: string[],
    _uint256Data: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "logZeroXOrderFilled(address,address,bytes32,bytes32,uint8,address[],uint256[])"(
    _universe: string,
    _market: string,
    _orderHash: BytesLike,
    _tradeGroupId: BytesLike,
    _orderType: BigNumberish,
    _addressData: string[],
    _uint256Data: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lookup(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  "lookup(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  marketGetter(overrides?: CallOverrides): Promise<string>;

  "marketGetter()"(overrides?: CallOverrides): Promise<string>;

  registerContract(
    _key: BytesLike,
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerContract(bytes32,address)"(
    _key: BytesLike,
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  trustedSender(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "trustedSender(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uploader(overrides?: CallOverrides): Promise<string>;

  "uploader()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    claimMarketsProceeds(
      _markets: string[],
      _shareHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimMarketsProceeds(address[],address)"(
      _markets: string[],
      _shareHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finishDeployment(overrides?: CallOverrides): Promise<boolean>;

    "finishDeployment()"(overrides?: CallOverrides): Promise<boolean>;

    logMarketVolumeChanged(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logMarketVolumeChanged(address,address,uint256,uint256[],uint256)"(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logOrderFilled(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logOrderFilled(address,address,address,uint256,uint256,uint256,bytes32,bytes32)"(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logProfitLossChanged(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logProfitLossChanged(address,address,uint256,int256,uint256,int256,int256,int256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    logZeroXOrderCanceled(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "logZeroXOrderCanceled(address,address,address,uint256,uint256,uint256,uint8,bytes32)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    logZeroXOrderFilled(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "logZeroXOrderFilled(address,address,bytes32,bytes32,uint8,address[],uint256[])"(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    marketGetter(overrides?: CallOverrides): Promise<string>;

    "marketGetter()"(overrides?: CallOverrides): Promise<string>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    trustedSender(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "trustedSender(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uploader(overrides?: CallOverrides): Promise<string>;

    "uploader()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CancelZeroXOrder(
      universe: string | null,
      market: string | null,
      account: string | null,
      outcome: null,
      price: null,
      amount: null,
      orderType: null,
      orderHash: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, number, string],
      {
        universe: string;
        market: string;
        account: string;
        outcome: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        orderType: number;
        orderHash: string;
      }
    >;

    MarketVolumeChanged(
      universe: string | null,
      market: string | null,
      volume: null,
      outcomeVolumes: null,
      totalTrades: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber[], BigNumber, BigNumber],
      {
        universe: string;
        market: string;
        volume: BigNumber;
        outcomeVolumes: BigNumber[];
        totalTrades: BigNumber;
        timestamp: BigNumber;
      }
    >;

    OrderEvent(
      universe: string | null,
      market: string | null,
      eventType: BigNumberish | null,
      orderType: null,
      orderId: null,
      tradeGroupId: null,
      addressData: null,
      uint256Data: null
    ): TypedEventFilter<
      [string, string, number, number, string, string, string[], BigNumber[]],
      {
        universe: string;
        market: string;
        eventType: number;
        orderType: number;
        orderId: string;
        tradeGroupId: string;
        addressData: string[];
        uint256Data: BigNumber[];
      }
    >;

    ProfitLossChanged(
      universe: string | null,
      market: string | null,
      account: string | null,
      outcome: null,
      netPosition: null,
      avgPrice: null,
      realizedProfit: null,
      frozenFunds: null,
      realizedCost: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        universe: string;
        market: string;
        account: string;
        outcome: BigNumber;
        netPosition: BigNumber;
        avgPrice: BigNumber;
        realizedProfit: BigNumber;
        frozenFunds: BigNumber;
        realizedCost: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimMarketsProceeds(
      _markets: string[],
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimMarketsProceeds(address[],address)"(
      _markets: string[],
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finishDeployment(overrides?: Overrides): Promise<BigNumber>;

    "finishDeployment()"(overrides?: Overrides): Promise<BigNumber>;

    logMarketVolumeChanged(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logMarketVolumeChanged(address,address,uint256,uint256[],uint256)"(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logOrderFilled(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logOrderFilled(address,address,address,uint256,uint256,uint256,bytes32,bytes32)"(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logProfitLossChanged(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logProfitLossChanged(address,address,uint256,int256,uint256,int256,int256,int256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logZeroXOrderCanceled(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logZeroXOrderCanceled(address,address,address,uint256,uint256,uint256,uint8,bytes32)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    logZeroXOrderFilled(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "logZeroXOrderFilled(address,address,bytes32,bytes32,uint8,address[],uint256[])"(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    lookup(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketGetter(overrides?: CallOverrides): Promise<BigNumber>;

    "marketGetter()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    trustedSender(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "trustedSender(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uploader(overrides?: CallOverrides): Promise<BigNumber>;

    "uploader()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimMarketsProceeds(
      _markets: string[],
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMarketsProceeds(address[],address)"(
      _markets: string[],
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finishDeployment(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finishDeployment()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    logMarketVolumeChanged(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logMarketVolumeChanged(address,address,uint256,uint256[],uint256)"(
      _universe: string,
      _market: string,
      _volume: BigNumberish,
      _outcomeVolumes: BigNumberish[],
      _totalTrades: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logOrderFilled(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logOrderFilled(address,address,address,uint256,uint256,uint256,bytes32,bytes32)"(
      _universe: string,
      _creator: string,
      _filler: string,
      _price: BigNumberish,
      _fees: BigNumberish,
      _amountFilled: BigNumberish,
      _orderId: BytesLike,
      _tradeGroupId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logProfitLossChanged(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logProfitLossChanged(address,address,uint256,int256,uint256,int256,int256,int256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _netPosition: BigNumberish,
      _avgPrice: BigNumberish,
      _realizedProfit: BigNumberish,
      _frozenFunds: BigNumberish,
      _realizedCost: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logZeroXOrderCanceled(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logZeroXOrderCanceled(address,address,address,uint256,uint256,uint256,uint8,bytes32)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _price: BigNumberish,
      _amount: BigNumberish,
      _type: BigNumberish,
      _orderHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    logZeroXOrderFilled(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "logZeroXOrderFilled(address,address,bytes32,bytes32,uint8,address[],uint256[])"(
      _universe: string,
      _market: string,
      _orderHash: BytesLike,
      _tradeGroupId: BytesLike,
      _orderType: BigNumberish,
      _addressData: string[],
      _uint256Data: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lookup(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookup(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketGetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketGetter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerContract(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerContract(bytes32,address)"(
      _key: BytesLike,
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trustedSender(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "trustedSender(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uploader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uploader()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
