/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestBridgeContractInterface extends ethers.utils.Interface {
  functions: {
    "OICash()": FunctionFragment;
    "augurPushBridge()": FunctionFragment;
    "cash()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getAffiliateFeeDivisor(address)": FunctionFragment;
    "getCreatorFee(address)": FunctionFragment;
    "getNumTicks(address)": FunctionFragment;
    "getNumberOfOutcomes(address)": FunctionFragment;
    "getOrCacheReportingFeeDivisor()": FunctionFragment;
    "getOwner(address)": FunctionFragment;
    "getUniverse(address)": FunctionFragment;
    "getWinningPayoutNumerator(address,uint256)": FunctionFragment;
    "isFinalized(address)": FunctionFragment;
    "isFinalizedAsInvalid(address)": FunctionFragment;
    "isValid(address)": FunctionFragment;
    "marketData(address)": FunctionFragment;
    "moveFees(address)": FunctionFragment;
    "pullMarketData(address)": FunctionFragment;
    "pullReportingFeeDivisor()": FunctionFragment;
    "reportingFeeDivisor()": FunctionFragment;
    "universe()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "OICash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augurPushBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateFeeDivisor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getNumTicks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNumberOfOutcomes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "getUniverse", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWinningPayoutNumerator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isFinalized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isFinalizedAsInvalid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isValid", values: [string]): string;
  encodeFunctionData(functionFragment: "marketData", values: [string]): string;
  encodeFunctionData(functionFragment: "moveFees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pullMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pullReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "universe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "OICash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurPushBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalizedAsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "universe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class TestBridgeContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: TestBridgeContractInterface;

  functions: {
    OICash(overrides?: CallOverrides): Promise<[string]>;

    "OICash()"(overrides?: CallOverrides): Promise<[string]>;

    augurPushBridge(overrides?: CallOverrides): Promise<[string]>;

    "augurPushBridge()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAffiliateFeeDivisor(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAffiliateFeeDivisor(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreatorFee(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCreatorFee(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumTicks(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumTicks(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumberOfOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwner(_market: string, overrides?: CallOverrides): Promise<[string]>;

    "getOwner(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUniverse(_market: string, overrides?: CallOverrides): Promise<[string]>;

    "getUniverse(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWinningPayoutNumerator(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWinningPayoutNumerator(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isFinalized(_market: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isFinalized(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFinalizedAsInvalid(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFinalizedAsInvalid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValid(_market: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isValid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        finalized: boolean;
        invalid: boolean;
        owner: string;
        feeDivisor: BigNumber;
        universe: string;
        numTicks: BigNumber;
        numOutcomes: BigNumber;
        affiliateFeeDivisor: BigNumber;
      }
    >;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        finalized: boolean;
        invalid: boolean;
        owner: string;
        feeDivisor: BigNumber;
        universe: string;
        numTicks: BigNumber;
        numOutcomes: BigNumber;
        affiliateFeeDivisor: BigNumber;
      }
    >;

    moveFees(
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "moveFees(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pullMarketData(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pullMarketData(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pullReportingFeeDivisor(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pullReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reportingFeeDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reportingFeeDivisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    universe(overrides?: CallOverrides): Promise<[string]>;

    "universe()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  OICash(overrides?: CallOverrides): Promise<string>;

  "OICash()"(overrides?: CallOverrides): Promise<string>;

  augurPushBridge(overrides?: CallOverrides): Promise<string>;

  "augurPushBridge()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAffiliateFeeDivisor(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAffiliateFeeDivisor(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreatorFee(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getCreatorFee(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumTicks(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNumTicks(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfOutcomes(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumberOfOutcomes(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrCacheReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "getOrCacheReportingFeeDivisor()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(_market: string, overrides?: CallOverrides): Promise<string>;

  "getOwner(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getUniverse(_market: string, overrides?: CallOverrides): Promise<string>;

  "getUniverse(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getWinningPayoutNumerator(
    _market: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWinningPayoutNumerator(address,uint256)"(
    _market: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isFinalized(_market: string, overrides?: CallOverrides): Promise<boolean>;

  "isFinalized(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFinalizedAsInvalid(
    _market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFinalizedAsInvalid(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValid(_market: string, overrides?: CallOverrides): Promise<boolean>;

  "isValid(address)"(
    _market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      finalized: boolean;
      invalid: boolean;
      owner: string;
      feeDivisor: BigNumber;
      universe: string;
      numTicks: BigNumber;
      numOutcomes: BigNumber;
      affiliateFeeDivisor: BigNumber;
    }
  >;

  "marketData(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      finalized: boolean;
      invalid: boolean;
      owner: string;
      feeDivisor: BigNumber;
      universe: string;
      numTicks: BigNumber;
      numOutcomes: BigNumber;
      affiliateFeeDivisor: BigNumber;
    }
  >;

  moveFees(
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "moveFees(address)"(
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pullMarketData(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pullMarketData(address)"(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pullReportingFeeDivisor(overrides?: Overrides): Promise<ContractTransaction>;

  "pullReportingFeeDivisor()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "reportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  universe(overrides?: CallOverrides): Promise<string>;

  "universe()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    OICash(overrides?: CallOverrides): Promise<string>;

    "OICash()"(overrides?: CallOverrides): Promise<string>;

    augurPushBridge(overrides?: CallOverrides): Promise<string>;

    "augurPushBridge()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAffiliateFeeDivisor(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAffiliateFeeDivisor(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorFee(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreatorFee(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTicks(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTicks(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(_market: string, overrides?: CallOverrides): Promise<string>;

    "getOwner(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUniverse(_market: string, overrides?: CallOverrides): Promise<string>;

    "getUniverse(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getWinningPayoutNumerator(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutNumerator(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(_market: string, overrides?: CallOverrides): Promise<boolean>;

    "isFinalized(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFinalizedAsInvalid(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFinalizedAsInvalid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValid(_market: string, overrides?: CallOverrides): Promise<boolean>;

    "isValid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        finalized: boolean;
        invalid: boolean;
        owner: string;
        feeDivisor: BigNumber;
        universe: string;
        numTicks: BigNumber;
        numOutcomes: BigNumber;
        affiliateFeeDivisor: BigNumber;
      }
    >;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        finalized: boolean;
        invalid: boolean;
        owner: string;
        feeDivisor: BigNumber;
        universe: string;
        numTicks: BigNumber;
        numOutcomes: BigNumber;
        affiliateFeeDivisor: BigNumber;
      }
    >;

    moveFees(_target: string, overrides?: CallOverrides): Promise<boolean>;

    "moveFees(address)"(
      _target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pullMarketData(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "pullMarketData(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pullReportingFeeDivisor(overrides?: CallOverrides): Promise<boolean>;

    "pullReportingFeeDivisor()"(overrides?: CallOverrides): Promise<boolean>;

    reportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "reportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    universe(overrides?: CallOverrides): Promise<string>;

    "universe()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    OICash(overrides?: CallOverrides): Promise<BigNumber>;

    "OICash()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurPushBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "augurPushBridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAffiliateFeeDivisor(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAffiliateFeeDivisor(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatorFee(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreatorFee(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTicks(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTicks(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverse(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUniverse(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningPayoutNumerator(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningPayoutNumerator(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isFinalized(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalizedAsInvalid(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFinalizedAsInvalid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValid(_market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isValid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveFees(_target: string, overrides?: Overrides): Promise<BigNumber>;

    "moveFees(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pullMarketData(_market: string, overrides?: Overrides): Promise<BigNumber>;

    "pullMarketData(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pullReportingFeeDivisor(overrides?: Overrides): Promise<BigNumber>;

    "pullReportingFeeDivisor()"(overrides?: Overrides): Promise<BigNumber>;

    reportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "reportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    universe(overrides?: CallOverrides): Promise<BigNumber>;

    "universe()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OICash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OICash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurPushBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurPushBridge()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAffiliateFeeDivisor(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAffiliateFeeDivisor(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorFee(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreatorFee(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTicks(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumTicks(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfOutcomes(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfOutcomes(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniverse(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUniverse(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningPayoutNumerator(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningPayoutNumerator(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFinalized(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalizedAsInvalid(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFinalizedAsInvalid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValid(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValid(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveFees(
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "moveFees(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pullMarketData(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pullMarketData(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pullReportingFeeDivisor(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pullReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    universe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "universe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
