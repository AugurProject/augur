/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CancelOrderInterface extends ethers.utils.Interface {
  functions: {
    "augur()": FunctionFragment;
    "augurTrading()": FunctionFragment;
    "cancelOrder(bytes32)": FunctionFragment;
    "cancelOrders(bytes32[])": FunctionFragment;
    "cash()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "orders()": FunctionFragment;
    "profitLoss()": FunctionFragment;
    "shareToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augurTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "orders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profitLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profitLoss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;

  events: {};
}

export class CancelOrder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: CancelOrderInterface;

  functions: {
    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    augurTrading(overrides?: CallOverrides): Promise<[string]>;

    "augurTrading()"(overrides?: CallOverrides): Promise<[string]>;

    cancelOrder(
      _orderId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrder(bytes32)"(
      _orderId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelOrders(
      _orderIds: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrders(bytes32[])"(
      _orderIds: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    orders(overrides?: CallOverrides): Promise<[string]>;

    "orders()"(overrides?: CallOverrides): Promise<[string]>;

    profitLoss(overrides?: CallOverrides): Promise<[string]>;

    "profitLoss()"(overrides?: CallOverrides): Promise<[string]>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  augurTrading(overrides?: CallOverrides): Promise<string>;

  "augurTrading()"(overrides?: CallOverrides): Promise<string>;

  cancelOrder(
    _orderId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrder(bytes32)"(
    _orderId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelOrders(
    _orderIds: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrders(bytes32[])"(
    _orderIds: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  orders(overrides?: CallOverrides): Promise<string>;

  "orders()"(overrides?: CallOverrides): Promise<string>;

  profitLoss(overrides?: CallOverrides): Promise<string>;

  "profitLoss()"(overrides?: CallOverrides): Promise<string>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    augurTrading(overrides?: CallOverrides): Promise<string>;

    "augurTrading()"(overrides?: CallOverrides): Promise<string>;

    cancelOrder(
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelOrder(bytes32)"(
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOrders(
      _orderIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "cancelOrders(bytes32[])"(
      _orderIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    orders(overrides?: CallOverrides): Promise<string>;

    "orders()"(overrides?: CallOverrides): Promise<string>;

    profitLoss(overrides?: CallOverrides): Promise<string>;

    "profitLoss()"(overrides?: CallOverrides): Promise<string>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurTrading(overrides?: CallOverrides): Promise<BigNumber>;

    "augurTrading()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(_orderId: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "cancelOrder(bytes32)"(
      _orderId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelOrders(
      _orderIds: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrders(bytes32[])"(
      _orderIds: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    orders(overrides?: CallOverrides): Promise<BigNumber>;

    "orders()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitLoss(overrides?: CallOverrides): Promise<BigNumber>;

    "profitLoss()"(overrides?: CallOverrides): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurTrading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurTrading()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrder(
      _orderId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder(bytes32)"(
      _orderId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      _orderIds: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrders(bytes32[])"(
      _orderIds: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    orders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "orders()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitLoss(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "profitLoss()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
