/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AMMFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addAMMWithLiquidity(address,address,uint256,uint256,uint256,bool,address,string[])": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,address,uint256,string[])": FunctionFragment;
    "balanceOf(address,address,uint256,address)": FunctionFragment;
    "balancerPools(address)": FunctionFragment;
    "calculateAMMAddress(address,address,uint256)": FunctionFragment;
    "claimMarketsProceeds(address[],address[],address,bytes32)": FunctionFragment;
    "clone2Address(address,uint256,address)": FunctionFragment;
    "exchanges(address,address,uint256)": FunctionFragment;
    "getAMM(address,address,uint256)": FunctionFragment;
    "getBPool(address,address,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,string[])": FunctionFragment;
    "salt(address,address,uint256)": FunctionFragment;
    "shareTransfer(address,address,uint256,address,address,uint256,uint256,uint256)": FunctionFragment;
    "transferCash(address,address,uint256,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAMMWithLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAMMAddress",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMarketsProceeds",
    values: [string[], string[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clone2Address",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchanges",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAMM",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "salt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareTransfer",
    values: [
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCash",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAMMWithLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancerPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAMMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMarketsProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clone2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAMM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCash",
    data: BytesLike
  ): Result;

  events: {
    "AMMCreated(address,address,address,uint256,address,string[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AMMCreated"): EventFragment;
}

export class AMMFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AMMFactoryInterface;

  functions: {
    addAMMWithLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAMMWithLiquidity(address,address,uint256,uint256,uint256,bool,address,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,address,uint256,uint256,address,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "balanceOf(address,address,uint256,address)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balancerPools(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "balancerPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateAMMAddress(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "calculateAMMAddress(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    clone2Address(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "clone2Address(address,uint256,address)"(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    exchanges(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "exchanges(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAMM(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAMM(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,address,uint256,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    salt(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "salt(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shareTransfer(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "shareTransfer(address,address,uint256,address,address,uint256,uint256,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferCash(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferCash(address,address,uint256,address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAMMWithLiquidity(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _cash: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    _symbols: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAMMWithLiquidity(address,address,uint256,uint256,uint256,bool,address,string[])"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _cash: BigNumberish,
    _ratioFactor: BigNumberish,
    _keepLong: boolean,
    _recipient: string,
    _symbols: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _cash: BigNumberish,
    _recipient: string,
    _cashToInvalidPool: BigNumberish,
    _symbols: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,address,uint256,uint256,address,uint256,string[])"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _cash: BigNumberish,
    _recipient: string,
    _cashToInvalidPool: BigNumberish,
    _symbols: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "balanceOf(address,address,uint256,address)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balancerPools(arg0: string, overrides?: CallOverrides): Promise<string>;

  "balancerPools(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateAMMAddress(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "calculateAMMAddress(address,address,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  claimMarketsProceeds(
    _markets: string[],
    _shareTokens: string[],
    _shareHolder: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMarketsProceeds(address[],address[],address,bytes32)"(
    _markets: string[],
    _shareTokens: string[],
    _shareHolder: string,
    _fingerprint: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  clone2Address(
    target: string,
    salt: BigNumberish,
    creator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "clone2Address(address,uint256,address)"(
    target: string,
    salt: BigNumberish,
    creator: string,
    overrides?: CallOverrides
  ): Promise<string>;

  exchanges(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "exchanges(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAMM(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAMM(address,address,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBPool(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBPool(address,address,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _poolTokensToSell: BigNumberish,
    _symbols: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,address,uint256,uint256,string[])"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _poolTokensToSell: BigNumberish,
    _symbols: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  salt(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "salt(address,address,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shareTransfer(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _from: string,
    _to: string,
    _invalidAmount: BigNumberish,
    _noAmount: BigNumberish,
    _yesAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "shareTransfer(address,address,uint256,address,address,uint256,uint256,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _from: string,
    _to: string,
    _invalidAmount: BigNumberish,
    _noAmount: BigNumberish,
    _yesAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferCash(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _sender: string,
    _recipient: string,
    _quantity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferCash(address,address,uint256,address,address,uint256)"(
    _market: string,
    _para: string,
    _fee: BigNumberish,
    _sender: string,
    _recipient: string,
    _quantity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAMMWithLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _ammAddress: string; _lpTokens: BigNumber }
    >;

    "addAMMWithLiquidity(address,address,uint256,uint256,uint256,bool,address,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _ammAddress: string; _lpTokens: BigNumber }
    >;

    addLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256,address,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address,uint256,address)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancerPools(arg0: string, overrides?: CallOverrides): Promise<string>;

    "balancerPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateAMMAddress(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "calculateAMMAddress(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clone2Address(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "clone2Address(address,uint256,address)"(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    exchanges(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "exchanges(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAMM(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAMM(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    "removeLiquidity(address,address,uint256,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _shortShare: BigNumber; _longShare: BigNumber }
    >;

    salt(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salt(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareTransfer(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "shareTransfer(address,address,uint256,address,address,uint256,uint256,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCash(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferCash(address,address,uint256,address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AMMCreated(
      amm: null,
      market: null,
      shareToken: null,
      fee: null,
      bPool: null,
      _symbols: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string[]],
      {
        amm: string;
        market: string;
        shareToken: string;
        fee: BigNumber;
        bPool: string;
        _symbols: string[];
      }
    >;
  };

  estimateGas: {
    addAMMWithLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAMMWithLiquidity(address,address,uint256,uint256,uint256,bool,address,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidity(address,address,uint256,uint256,address,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "balanceOf(address,address,uint256,address)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balancerPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balancerPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateAMMAddress(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAMMAddress(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    clone2Address(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clone2Address(address,uint256,address)"(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchanges(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchanges(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAMM(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAMM(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,address,uint256,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    salt(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salt(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareTransfer(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "shareTransfer(address,address,uint256,address,address,uint256,uint256,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferCash(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferCash(address,address,uint256,address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAMMWithLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAMMWithLiquidity(address,address,uint256,uint256,uint256,bool,address,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _ratioFactor: BigNumberish,
      _keepLong: boolean,
      _recipient: string,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,address,uint256,uint256,address,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _cash: BigNumberish,
      _recipient: string,
      _cashToInvalidPool: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address,uint256,address)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balancerPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balancerPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAMMAddress(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAMMAddress(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimMarketsProceeds(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMarketsProceeds(address[],address[],address,bytes32)"(
      _markets: string[],
      _shareTokens: string[],
      _shareHolder: string,
      _fingerprint: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    clone2Address(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clone2Address(address,uint256,address)"(
      target: string,
      salt: BigNumberish,
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchanges(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchanges(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAMM(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAMM(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBPool(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBPool(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,address,uint256,uint256,string[])"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _poolTokensToSell: BigNumberish,
      _symbols: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    salt(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "salt(address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareTransfer(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "shareTransfer(address,address,uint256,address,address,uint256,uint256,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _from: string,
      _to: string,
      _invalidAmount: BigNumberish,
      _noAmount: BigNumberish,
      _yesAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferCash(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferCash(address,address,uint256,address,address,uint256)"(
      _market: string,
      _para: string,
      _fee: BigNumberish,
      _sender: string,
      _recipient: string,
      _quantity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
