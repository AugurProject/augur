/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AugurWalletInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR_TYPEHASH()": FunctionFragment;
    "MSG_TYPEHASH()": FunctionFragment;
    "addAuthorizedProxy(address)": FunctionFragment;
    "authorizedProxies(address)": FunctionFragment;
    "cash()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "executeTransaction(address,bytes,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getMessageHash(bytes)": FunctionFragment;
    "initialize(address,address,bytes32,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "isValidSignature(bytes,bytes)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeAuthorizedProxy(address)": FunctionFragment;
    "transferCash(address,uint256)": FunctionFragment;
    "withdrawAllFundsAsDai(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MSG_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedProxies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BytesLike,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllFundsAsDai",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MSG_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllFundsAsDai",
    data: BytesLike
  ): Result;

  events: {};
}

export class AugurWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AugurWalletInterface;

  functions: {
    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    MSG_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "MSG_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    addAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizedProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "authorizedProxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    executeTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeTransaction(address,bytes,uint256)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getMessageHash(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMessageHash(bytes)"(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,bytes32,address,address,address,address,address,address,address,address,address)"(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferCash(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferCash(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAllFundsAsDai(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "withdrawAllFundsAsDai(address,uint256)"(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  MSG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "MSG_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  addAuthorizedProxy(
    _authorizedProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAuthorizedProxy(address)"(
    _authorizedProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizedProxies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "authorizedProxies(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  executeTransaction(
    _to: string,
    _data: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeTransaction(address,bytes,uint256)"(
    _to: string,
    _data: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getMessageHash(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMessageHash(bytes)"(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _owner: string,
    _referralAddress: string,
    _fingerprint: BytesLike,
    _augur: string,
    _registry: string,
    _registryV2: string,
    _cash: string,
    _affiliates: string,
    _shareToken: string,
    _createOrder: string,
    _fillOrder: string,
    _zeroXTrade: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,bytes32,address,address,address,address,address,address,address,address,address)"(
    _owner: string,
    _referralAddress: string,
    _fingerprint: BytesLike,
    _augur: string,
    _registry: string,
    _registryV2: string,
    _cash: string,
    _affiliates: string,
    _shareToken: string,
    _createOrder: string,
    _fillOrder: string,
    _zeroXTrade: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isValidSignature(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "isValidSignature(bytes,bytes)"(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  removeAuthorizedProxy(
    _authorizedProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAuthorizedProxy(address)"(
    _authorizedProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferCash(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferCash(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAllFundsAsDai(
    _destination: string,
    _minExchangeRateInDai: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "withdrawAllFundsAsDai(address,uint256)"(
    _destination: string,
    _minExchangeRateInDai: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    MSG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "MSG_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    addAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizedProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "authorizedProxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    executeTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "executeTransaction(address,bytes,uint256)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getMessageHash(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMessageHash(bytes)"(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,bytes32,address,address,address,address,address,address,address,address,address)"(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    removeAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "removeAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferCash(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferCash(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllFundsAsDai(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdrawAllFundsAsDai(address,uint256)"(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MSG_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "MSG_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizedProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authorizedProxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeTransaction(address,bytes,uint256)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageHash(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMessageHash(bytes)"(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,bytes32,address,address,address,address,address,address,address,address,address)"(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferCash(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferCash(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAllFundsAsDai(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "withdrawAllFundsAsDai(address,uint256)"(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MSG_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MSG_TYPEHASH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizedProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorizedProxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeTransaction(address,bytes,uint256)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageHash(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMessageHash(bytes)"(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,bytes32,address,address,address,address,address,address,address,address,address)"(
      _owner: string,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _augur: string,
      _registry: string,
      _registryV2: string,
      _cash: string,
      _affiliates: string,
      _shareToken: string,
      _createOrder: string,
      _fillOrder: string,
      _zeroXTrade: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorizedProxy(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAuthorizedProxy(address)"(
      _authorizedProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferCash(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferCash(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAllFundsAsDai(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawAllFundsAsDai(address,uint256)"(
      _destination: string,
      _minExchangeRateInDai: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
