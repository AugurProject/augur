/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArbitrumBridgeInterface extends ethers.utils.Interface {
  functions: {
    "bridgeCash(address,address,address,uint256)": FunctionFragment;
    "depositOICash(address,address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pushBridgeData(address,address,uint256,uint256)": FunctionFragment;
    "pushFeeData(address,address,uint256,uint256)": FunctionFragment;
    "registerArbchain(address,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bridgeCash",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOICash",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushBridgeData",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushFeeData",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerArbchain",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bridgeCash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOICash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushBridgeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerArbchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class ArbitrumBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ArbitrumBridgeInterface;

  functions: {
    bridgeCash(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bridgeCash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositOICash(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositOICash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pushBridgeData(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pushBridgeData(address,address,uint256,uint256)"(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pushFeeData(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pushFeeData(address,address,uint256,uint256)"(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerArbchain(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerArbchain(address,address,address)"(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  bridgeCash(
    _arbChainAddress: string,
    _cash: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bridgeCash(address,address,address,uint256)"(
    _arbChainAddress: string,
    _cash: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositOICash(
    _arbChainAddress: string,
    _universe: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositOICash(address,address,address,uint256)"(
    _arbChainAddress: string,
    _universe: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pushBridgeData(
    _marketAddress: string,
    _arbChainAddress: string,
    _arbGasPrice: BigNumberish,
    _arbGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pushBridgeData(address,address,uint256,uint256)"(
    _marketAddress: string,
    _arbChainAddress: string,
    _arbGasPrice: BigNumberish,
    _arbGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pushFeeData(
    _universe: string,
    _arbChainAddress: string,
    _arbGasPrice: BigNumberish,
    _arbGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pushFeeData(address,address,uint256,uint256)"(
    _universe: string,
    _arbChainAddress: string,
    _arbGasPrice: BigNumberish,
    _arbGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerArbchain(
    _arbChainAddress: string,
    _inboxAddress: string,
    _marketGetterAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerArbchain(address,address,address)"(
    _arbChainAddress: string,
    _inboxAddress: string,
    _marketGetterAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeCash(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgeCash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOICash(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositOICash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pushBridgeData(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pushBridgeData(address,address,uint256,uint256)"(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pushFeeData(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pushFeeData(address,address,uint256,uint256)"(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerArbchain(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerArbchain(address,address,address)"(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bridgeCash(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bridgeCash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositOICash(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositOICash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pushBridgeData(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pushBridgeData(address,address,uint256,uint256)"(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pushFeeData(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pushFeeData(address,address,uint256,uint256)"(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerArbchain(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerArbchain(address,address,address)"(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeCash(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bridgeCash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _cash: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositOICash(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositOICash(address,address,address,uint256)"(
      _arbChainAddress: string,
      _universe: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushBridgeData(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pushBridgeData(address,address,uint256,uint256)"(
      _marketAddress: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pushFeeData(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pushFeeData(address,address,uint256,uint256)"(
      _universe: string,
      _arbChainAddress: string,
      _arbGasPrice: BigNumberish,
      _arbGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerArbchain(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerArbchain(address,address,address)"(
      _arbChainAddress: string,
      _inboxAddress: string,
      _marketGetterAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
