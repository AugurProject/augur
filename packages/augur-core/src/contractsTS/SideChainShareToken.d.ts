/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SideChainShareTokenInterface extends ethers.utils.Interface {
  functions: {
    "_balances(uint256,address)": FunctionFragment;
    "_operatorApprovals(address,address)": FunctionFragment;
    "_supplys(uint256)": FunctionFragment;
    "affiliates()": FunctionFragment;
    "augur()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "balanceOfMarketOutcome(address,uint256,address)": FunctionFragment;
    "buyCompleteSets(address,address,uint256)": FunctionFragment;
    "buyCompleteSetsForTrade(address,uint256,uint256,address,address)": FunctionFragment;
    "calculateCreatorFee(address,uint256)": FunctionFragment;
    "calculateProceeds(address,uint256,uint256)": FunctionFragment;
    "calculateReportingFee(address,uint256)": FunctionFragment;
    "cash()": FunctionFragment;
    "claimTradingProceeds(address,address)": FunctionFragment;
    "deriveMarketCreatorFeeAmount(address,uint256)": FunctionFragment;
    "distributeMarketCreatorFees(address)": FunctionFragment;
    "divideUpWinnings(address,uint256,uint256)": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getMarket(uint256)": FunctionFragment;
    "getOutcome(uint256)": FunctionFragment;
    "getTokenId(address,uint256)": FunctionFragment;
    "getTokenIds(address,uint256[])": FunctionFragment;
    "getTypeName()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lowestBalanceOfMarketOutcomes(address,uint256[],address)": FunctionFragment;
    "marketGetter()": FunctionFragment;
    "name()": FunctionFragment;
    "publicBuyCompleteSets(address,uint256)": FunctionFragment;
    "publicSellCompleteSets(address,uint256)": FunctionFragment;
    "pushRepFees()": FunctionFragment;
    "repFeeTarget()": FunctionFragment;
    "repFees()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "sellCompleteSets(address,address,address,uint256)": FunctionFragment;
    "sellCompleteSetsForTrade(address,uint256,uint256,address,address,address,address,uint256,address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "totalSupplyForMarketOutcome(address,uint256)": FunctionFragment;
    "unpackTokenId(uint256)": FunctionFragment;
    "unsafeBatchTransferFrom(address,address,uint256[],uint256[])": FunctionFragment;
    "unsafeTransferFrom(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_balances",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_operatorApprovals",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_supplys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfMarketOutcome",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCompleteSets",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCompleteSetsForTrade",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCreatorFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProceeds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReportingFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimTradingProceeds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveMarketCreatorFeeAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeMarketCreatorFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "divideUpWinnings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutcome",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIds",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lowestBalanceOfMarketOutcomes",
    values: [string, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketGetter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicBuyCompleteSets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSellCompleteSets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushRepFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repFeeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCompleteSets",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCompleteSetsForTrade",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyForMarketOutcome",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_operatorApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_supplys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "affiliates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfMarketOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCompleteSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCompleteSetsForTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCreatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReportingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTradingProceeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveMarketCreatorFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeMarketCreatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divideUpWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOutcome", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowestBalanceOfMarketOutcomes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicBuyCompleteSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSellCompleteSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushRepFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repFeeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCompleteSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCompleteSetsForTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyForMarketOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpackTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeTransferFrom",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class SideChainShareToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: SideChainShareTokenInterface;

  functions: {
    _balances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_balances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _operatorApprovals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "_operatorApprovals(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _supplys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_supplys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    affiliates(overrides?: CallOverrides): Promise<[string]>;

    "affiliates()"(overrides?: CallOverrides): Promise<[string]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    balanceOfMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfMarketOutcome(address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyCompleteSets(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyCompleteSets(address,address,uint256)"(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyCompleteSetsForTrade(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyCompleteSetsForTrade(address,uint256,uint256,address,address)"(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calculateCreatorFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateCreatorFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateProceeds(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateProceeds(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateReportingFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateReportingFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deriveMarketCreatorFeeAmount(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "deriveMarketCreatorFeeAmount(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeMarketCreatorFees(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributeMarketCreatorFees(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    divideUpWinnings(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _proceeds: BigNumber;
        _shareHolderShare: BigNumber;
        _creatorShare: BigNumber;
        _reporterShare: BigNumber;
      }
    >;

    "divideUpWinnings(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _proceeds: BigNumber;
        _shareHolderShare: BigNumber;
        _creatorShare: BigNumber;
        _reporterShare: BigNumber;
      }
    >;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getMarket(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMarket(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOutcome(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOutcome(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenId(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    "getTokenId(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    getTokenIds(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _tokenIds: BigNumber[] }>;

    "getTokenIds(address,uint256[])"(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _tokenIds: BigNumber[] }>;

    getTypeName(overrides?: CallOverrides): Promise<[string]>;

    "getTypeName()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _augur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lowestBalanceOfMarketOutcomes(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lowestBalanceOfMarketOutcomes(address,uint256[],address)"(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketGetter(overrides?: CallOverrides): Promise<[string]>;

    "marketGetter()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    publicBuyCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publicBuyCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    publicSellCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publicSellCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pushRepFees(overrides?: Overrides): Promise<ContractTransaction>;

    "pushRepFees()"(overrides?: Overrides): Promise<ContractTransaction>;

    repFeeTarget(overrides?: CallOverrides): Promise<[string]>;

    "repFeeTarget()"(overrides?: CallOverrides): Promise<[string]>;

    repFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    "repFees()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellCompleteSets(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellCompleteSets(address,address,address,uint256)"(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellCompleteSetsForTrade(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellCompleteSetsForTrade(address,uint256,uint256,address,address,address,address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplyForMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyForMarketOutcome(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _market: string; _outcome: BigNumber }>;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _market: string; _outcome: BigNumber }>;

    unsafeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsafeBatchTransferFrom(address,address,uint256[],uint256[])"(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsafeTransferFrom(address,address,uint256,uint256)"(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _balances(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_balances(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _operatorApprovals(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_operatorApprovals(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _supplys(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_supplys(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  affiliates(overrides?: CallOverrides): Promise<string>;

  "affiliates()"(overrides?: CallOverrides): Promise<string>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  balanceOfMarketOutcome(
    _market: string,
    _outcome: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfMarketOutcome(address,uint256,address)"(
    _market: string,
    _outcome: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyCompleteSets(
    _market: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyCompleteSets(address,address,uint256)"(
    _market: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyCompleteSetsForTrade(
    _market: string,
    _amount: BigNumberish,
    _longOutcome: BigNumberish,
    _longRecipient: string,
    _shortRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyCompleteSetsForTrade(address,uint256,uint256,address,address)"(
    _market: string,
    _amount: BigNumberish,
    _longOutcome: BigNumberish,
    _longRecipient: string,
    _shortRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calculateCreatorFee(
    _market: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateCreatorFee(address,uint256)"(
    _market: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateProceeds(
    _market: string,
    _outcome: BigNumberish,
    _numberOfShares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateProceeds(address,uint256,uint256)"(
    _market: string,
    _outcome: BigNumberish,
    _numberOfShares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateReportingFee(
    _market: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateReportingFee(address,uint256)"(
    _market: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  claimTradingProceeds(
    _market: string,
    _shareHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimTradingProceeds(address,address)"(
    _market: string,
    _shareHolder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deriveMarketCreatorFeeAmount(
    _market: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deriveMarketCreatorFeeAmount(address,uint256)"(
    _market: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeMarketCreatorFees(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributeMarketCreatorFees(address)"(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  divideUpWinnings(
    _market: string,
    _outcome: BigNumberish,
    _numberOfShares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _proceeds: BigNumber;
      _shareHolderShare: BigNumber;
      _creatorShare: BigNumber;
      _reporterShare: BigNumber;
    }
  >;

  "divideUpWinnings(address,uint256,uint256)"(
    _market: string,
    _outcome: BigNumberish,
    _numberOfShares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _proceeds: BigNumber;
      _shareHolderShare: BigNumber;
      _creatorShare: BigNumber;
      _reporterShare: BigNumber;
    }
  >;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getMarket(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getMarket(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOutcome(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOutcome(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenId(
    _market: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenId(address,uint256)"(
    _market: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenIds(
    _market: string,
    _outcomes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getTokenIds(address,uint256[])"(
    _market: string,
    _outcomes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTypeName(overrides?: CallOverrides): Promise<string>;

  "getTypeName()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _augur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _augur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lowestBalanceOfMarketOutcomes(
    _market: string,
    _outcomes: BigNumberish[],
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lowestBalanceOfMarketOutcomes(address,uint256[],address)"(
    _market: string,
    _outcomes: BigNumberish[],
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketGetter(overrides?: CallOverrides): Promise<string>;

  "marketGetter()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  publicBuyCompleteSets(
    _market: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "publicBuyCompleteSets(address,uint256)"(
    _market: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  publicSellCompleteSets(
    _market: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "publicSellCompleteSets(address,uint256)"(
    _market: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pushRepFees(overrides?: Overrides): Promise<ContractTransaction>;

  "pushRepFees()"(overrides?: Overrides): Promise<ContractTransaction>;

  repFeeTarget(overrides?: CallOverrides): Promise<string>;

  "repFeeTarget()"(overrides?: CallOverrides): Promise<string>;

  repFees(overrides?: CallOverrides): Promise<BigNumber>;

  "repFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellCompleteSets(
    _market: string,
    _holder: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellCompleteSets(address,address,address,uint256)"(
    _market: string,
    _holder: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellCompleteSetsForTrade(
    _market: string,
    _outcome: BigNumberish,
    _amount: BigNumberish,
    _shortParticipant: string,
    _longParticipant: string,
    _shortRecipient: string,
    _longRecipient: string,
    _price: BigNumberish,
    _sourceAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellCompleteSetsForTrade(address,uint256,uint256,address,address,address,address,uint256,address)"(
    _market: string,
    _outcome: BigNumberish,
    _amount: BigNumberish,
    _shortParticipant: string,
    _longParticipant: string,
    _shortRecipient: string,
    _longRecipient: string,
    _price: BigNumberish,
    _sourceAccount: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyForMarketOutcome(
    _market: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyForMarketOutcome(address,uint256)"(
    _market: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpackTokenId(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _market: string; _outcome: BigNumber }>;

  "unpackTokenId(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _market: string; _outcome: BigNumber }>;

  unsafeBatchTransferFrom(
    _from: string,
    _to: string,
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsafeBatchTransferFrom(address,address,uint256[],uint256[])"(
    _from: string,
    _to: string,
    _ids: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsafeTransferFrom(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsafeTransferFrom(address,address,uint256,uint256)"(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _balances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_balances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _operatorApprovals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_operatorApprovals(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _supplys(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_supplys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliates(overrides?: CallOverrides): Promise<string>;

    "affiliates()"(overrides?: CallOverrides): Promise<string>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    balanceOfMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfMarketOutcome(address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCompleteSets(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "buyCompleteSets(address,address,uint256)"(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyCompleteSetsForTrade(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "buyCompleteSetsForTrade(address,uint256,uint256,address,address)"(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateCreatorFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCreatorFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProceeds(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateProceeds(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateReportingFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateReportingFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    deriveMarketCreatorFeeAmount(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveMarketCreatorFeeAmount(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeMarketCreatorFees(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeMarketCreatorFees(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    divideUpWinnings(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _proceeds: BigNumber;
        _shareHolderShare: BigNumber;
        _creatorShare: BigNumber;
        _reporterShare: BigNumber;
      }
    >;

    "divideUpWinnings(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _proceeds: BigNumber;
        _shareHolderShare: BigNumber;
        _creatorShare: BigNumber;
        _reporterShare: BigNumber;
      }
    >;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getMarket(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarket(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOutcome(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutcome(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIds(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTokenIds(address,uint256[])"(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTypeName(overrides?: CallOverrides): Promise<string>;

    "getTypeName()"(overrides?: CallOverrides): Promise<string>;

    initialize(_augur: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _augur: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lowestBalanceOfMarketOutcomes(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lowestBalanceOfMarketOutcomes(address,uint256[],address)"(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketGetter(overrides?: CallOverrides): Promise<string>;

    "marketGetter()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    publicBuyCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "publicBuyCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    publicSellCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _creatorFee: BigNumber;
        _reportingFee: BigNumber;
      }
    >;

    "publicSellCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _creatorFee: BigNumber;
        _reportingFee: BigNumber;
      }
    >;

    pushRepFees(overrides?: CallOverrides): Promise<boolean>;

    "pushRepFees()"(overrides?: CallOverrides): Promise<boolean>;

    repFeeTarget(overrides?: CallOverrides): Promise<string>;

    "repFeeTarget()"(overrides?: CallOverrides): Promise<string>;

    repFees(overrides?: CallOverrides): Promise<BigNumber>;

    "repFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellCompleteSets(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _creatorFee: BigNumber;
        _reportingFee: BigNumber;
      }
    >;

    "sellCompleteSets(address,address,address,uint256)"(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _creatorFee: BigNumber;
        _reportingFee: BigNumber;
      }
    >;

    sellCompleteSetsForTrade(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _creatorFee: BigNumber;
        _reportingFee: BigNumber;
      }
    >;

    "sellCompleteSetsForTrade(address,uint256,uint256,address,address,address,address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _creatorFee: BigNumber;
        _reportingFee: BigNumber;
      }
    >;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyForMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyForMarketOutcome(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _market: string; _outcome: BigNumber }>;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { _market: string; _outcome: BigNumber }>;

    unsafeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unsafeBatchTransferFrom(address,address,uint256[],uint256[])"(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsafeTransferFrom(address,address,uint256,uint256)"(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    URI(
      value: null,
      id: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    _balances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_balances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _operatorApprovals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_operatorApprovals(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _supplys(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_supplys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    affiliates(overrides?: CallOverrides): Promise<BigNumber>;

    "affiliates()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfMarketOutcome(address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCompleteSets(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyCompleteSets(address,address,uint256)"(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyCompleteSetsForTrade(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyCompleteSetsForTrade(address,uint256,uint256,address,address)"(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calculateCreatorFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCreatorFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProceeds(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateProceeds(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateReportingFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateReportingFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deriveMarketCreatorFeeAmount(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveMarketCreatorFeeAmount(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeMarketCreatorFees(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributeMarketCreatorFees(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    divideUpWinnings(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "divideUpWinnings(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarket(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutcome(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutcome(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIds(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenIds(address,uint256[])"(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypeName(overrides?: CallOverrides): Promise<BigNumber>;

    "getTypeName()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_augur: string, overrides?: Overrides): Promise<BigNumber>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lowestBalanceOfMarketOutcomes(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lowestBalanceOfMarketOutcomes(address,uint256[],address)"(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketGetter(overrides?: CallOverrides): Promise<BigNumber>;

    "marketGetter()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicBuyCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "publicBuyCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    publicSellCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "publicSellCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pushRepFees(overrides?: Overrides): Promise<BigNumber>;

    "pushRepFees()"(overrides?: Overrides): Promise<BigNumber>;

    repFeeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "repFeeTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    repFees(overrides?: CallOverrides): Promise<BigNumber>;

    "repFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellCompleteSets(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellCompleteSets(address,address,address,uint256)"(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellCompleteSetsForTrade(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellCompleteSetsForTrade(address,uint256,uint256,address,address,address,address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyForMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyForMarketOutcome(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsafeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsafeBatchTransferFrom(address,address,uint256[],uint256[])"(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsafeTransferFrom(address,address,uint256,uint256)"(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _balances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_balances(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _operatorApprovals(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_operatorApprovals(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _supplys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_supplys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    affiliates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "affiliates()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfMarketOutcome(address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCompleteSets(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyCompleteSets(address,address,uint256)"(
      _market: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyCompleteSetsForTrade(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyCompleteSetsForTrade(address,uint256,uint256,address,address)"(
      _market: string,
      _amount: BigNumberish,
      _longOutcome: BigNumberish,
      _longRecipient: string,
      _shortRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calculateCreatorFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateCreatorFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateProceeds(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateProceeds(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateReportingFee(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateReportingFee(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTradingProceeds(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimTradingProceeds(address,address)"(
      _market: string,
      _shareHolder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deriveMarketCreatorFeeAmount(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deriveMarketCreatorFeeAmount(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeMarketCreatorFees(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributeMarketCreatorFees(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    divideUpWinnings(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "divideUpWinnings(address,uint256,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      _numberOfShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarket(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutcome(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutcome(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenId(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIds(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenIds(address,uint256[])"(
      _market: string,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypeName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTypeName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _augur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lowestBalanceOfMarketOutcomes(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lowestBalanceOfMarketOutcomes(address,uint256[],address)"(
      _market: string,
      _outcomes: BigNumberish[],
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketGetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketGetter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicBuyCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publicBuyCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    publicSellCompleteSets(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publicSellCompleteSets(address,uint256)"(
      _market: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pushRepFees(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pushRepFees()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    repFeeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "repFeeTarget()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "repFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellCompleteSets(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellCompleteSets(address,address,address,uint256)"(
      _market: string,
      _holder: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellCompleteSetsForTrade(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellCompleteSetsForTrade(address,uint256,uint256,address,address,address,address,uint256,address)"(
      _market: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _shortParticipant: string,
      _longParticipant: string,
      _shortRecipient: string,
      _longRecipient: string,
      _price: BigNumberish,
      _sourceAccount: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyForMarketOutcome(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyForMarketOutcome(address,uint256)"(
      _market: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpackTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unpackTokenId(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsafeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsafeBatchTransferFrom(address,address,uint256[],uint256[])"(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsafeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsafeTransferFrom(address,address,uint256,uint256)"(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
