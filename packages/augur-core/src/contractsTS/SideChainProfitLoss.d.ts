/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SideChainProfitLossInterface extends ethers.utils.Interface {
  functions: {
    "adjustTraderProfitForFees(address,address,uint256,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "augurTrading()": FunctionFragment;
    "fillOrder()": FunctionFragment;
    "getAvgPrice(address,address,uint256)": FunctionFragment;
    "getFrozenFunds(address,address,uint256)": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getNetPosition(address,address,uint256)": FunctionFragment;
    "getRealizedCost(address,address,uint256)": FunctionFragment;
    "getRealizedProfit(address,address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "marketGetter()": FunctionFragment;
    "recordClaim(address,address,uint256[])": FunctionFragment;
    "recordFrozenFundChange(address,address,address,uint256,int256)": FunctionFragment;
    "recordTrade(address,address,address,address,uint256,int256,int256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "shareToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustTraderProfitForFees",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augurTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fillOrder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvgPrice",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFrozenFunds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetPosition",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealizedCost",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealizedProfit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketGetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordClaim",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "recordFrozenFundChange",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordTrade",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustTraderProfitForFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvgPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFrozenFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealizedCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealizedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordFrozenFundChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;

  events: {};
}

export class SideChainProfitLoss extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: SideChainProfitLossInterface;

  functions: {
    adjustTraderProfitForFees(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adjustTraderProfitForFees(address,address,uint256,uint256)"(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    augurTrading(overrides?: CallOverrides): Promise<[string]>;

    "augurTrading()"(overrides?: CallOverrides): Promise<[string]>;

    fillOrder(overrides?: CallOverrides): Promise<[string]>;

    "fillOrder()"(overrides?: CallOverrides): Promise<[string]>;

    getAvgPrice(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAvgPrice(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFrozenFunds(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFrozenFunds(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getNetPosition(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNetPosition(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRealizedCost(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRealizedCost(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRealizedProfit(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRealizedProfit(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketGetter(overrides?: CallOverrides): Promise<[string]>;

    "marketGetter()"(overrides?: CallOverrides): Promise<[string]>;

    recordClaim(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordClaim(address,address,uint256[])"(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recordFrozenFundChange(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordFrozenFundChange(address,address,address,uint256,int256)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recordTrade(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordTrade(address,address,address,address,uint256,int256,int256,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  adjustTraderProfitForFees(
    _market: string,
    _trader: string,
    _outcome: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adjustTraderProfitForFees(address,address,uint256,uint256)"(
    _market: string,
    _trader: string,
    _outcome: BigNumberish,
    _fees: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  augurTrading(overrides?: CallOverrides): Promise<string>;

  "augurTrading()"(overrides?: CallOverrides): Promise<string>;

  fillOrder(overrides?: CallOverrides): Promise<string>;

  "fillOrder()"(overrides?: CallOverrides): Promise<string>;

  getAvgPrice(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAvgPrice(address,address,uint256)"(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFrozenFunds(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFrozenFunds(address,address,uint256)"(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getNetPosition(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNetPosition(address,address,uint256)"(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRealizedCost(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRealizedCost(address,address,uint256)"(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRealizedProfit(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRealizedProfit(address,address,uint256)"(
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _augurTrading: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketGetter(overrides?: CallOverrides): Promise<string>;

  "marketGetter()"(overrides?: CallOverrides): Promise<string>;

  recordClaim(
    _market: string,
    _account: string,
    _outcomeFees: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordClaim(address,address,uint256[])"(
    _market: string,
    _account: string,
    _outcomeFees: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recordFrozenFundChange(
    _universe: string,
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    _frozenFundDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordFrozenFundChange(address,address,address,uint256,int256)"(
    _universe: string,
    _market: string,
    _account: string,
    _outcome: BigNumberish,
    _frozenFundDelta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recordTrade(
    _universe: string,
    _market: string,
    _longAddress: string,
    _shortAddress: string,
    _outcome: BigNumberish,
    _amount: BigNumberish,
    _price: BigNumberish,
    _numLongTokens: BigNumberish,
    _numShortTokens: BigNumberish,
    _numLongShares: BigNumberish,
    _numShortShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordTrade(address,address,address,address,uint256,int256,int256,uint256,uint256,uint256,uint256)"(
    _universe: string,
    _market: string,
    _longAddress: string,
    _shortAddress: string,
    _outcome: BigNumberish,
    _amount: BigNumberish,
    _price: BigNumberish,
    _numLongTokens: BigNumberish,
    _numShortTokens: BigNumberish,
    _numLongShares: BigNumberish,
    _numShortShares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adjustTraderProfitForFees(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "adjustTraderProfitForFees(address,address,uint256,uint256)"(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    augurTrading(overrides?: CallOverrides): Promise<string>;

    "augurTrading()"(overrides?: CallOverrides): Promise<string>;

    fillOrder(overrides?: CallOverrides): Promise<string>;

    "fillOrder()"(overrides?: CallOverrides): Promise<string>;

    getAvgPrice(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvgPrice(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFrozenFunds(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFrozenFunds(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getNetPosition(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNetPosition(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealizedCost(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealizedCost(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealizedProfit(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealizedProfit(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<void>;

    marketGetter(overrides?: CallOverrides): Promise<string>;

    "marketGetter()"(overrides?: CallOverrides): Promise<string>;

    recordClaim(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "recordClaim(address,address,uint256[])"(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    recordFrozenFundChange(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "recordFrozenFundChange(address,address,address,uint256,int256)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recordTrade(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "recordTrade(address,address,address,address,uint256,int256,int256,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    adjustTraderProfitForFees(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adjustTraderProfitForFees(address,address,uint256,uint256)"(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurTrading(overrides?: CallOverrides): Promise<BigNumber>;

    "augurTrading()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillOrder(overrides?: CallOverrides): Promise<BigNumber>;

    "fillOrder()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAvgPrice(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvgPrice(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFrozenFunds(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFrozenFunds(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNetPosition(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNetPosition(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealizedCost(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealizedCost(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealizedProfit(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealizedProfit(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketGetter(overrides?: CallOverrides): Promise<BigNumber>;

    "marketGetter()"(overrides?: CallOverrides): Promise<BigNumber>;

    recordClaim(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordClaim(address,address,uint256[])"(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    recordFrozenFundChange(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordFrozenFundChange(address,address,address,uint256,int256)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recordTrade(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordTrade(address,address,address,address,uint256,int256,int256,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustTraderProfitForFees(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adjustTraderProfitForFees(address,address,uint256,uint256)"(
      _market: string,
      _trader: string,
      _outcome: BigNumberish,
      _fees: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurTrading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurTrading()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillOrder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fillOrder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvgPrice(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAvgPrice(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFrozenFunds(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFrozenFunds(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetPosition(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNetPosition(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealizedCost(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealizedCost(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealizedProfit(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealizedProfit(address,address,uint256)"(
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketGetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketGetter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordClaim(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordClaim(address,address,uint256[])"(
      _market: string,
      _account: string,
      _outcomeFees: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recordFrozenFundChange(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordFrozenFundChange(address,address,address,uint256,int256)"(
      _universe: string,
      _market: string,
      _account: string,
      _outcome: BigNumberish,
      _frozenFundDelta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recordTrade(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordTrade(address,address,address,address,uint256,int256,int256,uint256,uint256,uint256,uint256)"(
      _universe: string,
      _market: string,
      _longAddress: string,
      _shortAddress: string,
      _outcome: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _numLongTokens: BigNumberish,
      _numShortTokens: BigNumberish,
      _numLongShares: BigNumberish,
      _numShortShares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
