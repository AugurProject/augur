/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC20ProxyInterface extends ethers.utils.Interface {
  functions: {
    "addAuthorizedAddress(address)": FunctionFragment;
    "authorities(uint256)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "getAuthorizedAddresses()": FunctionFragment;
    "getProxyId()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAuthorizedAddress(address)": FunctionFragment;
    "removeAuthorizedAddressAtIndex(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedAddressAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProxyId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedAddressAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedAddressAdded(address,address)": EventFragment;
    "AuthorizedAddressRemoved(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ERC20Proxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ERC20ProxyInterface;

  functions: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAuthorizedAddress(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "authorities(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    "getAuthorizedAddresses()"(overrides?: CallOverrides): Promise<[string[]]>;

    getProxyId(overrides?: CallOverrides): Promise<[string]>;

    "getProxyId()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAuthorizedAddress(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAuthorizedAddressAtIndex(address,uint256)"(
      target: string,
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAuthorizedAddress(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAuthorizedAddress(address)"(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorities(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "authorities(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "authorized(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

  "getAuthorizedAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  getProxyId(overrides?: CallOverrides): Promise<string>;

  "getProxyId()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeAuthorizedAddress(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAuthorizedAddress(address)"(
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAuthorizedAddressAtIndex(
    target: string,
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAuthorizedAddressAtIndex(address,uint256)"(
    target: string,
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuthorizedAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAuthorizedAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authorities(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "authorities(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

    "getAuthorizedAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    getProxyId(overrides?: CallOverrides): Promise<string>;

    "getProxyId()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeAuthorizedAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAuthorizedAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAuthorizedAddressAtIndex(address,uint256)"(
      target: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuthorizedAddressAdded(
      target: string | null,
      caller: string | null
    ): TypedEventFilter<[string, string], { target: string; caller: string }>;

    AuthorizedAddressRemoved(
      target: string | null,
      caller: string | null
    ): TypedEventFilter<[string, string], { target: string; caller: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAuthorizedAddress(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authorities(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "getAuthorizedAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyId(overrides?: CallOverrides): Promise<BigNumber>;

    "getProxyId()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAuthorizedAddress(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAuthorizedAddressAtIndex(address,uint256)"(
      target: string,
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedAddress(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAuthorizedAddress(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorities(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizedAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuthorizedAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProxyId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorizedAddress(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAuthorizedAddress(address)"(
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddressAtIndex(
      target: string,
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAuthorizedAddressAtIndex(address,uint256)"(
      target: string,
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
