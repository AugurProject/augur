/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FormulasInterface extends ethers.utils.Interface {
  functions: {
    "calculateDesignatedReportNoShowBond(address,uint256,uint256)": FunctionFragment;
    "calculateDesignatedReportStake(address,uint256,uint256)": FunctionFragment;
    "calculateFloatingValue(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateValidityBond(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateDesignatedReportNoShowBond",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDesignatedReportStake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFloatingValue",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateValidityBond",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateDesignatedReportNoShowBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDesignatedReportStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFloatingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateValidityBond",
    data: BytesLike
  ): Result;

  events: {};
}

export class Formulas extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: FormulasInterface;

  functions: {
    calculateDesignatedReportNoShowBond(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateDesignatedReportNoShowBond(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateDesignatedReportStake(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateDesignatedReportStake(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateFloatingValue(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _newValue: BigNumber }>;

    "calculateFloatingValue(uint256,uint256,uint256,uint256,uint256)"(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _newValue: BigNumber }>;

    calculateValidityBond(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateValidityBond(address,uint256)"(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calculateDesignatedReportNoShowBond(
    _previousDisputeWindow: string,
    _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
    _initialReportMinValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateDesignatedReportNoShowBond(address,uint256,uint256)"(
    _previousDisputeWindow: string,
    _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
    _initialReportMinValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateDesignatedReportStake(
    _previousDisputeWindow: string,
    _previousDesignatedReportStakeInAttoRep: BigNumberish,
    _initialReportMinValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateDesignatedReportStake(address,uint256,uint256)"(
    _previousDisputeWindow: string,
    _previousDesignatedReportStakeInAttoRep: BigNumberish,
    _initialReportMinValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateFloatingValue(
    _totalBad: BigNumberish,
    _total: BigNumberish,
    _targetDivisor: BigNumberish,
    _previousValue: BigNumberish,
    _floor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateFloatingValue(uint256,uint256,uint256,uint256,uint256)"(
    _totalBad: BigNumberish,
    _total: BigNumberish,
    _targetDivisor: BigNumberish,
    _previousValue: BigNumberish,
    _floor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateValidityBond(
    _previousDisputeWindow: string,
    _previousValidityBondInAttoCash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateValidityBond(address,uint256)"(
    _previousDisputeWindow: string,
    _previousValidityBondInAttoCash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculateDesignatedReportNoShowBond(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDesignatedReportNoShowBond(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDesignatedReportStake(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDesignatedReportStake(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFloatingValue(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFloatingValue(uint256,uint256,uint256,uint256,uint256)"(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateValidityBond(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateValidityBond(address,uint256)"(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateDesignatedReportNoShowBond(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDesignatedReportNoShowBond(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDesignatedReportStake(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateDesignatedReportStake(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFloatingValue(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFloatingValue(uint256,uint256,uint256,uint256,uint256)"(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateValidityBond(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateValidityBond(address,uint256)"(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateDesignatedReportNoShowBond(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateDesignatedReportNoShowBond(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportNoShowBondInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDesignatedReportStake(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateDesignatedReportStake(address,uint256,uint256)"(
      _previousDisputeWindow: string,
      _previousDesignatedReportStakeInAttoRep: BigNumberish,
      _initialReportMinValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFloatingValue(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateFloatingValue(uint256,uint256,uint256,uint256,uint256)"(
      _totalBad: BigNumberish,
      _total: BigNumberish,
      _targetDivisor: BigNumberish,
      _previousValue: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateValidityBond(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateValidityBond(address,uint256)"(
      _previousDisputeWindow: string,
      _previousValidityBondInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
