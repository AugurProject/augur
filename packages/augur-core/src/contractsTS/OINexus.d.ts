/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OINexusInterface extends ethers.utils.Interface {
  functions: {
    "addParaAugur(address)": FunctionFragment;
    "getAttoCashPerRep(address,address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "knownParaUniverse(address)": FunctionFragment;
    "numParaUniverses(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "paraUniversePreviousContribution(address)": FunctionFragment;
    "recordParaUniverseValuesAndUpdateReportingFee(address,uint256,uint256)": FunctionFragment;
    "registerParaUniverse(address,address)": FunctionFragment;
    "registeredParaAugur(address)": FunctionFragment;
    "totalUniverseContributions(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "universeReportingFeeDivisor(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addParaAugur",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttoCashPerRep",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "knownParaUniverse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numParaUniverses",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paraUniversePreviousContribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordParaUniverseValuesAndUpdateReportingFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerParaUniverse",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredParaAugur",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUniverseContributions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "universeReportingFeeDivisor",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addParaAugur",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttoCashPerRep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "knownParaUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numParaUniverses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paraUniversePreviousContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordParaUniverseValuesAndUpdateReportingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerParaUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredParaAugur",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUniverseContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "universeReportingFeeDivisor",
    data: BytesLike
  ): Result;

  events: {};
}

export class OINexus extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: OINexusInterface;

  functions: {
    addParaAugur(
      _paraAugur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addParaAugur(address)"(
      _paraAugur: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAttoCashPerRep(
      _cash: string,
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAttoCashPerRep(address,address)"(
      _cash: string,
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    knownParaUniverse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "knownParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numParaUniverses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "numParaUniverses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    paraUniversePreviousContribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "paraUniversePreviousContribution(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recordParaUniverseValuesAndUpdateReportingFee(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recordParaUniverseValuesAndUpdateReportingFee(address,uint256,uint256)"(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerParaUniverse(
      _universe: string,
      _paraUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerParaUniverse(address,address)"(
      _universe: string,
      _paraUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registeredParaAugur(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "registeredParaAugur(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalUniverseContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalUniverseContributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    universeReportingFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "universeReportingFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addParaAugur(
    _paraAugur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addParaAugur(address)"(
    _paraAugur: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAttoCashPerRep(
    _cash: string,
    _reputationToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAttoCashPerRep(address,address)"(
    _cash: string,
    _reputationToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  knownParaUniverse(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "knownParaUniverse(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numParaUniverses(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "numParaUniverses(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  paraUniversePreviousContribution(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "paraUniversePreviousContribution(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recordParaUniverseValuesAndUpdateReportingFee(
    _universe: string,
    _targetRepMarketCapInAttoCash: BigNumberish,
    _repMarketCapInAttoCash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recordParaUniverseValuesAndUpdateReportingFee(address,uint256,uint256)"(
    _universe: string,
    _targetRepMarketCapInAttoCash: BigNumberish,
    _repMarketCapInAttoCash: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerParaUniverse(
    _universe: string,
    _paraUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerParaUniverse(address,address)"(
    _universe: string,
    _paraUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registeredParaAugur(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "registeredParaAugur(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalUniverseContributions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalUniverseContributions(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  universeReportingFeeDivisor(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "universeReportingFeeDivisor(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addParaAugur(
      _paraAugur: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addParaAugur(address)"(
      _paraAugur: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAttoCashPerRep(
      _cash: string,
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAttoCashPerRep(address,address)"(
      _cash: string,
      _reputationToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    knownParaUniverse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "knownParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numParaUniverses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numParaUniverses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    paraUniversePreviousContribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paraUniversePreviousContribution(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordParaUniverseValuesAndUpdateReportingFee(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "recordParaUniverseValuesAndUpdateReportingFee(address,uint256,uint256)"(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerParaUniverse(
      _universe: string,
      _paraUniverse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerParaUniverse(address,address)"(
      _universe: string,
      _paraUniverse: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredParaAugur(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registeredParaAugur(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalUniverseContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalUniverseContributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    universeReportingFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "universeReportingFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addParaAugur(_paraAugur: string, overrides?: Overrides): Promise<BigNumber>;

    "addParaAugur(address)"(
      _paraAugur: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAttoCashPerRep(
      _cash: string,
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAttoCashPerRep(address,address)"(
      _cash: string,
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    knownParaUniverse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "knownParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numParaUniverses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numParaUniverses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    paraUniversePreviousContribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paraUniversePreviousContribution(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordParaUniverseValuesAndUpdateReportingFee(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recordParaUniverseValuesAndUpdateReportingFee(address,uint256,uint256)"(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerParaUniverse(
      _universe: string,
      _paraUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerParaUniverse(address,address)"(
      _universe: string,
      _paraUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registeredParaAugur(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registeredParaAugur(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUniverseContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalUniverseContributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    universeReportingFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "universeReportingFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addParaAugur(
      _paraAugur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addParaAugur(address)"(
      _paraAugur: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAttoCashPerRep(
      _cash: string,
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAttoCashPerRep(address,address)"(
      _cash: string,
      _reputationToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    knownParaUniverse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "knownParaUniverse(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numParaUniverses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numParaUniverses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paraUniversePreviousContribution(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paraUniversePreviousContribution(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordParaUniverseValuesAndUpdateReportingFee(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recordParaUniverseValuesAndUpdateReportingFee(address,uint256,uint256)"(
      _universe: string,
      _targetRepMarketCapInAttoCash: BigNumberish,
      _repMarketCapInAttoCash: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerParaUniverse(
      _universe: string,
      _paraUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerParaUniverse(address,address)"(
      _universe: string,
      _paraUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registeredParaAugur(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registeredParaAugur(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUniverseContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalUniverseContributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    universeReportingFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "universeReportingFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
