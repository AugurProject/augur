/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AugurWalletRegistryV2Interface extends ethers.utils.Interface {
  functions: {
    "GENERIC_PARAMS()": FunctionFragment;
    "WETH()": FunctionFragment;
    "_verifySig(tuple,bytes,bytes)": FunctionFragment;
    "acceptRelayedCall(tuple,bytes,bytes,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "augurTrading()": FunctionFragment;
    "augurWalletFactory()": FunctionFragment;
    "cash()": FunctionFragment;
    "ethExchange()": FunctionFragment;
    "execute(tuple,bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getCreate2WalletAddress(address)": FunctionFragment;
    "getGasLimits()": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "getInitialized()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRelayHubDeposit()": FunctionFragment;
    "getRelayMessageHash(tuple)": FunctionFragment;
    "getWallet(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "postRelayedCall(bytes,bool,bytes32,uint256,tuple)": FunctionFragment;
    "preRelayedCall(bytes)": FunctionFragment;
    "registerRequestType(string,string)": FunctionFragment;
    "token0IsCash()": FunctionFragment;
    "typeHashes(bytes32)": FunctionFragment;
    "verify(tuple,bytes,bytes)": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GENERIC_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_verifySig",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptRelayedCall",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "augurTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "augurWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWalletTransaction",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreate2WalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRelayHubDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayMessageHash",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [
      BytesLike,
      boolean,
      BytesLike,
      BigNumberish,
      {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRequestType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "token0IsCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "typeHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GENERIC_PARAMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_verifySig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "augurTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "augurWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWalletTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreate2WalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRequestType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0IsCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteTransactionStatus(bool,bool)": EventFragment;
    "RequestTypeRegistered(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteTransactionStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTypeRegistered"): EventFragment;
}

export class AugurWalletRegistryV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: AugurWalletRegistryV2Interface;

  functions: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<[string]>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    _verifySig(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "_verifySig((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    acceptRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { context: string }>;

    "acceptRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { context: string }>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    augurTrading(overrides?: CallOverrides): Promise<[string]>;

    "augurTrading()"(overrides?: CallOverrides): Promise<[string]>;

    augurWalletFactory(overrides?: CallOverrides): Promise<[string]>;

    "augurWalletFactory()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    ethExchange(overrides?: CallOverrides): Promise<[string]>;

    "ethExchange()"(overrides?: CallOverrides): Promise<[string]>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGasLimits(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        limits: [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    "getGasLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        limits: [BigNumber, BigNumber, BigNumber] & {
          acceptRelayedCallGasLimit: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "getInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRelayMessageHash(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRelayMessageHash(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWallet(_account: string, overrides?: CallOverrides): Promise<[string]>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "postRelayedCall(bytes,bool,bytes32,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token0IsCash(overrides?: CallOverrides): Promise<[boolean]>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<[boolean]>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<[string]>;
  };

  GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;

  "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  _verifySig(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "_verifySig((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  acceptRelayedCall(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "acceptRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  augurTrading(overrides?: CallOverrides): Promise<string>;

  "augurTrading()"(overrides?: CallOverrides): Promise<string>;

  augurWalletFactory(overrides?: CallOverrides): Promise<string>;

  "augurWalletFactory()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  ethExchange(overrides?: CallOverrides): Promise<string>;

  "ethExchange()"(overrides?: CallOverrides): Promise<string>;

  execute(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  executeWalletTransaction(
    _to: string,
    _data: BytesLike,
    _value: BigNumberish,
    _payment: BigNumberish,
    _referralAddress: string,
    _fingerprint: BytesLike,
    _desiredSignerBalance: BigNumberish,
    _maxExchangeRateInDai: BigNumberish,
    _revertOnFailure: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
    _to: string,
    _data: BytesLike,
    _value: BigNumberish,
    _payment: BigNumberish,
    _referralAddress: string,
    _fingerprint: BytesLike,
    _desiredSignerBalance: BigNumberish,
    _maxExchangeRateInDai: BigNumberish,
    _revertOnFailure: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountIn(uint256,uint256,uint256)"(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,uint256,uint256)"(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreate2WalletAddress(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreate2WalletAddress(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getGasLimits(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      acceptRelayedCallGasLimit: BigNumber;
      preRelayedCallGasLimit: BigNumber;
      postRelayedCallGasLimit: BigNumber;
    }
  >;

  "getGasLimits()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      acceptRelayedCallGasLimit: BigNumber;
      preRelayedCallGasLimit: BigNumber;
      postRelayedCallGasLimit: BigNumber;
    }
  >;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  getInitialized(overrides?: CallOverrides): Promise<boolean>;

  "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRelayMessageHash(
    req: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "getRelayMessageHash(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
    req: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getWallet(_account: string, overrides?: CallOverrides): Promise<string>;

  "getWallet(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _augur: string,
    _augurTrading: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _augur: string,
    _augurTrading: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedForwarder(address)"(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    preRetVal: BytesLike,
    gasUseWithoutPost: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "postRelayedCall(bytes,bool,bytes32,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
    context: BytesLike,
    success: boolean,
    preRetVal: BytesLike,
    gasUseWithoutPost: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  preRelayedCall(
    context: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "preRelayedCall(bytes)"(
    context: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerRequestType(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerRequestType(string,string)"(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token0IsCash(overrides?: CallOverrides): Promise<boolean>;

  "token0IsCash()"(overrides?: CallOverrides): Promise<boolean>;

  typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "typeHashes(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "verify((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
    req: {
      from: string;
      to: string;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  "versionRecipient()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    _verifySig(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "_verifySig((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "acceptRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    augurTrading(overrides?: CallOverrides): Promise<string>;

    "augurTrading()"(overrides?: CallOverrides): Promise<string>;

    augurWalletFactory(overrides?: CallOverrides): Promise<string>;

    "augurWalletFactory()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    ethExchange(overrides?: CallOverrides): Promise<string>;

    "ethExchange()"(overrides?: CallOverrides): Promise<string>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getGasLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        acceptRelayedCallGasLimit: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    >;

    "getGasLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        acceptRelayedCallGasLimit: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    >;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    getInitialized(overrides?: CallOverrides): Promise<boolean>;

    "getInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayMessageHash(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "getRelayMessageHash(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getWallet(_account: string, overrides?: CallOverrides): Promise<string>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "postRelayedCall(bytes,bool,bytes32,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token0IsCash(overrides?: CallOverrides): Promise<boolean>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<boolean>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ExecuteTransactionStatus(
      success: null,
      fundingSuccess: null
    ): TypedEventFilter<
      [boolean, boolean],
      { success: boolean; fundingSuccess: boolean }
    >;

    RequestTypeRegistered(
      typeHash: BytesLike | null,
      typeStr: null
    ): TypedEventFilter<
      [string, string],
      { typeHash: string; typeStr: string }
    >;
  };

  estimateGas: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _verifySig(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifySig((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "acceptRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurTrading(overrides?: CallOverrides): Promise<BigNumber>;

    "augurTrading()"(overrides?: CallOverrides): Promise<BigNumber>;

    augurWalletFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "augurWalletFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethExchange(overrides?: CallOverrides): Promise<BigNumber>;

    "ethExchange()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasLimits(overrides?: CallOverrides): Promise<BigNumber>;

    "getGasLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayMessageHash(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRelayMessageHash(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallet(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "postRelayedCall(bytes,bool,bytes32,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token0IsCash(overrides?: CallOverrides): Promise<BigNumber>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GENERIC_PARAMS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _verifySig(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_verifySig((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurTrading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augurTrading()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    augurWalletFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "augurWalletFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethExchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    executeWalletTransaction(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeWalletTransaction(address,bytes,uint256,uint256,address,bytes32,uint256,uint256,bool)"(
      _to: string,
      _data: BytesLike,
      _value: BigNumberish,
      _payment: BigNumberish,
      _referralAddress: string,
      _fingerprint: BytesLike,
      _desiredSignerBalance: BigNumberish,
      _maxExchangeRateInDai: BigNumberish,
      _revertOnFailure: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountIn(uint256,uint256,uint256)"(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,uint256,uint256)"(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreate2WalletAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreate2WalletAddress(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGasLimits()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelayHubDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelayHubDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelayMessageHash(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelayMessageHash(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)))"(
      req: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallet(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWallet(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _augur: string,
      _augurTrading: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "postRelayedCall(bytes,bool,bytes32,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))"(
      context: BytesLike,
      success: boolean,
      preRetVal: BytesLike,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "preRelayedCall(bytes)"(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token0IsCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0IsCash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes,bytes)"(
      req: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
