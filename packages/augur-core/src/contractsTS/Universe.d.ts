/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniverseInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_NUM_OUTCOMES()": FunctionFragment;
    "DEFAULT_NUM_TICKS()": FunctionFragment;
    "INITIAL_WINDOW_ID_BUFFER()": FunctionFragment;
    "augur()": FunctionFragment;
    "cash()": FunctionFragment;
    "createCategoricalMarket(uint256,uint256,address,uint256,address,bytes32[],string)": FunctionFragment;
    "createChildUniverse(uint256[])": FunctionFragment;
    "createScalarMarket(uint256,uint256,address,uint256,address,int256[],uint256,string)": FunctionFragment;
    "createYesNoMarket(uint256,uint256,address,uint256,address,string)": FunctionFragment;
    "creationTime()": FunctionFragment;
    "decrementOpenInterest(uint256)": FunctionFragment;
    "decrementOpenInterestFromMarket(address)": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "designatedReportNoShowBondInAttoRep(address)": FunctionFragment;
    "designatedReportStakeInAttoRep(address)": FunctionFragment;
    "disputeWindowFactory()": FunctionFragment;
    "disputeWindows(uint256)": FunctionFragment;
    "fork()": FunctionFragment;
    "formulas()": FunctionFragment;
    "getChildUniverse(bytes32)": FunctionFragment;
    "getCurrentDisputeWindow(bool)": FunctionFragment;
    "getDisputeRoundDurationInSeconds(bool)": FunctionFragment;
    "getDisputeThresholdForDisputePacing()": FunctionFragment;
    "getDisputeThresholdForFork()": FunctionFragment;
    "getDisputeWindow(uint256)": FunctionFragment;
    "getDisputeWindowByTimestamp(uint256,bool)": FunctionFragment;
    "getDisputeWindowId(uint256,bool)": FunctionFragment;
    "getDisputeWindowStartTimeAndDuration(uint256,bool)": FunctionFragment;
    "getForkEndTime()": FunctionFragment;
    "getForkReputationGoal()": FunctionFragment;
    "getForkingMarket()": FunctionFragment;
    "getInitialReportMinValue()": FunctionFragment;
    "getOpenInterestInAttoCash()": FunctionFragment;
    "getOrCacheDesignatedReportNoShowBond()": FunctionFragment;
    "getOrCacheDesignatedReportStake()": FunctionFragment;
    "getOrCacheMarketRepBond()": FunctionFragment;
    "getOrCacheReportingFeeDivisor()": FunctionFragment;
    "getOrCacheValidityBond()": FunctionFragment;
    "getOrCreateCurrentDisputeWindow(bool)": FunctionFragment;
    "getOrCreateDisputeWindowByTimestamp(uint256,bool)": FunctionFragment;
    "getOrCreateNextDisputeWindow(bool)": FunctionFragment;
    "getOrCreatePreviousDisputeWindow(bool)": FunctionFragment;
    "getOrCreatePreviousPreviousDisputeWindow(bool)": FunctionFragment;
    "getParentPayoutDistributionHash()": FunctionFragment;
    "getParentUniverse()": FunctionFragment;
    "getPayoutNumerator(uint256)": FunctionFragment;
    "getPayoutNumerators()": FunctionFragment;
    "getReportingFeeDivisor()": FunctionFragment;
    "getReputationToken()": FunctionFragment;
    "getTargetRepMarketCapInAttoCash()": FunctionFragment;
    "getWinningChildPayoutNumerator(uint256)": FunctionFragment;
    "getWinningChildUniverse()": FunctionFragment;
    "incrementOpenInterest(uint256)": FunctionFragment;
    "isContainerForDisputeWindow(address)": FunctionFragment;
    "isContainerForMarket(address)": FunctionFragment;
    "isContainerForReportingParticipant(address)": FunctionFragment;
    "isForking()": FunctionFragment;
    "isForkingMarket()": FunctionFragment;
    "isOpenInterestCash(address)": FunctionFragment;
    "isParentOf(address)": FunctionFragment;
    "marketBalance(address)": FunctionFragment;
    "marketFactory()": FunctionFragment;
    "migrateMarketIn(address,uint256,uint256)": FunctionFragment;
    "migrateMarketOut(address)": FunctionFragment;
    "openInterestCash()": FunctionFragment;
    "payoutNumerators(uint256)": FunctionFragment;
    "pokeRepMarketCapInAttoCash()": FunctionFragment;
    "previousDesignatedReportNoShowBondInAttoRep()": FunctionFragment;
    "previousDesignatedReportStakeInAttoRep()": FunctionFragment;
    "previousReportingFeeDivisor()": FunctionFragment;
    "previousValidityBondInAttoCash()": FunctionFragment;
    "repOracle()": FunctionFragment;
    "runPeriodicals()": FunctionFragment;
    "shareSettlementFeeDivisor(address)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "updateForkValues()": FunctionFragment;
    "updateTentativeWinningChildUniverse(bytes32)": FunctionFragment;
    "validityBondInAttoCash(address)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_NUM_OUTCOMES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_NUM_TICKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_WINDOW_ID_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCategoricalMarket",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BytesLike[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createChildUniverse",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createScalarMarket",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish[],
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createYesNoMarket",
    values: [BigNumberish, BigNumberish, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrementOpenInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementOpenInterestFromMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "designatedReportNoShowBondInAttoRep",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "designatedReportStakeInAttoRep",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeWindowFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeWindows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fork", values?: undefined): string;
  encodeFunctionData(functionFragment: "formulas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChildUniverse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDisputeWindow",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeRoundDurationInSeconds",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeThresholdForDisputePacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeThresholdForFork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeWindowByTimestamp",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeWindowId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeWindowStartTimeAndDuration",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getForkEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForkReputationGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForkingMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialReportMinValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenInterestInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheDesignatedReportNoShowBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheDesignatedReportStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheMarketRepBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCacheValidityBond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateCurrentDisputeWindow",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateDisputeWindowByTimestamp",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreateNextDisputeWindow",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreatePreviousDisputeWindow",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreatePreviousPreviousDisputeWindow",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentPayoutDistributionHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParentUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutNumerators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetRepMarketCapInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningChildPayoutNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningChildUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementOpenInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isContainerForDisputeWindow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContainerForMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContainerForReportingParticipant",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isForking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isForkingMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOpenInterestCash",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isParentOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marketBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateMarketIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateMarketOut",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openInterestCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payoutNumerators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pokeRepMarketCapInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousDesignatedReportNoShowBondInAttoRep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousDesignatedReportStakeInAttoRep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousReportingFeeDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousValidityBondInAttoCash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "runPeriodicals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shareSettlementFeeDivisor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateForkValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTentativeWinningChildUniverse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validityBondInAttoCash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_NUM_OUTCOMES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_NUM_TICKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_WINDOW_ID_BUFFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCategoricalMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChildUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createScalarMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createYesNoMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementOpenInterestFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "designatedReportNoShowBondInAttoRep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "designatedReportStakeInAttoRep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeWindowFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeWindows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "formulas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChildUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeRoundDurationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeThresholdForDisputePacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeThresholdForFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeWindowByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeWindowId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeWindowStartTimeAndDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForkEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForkReputationGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForkingMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialReportMinValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenInterestInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheDesignatedReportNoShowBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheDesignatedReportStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheMarketRepBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCacheValidityBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateCurrentDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateDisputeWindowByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreateNextDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreatePreviousDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreatePreviousPreviousDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentPayoutDistributionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutNumerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetRepMarketCapInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningChildPayoutNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningChildUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContainerForDisputeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContainerForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContainerForReportingParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isForking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForkingMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOpenInterestCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isParentOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateMarketIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateMarketOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openInterestCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payoutNumerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pokeRepMarketCapInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousDesignatedReportNoShowBondInAttoRep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousDesignatedReportStakeInAttoRep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousReportingFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousValidityBondInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runPeriodicals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareSettlementFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateForkValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTentativeWinningChildUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validityBondInAttoCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Universe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: UniverseInterface;

  functions: {
    DEFAULT_NUM_OUTCOMES(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DEFAULT_NUM_OUTCOMES()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_NUM_TICKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DEFAULT_NUM_TICKS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_WINDOW_ID_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "INITIAL_WINDOW_ID_BUFFER()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    cash(overrides?: CallOverrides): Promise<[string]>;

    "cash()"(overrides?: CallOverrides): Promise<[string]>;

    createCategoricalMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createCategoricalMarket(uint256,uint256,address,uint256,address,bytes32[],string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createChildUniverse(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createChildUniverse(uint256[])"(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createScalarMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createScalarMarket(uint256,uint256,address,uint256,address,int256[],uint256,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createYesNoMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createYesNoMarket(uint256,uint256,address,uint256,address,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "creationTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decrementOpenInterestFromMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementOpenInterestFromMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    designatedReportNoShowBondInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "designatedReportNoShowBondInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    designatedReportStakeInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "designatedReportStakeInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disputeWindowFactory(overrides?: CallOverrides): Promise<[string]>;

    "disputeWindowFactory()"(overrides?: CallOverrides): Promise<[string]>;

    disputeWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "disputeWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fork(overrides?: Overrides): Promise<ContractTransaction>;

    "fork()"(overrides?: Overrides): Promise<ContractTransaction>;

    formulas(overrides?: CallOverrides): Promise<[string]>;

    "formulas()"(overrides?: CallOverrides): Promise<[string]>;

    getChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDisputeRoundDurationInSeconds(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDisputeRoundDurationInSeconds(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputeThresholdForFork(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDisputeThresholdForFork()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputeWindow(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDisputeWindow(uint256)"(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDisputeWindowId(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDisputeWindowId(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDisputeWindowStartTimeAndDuration(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _startTime: BigNumber; _duration: BigNumber }
    >;

    "getDisputeWindowStartTimeAndDuration(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _startTime: BigNumber; _duration: BigNumber }
    >;

    getForkEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getForkEndTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForkReputationGoal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getForkReputationGoal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForkingMarket(overrides?: CallOverrides): Promise<[string]>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<[string]>;

    getInitialReportMinValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitialReportMinValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrCacheDesignatedReportNoShowBond(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheDesignatedReportNoShowBond()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheDesignatedReportStake(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheMarketRepBond(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheMarketRepBond()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheReportingFeeDivisor(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCacheValidityBond(overrides?: Overrides): Promise<ContractTransaction>;

    "getOrCacheValidityBond()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCreateCurrentDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreateCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCreateDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreateDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCreateNextDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreateNextDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCreatePreviousDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreatePreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrCreatePreviousPreviousDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrCreatePreviousPreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getParentPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getParentPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getParentUniverse(overrides?: CallOverrides): Promise<[string]>;

    "getParentUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getReportingFeeDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReputationToken(overrides?: CallOverrides): Promise<[string]>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<[string]>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinningChildPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWinningChildPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWinningChildUniverse(overrides?: CallOverrides): Promise<[string]>;

    "getWinningChildUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isContainerForDisputeWindow(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isContainerForDisputeWindow(address)"(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContainerForMarket(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isContainerForMarket(address)"(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isForking(overrides?: CallOverrides): Promise<[boolean]>;

    "isForking()"(overrides?: CallOverrides): Promise<[boolean]>;

    isForkingMarket(overrides?: CallOverrides): Promise<[boolean]>;

    "isForkingMarket()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isParentOf(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isParentOf(address)"(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketFactory(overrides?: CallOverrides): Promise<[string]>;

    "marketFactory()"(overrides?: CallOverrides): Promise<[string]>;

    migrateMarketIn(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateMarketIn(address,uint256,uint256)"(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    migrateMarketOut(
      _destinationUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateMarketOut(address)"(
      _destinationUniverse: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    openInterestCash(overrides?: CallOverrides): Promise<[string]>;

    "openInterestCash()"(overrides?: CallOverrides): Promise<[string]>;

    payoutNumerators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "payoutNumerators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pokeRepMarketCapInAttoCash(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pokeRepMarketCapInAttoCash()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    previousDesignatedReportNoShowBondInAttoRep(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "previousDesignatedReportNoShowBondInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previousDesignatedReportStakeInAttoRep(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "previousDesignatedReportStakeInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previousReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "previousReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previousValidityBondInAttoCash(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "previousValidityBondInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    repOracle(overrides?: CallOverrides): Promise<[string]>;

    "repOracle()"(overrides?: CallOverrides): Promise<[string]>;

    runPeriodicals(overrides?: Overrides): Promise<ContractTransaction>;

    "runPeriodicals()"(overrides?: Overrides): Promise<ContractTransaction>;

    shareSettlementFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "shareSettlementFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shareToken(overrides?: CallOverrides): Promise<[string]>;

    "shareToken()"(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateForkValues(overrides?: Overrides): Promise<ContractTransaction>;

    "updateForkValues()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateTentativeWinningChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTentativeWinningChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validityBondInAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "validityBondInAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_NUM_OUTCOMES(overrides?: CallOverrides): Promise<BigNumber>;

  "DEFAULT_NUM_OUTCOMES()"(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_NUM_TICKS(overrides?: CallOverrides): Promise<BigNumber>;

  "DEFAULT_NUM_TICKS()"(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_WINDOW_ID_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  "INITIAL_WINDOW_ID_BUFFER()"(overrides?: CallOverrides): Promise<BigNumber>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  cash(overrides?: CallOverrides): Promise<string>;

  "cash()"(overrides?: CallOverrides): Promise<string>;

  createCategoricalMarket(
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _outcomes: BytesLike[],
    _extraInfo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createCategoricalMarket(uint256,uint256,address,uint256,address,bytes32[],string)"(
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _outcomes: BytesLike[],
    _extraInfo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createChildUniverse(
    _parentPayoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createChildUniverse(uint256[])"(
    _parentPayoutNumerators: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createScalarMarket(
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _prices: BigNumberish[],
    _numTicks: BigNumberish,
    _extraInfo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createScalarMarket(uint256,uint256,address,uint256,address,int256[],uint256,string)"(
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _prices: BigNumberish[],
    _numTicks: BigNumberish,
    _extraInfo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createYesNoMarket(
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _extraInfo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createYesNoMarket(uint256,uint256,address,uint256,address,string)"(
    _endTime: BigNumberish,
    _feePerCashInAttoCash: BigNumberish,
    _affiliateValidator: string,
    _affiliateFeeDivisor: BigNumberish,
    _designatedReporterAddress: string,
    _extraInfo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  "creationTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  decrementOpenInterest(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementOpenInterest(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decrementOpenInterestFromMarket(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementOpenInterestFromMarket(address)"(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _sender: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address)"(
    _sender: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  designatedReportNoShowBondInAttoRep(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "designatedReportNoShowBondInAttoRep(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  designatedReportStakeInAttoRep(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "designatedReportStakeInAttoRep(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disputeWindowFactory(overrides?: CallOverrides): Promise<string>;

  "disputeWindowFactory()"(overrides?: CallOverrides): Promise<string>;

  disputeWindows(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "disputeWindows(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  fork(overrides?: Overrides): Promise<ContractTransaction>;

  "fork()"(overrides?: Overrides): Promise<ContractTransaction>;

  formulas(overrides?: CallOverrides): Promise<string>;

  "formulas()"(overrides?: CallOverrides): Promise<string>;

  getChildUniverse(
    _parentPayoutDistributionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChildUniverse(bytes32)"(
    _parentPayoutDistributionHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentDisputeWindow(
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentDisputeWindow(bool)"(
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getDisputeRoundDurationInSeconds(
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeRoundDurationInSeconds(bool)"(
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputeThresholdForDisputePacing(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeThresholdForDisputePacing()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputeThresholdForFork(overrides?: CallOverrides): Promise<BigNumber>;

  "getDisputeThresholdForFork()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDisputeWindow(
    _disputeWindowId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDisputeWindow(uint256)"(
    _disputeWindowId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDisputeWindowByTimestamp(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDisputeWindowByTimestamp(uint256,bool)"(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getDisputeWindowId(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeWindowId(uint256,bool)"(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDisputeWindowStartTimeAndDuration(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _startTime: BigNumber; _duration: BigNumber }
  >;

  "getDisputeWindowStartTimeAndDuration(uint256,bool)"(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _startTime: BigNumber; _duration: BigNumber }
  >;

  getForkEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getForkEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getForkReputationGoal(overrides?: CallOverrides): Promise<BigNumber>;

  "getForkReputationGoal()"(overrides?: CallOverrides): Promise<BigNumber>;

  getForkingMarket(overrides?: CallOverrides): Promise<string>;

  "getForkingMarket()"(overrides?: CallOverrides): Promise<string>;

  getInitialReportMinValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitialReportMinValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

  "getOpenInterestInAttoCash()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOrCacheDesignatedReportNoShowBond(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCacheDesignatedReportNoShowBond()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheDesignatedReportStake(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCacheDesignatedReportStake()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheMarketRepBond(overrides?: Overrides): Promise<ContractTransaction>;

  "getOrCacheMarketRepBond()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheReportingFeeDivisor(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCacheReportingFeeDivisor()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCacheValidityBond(overrides?: Overrides): Promise<ContractTransaction>;

  "getOrCacheValidityBond()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCreateCurrentDisputeWindow(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreateCurrentDisputeWindow(bool)"(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCreateDisputeWindowByTimestamp(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreateDisputeWindowByTimestamp(uint256,bool)"(
    _timestamp: BigNumberish,
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCreateNextDisputeWindow(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreateNextDisputeWindow(bool)"(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCreatePreviousDisputeWindow(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreatePreviousDisputeWindow(bool)"(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrCreatePreviousPreviousDisputeWindow(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrCreatePreviousPreviousDisputeWindow(bool)"(
    _initial: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getParentPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

  "getParentPayoutDistributionHash()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getParentUniverse(overrides?: CallOverrides): Promise<string>;

  "getParentUniverse()"(overrides?: CallOverrides): Promise<string>;

  getPayoutNumerator(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPayoutNumerator(uint256)"(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReputationToken(overrides?: CallOverrides): Promise<string>;

  "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

  getTargetRepMarketCapInAttoCash(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTargetRepMarketCapInAttoCash()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWinningChildPayoutNumerator(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWinningChildPayoutNumerator(uint256)"(
    _outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWinningChildUniverse(overrides?: CallOverrides): Promise<string>;

  "getWinningChildUniverse()"(overrides?: CallOverrides): Promise<string>;

  incrementOpenInterest(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementOpenInterest(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isContainerForDisputeWindow(
    _shadyDisputeWindow: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isContainerForDisputeWindow(address)"(
    _shadyDisputeWindow: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContainerForMarket(
    _shadyMarket: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isContainerForMarket(address)"(
    _shadyMarket: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContainerForReportingParticipant(
    _shadyReportingParticipant: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isContainerForReportingParticipant(address)"(
    _shadyReportingParticipant: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isForking(overrides?: CallOverrides): Promise<boolean>;

  "isForking()"(overrides?: CallOverrides): Promise<boolean>;

  isForkingMarket(overrides?: CallOverrides): Promise<boolean>;

  "isForkingMarket()"(overrides?: CallOverrides): Promise<boolean>;

  isOpenInterestCash(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOpenInterestCash(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isParentOf(_shadyChild: string, overrides?: CallOverrides): Promise<boolean>;

  "isParentOf(address)"(
    _shadyChild: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "marketBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketFactory(overrides?: CallOverrides): Promise<string>;

  "marketFactory()"(overrides?: CallOverrides): Promise<string>;

  migrateMarketIn(
    _market: string,
    _cashBalance: BigNumberish,
    _marketOI: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateMarketIn(address,uint256,uint256)"(
    _market: string,
    _cashBalance: BigNumberish,
    _marketOI: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  migrateMarketOut(
    _destinationUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateMarketOut(address)"(
    _destinationUniverse: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  openInterestCash(overrides?: CallOverrides): Promise<string>;

  "openInterestCash()"(overrides?: CallOverrides): Promise<string>;

  payoutNumerators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "payoutNumerators(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pokeRepMarketCapInAttoCash(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pokeRepMarketCapInAttoCash()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  previousDesignatedReportNoShowBondInAttoRep(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "previousDesignatedReportNoShowBondInAttoRep()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previousDesignatedReportStakeInAttoRep(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "previousDesignatedReportStakeInAttoRep()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previousReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "previousReportingFeeDivisor()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previousValidityBondInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

  "previousValidityBondInAttoCash()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  repOracle(overrides?: CallOverrides): Promise<string>;

  "repOracle()"(overrides?: CallOverrides): Promise<string>;

  runPeriodicals(overrides?: Overrides): Promise<ContractTransaction>;

  "runPeriodicals()"(overrides?: Overrides): Promise<ContractTransaction>;

  shareSettlementFeeDivisor(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "shareSettlementFeeDivisor(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateForkValues(overrides?: Overrides): Promise<ContractTransaction>;

  "updateForkValues()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateTentativeWinningChildUniverse(
    _parentPayoutDistributionHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTentativeWinningChildUniverse(bytes32)"(
    _parentPayoutDistributionHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validityBondInAttoCash(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "validityBondInAttoCash(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _recipient: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,address)"(
    _recipient: string,
    _amount: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_NUM_OUTCOMES(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_NUM_OUTCOMES()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_NUM_TICKS(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_NUM_TICKS()"(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_WINDOW_ID_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_WINDOW_ID_BUFFER()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    cash(overrides?: CallOverrides): Promise<string>;

    "cash()"(overrides?: CallOverrides): Promise<string>;

    createCategoricalMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createCategoricalMarket(uint256,uint256,address,uint256,address,bytes32[],string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createChildUniverse(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "createChildUniverse(uint256[])"(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    createScalarMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createScalarMarket(uint256,uint256,address,uint256,address,int256[],uint256,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createYesNoMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createYesNoMarket(uint256,uint256,address,uint256,address,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: CallOverrides
    ): Promise<string>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    "creationTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decrementOpenInterestFromMarket(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decrementOpenInterestFromMarket(address)"(
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    designatedReportNoShowBondInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "designatedReportNoShowBondInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    designatedReportStakeInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "designatedReportStakeInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeWindowFactory(overrides?: CallOverrides): Promise<string>;

    "disputeWindowFactory()"(overrides?: CallOverrides): Promise<string>;

    disputeWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "disputeWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fork(overrides?: CallOverrides): Promise<boolean>;

    "fork()"(overrides?: CallOverrides): Promise<boolean>;

    formulas(overrides?: CallOverrides): Promise<string>;

    "formulas()"(overrides?: CallOverrides): Promise<string>;

    getChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getDisputeRoundDurationInSeconds(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeRoundDurationInSeconds(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeThresholdForFork(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputeThresholdForFork()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeWindow(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDisputeWindow(uint256)"(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getDisputeWindowId(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeWindowId(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeWindowStartTimeAndDuration(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _startTime: BigNumber; _duration: BigNumber }
    >;

    "getDisputeWindowStartTimeAndDuration(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _startTime: BigNumber; _duration: BigNumber }
    >;

    getForkEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkReputationGoal(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkReputationGoal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkingMarket(overrides?: CallOverrides): Promise<string>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<string>;

    getInitialReportMinValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialReportMinValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheDesignatedReportNoShowBond(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheDesignatedReportNoShowBond()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheDesignatedReportStake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheMarketRepBond(overrides?: CallOverrides): Promise<BigNumber>;

    "getOrCacheMarketRepBond()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheValidityBond(overrides?: CallOverrides): Promise<BigNumber>;

    "getOrCacheValidityBond()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrCreateCurrentDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreateCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrCreateDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreateDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrCreateNextDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreateNextDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrCreatePreviousDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreatePreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrCreatePreviousPreviousDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrCreatePreviousPreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getParentPayoutDistributionHash(overrides?: CallOverrides): Promise<string>;

    "getParentPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getParentUniverse(overrides?: CallOverrides): Promise<string>;

    "getParentUniverse()"(overrides?: CallOverrides): Promise<string>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<string>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<string>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningChildPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningChildPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningChildUniverse(overrides?: CallOverrides): Promise<string>;

    "getWinningChildUniverse()"(overrides?: CallOverrides): Promise<string>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContainerForDisputeWindow(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isContainerForDisputeWindow(address)"(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContainerForMarket(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isContainerForMarket(address)"(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isForking(overrides?: CallOverrides): Promise<boolean>;

    "isForking()"(overrides?: CallOverrides): Promise<boolean>;

    isForkingMarket(overrides?: CallOverrides): Promise<boolean>;

    "isForkingMarket()"(overrides?: CallOverrides): Promise<boolean>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isParentOf(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isParentOf(address)"(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketFactory(overrides?: CallOverrides): Promise<string>;

    "marketFactory()"(overrides?: CallOverrides): Promise<string>;

    migrateMarketIn(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "migrateMarketIn(address,uint256,uint256)"(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateMarketOut(
      _destinationUniverse: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "migrateMarketOut(address)"(
      _destinationUniverse: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openInterestCash(overrides?: CallOverrides): Promise<string>;

    "openInterestCash()"(overrides?: CallOverrides): Promise<string>;

    payoutNumerators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payoutNumerators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pokeRepMarketCapInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "pokeRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousDesignatedReportNoShowBondInAttoRep(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousDesignatedReportNoShowBondInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousDesignatedReportStakeInAttoRep(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousDesignatedReportStakeInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "previousReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousValidityBondInAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousValidityBondInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repOracle(overrides?: CallOverrides): Promise<string>;

    "repOracle()"(overrides?: CallOverrides): Promise<string>;

    runPeriodicals(overrides?: CallOverrides): Promise<boolean>;

    "runPeriodicals()"(overrides?: CallOverrides): Promise<boolean>;

    shareSettlementFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareSettlementFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateForkValues(overrides?: CallOverrides): Promise<boolean>;

    "updateForkValues()"(overrides?: CallOverrides): Promise<boolean>;

    updateTentativeWinningChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateTentativeWinningChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validityBondInAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validityBondInAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_NUM_OUTCOMES(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_NUM_OUTCOMES()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_NUM_TICKS(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_NUM_TICKS()"(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_WINDOW_ID_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_WINDOW_ID_BUFFER()"(overrides?: CallOverrides): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    cash(overrides?: CallOverrides): Promise<BigNumber>;

    "cash()"(overrides?: CallOverrides): Promise<BigNumber>;

    createCategoricalMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createCategoricalMarket(uint256,uint256,address,uint256,address,bytes32[],string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createChildUniverse(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createChildUniverse(uint256[])"(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    createScalarMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createScalarMarket(uint256,uint256,address,uint256,address,int256[],uint256,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createYesNoMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createYesNoMarket(uint256,uint256,address,uint256,address,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    "creationTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decrementOpenInterestFromMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementOpenInterestFromMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    designatedReportNoShowBondInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "designatedReportNoShowBondInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    designatedReportStakeInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "designatedReportStakeInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeWindowFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "disputeWindowFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    disputeWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "disputeWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fork(overrides?: Overrides): Promise<BigNumber>;

    "fork()"(overrides?: Overrides): Promise<BigNumber>;

    formulas(overrides?: CallOverrides): Promise<BigNumber>;

    "formulas()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeRoundDurationInSeconds(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeRoundDurationInSeconds(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeThresholdForFork(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputeThresholdForFork()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeWindow(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeWindow(uint256)"(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeWindowId(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeWindowId(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisputeWindowStartTimeAndDuration(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeWindowStartTimeAndDuration(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForkEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkReputationGoal(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkReputationGoal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForkingMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "getForkingMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialReportMinValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialReportMinValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenInterestInAttoCash(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrCacheDesignatedReportNoShowBond(
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCacheDesignatedReportNoShowBond()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCacheDesignatedReportStake(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCacheMarketRepBond(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheMarketRepBond()"(overrides?: Overrides): Promise<BigNumber>;

    getOrCacheReportingFeeDivisor(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCacheValidityBond(overrides?: Overrides): Promise<BigNumber>;

    "getOrCacheValidityBond()"(overrides?: Overrides): Promise<BigNumber>;

    getOrCreateCurrentDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreateCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCreateDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreateDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCreateNextDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreateNextDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCreatePreviousDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreatePreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrCreatePreviousPreviousDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrCreatePreviousPreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getParentPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParentPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParentUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "getParentUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutNumerators(overrides?: CallOverrides): Promise<BigNumber>;

    "getPayoutNumerators()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "getReportingFeeDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReputationToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getReputationToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningChildPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWinningChildPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinningChildUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "getWinningChildUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isContainerForDisputeWindow(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isContainerForDisputeWindow(address)"(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContainerForMarket(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isContainerForMarket(address)"(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForking(overrides?: CallOverrides): Promise<BigNumber>;

    "isForking()"(overrides?: CallOverrides): Promise<BigNumber>;

    isForkingMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "isForkingMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isParentOf(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isParentOf(address)"(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "marketFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrateMarketIn(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateMarketIn(address,uint256,uint256)"(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    migrateMarketOut(
      _destinationUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateMarketOut(address)"(
      _destinationUniverse: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    openInterestCash(overrides?: CallOverrides): Promise<BigNumber>;

    "openInterestCash()"(overrides?: CallOverrides): Promise<BigNumber>;

    payoutNumerators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "payoutNumerators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pokeRepMarketCapInAttoCash(overrides?: Overrides): Promise<BigNumber>;

    "pokeRepMarketCapInAttoCash()"(overrides?: Overrides): Promise<BigNumber>;

    previousDesignatedReportNoShowBondInAttoRep(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousDesignatedReportNoShowBondInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousDesignatedReportStakeInAttoRep(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousDesignatedReportStakeInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousReportingFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "previousReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousValidityBondInAttoCash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previousValidityBondInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "repOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    runPeriodicals(overrides?: Overrides): Promise<BigNumber>;

    "runPeriodicals()"(overrides?: Overrides): Promise<BigNumber>;

    shareSettlementFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareSettlementFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateForkValues(overrides?: Overrides): Promise<BigNumber>;

    "updateForkValues()"(overrides?: Overrides): Promise<BigNumber>;

    updateTentativeWinningChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTentativeWinningChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validityBondInAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validityBondInAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_NUM_OUTCOMES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_NUM_OUTCOMES()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_NUM_TICKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEFAULT_NUM_TICKS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_WINDOW_ID_BUFFER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INITIAL_WINDOW_ID_BUFFER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCategoricalMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createCategoricalMarket(uint256,uint256,address,uint256,address,bytes32[],string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _outcomes: BytesLike[],
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createChildUniverse(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createChildUniverse(uint256[])"(
      _parentPayoutNumerators: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createScalarMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createScalarMarket(uint256,uint256,address,uint256,address,int256[],uint256,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _prices: BigNumberish[],
      _numTicks: BigNumberish,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createYesNoMarket(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createYesNoMarket(uint256,uint256,address,uint256,address,string)"(
      _endTime: BigNumberish,
      _feePerCashInAttoCash: BigNumberish,
      _affiliateValidator: string,
      _affiliateFeeDivisor: BigNumberish,
      _designatedReporterAddress: string,
      _extraInfo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creationTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decrementOpenInterestFromMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementOpenInterestFromMarket(address)"(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address)"(
      _sender: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    designatedReportNoShowBondInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "designatedReportNoShowBondInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    designatedReportStakeInAttoRep(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "designatedReportStakeInAttoRep(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeWindowFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "disputeWindowFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "disputeWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fork(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fork()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    formulas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "formulas()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDisputeWindow(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeRoundDurationInSeconds(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeRoundDurationInSeconds(bool)"(
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeThresholdForDisputePacing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeThresholdForDisputePacing()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeThresholdForFork(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeThresholdForFork()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeWindow(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeWindow(uint256)"(
      _disputeWindowId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeWindowId(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeWindowId(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisputeWindowStartTimeAndDuration(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeWindowStartTimeAndDuration(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForkEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getForkEndTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForkReputationGoal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getForkReputationGoal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForkingMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getForkingMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialReportMinValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitialReportMinValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenInterestInAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOpenInterestInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrCacheDesignatedReportNoShowBond(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheDesignatedReportNoShowBond()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheDesignatedReportStake(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheDesignatedReportStake()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheMarketRepBond(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheMarketRepBond()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheReportingFeeDivisor(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheReportingFeeDivisor()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCacheValidityBond(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCacheValidityBond()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCreateCurrentDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreateCurrentDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCreateDisputeWindowByTimestamp(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreateDisputeWindowByTimestamp(uint256,bool)"(
      _timestamp: BigNumberish,
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCreateNextDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreateNextDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCreatePreviousDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreatePreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrCreatePreviousPreviousDisputeWindow(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrCreatePreviousPreviousDisputeWindow(bool)"(
      _initial: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getParentPayoutDistributionHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParentPayoutDistributionHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getParentUniverse()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutNumerators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayoutNumerators()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReputationToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetRepMarketCapInAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTargetRepMarketCapInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningChildPayoutNumerator(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningChildPayoutNumerator(uint256)"(
      _outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningChildUniverse(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWinningChildUniverse()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementOpenInterest(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementOpenInterest(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isContainerForDisputeWindow(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isContainerForDisputeWindow(address)"(
      _shadyDisputeWindow: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContainerForMarket(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isContainerForMarket(address)"(
      _shadyMarket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContainerForReportingParticipant(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isContainerForReportingParticipant(address)"(
      _shadyReportingParticipant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isForking()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isForkingMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isForkingMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOpenInterestCash(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOpenInterestCash(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isParentOf(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isParentOf(address)"(
      _shadyChild: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateMarketIn(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateMarketIn(address,uint256,uint256)"(
      _market: string,
      _cashBalance: BigNumberish,
      _marketOI: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    migrateMarketOut(
      _destinationUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateMarketOut(address)"(
      _destinationUniverse: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    openInterestCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "openInterestCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutNumerators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "payoutNumerators(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pokeRepMarketCapInAttoCash(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pokeRepMarketCapInAttoCash()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    previousDesignatedReportNoShowBondInAttoRep(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousDesignatedReportNoShowBondInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousDesignatedReportStakeInAttoRep(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousDesignatedReportStakeInAttoRep()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousReportingFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousReportingFeeDivisor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousValidityBondInAttoCash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousValidityBondInAttoCash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "repOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    runPeriodicals(overrides?: Overrides): Promise<PopulatedTransaction>;

    "runPeriodicals()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    shareSettlementFeeDivisor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareSettlementFeeDivisor(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateForkValues(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateForkValues()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateTentativeWinningChildUniverse(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTentativeWinningChildUniverse(bytes32)"(
      _parentPayoutDistributionHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validityBondInAttoCash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validityBondInAttoCash(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address)"(
      _recipient: string,
      _amount: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
