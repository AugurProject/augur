/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestNetReputationTokenInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "allowances(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "augur()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "burnForMarket(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "faucet(uint256)": FunctionFragment;
    "getLegacyRepToken()": FunctionFragment;
    "getTotalMigrated()": FunctionFragment;
    "getTotalTheoreticalSupply()": FunctionFragment;
    "getUniverse()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "legacyRepToken()": FunctionFragment;
    "migrateFromLegacyReputationToken()": FunctionFragment;
    "migrateIn(address,uint256)": FunctionFragment;
    "migrateOutByPayout(uint256[],uint256)": FunctionFragment;
    "mintForReportingParticipant(uint256)": FunctionFragment;
    "mintForWarpSync(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "parentUniverse()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "trustedDisputeWindowTransfer(address,address,uint256)": FunctionFragment;
    "trustedMarketTransfer(address,address,uint256)": FunctionFragment;
    "trustedReportingParticipantTransfer(address,address,uint256)": FunctionFragment;
    "trustedUniverseTransfer(address,address,uint256)": FunctionFragment;
    "warpSync()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "augur", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnForMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "faucet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLegacyRepToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMigrated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTheoreticalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyRepToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateFromLegacyReputationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateIn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateOutByPayout",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForReportingParticipant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForWarpSync",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentUniverse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedDisputeWindowTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedMarketTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedReportingParticipantTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedUniverseTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "warpSync", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "augur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "faucet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLegacyRepToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTheoreticalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyRepToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateFromLegacyReputationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrateIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateOutByPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintForReportingParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintForWarpSync",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentUniverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedDisputeWindowTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedMarketTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedReportingParticipantTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedUniverseTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warpSync", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class TestNetReputationToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: TestNetReputationTokenInterface;

  functions: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    augur(overrides?: CallOverrides): Promise<[string]>;

    "augur()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnForMarket(
      _amountToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnForMarket(uint256)"(
      _amountToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    faucet(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "faucet(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLegacyRepToken(overrides?: CallOverrides): Promise<[string]>;

    "getLegacyRepToken()"(overrides?: CallOverrides): Promise<[string]>;

    getTotalMigrated(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalMigrated()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalTheoreticalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalTheoreticalSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniverse(overrides?: CallOverrides): Promise<[string]>;

    "getUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    legacyRepToken(overrides?: CallOverrides): Promise<[string]>;

    "legacyRepToken()"(overrides?: CallOverrides): Promise<[string]>;

    migrateFromLegacyReputationToken(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateFromLegacyReputationToken()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    migrateIn(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateIn(address,uint256)"(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    migrateOutByPayout(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateOutByPayout(uint256[],uint256)"(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintForReportingParticipant(
      _amountMigrated: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintForReportingParticipant(uint256)"(
      _amountMigrated: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintForWarpSync(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintForWarpSync(uint256,address)"(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    parentUniverse(overrides?: CallOverrides): Promise<[string]>;

    "parentUniverse()"(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedDisputeWindowTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedDisputeWindowTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedMarketTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedMarketTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedReportingParticipantTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedReportingParticipantTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedUniverseTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trustedUniverseTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    warpSync(overrides?: CallOverrides): Promise<[string]>;

    "warpSync()"(overrides?: CallOverrides): Promise<[string]>;
  };

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowances(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  augur(overrides?: CallOverrides): Promise<string>;

  "augur()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnForMarket(
    _amountToBurn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnForMarket(uint256)"(
    _amountToBurn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  faucet(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "faucet(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLegacyRepToken(overrides?: CallOverrides): Promise<string>;

  "getLegacyRepToken()"(overrides?: CallOverrides): Promise<string>;

  getTotalMigrated(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalMigrated()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTheoreticalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalTheoreticalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUniverse(overrides?: CallOverrides): Promise<string>;

  "getUniverse()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  legacyRepToken(overrides?: CallOverrides): Promise<string>;

  "legacyRepToken()"(overrides?: CallOverrides): Promise<string>;

  migrateFromLegacyReputationToken(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateFromLegacyReputationToken()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  migrateIn(
    _reporter: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateIn(address,uint256)"(
    _reporter: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  migrateOutByPayout(
    _payoutNumerators: BigNumberish[],
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateOutByPayout(uint256[],uint256)"(
    _payoutNumerators: BigNumberish[],
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintForReportingParticipant(
    _amountMigrated: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintForReportingParticipant(uint256)"(
    _amountMigrated: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintForWarpSync(
    _amountToMint: BigNumberish,
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintForWarpSync(uint256,address)"(
    _amountToMint: BigNumberish,
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  parentUniverse(overrides?: CallOverrides): Promise<string>;

  "parentUniverse()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedDisputeWindowTransfer(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedDisputeWindowTransfer(address,address,uint256)"(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedMarketTransfer(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedMarketTransfer(address,address,uint256)"(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedReportingParticipantTransfer(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedReportingParticipantTransfer(address,address,uint256)"(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedUniverseTransfer(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trustedUniverseTransfer(address,address,uint256)"(
    _source: string,
    _destination: string,
    _attotokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  warpSync(overrides?: CallOverrides): Promise<string>;

  "warpSync()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    augur(overrides?: CallOverrides): Promise<string>;

    "augur()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnForMarket(
      _amountToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "burnForMarket(uint256)"(
      _amountToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    faucet(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "faucet(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLegacyRepToken(overrides?: CallOverrides): Promise<string>;

    "getLegacyRepToken()"(overrides?: CallOverrides): Promise<string>;

    getTotalMigrated(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalMigrated()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTheoreticalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTheoreticalSupply()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverse(overrides?: CallOverrides): Promise<string>;

    "getUniverse()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    legacyRepToken(overrides?: CallOverrides): Promise<string>;

    "legacyRepToken()"(overrides?: CallOverrides): Promise<string>;

    migrateFromLegacyReputationToken(
      overrides?: CallOverrides
    ): Promise<boolean>;

    "migrateFromLegacyReputationToken()"(
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateIn(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "migrateIn(address,uint256)"(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateOutByPayout(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "migrateOutByPayout(uint256[],uint256)"(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintForReportingParticipant(
      _amountMigrated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintForReportingParticipant(uint256)"(
      _amountMigrated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintForWarpSync(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintForWarpSync(uint256,address)"(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    parentUniverse(overrides?: CallOverrides): Promise<string>;

    "parentUniverse()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedDisputeWindowTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedDisputeWindowTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedMarketTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedMarketTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedReportingParticipantTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedReportingParticipantTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedUniverseTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "trustedUniverseTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    warpSync(overrides?: CallOverrides): Promise<string>;

    "warpSync()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    augur(overrides?: CallOverrides): Promise<BigNumber>;

    "augur()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnForMarket(
      _amountToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnForMarket(uint256)"(
      _amountToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    faucet(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "faucet(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLegacyRepToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getLegacyRepToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalMigrated(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalMigrated()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTheoreticalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTheoreticalSupply()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "getUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    legacyRepToken(overrides?: CallOverrides): Promise<BigNumber>;

    "legacyRepToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrateFromLegacyReputationToken(overrides?: Overrides): Promise<BigNumber>;

    "migrateFromLegacyReputationToken()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    migrateIn(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateIn(address,uint256)"(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    migrateOutByPayout(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateOutByPayout(uint256[],uint256)"(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintForReportingParticipant(
      _amountMigrated: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintForReportingParticipant(uint256)"(
      _amountMigrated: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintForWarpSync(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintForWarpSync(uint256,address)"(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    parentUniverse(overrides?: CallOverrides): Promise<BigNumber>;

    "parentUniverse()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedDisputeWindowTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedDisputeWindowTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedMarketTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedMarketTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedReportingParticipantTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedReportingParticipantTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedUniverseTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trustedUniverseTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    warpSync(overrides?: CallOverrides): Promise<BigNumber>;

    "warpSync()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    augur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "augur()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnForMarket(
      _amountToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnForMarket(uint256)"(
      _amountToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    faucet(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "faucet(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLegacyRepToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLegacyRepToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMigrated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalMigrated()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTheoreticalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalTheoreticalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUniverse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    legacyRepToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "legacyRepToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateFromLegacyReputationToken(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateFromLegacyReputationToken()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    migrateIn(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateIn(address,uint256)"(
      _reporter: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    migrateOutByPayout(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateOutByPayout(uint256[],uint256)"(
      _payoutNumerators: BigNumberish[],
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintForReportingParticipant(
      _amountMigrated: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintForReportingParticipant(uint256)"(
      _amountMigrated: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintForWarpSync(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintForWarpSync(uint256,address)"(
      _amountToMint: BigNumberish,
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentUniverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "parentUniverse()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedDisputeWindowTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedDisputeWindowTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedMarketTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedMarketTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedReportingParticipantTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedReportingParticipantTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedUniverseTransfer(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trustedUniverseTransfer(address,address,uint256)"(
      _source: string,
      _destination: string,
      _attotokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    warpSync(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "warpSync()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
