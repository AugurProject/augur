/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DevUtilsInterface extends ethers.utils.Interface {
  functions: {
    "EIP712_EXCHANGE_DOMAIN_HASH()": FunctionFragment;
    "decodeAssetProxyDispatchError(bytes)": FunctionFragment;
    "decodeAssetProxyExistsError(bytes)": FunctionFragment;
    "decodeAssetProxyId(bytes)": FunctionFragment;
    "decodeAssetProxyTransferError(bytes)": FunctionFragment;
    "decodeEIP1271SignatureError(bytes)": FunctionFragment;
    "decodeERC1155AssetData(bytes)": FunctionFragment;
    "decodeERC20AssetData(bytes)": FunctionFragment;
    "decodeERC20BridgeAssetData(bytes)": FunctionFragment;
    "decodeERC721AssetData(bytes)": FunctionFragment;
    "decodeExchangeInvalidContextError(bytes)": FunctionFragment;
    "decodeFillError(bytes)": FunctionFragment;
    "decodeIncompleteFillError(bytes)": FunctionFragment;
    "decodeMultiAssetData(bytes)": FunctionFragment;
    "decodeNegativeSpreadError(bytes)": FunctionFragment;
    "decodeOrderEpochError(bytes)": FunctionFragment;
    "decodeOrderStatusError(bytes)": FunctionFragment;
    "decodeSignatureError(bytes)": FunctionFragment;
    "decodeSignatureValidatorNotApprovedError(bytes)": FunctionFragment;
    "decodeSignatureWalletError(bytes)": FunctionFragment;
    "decodeStaticCallAssetData(bytes)": FunctionFragment;
    "decodeTransactionError(bytes)": FunctionFragment;
    "decodeTransactionExecutionError(bytes)": FunctionFragment;
    "encodeERC1155AssetData(address,uint256[],uint256[],bytes)": FunctionFragment;
    "encodeERC20AssetData(address)": FunctionFragment;
    "encodeERC721AssetData(address,uint256)": FunctionFragment;
    "encodeMultiAssetData(uint256[],bytes[])": FunctionFragment;
    "encodeStaticCallAssetData(address,bytes,bytes32)": FunctionFragment;
    "getAssetProxyAllowance(address,bytes)": FunctionFragment;
    "getBalance(address,bytes)": FunctionFragment;
    "getBalanceAndAssetProxyAllowance(address,bytes)": FunctionFragment;
    "getBatchAssetProxyAllowances(address,bytes[])": FunctionFragment;
    "getBatchBalances(address,bytes[])": FunctionFragment;
    "getBatchBalancesAndAssetProxyAllowances(address,bytes[])": FunctionFragment;
    "getEthBalances(address[])": FunctionFragment;
    "getOrderHash(tuple,uint256,address)": FunctionFragment;
    "getOrderRelevantState(tuple,bytes)": FunctionFragment;
    "getOrderRelevantStates(tuple[],bytes[])": FunctionFragment;
    "getSimulatedOrderMakerTransferResults(tuple,address,uint256)": FunctionFragment;
    "getSimulatedOrderTransferResults(tuple,address,uint256)": FunctionFragment;
    "getSimulatedOrdersTransferResults(tuple[],address[],uint256[])": FunctionFragment;
    "getTransactionHash(tuple,uint256,address)": FunctionFragment;
    "getTransferableAssetAmount(address,bytes)": FunctionFragment;
    "revertIfInvalidAssetData(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EIP712_EXCHANGE_DOMAIN_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeAssetProxyDispatchError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeAssetProxyExistsError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeAssetProxyId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeAssetProxyTransferError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeEIP1271SignatureError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeERC1155AssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeERC20AssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeERC20BridgeAssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeERC721AssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeExchangeInvalidContextError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeFillError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeIncompleteFillError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMultiAssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeNegativeSpreadError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeOrderEpochError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeOrderStatusError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSignatureError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSignatureValidatorNotApprovedError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSignatureWalletError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeStaticCallAssetData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTransactionError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTransactionExecutionError",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeERC1155AssetData",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeERC20AssetData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeERC721AssetData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMultiAssetData",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeStaticCallAssetData",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetProxyAllowance",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceAndAssetProxyAllowance",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchAssetProxyAllowances",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchBalances",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchBalancesAndAssetProxyAllowances",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalances",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderHash",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRelevantState",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRelevantStates",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSimulatedOrderMakerTransferResults",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSimulatedOrderTransferResults",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSimulatedOrdersTransferResults",
    values: [
      {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableAssetAmount",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfInvalidAssetData",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_EXCHANGE_DOMAIN_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeAssetProxyDispatchError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeAssetProxyExistsError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeAssetProxyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeAssetProxyTransferError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeEIP1271SignatureError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeERC1155AssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeERC20AssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeERC20BridgeAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeERC721AssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeExchangeInvalidContextError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeFillError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeIncompleteFillError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeMultiAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeNegativeSpreadError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeOrderEpochError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeOrderStatusError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSignatureError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSignatureValidatorNotApprovedError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSignatureWalletError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeStaticCallAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTransactionError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeTransactionExecutionError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeERC1155AssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeERC20AssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeERC721AssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMultiAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeStaticCallAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetProxyAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceAndAssetProxyAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchAssetProxyAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchBalancesAndAssetProxyAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSimulatedOrderMakerTransferResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSimulatedOrderTransferResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSimulatedOrdersTransferResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableAssetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfInvalidAssetData",
    data: BytesLike
  ): Result;

  events: {};
}

export class DevUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: DevUtilsInterface;

  functions: {
    EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<[string]>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    decodeAssetProxyDispatchError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        assetData: string;
      }
    >;

    "decodeAssetProxyDispatchError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        assetData: string;
      }
    >;

    decodeAssetProxyExistsError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; assetProxyAddress: string }
    >;

    "decodeAssetProxyExistsError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; assetProxyAddress: string }
    >;

    decodeAssetProxyId(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetProxyId: string }>;

    "decodeAssetProxyId(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetProxyId: string }>;

    decodeAssetProxyTransferError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        orderHash: string;
        assetData: string;
        errorData: string;
      }
    >;

    "decodeAssetProxyTransferError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        orderHash: string;
        assetData: string;
        errorData: string;
      }
    >;

    decodeEIP1271SignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        verifyingContractAddress: string;
        data: string;
        signature: string;
        errorData: string;
      }
    >;

    "decodeEIP1271SignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        verifyingContractAddress: string;
        data: string;
        signature: string;
        errorData: string;
      }
    >;

    decodeERC1155AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenIds: BigNumber[];
        tokenValues: BigNumber[];
        callbackData: string;
      }
    >;

    "decodeERC1155AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenIds: BigNumber[];
        tokenValues: BigNumber[];
        callbackData: string;
      }
    >;

    decodeERC20AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; tokenAddress: string }
    >;

    "decodeERC20AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; tokenAddress: string }
    >;

    decodeERC20BridgeAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        tokenAddress: string;
        bridgeAddress: string;
        bridgeData: string;
      }
    >;

    "decodeERC20BridgeAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        tokenAddress: string;
        bridgeAddress: string;
        bridgeData: string;
      }
    >;

    decodeERC721AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    "decodeERC721AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    decodeExchangeInvalidContextError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        contextAddress: string;
      }
    >;

    "decodeExchangeInvalidContextError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        contextAddress: string;
      }
    >;

    decodeFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { errorCode: number; orderHash: string }>;

    "decodeFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { errorCode: number; orderHash: string }>;

    decodeIncompleteFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        errorCode: number;
        expectedAssetFillAmount: BigNumber;
        actualAssetFillAmount: BigNumber;
      }
    >;

    "decodeIncompleteFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        errorCode: number;
        expectedAssetFillAmount: BigNumber;
        actualAssetFillAmount: BigNumber;
      }
    >;

    decodeMultiAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber[], string[]] & {
        assetProxyId: string;
        amounts: BigNumber[];
        nestedAssetData: string[];
      }
    >;

    "decodeMultiAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber[], string[]] & {
        assetProxyId: string;
        amounts: BigNumber[];
        nestedAssetData: string[];
      }
    >;

    decodeNegativeSpreadError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { leftOrderHash: string; rightOrderHash: string }
    >;

    "decodeNegativeSpreadError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { leftOrderHash: string; rightOrderHash: string }
    >;

    decodeOrderEpochError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        makerAddress: string;
        orderSenderAddress: string;
        currentEpoch: BigNumber;
      }
    >;

    "decodeOrderEpochError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        makerAddress: string;
        orderSenderAddress: string;
        currentEpoch: BigNumber;
      }
    >;

    decodeOrderStatusError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number] & { orderHash: string; orderStatus: number }>;

    "decodeOrderStatusError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number] & { orderHash: string; orderStatus: number }>;

    decodeSignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        errorCode: number;
        hash: string;
        signerAddress: string;
        signature: string;
      }
    >;

    "decodeSignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        errorCode: number;
        hash: string;
        signerAddress: string;
        signature: string;
      }
    >;

    decodeSignatureValidatorNotApprovedError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { signerAddress: string; validatorAddress: string }
    >;

    "decodeSignatureValidatorNotApprovedError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { signerAddress: string; validatorAddress: string }
    >;

    decodeSignatureWalletError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        hash: string;
        signerAddress: string;
        signature: string;
        errorData: string;
      }
    >;

    "decodeSignatureWalletError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        hash: string;
        signerAddress: string;
        signature: string;
        errorData: string;
      }
    >;

    decodeStaticCallAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        staticCallTargetAddress: string;
        staticCallData: string;
        expectedReturnDataHash: string;
      }
    >;

    "decodeStaticCallAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        staticCallTargetAddress: string;
        staticCallData: string;
        expectedReturnDataHash: string;
      }
    >;

    decodeTransactionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { errorCode: number; transactionHash: string }
    >;

    "decodeTransactionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { errorCode: number; transactionHash: string }
    >;

    decodeTransactionExecutionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { transactionHash: string; errorData: string }
    >;

    "decodeTransactionExecutionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { transactionHash: string; errorData: string }
    >;

    encodeERC1155AssetData(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    "encodeERC1155AssetData(address,uint256[],uint256[],bytes)"(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    encodeERC20AssetData(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    "encodeERC20AssetData(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    encodeERC721AssetData(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    "encodeERC721AssetData(address,uint256)"(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    encodeMultiAssetData(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    "encodeMultiAssetData(uint256[],bytes[])"(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    encodeStaticCallAssetData(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    "encodeStaticCallAssetData(address,bytes,bytes32)"(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { assetData: string }>;

    getAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBalance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBalance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBalanceAndAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBalanceAndAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBatchAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBatchAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBatchBalances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBatchBalances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBatchBalancesAndAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getBatchBalancesAndAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getEthBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getEthBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOrderHash(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    "getOrderHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,address)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getOrderRelevantState(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrderRelevantState((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOrderRelevantStates(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getOrderRelevantStates(tuple[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSimulatedOrderMakerTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getSimulatedOrderMakerTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSimulatedOrderTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getSimulatedOrderTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSimulatedOrdersTransferResults(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getSimulatedOrdersTransferResults(tuple[],address[],uint256[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTransactionHash(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<[string] & { transactionHash: string }>;

    "getTransactionHash((uint256,uint256,uint256,address,bytes),uint256,address)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<[string] & { transactionHash: string }>;

    getTransferableAssetAmount(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getTransferableAssetAmount(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revertIfInvalidAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "revertIfInvalidAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

  "EIP712_EXCHANGE_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<string>;

  decodeAssetProxyDispatchError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      errorCode: number;
      orderHash: string;
      assetData: string;
    }
  >;

  "decodeAssetProxyDispatchError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      errorCode: number;
      orderHash: string;
      assetData: string;
    }
  >;

  decodeAssetProxyExistsError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { assetProxyId: string; assetProxyAddress: string }
  >;

  "decodeAssetProxyExistsError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { assetProxyId: string; assetProxyAddress: string }
  >;

  decodeAssetProxyId(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "decodeAssetProxyId(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  decodeAssetProxyTransferError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      orderHash: string;
      assetData: string;
      errorData: string;
    }
  >;

  "decodeAssetProxyTransferError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      orderHash: string;
      assetData: string;
      errorData: string;
    }
  >;

  decodeEIP1271SignatureError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      verifyingContractAddress: string;
      data: string;
      signature: string;
      errorData: string;
    }
  >;

  "decodeEIP1271SignatureError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      verifyingContractAddress: string;
      data: string;
      signature: string;
      errorData: string;
    }
  >;

  decodeERC1155AssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], BigNumber[], string] & {
      assetProxyId: string;
      tokenAddress: string;
      tokenIds: BigNumber[];
      tokenValues: BigNumber[];
      callbackData: string;
    }
  >;

  "decodeERC1155AssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber[], BigNumber[], string] & {
      assetProxyId: string;
      tokenAddress: string;
      tokenIds: BigNumber[];
      tokenValues: BigNumber[];
      callbackData: string;
    }
  >;

  decodeERC20AssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { assetProxyId: string; tokenAddress: string }>;

  "decodeERC20AssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { assetProxyId: string; tokenAddress: string }>;

  decodeERC20BridgeAssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      assetProxyId: string;
      tokenAddress: string;
      bridgeAddress: string;
      bridgeData: string;
    }
  >;

  "decodeERC20BridgeAssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      assetProxyId: string;
      tokenAddress: string;
      bridgeAddress: string;
      bridgeData: string;
    }
  >;

  decodeERC721AssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      assetProxyId: string;
      tokenAddress: string;
      tokenId: BigNumber;
    }
  >;

  "decodeERC721AssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      assetProxyId: string;
      tokenAddress: string;
      tokenId: BigNumber;
    }
  >;

  decodeExchangeInvalidContextError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      errorCode: number;
      orderHash: string;
      contextAddress: string;
    }
  >;

  "decodeExchangeInvalidContextError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      errorCode: number;
      orderHash: string;
      contextAddress: string;
    }
  >;

  decodeFillError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { errorCode: number; orderHash: string }>;

  "decodeFillError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { errorCode: number; orderHash: string }>;

  decodeIncompleteFillError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      errorCode: number;
      expectedAssetFillAmount: BigNumber;
      actualAssetFillAmount: BigNumber;
    }
  >;

  "decodeIncompleteFillError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      errorCode: number;
      expectedAssetFillAmount: BigNumber;
      actualAssetFillAmount: BigNumber;
    }
  >;

  decodeMultiAssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber[], string[]] & {
      assetProxyId: string;
      amounts: BigNumber[];
      nestedAssetData: string[];
    }
  >;

  "decodeMultiAssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber[], string[]] & {
      assetProxyId: string;
      amounts: BigNumber[];
      nestedAssetData: string[];
    }
  >;

  decodeNegativeSpreadError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { leftOrderHash: string; rightOrderHash: string }
  >;

  "decodeNegativeSpreadError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { leftOrderHash: string; rightOrderHash: string }
  >;

  decodeOrderEpochError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      makerAddress: string;
      orderSenderAddress: string;
      currentEpoch: BigNumber;
    }
  >;

  "decodeOrderEpochError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      makerAddress: string;
      orderSenderAddress: string;
      currentEpoch: BigNumber;
    }
  >;

  decodeOrderStatusError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, number] & { orderHash: string; orderStatus: number }>;

  "decodeOrderStatusError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, number] & { orderHash: string; orderStatus: number }>;

  decodeSignatureError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string] & {
      errorCode: number;
      hash: string;
      signerAddress: string;
      signature: string;
    }
  >;

  "decodeSignatureError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string] & {
      errorCode: number;
      hash: string;
      signerAddress: string;
      signature: string;
    }
  >;

  decodeSignatureValidatorNotApprovedError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { signerAddress: string; validatorAddress: string }
  >;

  "decodeSignatureValidatorNotApprovedError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { signerAddress: string; validatorAddress: string }
  >;

  decodeSignatureWalletError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      hash: string;
      signerAddress: string;
      signature: string;
      errorData: string;
    }
  >;

  "decodeSignatureWalletError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      hash: string;
      signerAddress: string;
      signature: string;
      errorData: string;
    }
  >;

  decodeStaticCallAssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      assetProxyId: string;
      staticCallTargetAddress: string;
      staticCallData: string;
      expectedReturnDataHash: string;
    }
  >;

  "decodeStaticCallAssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      assetProxyId: string;
      staticCallTargetAddress: string;
      staticCallData: string;
      expectedReturnDataHash: string;
    }
  >;

  decodeTransactionError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { errorCode: number; transactionHash: string }>;

  "decodeTransactionError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string] & { errorCode: number; transactionHash: string }>;

  decodeTransactionExecutionError(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { transactionHash: string; errorData: string }>;

  "decodeTransactionExecutionError(bytes)"(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { transactionHash: string; errorData: string }>;

  encodeERC1155AssetData(
    tokenAddress: string,
    tokenIds: BigNumberish[],
    tokenValues: BigNumberish[],
    callbackData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeERC1155AssetData(address,uint256[],uint256[],bytes)"(
    tokenAddress: string,
    tokenIds: BigNumberish[],
    tokenValues: BigNumberish[],
    callbackData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeERC20AssetData(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeERC20AssetData(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeERC721AssetData(
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeERC721AssetData(address,uint256)"(
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeMultiAssetData(
    amounts: BigNumberish[],
    nestedAssetData: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeMultiAssetData(uint256[],bytes[])"(
    amounts: BigNumberish[],
    nestedAssetData: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  encodeStaticCallAssetData(
    staticCallTargetAddress: string,
    staticCallData: BytesLike,
    expectedReturnDataHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeStaticCallAssetData(address,bytes,bytes32)"(
    staticCallTargetAddress: string,
    staticCallData: BytesLike,
    expectedReturnDataHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetProxyAllowance(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAssetProxyAllowance(address,bytes)"(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBalance(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBalance(address,bytes)"(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBalanceAndAssetProxyAllowance(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBalanceAndAssetProxyAllowance(address,bytes)"(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBatchAssetProxyAllowances(
    ownerAddress: string,
    assetData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBatchAssetProxyAllowances(address,bytes[])"(
    ownerAddress: string,
    assetData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBatchBalances(
    ownerAddress: string,
    assetData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBatchBalances(address,bytes[])"(
    ownerAddress: string,
    assetData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBatchBalancesAndAssetProxyAllowances(
    ownerAddress: string,
    assetData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getBatchBalancesAndAssetProxyAllowances(address,bytes[])"(
    ownerAddress: string,
    assetData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getEthBalances(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getEthBalances(address[])"(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOrderHash(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    chainId: BigNumberish,
    exchange: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getOrderHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,address)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    chainId: BigNumberish,
    exchange: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrderRelevantState(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrderRelevantState((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOrderRelevantStates(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    signatures: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getOrderRelevantStates(tuple[],bytes[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    signatures: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSimulatedOrderMakerTransferResults(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAddress: string,
    takerAssetFillAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getSimulatedOrderMakerTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAddress: string,
    takerAssetFillAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSimulatedOrderTransferResults(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAddress: string,
    takerAssetFillAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getSimulatedOrderTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
    order: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    },
    takerAddress: string,
    takerAssetFillAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSimulatedOrdersTransferResults(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAddresses: string[],
    takerAssetFillAmounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getSimulatedOrdersTransferResults(tuple[],address[],uint256[])"(
    orders: {
      makerAddress: string;
      takerAddress: string;
      feeRecipientAddress: string;
      senderAddress: string;
      makerAssetAmount: BigNumberish;
      takerAssetAmount: BigNumberish;
      makerFee: BigNumberish;
      takerFee: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      salt: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      makerFeeAssetData: BytesLike;
      takerFeeAssetData: BytesLike;
    }[],
    takerAddresses: string[],
    takerAssetFillAmounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTransactionHash(
    transaction: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    },
    chainId: BigNumberish,
    exchange: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTransactionHash((uint256,uint256,uint256,address,bytes),uint256,address)"(
    transaction: {
      salt: BigNumberish;
      expirationTimeSeconds: BigNumberish;
      gasPrice: BigNumberish;
      signerAddress: string;
      data: BytesLike;
    },
    chainId: BigNumberish,
    exchange: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTransferableAssetAmount(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getTransferableAssetAmount(address,bytes)"(
    ownerAddress: string,
    assetData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revertIfInvalidAssetData(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "revertIfInvalidAssetData(bytes)"(
    assetData: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<string>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(overrides?: CallOverrides): Promise<string>;

    decodeAssetProxyDispatchError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        assetData: string;
      }
    >;

    "decodeAssetProxyDispatchError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        assetData: string;
      }
    >;

    decodeAssetProxyExistsError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; assetProxyAddress: string }
    >;

    "decodeAssetProxyExistsError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; assetProxyAddress: string }
    >;

    decodeAssetProxyId(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "decodeAssetProxyId(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    decodeAssetProxyTransferError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        orderHash: string;
        assetData: string;
        errorData: string;
      }
    >;

    "decodeAssetProxyTransferError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        orderHash: string;
        assetData: string;
        errorData: string;
      }
    >;

    decodeEIP1271SignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        verifyingContractAddress: string;
        data: string;
        signature: string;
        errorData: string;
      }
    >;

    "decodeEIP1271SignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        verifyingContractAddress: string;
        data: string;
        signature: string;
        errorData: string;
      }
    >;

    decodeERC1155AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenIds: BigNumber[];
        tokenValues: BigNumber[];
        callbackData: string;
      }
    >;

    "decodeERC1155AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber[], BigNumber[], string] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenIds: BigNumber[];
        tokenValues: BigNumber[];
        callbackData: string;
      }
    >;

    decodeERC20AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; tokenAddress: string }
    >;

    "decodeERC20AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { assetProxyId: string; tokenAddress: string }
    >;

    decodeERC20BridgeAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        tokenAddress: string;
        bridgeAddress: string;
        bridgeData: string;
      }
    >;

    "decodeERC20BridgeAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        tokenAddress: string;
        bridgeAddress: string;
        bridgeData: string;
      }
    >;

    decodeERC721AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    "decodeERC721AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        assetProxyId: string;
        tokenAddress: string;
        tokenId: BigNumber;
      }
    >;

    decodeExchangeInvalidContextError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        contextAddress: string;
      }
    >;

    "decodeExchangeInvalidContextError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        errorCode: number;
        orderHash: string;
        contextAddress: string;
      }
    >;

    decodeFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { errorCode: number; orderHash: string }>;

    "decodeFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string] & { errorCode: number; orderHash: string }>;

    decodeIncompleteFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        errorCode: number;
        expectedAssetFillAmount: BigNumber;
        actualAssetFillAmount: BigNumber;
      }
    >;

    "decodeIncompleteFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        errorCode: number;
        expectedAssetFillAmount: BigNumber;
        actualAssetFillAmount: BigNumber;
      }
    >;

    decodeMultiAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber[], string[]] & {
        assetProxyId: string;
        amounts: BigNumber[];
        nestedAssetData: string[];
      }
    >;

    "decodeMultiAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber[], string[]] & {
        assetProxyId: string;
        amounts: BigNumber[];
        nestedAssetData: string[];
      }
    >;

    decodeNegativeSpreadError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { leftOrderHash: string; rightOrderHash: string }
    >;

    "decodeNegativeSpreadError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { leftOrderHash: string; rightOrderHash: string }
    >;

    decodeOrderEpochError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        makerAddress: string;
        orderSenderAddress: string;
        currentEpoch: BigNumber;
      }
    >;

    "decodeOrderEpochError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        makerAddress: string;
        orderSenderAddress: string;
        currentEpoch: BigNumber;
      }
    >;

    decodeOrderStatusError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number] & { orderHash: string; orderStatus: number }>;

    "decodeOrderStatusError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number] & { orderHash: string; orderStatus: number }>;

    decodeSignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        errorCode: number;
        hash: string;
        signerAddress: string;
        signature: string;
      }
    >;

    "decodeSignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        errorCode: number;
        hash: string;
        signerAddress: string;
        signature: string;
      }
    >;

    decodeSignatureValidatorNotApprovedError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { signerAddress: string; validatorAddress: string }
    >;

    "decodeSignatureValidatorNotApprovedError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { signerAddress: string; validatorAddress: string }
    >;

    decodeSignatureWalletError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        hash: string;
        signerAddress: string;
        signature: string;
        errorData: string;
      }
    >;

    "decodeSignatureWalletError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        hash: string;
        signerAddress: string;
        signature: string;
        errorData: string;
      }
    >;

    decodeStaticCallAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        staticCallTargetAddress: string;
        staticCallData: string;
        expectedReturnDataHash: string;
      }
    >;

    "decodeStaticCallAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        assetProxyId: string;
        staticCallTargetAddress: string;
        staticCallData: string;
        expectedReturnDataHash: string;
      }
    >;

    decodeTransactionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { errorCode: number; transactionHash: string }
    >;

    "decodeTransactionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string] & { errorCode: number; transactionHash: string }
    >;

    decodeTransactionExecutionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { transactionHash: string; errorData: string }
    >;

    "decodeTransactionExecutionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { transactionHash: string; errorData: string }
    >;

    encodeERC1155AssetData(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeERC1155AssetData(address,uint256[],uint256[],bytes)"(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeERC20AssetData(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeERC20AssetData(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeERC721AssetData(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeERC721AssetData(address,uint256)"(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeMultiAssetData(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeMultiAssetData(uint256[],bytes[])"(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    encodeStaticCallAssetData(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeStaticCallAssetData(address,bytes,bytes32)"(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceAndAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; allowance: BigNumber }
    >;

    "getBalanceAndAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; allowance: BigNumber }
    >;

    getBatchAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getBatchAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBatchBalances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getBatchBalances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBatchBalancesAndAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        balances: BigNumber[];
        allowances: BigNumber[];
      }
    >;

    "getBatchBalancesAndAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        balances: BigNumber[];
        allowances: BigNumber[];
      }
    >;

    getEthBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getEthBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOrderHash(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOrderHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,address)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrderRelevantState(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        },
        BigNumber,
        boolean
      ] & {
        orderInfo: [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        };
        fillableTakerAssetAmount: BigNumber;
        isValidSignature: boolean;
      }
    >;

    "getOrderRelevantState((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        },
        BigNumber,
        boolean
      ] & {
        orderInfo: [number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        };
        fillableTakerAssetAmount: BigNumber;
        isValidSignature: boolean;
      }
    >;

    getOrderRelevantStates(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        })[],
        BigNumber[],
        boolean[]
      ] & {
        ordersInfo: ([number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        })[];
        fillableTakerAssetAmounts: BigNumber[];
        isValidSignature: boolean[];
      }
    >;

    "getOrderRelevantStates(tuple[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        })[],
        BigNumber[],
        boolean[]
      ] & {
        ordersInfo: ([number, string, BigNumber] & {
          orderStatus: number;
          orderHash: string;
          orderTakerAssetFilledAmount: BigNumber;
        })[];
        fillableTakerAssetAmounts: BigNumber[];
        isValidSignature: boolean[];
      }
    >;

    getSimulatedOrderMakerTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getSimulatedOrderMakerTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSimulatedOrderTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getSimulatedOrderTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSimulatedOrdersTransferResults(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<number[]>;

    "getSimulatedOrdersTransferResults(tuple[],address[],uint256[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<number[]>;

    getTransactionHash(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTransactionHash((uint256,uint256,uint256,address,bytes),uint256,address)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTransferableAssetAmount(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransferableAssetAmount(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfInvalidAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertIfInvalidAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    EIP712_EXCHANGE_DOMAIN_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeAssetProxyDispatchError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeAssetProxyDispatchError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeAssetProxyExistsError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeAssetProxyExistsError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeAssetProxyId(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeAssetProxyId(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeAssetProxyTransferError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeAssetProxyTransferError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeEIP1271SignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeEIP1271SignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeERC1155AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeERC1155AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeERC20AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeERC20AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeERC20BridgeAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeERC20BridgeAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeERC721AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeERC721AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeExchangeInvalidContextError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeExchangeInvalidContextError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeIncompleteFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeIncompleteFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeMultiAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeMultiAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeNegativeSpreadError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeNegativeSpreadError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeOrderEpochError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeOrderEpochError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeOrderStatusError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeOrderStatusError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeSignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSignatureValidatorNotApprovedError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeSignatureValidatorNotApprovedError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSignatureWalletError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeSignatureWalletError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeStaticCallAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeStaticCallAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTransactionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeTransactionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTransactionExecutionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decodeTransactionExecutionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeERC1155AssetData(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeERC1155AssetData(address,uint256[],uint256[],bytes)"(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeERC20AssetData(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeERC20AssetData(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeERC721AssetData(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeERC721AssetData(address,uint256)"(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeMultiAssetData(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeMultiAssetData(uint256[],bytes[])"(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeStaticCallAssetData(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeStaticCallAssetData(address,bytes,bytes32)"(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBalance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBalance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBalanceAndAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBalanceAndAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBatchAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBatchAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBatchBalances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBatchBalances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBatchBalancesAndAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getBatchBalancesAndAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getEthBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderHash(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,address)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderRelevantState(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrderRelevantState((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOrderRelevantStates(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getOrderRelevantStates(tuple[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSimulatedOrderMakerTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getSimulatedOrderMakerTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSimulatedOrderTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getSimulatedOrderTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSimulatedOrdersTransferResults(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getSimulatedOrdersTransferResults(tuple[],address[],uint256[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTransactionHash(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransactionHash((uint256,uint256,uint256,address,bytes),uint256,address)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferableAssetAmount(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getTransferableAssetAmount(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revertIfInvalidAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "revertIfInvalidAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_EXCHANGE_DOMAIN_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EIP712_EXCHANGE_DOMAIN_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeAssetProxyDispatchError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeAssetProxyDispatchError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeAssetProxyExistsError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeAssetProxyExistsError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeAssetProxyId(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeAssetProxyId(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeAssetProxyTransferError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeAssetProxyTransferError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeEIP1271SignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeEIP1271SignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeERC1155AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeERC1155AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeERC20AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeERC20AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeERC20BridgeAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeERC20BridgeAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeERC721AssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeERC721AssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeExchangeInvalidContextError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeExchangeInvalidContextError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeIncompleteFillError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeIncompleteFillError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeMultiAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeMultiAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeNegativeSpreadError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeNegativeSpreadError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeOrderEpochError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeOrderEpochError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeOrderStatusError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeOrderStatusError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSignatureError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeSignatureError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSignatureValidatorNotApprovedError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeSignatureValidatorNotApprovedError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSignatureWalletError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeSignatureWalletError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeStaticCallAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeStaticCallAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTransactionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeTransactionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTransactionExecutionError(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decodeTransactionExecutionError(bytes)"(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeERC1155AssetData(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeERC1155AssetData(address,uint256[],uint256[],bytes)"(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeERC20AssetData(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeERC20AssetData(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeERC721AssetData(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeERC721AssetData(address,uint256)"(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeMultiAssetData(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeMultiAssetData(uint256[],bytes[])"(
      amounts: BigNumberish[],
      nestedAssetData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeStaticCallAssetData(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeStaticCallAssetData(address,bytes,bytes32)"(
      staticCallTargetAddress: string,
      staticCallData: BytesLike,
      expectedReturnDataHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBalanceAndAssetProxyAllowance(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBalanceAndAssetProxyAllowance(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBatchAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBatchAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBatchBalances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBatchBalances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBatchBalancesAndAssetProxyAllowances(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getBatchBalancesAndAssetProxyAllowances(address,bytes[])"(
      ownerAddress: string,
      assetData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getEthBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEthBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderHash(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderHash((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),uint256,address)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderRelevantState(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrderRelevantState((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOrderRelevantStates(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getOrderRelevantStates(tuple[],bytes[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSimulatedOrderMakerTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getSimulatedOrderMakerTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSimulatedOrderTransferResults(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getSimulatedOrderTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)"(
      order: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      },
      takerAddress: string,
      takerAssetFillAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSimulatedOrdersTransferResults(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getSimulatedOrdersTransferResults(tuple[],address[],uint256[])"(
      orders: {
        makerAddress: string;
        takerAddress: string;
        feeRecipientAddress: string;
        senderAddress: string;
        makerAssetAmount: BigNumberish;
        takerAssetAmount: BigNumberish;
        makerFee: BigNumberish;
        takerFee: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        salt: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        makerFeeAssetData: BytesLike;
        takerFeeAssetData: BytesLike;
      }[],
      takerAddresses: string[],
      takerAssetFillAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransactionHash((uint256,uint256,uint256,address,bytes),uint256,address)"(
      transaction: {
        salt: BigNumberish;
        expirationTimeSeconds: BigNumberish;
        gasPrice: BigNumberish;
        signerAddress: string;
        data: BytesLike;
      },
      chainId: BigNumberish,
      exchange: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferableAssetAmount(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getTransferableAssetAmount(address,bytes)"(
      ownerAddress: string,
      assetData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revertIfInvalidAssetData(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revertIfInvalidAssetData(bytes)"(
      assetData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
